!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	core/reflection.h	/^    float A, B;$/;"	m	class:OrenNayar
A	integrators/dipolesubsurface.cpp	/^    float A;$/;"	m	struct:DiffusionReflectance	file:
A1	3rdparty/tiff-3.9.4/tif_getimage.c	/^#define A1 /;"	d	file:
ACCELERATOR	core/pbrtparse.cpp	/^     ACCELERATOR = 263,$/;"	e	enum:yytokentype	file:
ACCELERATOR	core/pbrtparse.hh	/^     ACCELERATOR = 263,$/;"	e	enum:yytokentype
ACTIVETRANSFORM	core/pbrtparse.cpp	/^     ACTIVETRANSFORM = 264,$/;"	e	enum:yytokentype	file:
ACTIVETRANSFORM	core/pbrtparse.hh	/^     ACTIVETRANSFORM = 264,$/;"	e	enum:yytokentype
ADAPTIVE_COMPARE_SHAPE_ID	samplers/adaptive.h	/^    enum AdaptiveTest { ADAPTIVE_COMPARE_SHAPE_ID,$/;"	e	enum:AdaptiveSampler::AdaptiveTest
ADAPTIVE_CONTRAST_THRESHOLD	samplers/adaptive.h	/^                        ADAPTIVE_CONTRAST_THRESHOLD };$/;"	e	enum:AdaptiveSampler::AdaptiveTest
ADD_PARAM_TYPE	core/paramset.cpp	/^#define ADD_PARAM_TYPE(/;"	d	file:
AEFILNF	3rdparty/tiff-3.9.4/tif_atari.c	/^#define AEFILNF /;"	d	file:
ALL	core/pbrtparse.cpp	/^     ALL = 265,$/;"	e	enum:yytokentype	file:
ALL	core/pbrtparse.hh	/^     ALL = 265,$/;"	e	enum:yytokentype
ALLOCA	core/pbrt.h	/^#define ALLOCA(/;"	d
ALL_FLAGS	3rdparty/openexr-1.7.0/ImfVersion.h	/^const int ALL_FLAGS		= TILED_FLAG | LONG_NAMES_FLAG;$/;"	m	namespace:Imf
ALL_TRANSFORMS_BITS	core/api.cpp	/^#define ALL_TRANSFORMS_BITS /;"	d	file:
APPEND_EXC	3rdparty/ilmbase-1.0.2/IexMacros.h	/^#define APPEND_EXC(/;"	d
ARCH	Makefile	/^ARCH = $(shell uname)$/;"	m
AREALIGHTSOURCE	core/pbrtparse.cpp	/^     AREALIGHTSOURCE = 266,$/;"	e	enum:yytokentype	file:
AREALIGHTSOURCE	core/pbrtparse.hh	/^     AREALIGHTSOURCE = 266,$/;"	e	enum:yytokentype
ARG	tools/exrtotiff.cpp	/^#define ARG(/;"	d	file:
ASSERT	3rdparty/ilmbase-1.0.2/IexMacros.h	/^#define ASSERT(/;"	d
ATTRIBUTEBEGIN	core/pbrtparse.cpp	/^     ATTRIBUTEBEGIN = 267,$/;"	e	enum:yytokentype	file:
ATTRIBUTEBEGIN	core/pbrtparse.hh	/^     ATTRIBUTEBEGIN = 267,$/;"	e	enum:yytokentype
ATTRIBUTEEND	core/pbrtparse.cpp	/^     ATTRIBUTEEND = 268,$/;"	e	enum:yytokentype	file:
ATTRIBUTEEND	core/pbrtparse.hh	/^     ATTRIBUTEEND = 268,$/;"	e	enum:yytokentype
AVERAGE_RULE	tools/ply.h	/^#define AVERAGE_RULE /;"	d
AVOID_WIN32_FILEIO	3rdparty/tiff-3.9.4/tiffio.h	/^#    define AVOID_WIN32_FILEIO$/;"	d
A_OFFSET	3rdparty/openexr-1.7.0/ImfWav.cpp	/^const int A_OFFSET =  1 << (NBITS  - 1);$/;"	m	namespace:Imf::__anon41	file:
AboveChild	accelerators/kdtreeaccel.cpp	/^    uint32_t AboveChild() const { return aboveChild >> 2; }$/;"	f	struct:KdAccelNode
AbsCosTheta	core/reflection.h	/^inline float AbsCosTheta(const Vector &w) { return fabsf(w.z); }$/;"	f
AbsDot	core/geometry.h	/^inline float AbsDot(const Normal &n1, const Normal &n2) {$/;"	f
AbsDot	core/geometry.h	/^inline float AbsDot(const Normal &n1, const Vector &v2) {$/;"	f
AbsDot	core/geometry.h	/^inline float AbsDot(const Vector &v1, const Normal &n2) {$/;"	f
AbsDot	core/geometry.h	/^inline float AbsDot(const Vector &v1, const Vector &v2) {$/;"	f
AbsolutePath	core/fileutil.cpp	/^string AbsolutePath(const string &filename)$/;"	f
AcceleratorName	core/api.cpp	/^    string AcceleratorName;$/;"	m	struct:RenderOptions	file:
AcceleratorParams	core/api.cpp	/^    ParamSet AcceleratorParams;$/;"	m	struct:RenderOptions	file:
AcesInputFile	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesInputFile::AcesInputFile (IStream &is, int numThreads):$/;"	f	class:Imf::AcesInputFile
AcesInputFile	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesInputFile::AcesInputFile (const std::string &name, int numThreads):$/;"	f	class:Imf::AcesInputFile
AcesInputFile	3rdparty/openexr-1.7.0/ImfAcesFile.h	/^class AcesInputFile$/;"	c	namespace:Imf
AcesOutputFile	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesOutputFile::AcesOutputFile$/;"	f	class:Imf::AcesOutputFile
AcesOutputFile	3rdparty/openexr-1.7.0/ImfAcesFile.h	/^class AcesOutputFile$/;"	c	namespace:Imf
AcquireRead	core/parallel.cpp	/^RWMutex::AcquireRead() {$/;"	f	class:RWMutex
AcquireWrite	core/parallel.cpp	/^RWMutex::AcquireWrite() {$/;"	f	class:RWMutex
AdaptiveSampler	samplers/adaptive.cpp	/^AdaptiveSampler::AdaptiveSampler(int xstart, int xend,$/;"	f	class:AdaptiveSampler
AdaptiveSampler	samplers/adaptive.h	/^class AdaptiveSampler : public Sampler {$/;"	c
AdaptiveTest	samplers/adaptive.h	/^    enum AdaptiveTest { ADAPTIVE_COMPARE_SHAPE_ID,$/;"	g	class:AdaptiveSampler
Add	core/octree.h	/^    void Add(const NodeData &dataItem, const BBox &dataBound) {$/;"	f	class:Octree
Add	core/probes.cpp	/^    void Add(int a, int b) {$/;"	f	class:StatsPercentage
Add	core/probes.cpp	/^    void Add(int a, int b) {$/;"	f	class:StatsRatio
Add	core/reflection.h	/^inline void BSDF::Add(BxDF *b) {$/;"	f	class:BSDF
Add1D	core/sampler.h	/^    uint32_t Add1D(uint32_t num) {$/;"	f	struct:Sample
Add2D	core/sampler.h	/^    uint32_t Add2D(uint32_t num) {$/;"	f	struct:Sample
AddArrayElement	core/pbrtparse.cpp	/^static void AddArrayElement(void *elem) {$/;"	f	file:
AddBlackbodySpectrum	core/paramset.cpp	/^void ParamSet::AddBlackbodySpectrum(const string &name, const float *data,$/;"	f	class:ParamSet
AddBool	core/paramset.cpp	/^void ParamSet::AddBool(const string &name, const bool *data, int nItems) {$/;"	f	class:ParamSet
AddFloat	core/paramset.cpp	/^void ParamSet::AddFloat(const string &name, const float *data,$/;"	f	class:ParamSet
AddInt	core/paramset.cpp	/^void ParamSet::AddInt(const string &name, const int *data, int nItems) {$/;"	f	class:ParamSet
AddNormal	core/paramset.cpp	/^void ParamSet::AddNormal(const string &name, const Normal *data, int nItems) {$/;"	f	class:ParamSet
AddPoint	core/paramset.cpp	/^void ParamSet::AddPoint(const string &name, const Point *data, int nItems) {$/;"	f	class:ParamSet
AddPrimitive	accelerators/grid.h	/^    void AddPrimitive(Reference<Primitive> prim) {$/;"	f	struct:Voxel
AddRGBSpectrum	core/paramset.cpp	/^void ParamSet::AddRGBSpectrum(const string &name, const float *data, int nItems) {$/;"	f	class:ParamSet
AddSample	film/image.cpp	/^void ImageFilm::AddSample(const CameraSample &sample,$/;"	f	class:ImageFilm
AddSampledSpectrum	core/paramset.cpp	/^void ParamSet::AddSampledSpectrum(const string &name, const float *data,$/;"	f	class:ParamSet
AddSampledSpectrumFiles	core/paramset.cpp	/^void ParamSet::AddSampledSpectrumFiles(const string &name, const char **names,$/;"	f	class:ParamSet
AddString	core/paramset.cpp	/^void ParamSet::AddString(const string &name, const string *data, int nItems) {$/;"	f	class:ParamSet
AddTexture	core/paramset.cpp	/^void ParamSet::AddTexture(const string &name, const string &value) {$/;"	f	class:ParamSet
AddVector	core/paramset.cpp	/^void ParamSet::AddVector(const string &name, const Vector *data, int nItems) {$/;"	f	class:ParamSet
AddXYZSpectrum	core/paramset.cpp	/^void ParamSet::AddXYZSpectrum(const string &name, const float *data, int nItems) {$/;"	f	class:ParamSet
Aggregate	core/primitive.h	/^class Aggregate : public Primitive {$/;"	c
AggregateTest	renderers/aggregatetest.cpp	/^AggregateTest::AggregateTest(int niters,$/;"	f	class:AggregateTest
AggregateTest	renderers/aggregatetest.h	/^class AggregateTest : public Renderer {$/;"	c
AggregateVolume	core/volume.cpp	/^AggregateVolume::AggregateVolume(const vector<VolumeRegion *> &r) {$/;"	f	class:AggregateVolume
AggregateVolume	core/volume.h	/^class AggregateVolume : public VolumeRegion {$/;"	c
Alloc	core/memory.h	/^    template<typename T> T *Alloc(uint32_t count = 1) {$/;"	f	class:MemoryArena
Alloc	core/memory.h	/^    void *Alloc(uint32_t sz) {$/;"	f	class:MemoryArena
AllocAligned	core/memory.cpp	/^void *AllocAligned(size_t size) {$/;"	f
AllocAligned	core/memory.h	/^template <typename T> T *AllocAligned(uint32_t count) {$/;"	f
AllocateSampleMemory	core/sampler.cpp	/^void Sample::AllocateSampleMemory() {$/;"	f	class:Sample
AmbientOcclusionIntegrator	integrators/ambientocclusion.h	/^    AmbientOcclusionIntegrator(int ns, float md) { nSamples = RoundUpPow2(ns); maxDist = md; }$/;"	f	class:AmbientOcclusionIntegrator
AmbientOcclusionIntegrator	integrators/ambientocclusion.h	/^class AmbientOcclusionIntegrator : public SurfaceIntegrator {$/;"	c
AnimatedTransform	core/transform.h	/^    AnimatedTransform(const Transform *transform1, float time1,$/;"	f	class:AnimatedTransform
AnimatedTransform	core/transform.h	/^class AnimatedTransform {$/;"	c
Anisotropic	core/reflection.h	/^    Anisotropic(float x, float y) {$/;"	f	class:Anisotropic
Anisotropic	core/reflection.h	/^class Anisotropic : public MicrofacetDistribution {$/;"	c
Area	core/light.h	/^    float Area() const { return sumArea; }$/;"	f	class:ShapeSet
Area	core/shape.cpp	/^float Shape::Area() const {$/;"	f	class:Shape
Area	shapes/cone.cpp	/^float Cone::Area() const {$/;"	f	class:Cone
Area	shapes/cylinder.cpp	/^float Cylinder::Area() const {$/;"	f	class:Cylinder
Area	shapes/disk.cpp	/^float Disk::Area() const {$/;"	f	class:Disk
Area	shapes/hyperboloid.cpp	/^float Hyperboloid::Area() const {$/;"	f	class:Hyperboloid
Area	shapes/paraboloid.cpp	/^float Paraboloid::Area() const {$/;"	f	class:Paraboloid
Area	shapes/sphere.cpp	/^float Sphere::Area() const {$/;"	f	class:Sphere
Area	shapes/trianglemesh.cpp	/^float Triangle::Area() const {$/;"	f	class:Triangle
AreaLight	core/light.h	/^    AreaLight(const Transform &l2w, int ns) : Light(l2w, ns) { }$/;"	f	class:AreaLight
AreaLight	core/light.h	/^class AreaLight : public Light {$/;"	c
Array	3rdparty/openexr-1.7.0/ImfArray.h	/^     Array ()				{_data = 0;}$/;"	f	class:Imf::Array
Array	3rdparty/openexr-1.7.0/ImfArray.h	/^     Array (long size)			{_data = new T[size];}$/;"	f	class:Imf::Array
Array	3rdparty/openexr-1.7.0/ImfArray.h	/^class Array$/;"	c	namespace:Imf
Array2D	3rdparty/openexr-1.7.0/ImfArray.h	/^Array2D<T>::Array2D ():$/;"	f	class:Imf::Array2D
Array2D	3rdparty/openexr-1.7.0/ImfArray.h	/^Array2D<T>::Array2D (long sizeX, long sizeY):$/;"	f	class:Imf::Array2D
Array2D	3rdparty/openexr-1.7.0/ImfArray.h	/^class Array2D$/;"	c	namespace:Imf
ArrayFree	core/pbrtparse.cpp	/^static void ArrayFree(ParamArray *ra) {$/;"	f	file:
Assert	3rdparty/zlib-1.2.5/zutil.h	/^#  define Assert(/;"	d
Assert	core/pbrt.h	/^#define Assert(/;"	d
AtomicAdd	core/parallel.h	/^inline float AtomicAdd(volatile float *val, float delta) {$/;"	f
AtomicAdd	core/parallel.h	/^inline int32_t AtomicAdd(AtomicInt32 *v, int32_t delta) {$/;"	f
AtomicAdd	core/parallel.h	/^inline int64_t AtomicAdd(AtomicInt64 *v, int64_t delta) {$/;"	f
AtomicCompareAndSwap	core/parallel.h	/^inline int32_t AtomicCompareAndSwap(AtomicInt32 *v, int32_t newValue, int32_t oldValue) {$/;"	f
AtomicCompareAndSwap	core/parallel.h	/^inline int64_t AtomicCompareAndSwap(AtomicInt64 *v, int64_t newValue, int64_t oldValue) {$/;"	f
AtomicCompareAndSwapPointer	core/parallel.h	/^inline T *AtomicCompareAndSwapPointer(T **v, T *newValue, T *oldValue) {$/;"	f
AtomicInt32	core/parallel.h	/^	typedef volatile LONG AtomicInt32;$/;"	t
AtomicInt32	core/parallel.h	/^	typedef volatile int32_t AtomicInt32;$/;"	t
AtomicInt64	core/parallel.h	/^		typedef volatile LONGLONG AtomicInt64;$/;"	t
AtomicInt64	core/parallel.h	/^		typedef volatile int64_t AtomicInt64;$/;"	t
Attribute	3rdparty/openexr-1.7.0/ImfAttribute.cpp	/^Attribute::Attribute () {}$/;"	f	class:Imf::Attribute
Attribute	3rdparty/openexr-1.7.0/ImfAttribute.h	/^class Attribute$/;"	c	namespace:Imf
AttributeMap	3rdparty/openexr-1.7.0/ImfHeader.h	/^    typedef std::map <Name, Attribute *> AttributeMap;$/;"	t	class:Imf::Header
AutoArray	3rdparty/openexr-1.7.0/ImfAutoArray.h	/^	 AutoArray (): _data (new T [size]) {}$/;"	f	class:Imf::AutoArray
AutoArray	3rdparty/openexr-1.7.0/ImfAutoArray.h	/^    class AutoArray$/;"	c	namespace:Imf
AverageSpectrumSamples	core/spectrum.cpp	/^float AverageSpectrumSamples(const float *lambda, const float *vals,$/;"	f
Axis	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^    enum Axis { X = 0, Y = 1, Z = 2 };$/;"	g	class:Imath::Euler
B	core/reflection.h	/^    float A, B;$/;"	m	class:OrenNayar
B	filters/mitchell.h	/^    const float B, C;$/;"	m	class:MitchellFilter
B	integrators/glossyprt.h	/^    Spectrum *B;$/;"	m	class:GlossyPRTIntegrator
B44A_COMPRESSION	3rdparty/openexr-1.7.0/ImfCompression.h	/^    B44A_COMPRESSION = 7,	\/\/ lossy 4-by-4 pixel block compression,$/;"	e	enum:Imf::Compression
B44Compressor	3rdparty/openexr-1.7.0/ImfB44Compressor.cpp	/^B44Compressor::B44Compressor$/;"	f	class:Imf::B44Compressor
B44Compressor	3rdparty/openexr-1.7.0/ImfB44Compressor.h	/^class B44Compressor: public Compressor$/;"	c	namespace:Imf
B44_COMPRESSION	3rdparty/openexr-1.7.0/ImfCompression.h	/^    B44_COMPRESSION = 6,	\/\/ lossy 4-by-4 pixel block compression,$/;"	e	enum:Imf::Compression
BAD	3rdparty/zlib-1.2.5/inflate.h	/^    BAD,        \/* got a data error -- remain here until reset *\/$/;"	e	enum:__anon75
BARF	core/targa.c	/^    #define BARF(/;"	d	file:
BARF	core/targa.c	/^    #undef BARF$/;"	d	file:
BASE	3rdparty/zlib-1.2.5/adler32.c	/^#define BASE /;"	d	file:
BBox	core/geometry.h	/^    BBox() {$/;"	f	class:BBox
BBox	core/geometry.h	/^    BBox(const Point &p) : pMin(p), pMax(p) { }$/;"	f	class:BBox
BBox	core/geometry.h	/^    BBox(const Point &p1, const Point &p2) {$/;"	f	class:BBox
BBox	core/geometry.h	/^class BBox {$/;"	c
BC_GRID_SIZE	tools/samplepat.cpp	/^#define BC_GRID_SIZE /;"	d	file:
BEGIN	core/pbrtlex.cpp	/^#define BEGIN /;"	d	file:
BIG_STRING	tools/ply.c	/^#define BIG_STRING /;"	d	file:
BIT	core/targa.h	/^#define BIT(/;"	d
BITFIELDn	3rdparty/tiff-3.9.4/tif_dir.h	/^#define BITFIELDn(/;"	d
BITMAP_SIZE	3rdparty/openexr-1.7.0/ImfPizCompressor.cpp	/^const int BITMAP_SIZE  = (USHORT_RANGE >> 3);$/;"	m	namespace:Imf::__anon25	file:
BITS	3rdparty/zlib-1.2.5/infback.c	/^#define BITS(/;"	d	file:
BITS	3rdparty/zlib-1.2.5/inflate.c	/^#define BITS(/;"	d	file:
BITS_MAX	3rdparty/tiff-3.9.4/tif_lzw.c	/^#define	BITS_MAX	/;"	d	file:
BITS_MIN	3rdparty/tiff-3.9.4/tif_lzw.c	/^#define	BITS_MIN	/;"	d	file:
BITn	3rdparty/tiff-3.9.4/tif_dir.h	/^#define BITn(/;"	d
BL_CODES	3rdparty/zlib-1.2.5/deflate.h	/^#define BL_CODES /;"	d
BRDFRemap	core/reflection.cpp	/^Point BRDFRemap(const Vector &wo, const Vector &wi) {$/;"	f
BRDFToBTDF	core/reflection.h	/^    BRDFToBTDF(BxDF *b)$/;"	f	class:BRDFToBTDF
BRDFToBTDF	core/reflection.h	/^class BRDFToBTDF : public BxDF {$/;"	c
BROADCAST	core/parallel.h	/^    enum { SIGNAL = 0, BROADCAST=1, NUM_EVENTS=2 };$/;"	e	enum:ConditionVariable::__anon83
BSDF	core/reflection.cpp	/^BSDF::BSDF(const DifferentialGeometry &dg, const Normal &ngeom,$/;"	f	class:BSDF
BSDF	core/reflection.h	/^class BSDF {$/;"	c
BSDFSample	core/reflection.cpp	/^BSDFSample::BSDFSample(const Sample *sample,$/;"	f	class:BSDFSample
BSDFSample	core/reflection.h	/^   BSDFSample() { }$/;"	f	struct:BSDFSample
BSDFSample	core/reflection.h	/^   BSDFSample(RNG &rng) {$/;"	f	struct:BSDFSample
BSDFSample	core/reflection.h	/^   BSDFSample(float up0, float up1, float ucomp) {$/;"	f	struct:BSDFSample
BSDFSample	core/reflection.h	/^struct BSDFSample {$/;"	s
BSDFSampleOffsets	core/reflection.cpp	/^BSDFSampleOffsets::BSDFSampleOffsets(int count, Sample *sample) {$/;"	f	class:BSDFSampleOffsets
BSDFSampleOffsets	core/reflection.h	/^    BSDFSampleOffsets() { }$/;"	f	struct:BSDFSampleOffsets
BSDFSampleOffsets	core/reflection.h	/^struct BSDFSampleOffsets {$/;"	s
BSDF_ALL	core/reflection.h	/^    BSDF_ALL              = BSDF_ALL_REFLECTION |$/;"	e	enum:BxDFType
BSDF_ALLOC	core/reflection.h	/^#define BSDF_ALLOC(/;"	d
BSDF_ALL_REFLECTION	core/reflection.h	/^    BSDF_ALL_REFLECTION   = BSDF_REFLECTION |$/;"	e	enum:BxDFType
BSDF_ALL_TRANSMISSION	core/reflection.h	/^    BSDF_ALL_TRANSMISSION = BSDF_TRANSMISSION |$/;"	e	enum:BxDFType
BSDF_ALL_TYPES	core/reflection.h	/^    BSDF_ALL_TYPES        = BSDF_DIFFUSE |$/;"	e	enum:BxDFType
BSDF_DIFFUSE	core/reflection.h	/^    BSDF_DIFFUSE      = 1<<2,$/;"	e	enum:BxDFType
BSDF_GLOSSY	core/reflection.h	/^    BSDF_GLOSSY       = 1<<3,$/;"	e	enum:BxDFType
BSDF_REFLECTION	core/reflection.h	/^    BSDF_REFLECTION   = 1<<0,$/;"	e	enum:BxDFType
BSDF_SPECULAR	core/reflection.h	/^    BSDF_SPECULAR     = 1<<4,$/;"	e	enum:BxDFType
BSDF_TRANSMISSION	core/reflection.h	/^    BSDF_TRANSMISSION = 1<<1,$/;"	e	enum:BxDFType
BSSRDF	core/reflection.h	/^    BSSRDF(const Spectrum &sa, const Spectrum &sps, float et)$/;"	f	class:BSSRDF
BSSRDF	core/reflection.h	/^class BSSRDF {$/;"	c
BUFFERCHECK	3rdparty/tiff-3.9.4/tif_write.c	/^#define	BUFFERCHECK(/;"	d	file:
BUFFER_SIZE	core/imageio.cpp	/^#define BUFFER_SIZE /;"	d	file:
BUFLEN	3rdparty/zlib-1.2.5/minigzip.c	/^#define BUFLEN /;"	d	file:
BUILDFIXED	3rdparty/zlib-1.2.5/inflate.c	/^#    define BUILDFIXED$/;"	d	file:
BUMPINT	textures/checkerboard.h	/^#define BUMPINT(/;"	d
BUSY_STATE	3rdparty/zlib-1.2.5/deflate.h	/^#define BUSY_STATE /;"	d
BVHAccel	accelerators/bvh.cpp	/^BVHAccel::BVHAccel(const vector<Reference<Primitive> > &p,$/;"	f	class:BVHAccel
BVHAccel	accelerators/bvh.h	/^class BVHAccel : public Aggregate {$/;"	c
BVHBuildNode	accelerators/bvh.cpp	/^    BVHBuildNode() { children[0] = children[1] = NULL; }$/;"	f	struct:BVHBuildNode
BVHBuildNode	accelerators/bvh.cpp	/^struct BVHBuildNode {$/;"	s	file:
BVHPrimitiveInfo	accelerators/bvh.cpp	/^    BVHPrimitiveInfo() { }$/;"	f	struct:BVHPrimitiveInfo
BVHPrimitiveInfo	accelerators/bvh.cpp	/^    BVHPrimitiveInfo(int pn, const BBox &b)$/;"	f	struct:BVHPrimitiveInfo
BVHPrimitiveInfo	accelerators/bvh.cpp	/^struct BVHPrimitiveInfo {$/;"	s	file:
BWmap	3rdparty/tiff-3.9.4/tiffio.h	/^	uint32** BWmap;                         \/* black&white map *\/$/;"	m	struct:_TIFFRGBAImage
BYFOUR	3rdparty/zlib-1.2.5/crc32.c	/^#          undef BYFOUR /;"	d	file:
BYFOUR	3rdparty/zlib-1.2.5/crc32.c	/^#    define BYFOUR$/;"	d	file:
BYTEBITS	3rdparty/zlib-1.2.5/infback.c	/^#define BYTEBITS(/;"	d	file:
BYTEBITS	3rdparty/zlib-1.2.5/inflate.c	/^#define BYTEBITS(/;"	d	file:
BYTECOUNTLOOKSBAD	3rdparty/tiff-3.9.4/tif_dirread.c	/^		#define	BYTECOUNTLOOKSBAD /;"	d	file:
BalanceHeuristic	core/montecarlo.h	/^inline float BalanceHeuristic(int nf, float fPdf, int ng, float gPdf) {$/;"	f
BaseExc	3rdparty/ilmbase-1.0.2/IexBaseExc.cpp	/^BaseExc::BaseExc (const BaseExc &be) throw () :$/;"	f	class:Iex::BaseExc
BaseExc	3rdparty/ilmbase-1.0.2/IexBaseExc.cpp	/^BaseExc::BaseExc (const char* s) throw () :$/;"	f	class:Iex::BaseExc
BaseExc	3rdparty/ilmbase-1.0.2/IexBaseExc.cpp	/^BaseExc::BaseExc (const std::string &s) throw () :$/;"	f	class:Iex::BaseExc
BaseExc	3rdparty/ilmbase-1.0.2/IexBaseExc.cpp	/^BaseExc::BaseExc (std::stringstream &s) throw () :$/;"	f	class:Iex::BaseExc
BaseExc	3rdparty/ilmbase-1.0.2/IexBaseExc.h	/^class BaseExc: public std::string, public std::exception$/;"	c	namespace:Iex
BaseType	3rdparty/ilmbase-1.0.2/ImathColor.h	/^    typedef T		BaseType;$/;"	t	class:Imath::Color4
BaseType	3rdparty/ilmbase-1.0.2/ImathShear.h	/^    typedef T		BaseType;$/;"	t	class:Imath::Shear6
BaseType	3rdparty/ilmbase-1.0.2/ImathVec.h	/^    typedef T		BaseType;$/;"	t	class:Imath::Vec2
BaseType	3rdparty/ilmbase-1.0.2/ImathVec.h	/^    typedef T		BaseType;$/;"	t	class:Imath::Vec3
BaseType	3rdparty/ilmbase-1.0.2/ImathVec.h	/^    typedef T		BaseType;$/;"	t	class:Imath::Vec4
BestCandidate2D	tools/samplepat.cpp	/^void BestCandidate2D(float table[][2], int totalSamples,$/;"	f
BestCandidateSampler	samplers/bestcandidate.h	/^    BestCandidateSampler(int xstart, int xend, int ystart, int yend,$/;"	f	class:BestCandidateSampler
BestCandidateSampler	samplers/bestcandidate.h	/^class BestCandidateSampler : public Sampler {$/;"	c
BilerpTexture	textures/bilerp.h	/^    BilerpTexture(TextureMapping2D *m, const T &t00, const T &t01,$/;"	f	class:BilerpTexture
BilerpTexture	textures/bilerp.h	/^template <typename T> class BilerpTexture : public Texture<T> {$/;"	c
BlackTable	3rdparty/tiff-3.9.4/mkg3states.c	/^TIFFFaxTabEnt BlackTable[8192];$/;"	v
Blackbody	core/spectrum.cpp	/^void Blackbody(const float *wl, int n, float temp, float *vals) {$/;"	f
Blinn	core/reflection.h	/^    Blinn(float e) { if (e > 10000.f || isnan(e)) e = 10000.f;$/;"	f	class:Blinn
Blinn	core/reflection.h	/^class Blinn : public MicrofacetDistribution {$/;"	c
Block	core/memory.h	/^    uint32_t Block(uint32_t a) const { return a >> logBlockSize; }$/;"	f	class:BlockedArray
BlockSize	core/memory.h	/^    uint32_t BlockSize() const { return 1 << logBlockSize; }$/;"	f	class:BlockedArray
BlockedArray	core/memory.h	/^    BlockedArray(uint32_t nu, uint32_t nv, const T *d = NULL) {$/;"	f	class:BlockedArray
BlockedArray	core/memory.h	/^template <typename T, int logBlockSize> class BlockedArray {$/;"	c
BoundEdge	accelerators/kdtreeaccel.cpp	/^    BoundEdge() { }$/;"	f	struct:BoundEdge
BoundEdge	accelerators/kdtreeaccel.cpp	/^    BoundEdge(float tt, int pn, bool starting) {$/;"	f	struct:BoundEdge
BoundEdge	accelerators/kdtreeaccel.cpp	/^struct BoundEdge {$/;"	s	file:
BoundingSphere	core/geometry.cpp	/^void BBox::BoundingSphere(Point *c, float *rad) const {$/;"	f	class:BBox
Box	3rdparty/ilmbase-1.0.2/ImathBox.h	/^class Box$/;"	c	namespace:Imath
Box	3rdparty/ilmbase-1.0.2/ImathBox.h	/^class Box<Vec2<T> >$/;"	c	namespace:Imath
Box	3rdparty/ilmbase-1.0.2/ImathBox.h	/^class Box<Vec3<T> >$/;"	c	namespace:Imath
Box	3rdparty/ilmbase-1.0.2/ImathBox.h	/^inline Box<T>::Box (const T &minT, const T &maxT)$/;"	f	class:Imath::Box
Box	3rdparty/ilmbase-1.0.2/ImathBox.h	/^inline Box<T>::Box (const T &point)$/;"	f	class:Imath::Box
Box	3rdparty/ilmbase-1.0.2/ImathBox.h	/^inline Box<T>::Box()$/;"	f	class:Imath::Box
Box	3rdparty/ilmbase-1.0.2/ImathBox.h	/^inline Box<Vec2<T> >::Box (const Vec2<T> &minT, const Vec2<T> &maxT)$/;"	f	class:Imath::Box
Box	3rdparty/ilmbase-1.0.2/ImathBox.h	/^inline Box<Vec2<T> >::Box (const Vec2<T> &point)$/;"	f	class:Imath::Box
Box	3rdparty/ilmbase-1.0.2/ImathBox.h	/^inline Box<Vec2<T> >::Box()$/;"	f	class:Imath::Box
Box	3rdparty/ilmbase-1.0.2/ImathBox.h	/^inline Box<Vec3<T> >::Box (const Vec3<T> &minT, const Vec3<T> &maxT)$/;"	f	class:Imath::Box
Box	3rdparty/ilmbase-1.0.2/ImathBox.h	/^inline Box<Vec3<T> >::Box (const Vec3<T> &point)$/;"	f	class:Imath::Box
Box	3rdparty/ilmbase-1.0.2/ImathBox.h	/^inline Box<Vec3<T> >::Box()$/;"	f	class:Imath::Box
Box2d	3rdparty/ilmbase-1.0.2/ImathBox.h	/^typedef Box <V2d> Box2d;$/;"	t	namespace:Imath
Box2f	3rdparty/ilmbase-1.0.2/ImathBox.h	/^typedef Box <V2f> Box2f;$/;"	t	namespace:Imath
Box2fAttribute	3rdparty/openexr-1.7.0/ImfBoxAttribute.h	/^typedef TypedAttribute<Imath::Box2f> Box2fAttribute;$/;"	t	namespace:Imf
Box2i	3rdparty/ilmbase-1.0.2/ImathBox.h	/^typedef Box <V2i> Box2i;$/;"	t	namespace:Imath
Box2iAttribute	3rdparty/openexr-1.7.0/ImfBoxAttribute.h	/^typedef TypedAttribute<Imath::Box2i> Box2iAttribute;$/;"	t	namespace:Imf
Box2s	3rdparty/ilmbase-1.0.2/ImathBox.h	/^typedef Box <V2s> Box2s;$/;"	t	namespace:Imath
Box3d	3rdparty/ilmbase-1.0.2/ImathBox.h	/^typedef Box <V3d> Box3d;$/;"	t	namespace:Imath
Box3f	3rdparty/ilmbase-1.0.2/ImathBox.h	/^typedef Box <V3f> Box3f;$/;"	t	namespace:Imath
Box3i	3rdparty/ilmbase-1.0.2/ImathBox.h	/^typedef Box <V3i> Box3i;$/;"	t	namespace:Imath
Box3s	3rdparty/ilmbase-1.0.2/ImathBox.h	/^typedef Box <V3s> Box3s;$/;"	t	namespace:Imath
BoxFilter	filters/box.h	/^    BoxFilter(float xw, float yw) : Filter(xw, yw) { }$/;"	f	class:BoxFilter
BoxFilter	filters/box.h	/^class BoxFilter : public Filter {$/;"	c
Buf_size	3rdparty/zlib-1.2.5/trees.c	/^#define Buf_size /;"	d	file:
BufferedTile	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    BufferedTile (const char *data, int size):$/;"	f	struct:Imf::__anon37::BufferedTile
BufferedTile	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^struct BufferedTile$/;"	s	namespace:Imf::__anon37	file:
Bump	core/material.cpp	/^void Material::Bump(const Reference<Texture<float> > &d,$/;"	f	class:Material
BxDF	core/reflection.h	/^    BxDF(BxDFType t) : type(t) { }$/;"	f	class:BxDF
BxDF	core/reflection.h	/^class BxDF {$/;"	c
BxDFType	core/reflection.h	/^enum BxDFType {$/;"	g
Byte	3rdparty/zlib-1.2.5/zconf.h	/^#  define Byte /;"	d
Byte	3rdparty/zlib-1.2.5/zconf.h	/^typedef unsigned char  Byte;  \/* 8 bits *\/$/;"	t
Bytef	3rdparty/zlib-1.2.5/zconf.h	/^   typedef Byte  FAR Bytef;$/;"	t
Bytef	3rdparty/zlib-1.2.5/zconf.h	/^#  define Bytef /;"	d
C	filters/mitchell.h	/^    const float B, C;$/;"	m	class:MitchellFilter
C3c	3rdparty/ilmbase-1.0.2/ImathColor.h	/^typedef Color3<unsigned char>	C3c;$/;"	t	namespace:Imath
C3f	3rdparty/ilmbase-1.0.2/ImathColor.h	/^typedef Color3<float>		C3f;$/;"	t	namespace:Imath
C3h	3rdparty/ilmbase-1.0.2/ImathColor.h	/^typedef Color3<half>		C3h;$/;"	t	namespace:Imath
C4c	3rdparty/ilmbase-1.0.2/ImathColor.h	/^typedef Color4<unsigned char>	C4c;$/;"	t	namespace:Imath
C4f	3rdparty/ilmbase-1.0.2/ImathColor.h	/^typedef Color4<float>		C4f;$/;"	t	namespace:Imath
C4h	3rdparty/ilmbase-1.0.2/ImathColor.h	/^typedef Color4<half>		C4h;$/;"	t	namespace:Imath
CACHE_STATE	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	CACHE_STATE(/;"	d	file:
CALCRATIO	3rdparty/tiff-3.9.4/tif_lzw.c	/^#define	CALCRATIO(/;"	d	file:
CALLJPEG	3rdparty/tiff-3.9.4/tif_jpeg.c	/^#define	CALLJPEG(/;"	d	file:
CALLVJPEG	3rdparty/tiff-3.9.4/tif_jpeg.c	/^#define	CALLVJPEG(/;"	d	file:
CAMERA	core/pbrtparse.cpp	/^     CAMERA = 269,$/;"	e	enum:yytokentype	file:
CAMERA	core/pbrtparse.hh	/^     CAMERA = 269,$/;"	e	enum:yytokentype
CASE4	3rdparty/tiff-3.9.4/tif_getimage.c	/^#define	CASE4(/;"	d	file:
CASE8	3rdparty/tiff-3.9.4/tif_getimage.c	/^#define	CASE8(/;"	d	file:
CC	Makefile	/^CC=gcc$/;"	m
CCFLAGS	Makefile	/^CCFLAGS=$(CXXFLAGS)$/;"	m
CCITT_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.h	/^#define CCITT_SUPPORT /;"	d
CCITT_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.vc.h	/^#define CCITT_SUPPORT /;"	d
CCITT_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.wince.h	/^#define CCITT_SUPPORT /;"	d
CHECK	3rdparty/zlib-1.2.5/inflate.h	/^    CHECK,      \/* i: waiting for 32-bit check value *\/$/;"	e	enum:__anon75
CHECK_ERR	3rdparty/zlib-1.2.5/example.c	/^#define CHECK_ERR(/;"	d	file:
CHECK_GAP	3rdparty/tiff-3.9.4/tif_lzw.c	/^#define CHECK_GAP	/;"	d	file:
CHECK_JPEG_YCBCR_SUBSAMPLING	3rdparty/tiff-3.9.4/tiffconf.h	/^#define CHECK_JPEG_YCBCR_SUBSAMPLING /;"	d
CHECK_JPEG_YCBCR_SUBSAMPLING	3rdparty/tiff-3.9.4/tiffconf.vc.h	/^#define CHECK_JPEG_YCBCR_SUBSAMPLING /;"	d
CHECK_JPEG_YCBCR_SUBSAMPLING	3rdparty/tiff-3.9.4/tiffconf.wince.h	/^#define CHECK_JPEG_YCBCR_SUBSAMPLING /;"	d
CHECK_UNUSED	core/paramset.cpp	/^#define CHECK_UNUSED(/;"	d	file:
CHECK_b1	3rdparty/tiff-3.9.4/tif_fax3.h	/^#define CHECK_b1 /;"	d
CIELABTORGB_TABLE_RANGE	3rdparty/tiff-3.9.4/tiffio.h	/^#define CIELABTORGB_TABLE_RANGE /;"	d
CIE_X	core/spectrum.cpp	/^const float CIE_X[nCIESamples] = {$/;"	v
CIE_Y	core/spectrum.cpp	/^const float CIE_Y[nCIESamples] = {$/;"	v
CIE_Y_integral	core/spectrum.h	/^static const float CIE_Y_integral = 106.856895;$/;"	v
CIE_Z	core/spectrum.cpp	/^const float CIE_Z[nCIESamples] = {$/;"	v
CIE_lambda	core/spectrum.cpp	/^const float CIE_lambda[nCIESamples] = {$/;"	v
CLAMP	3rdparty/tiff-3.9.4/tif_color.c	/^#define	CLAMP(/;"	d	file:
CLAMP	3rdparty/tiff-3.9.4/tif_color.c	/^#undef	CLAMP$/;"	d	file:
CLAMP	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^#define  CLAMP(/;"	d	file:
CLAMP	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^#undef	 CLAMP$/;"	d	file:
CLAMP	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^#undef   CLAMP$/;"	d	file:
CLAMP12	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^#define CLAMP12(/;"	d	file:
CLEANFAXDATA_CLEAN	3rdparty/tiff-3.9.4/tiff.h	/^#define	    CLEANFAXDATA_CLEAN	/;"	d
CLEANFAXDATA_REGENERATED	3rdparty/tiff-3.9.4/tiff.h	/^#define	    CLEANFAXDATA_REGENERATED	/;"	d
CLEANFAXDATA_UNCLEAN	3rdparty/tiff-3.9.4/tiff.h	/^#define	    CLEANFAXDATA_UNCLEAN	/;"	d
CLEANUP_RUNS	3rdparty/tiff-3.9.4/tif_fax3.h	/^#define	CLEANUP_RUNS(/;"	d
CLEAR_HASH	3rdparty/zlib-1.2.5/deflate.c	/^#define CLEAR_HASH(/;"	d	file:
CLOSEDFORM	textures/checkerboard.h	/^    enum { NONE, CLOSEDFORM } aaMethod;$/;"	e	enum:Checkerboard2DTexture::__anon89
CMAP	3rdparty/tiff-3.9.4/tif_getimage.c	/^#define	CMAP(/;"	d	file:
CMAP	3rdparty/tiff-3.9.4/tif_getimage.c	/^#undef CMAP$/;"	d	file:
CMYK_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.h	/^#define CMYK_SUPPORT$/;"	d
CMYK_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.vc.h	/^#define CMYK_SUPPORT$/;"	d
CMYK_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.wince.h	/^#define CMYK_SUPPORT$/;"	d
CODELENS	3rdparty/zlib-1.2.5/inflate.h	/^        CODELENS,   \/* i: waiting for length\/lit and distance code lengths *\/$/;"	e	enum:__anon75
CODES	3rdparty/zlib-1.2.5/inftrees.h	/^    CODES,$/;"	e	enum:__anon77
CODE_CLEAR	3rdparty/tiff-3.9.4/tif_lzw.c	/^#define	CODE_CLEAR	/;"	d	file:
CODE_EOI	3rdparty/tiff-3.9.4/tif_lzw.c	/^#define	CODE_EOI	/;"	d	file:
CODE_FIRST	3rdparty/tiff-3.9.4/tif_lzw.c	/^#define CODE_FIRST	/;"	d	file:
CODE_MASK	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^#define CODE_MASK /;"	d	file:
CODE_MAX	3rdparty/tiff-3.9.4/tif_lzw.c	/^#define	CODE_MAX	/;"	d	file:
COLORIMETRY_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.h	/^#define COLORIMETRY_SUPPORT$/;"	d
COLORIMETRY_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.vc.h	/^#define COLORIMETRY_SUPPORT$/;"	d
COLORIMETRY_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.wince.h	/^#define COLORIMETRY_SUPPORT$/;"	d
COLORRESPONSEUNIT_100000S	3rdparty/tiff-3.9.4/tiff.h	/^#define	    COLORRESPONSEUNIT_100000S	/;"	d
COLORRESPONSEUNIT_10000S	3rdparty/tiff-3.9.4/tiff.h	/^#define	    COLORRESPONSEUNIT_10000S	/;"	d
COLORRESPONSEUNIT_1000S	3rdparty/tiff-3.9.4/tiff.h	/^#define	    COLORRESPONSEUNIT_1000S	/;"	d
COLORRESPONSEUNIT_100S	3rdparty/tiff-3.9.4/tiff.h	/^#define	    COLORRESPONSEUNIT_100S	/;"	d
COLORRESPONSEUNIT_10S	3rdparty/tiff-3.9.4/tiff.h	/^#define	    COLORRESPONSEUNIT_10S	/;"	d
COMMENT	3rdparty/zlib-1.2.5/inflate.h	/^    COMMENT,    \/* i: waiting for end of comment (gzip) *\/$/;"	e	enum:__anon75
COMMENT	core/pbrtlex.cpp	/^#define COMMENT /;"	d	file:
COMMENT_STATE	3rdparty/zlib-1.2.5/deflate.h	/^#define COMMENT_STATE /;"	d
COMPRESSION_ADOBE_DEFLATE	3rdparty/tiff-3.9.4/tiff.h	/^#define     COMPRESSION_ADOBE_DEFLATE /;"	d
COMPRESSION_CCITTFAX3	3rdparty/tiff-3.9.4/tiff.h	/^#define	    COMPRESSION_CCITTFAX3	/;"	d
COMPRESSION_CCITTFAX4	3rdparty/tiff-3.9.4/tiff.h	/^#define	    COMPRESSION_CCITTFAX4	/;"	d
COMPRESSION_CCITTRLE	3rdparty/tiff-3.9.4/tiff.h	/^#define	    COMPRESSION_CCITTRLE	/;"	d
COMPRESSION_CCITTRLEW	3rdparty/tiff-3.9.4/tiff.h	/^#define	    COMPRESSION_CCITTRLEW	/;"	d
COMPRESSION_CCITT_T4	3rdparty/tiff-3.9.4/tiff.h	/^#define     COMPRESSION_CCITT_T4 /;"	d
COMPRESSION_CCITT_T6	3rdparty/tiff-3.9.4/tiff.h	/^#define     COMPRESSION_CCITT_T6 /;"	d
COMPRESSION_DCS	3rdparty/tiff-3.9.4/tiff.h	/^#define     COMPRESSION_DCS /;"	d
COMPRESSION_DEFLATE	3rdparty/tiff-3.9.4/tiff.h	/^#define	    COMPRESSION_DEFLATE	/;"	d
COMPRESSION_IT8BL	3rdparty/tiff-3.9.4/tiff.h	/^#define	    COMPRESSION_IT8BL	/;"	d
COMPRESSION_IT8CTPAD	3rdparty/tiff-3.9.4/tiff.h	/^#define	    COMPRESSION_IT8CTPAD	/;"	d
COMPRESSION_IT8LW	3rdparty/tiff-3.9.4/tiff.h	/^#define	    COMPRESSION_IT8LW	/;"	d
COMPRESSION_IT8MP	3rdparty/tiff-3.9.4/tiff.h	/^#define	    COMPRESSION_IT8MP	/;"	d
COMPRESSION_JBIG	3rdparty/tiff-3.9.4/tiff.h	/^#define	    COMPRESSION_JBIG	/;"	d
COMPRESSION_JP2000	3rdparty/tiff-3.9.4/tiff.h	/^#define     COMPRESSION_JP2000 /;"	d
COMPRESSION_JPEG	3rdparty/tiff-3.9.4/tiff.h	/^#define	    COMPRESSION_JPEG	/;"	d
COMPRESSION_LZW	3rdparty/tiff-3.9.4/tiff.h	/^#define	    COMPRESSION_LZW	/;"	d
COMPRESSION_NEXT	3rdparty/tiff-3.9.4/tiff.h	/^#define	    COMPRESSION_NEXT	/;"	d
COMPRESSION_NONE	3rdparty/tiff-3.9.4/tiff.h	/^#define	    COMPRESSION_NONE	/;"	d
COMPRESSION_OJPEG	3rdparty/tiff-3.9.4/tiff.h	/^#define	    COMPRESSION_OJPEG	/;"	d
COMPRESSION_PACKBITS	3rdparty/tiff-3.9.4/tiff.h	/^#define	    COMPRESSION_PACKBITS	/;"	d
COMPRESSION_PIXARFILM	3rdparty/tiff-3.9.4/tiff.h	/^#define     COMPRESSION_PIXARFILM	/;"	d
COMPRESSION_PIXARLOG	3rdparty/tiff-3.9.4/tiff.h	/^#define	    COMPRESSION_PIXARLOG	/;"	d
COMPRESSION_SGILOG	3rdparty/tiff-3.9.4/tiff.h	/^#define     COMPRESSION_SGILOG	/;"	d
COMPRESSION_SGILOG24	3rdparty/tiff-3.9.4/tiff.h	/^#define     COMPRESSION_SGILOG24	/;"	d
COMPRESSION_THUNDERSCAN	3rdparty/tiff-3.9.4/tiff.h	/^#define	    COMPRESSION_THUNDERSCAN	/;"	d
CONCATTRANSFORM	core/pbrtparse.cpp	/^     CONCATTRANSFORM = 270,$/;"	e	enum:yytokentype	file:
CONCATTRANSFORM	core/pbrtparse.hh	/^     CONCATTRANSFORM = 270,$/;"	e	enum:yytokentype
COORDINATESYSTEM	core/pbrtparse.cpp	/^     COORDINATESYSTEM = 271,$/;"	e	enum:yytokentype	file:
COORDINATESYSTEM	core/pbrtparse.hh	/^     COORDINATESYSTEM = 271,$/;"	e	enum:yytokentype
COORDSYSTRANSFORM	core/pbrtparse.cpp	/^     COORDSYSTRANSFORM = 272,$/;"	e	enum:yytokentype	file:
COORDSYSTRANSFORM	core/pbrtparse.hh	/^     COORDSYSTRANSFORM = 272,$/;"	e	enum:yytokentype
COPY	3rdparty/zlib-1.2.5/gzguts.h	/^#define COPY /;"	d
COPY	3rdparty/zlib-1.2.5/inflate.h	/^        COPY,       \/* i\/o: waiting for input or output to copy stored block *\/$/;"	e	enum:__anon75
COPY_	3rdparty/zlib-1.2.5/inflate.h	/^        COPY_,      \/* i\/o: same as COPY below, but only first time in *\/$/;"	e	enum:__anon75
CRC2	3rdparty/zlib-1.2.5/inflate.c	/^#  define CRC2(/;"	d	file:
CRC4	3rdparty/zlib-1.2.5/inflate.c	/^#  define CRC4(/;"	d	file:
CSIZE	3rdparty/tiff-3.9.4/tif_lzw.c	/^#define	CSIZE	/;"	d	file:
CUBEFACE_NEG_X	3rdparty/openexr-1.7.0/ImfEnvmap.h	/^    CUBEFACE_NEG_X,	\/\/ -X face$/;"	e	enum:Imf::CubeMapFace
CUBEFACE_NEG_Y	3rdparty/openexr-1.7.0/ImfEnvmap.h	/^    CUBEFACE_NEG_Y,	\/\/ -Y face$/;"	e	enum:Imf::CubeMapFace
CUBEFACE_NEG_Z	3rdparty/openexr-1.7.0/ImfEnvmap.h	/^    CUBEFACE_NEG_Z 	\/\/ -Z face$/;"	e	enum:Imf::CubeMapFace
CUBEFACE_POS_X	3rdparty/openexr-1.7.0/ImfEnvmap.h	/^    CUBEFACE_POS_X,	\/\/ +X face$/;"	e	enum:Imf::CubeMapFace
CUBEFACE_POS_Y	3rdparty/openexr-1.7.0/ImfEnvmap.h	/^    CUBEFACE_POS_Y,	\/\/ +Y face$/;"	e	enum:Imf::CubeMapFace
CUBEFACE_POS_Z	3rdparty/openexr-1.7.0/ImfEnvmap.h	/^    CUBEFACE_POS_Z,	\/\/ +Z face$/;"	e	enum:Imf::CubeMapFace
CVT	3rdparty/tiff-3.9.4/tif_getimage.c	/^#define	CVT(/;"	d	file:
CVT	3rdparty/tiff-3.9.4/tif_getimage.c	/^#undef	CVT$/;"	d	file:
CWD	Makefile	/^CWD=$(shell pwd)$/;"	m
CXX	Makefile	/^CXX=g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS=$(OPT) $(MARCH) $(INCLUDE) $(WARN) $(DEFS)$/;"	m
Camera	core/camera.cpp	/^Camera::Camera(const AnimatedTransform &cam2world,$/;"	f	class:Camera
Camera	core/camera.h	/^class Camera {$/;"	c
CameraName	core/api.cpp	/^    string CameraName;$/;"	m	struct:RenderOptions	file:
CameraParams	core/api.cpp	/^    ParamSet CameraParams;$/;"	m	struct:RenderOptions	file:
CameraSample	core/sampler.h	/^struct CameraSample {$/;"	s
CameraToScreen	core/camera.h	/^    Transform CameraToScreen, RasterToCamera;$/;"	m	class:ProjectiveCamera
CameraToWorld	core/api.cpp	/^    TransformSet CameraToWorld;$/;"	m	struct:RenderOptions	file:
CameraToWorld	core/camera.h	/^    AnimatedTransform CameraToWorld;$/;"	m	class:Camera
CanIntersect	accelerators/bvh.h	/^    bool CanIntersect() const { return true; }$/;"	f	class:BVHAccel
CanIntersect	accelerators/grid.h	/^    bool CanIntersect() const { return true; }$/;"	f	class:GridAccel
CanIntersect	accelerators/kdtreeaccel.h	/^    bool CanIntersect() const { return true; }$/;"	f	class:KdTreeAccel
CanIntersect	core/primitive.cpp	/^bool GeometricPrimitive::CanIntersect() const {$/;"	f	class:GeometricPrimitive
CanIntersect	core/primitive.cpp	/^bool Primitive::CanIntersect() const {$/;"	f	class:Primitive
CanIntersect	core/shape.cpp	/^bool Shape::CanIntersect() const {$/;"	f	class:Shape
CanIntersect	shapes/heightfield.cpp	/^bool Heightfield::CanIntersect() const {$/;"	f	class:Heightfield
CanIntersect	shapes/heightfield2.cpp	/^bool Heightfield2::CanIntersect() const {$/;"	f	class:Heightfield2
CanIntersect	shapes/loopsubdiv.cpp	/^bool LoopSubdiv::CanIntersect() const {$/;"	f	class:LoopSubdiv
CanIntersect	shapes/nurbs.h	/^    bool CanIntersect() const { return false; }$/;"	f	class:NURBS
CanIntersect	shapes/trianglemesh.h	/^    bool CanIntersect() const { return false; }$/;"	f	class:TriangleMesh
Cb_b_tab	3rdparty/tiff-3.9.4/tiffio.h	/^	int*	Cb_b_tab;$/;"	m	struct:__anon64
Cb_g_tab	3rdparty/tiff-3.9.4/tiffio.h	/^	int32*	Cb_g_tab;$/;"	m	struct:__anon64
Ceil2Int	core/pbrt.h	/^inline int Ceil2Int(float val) {$/;"	f
Channel	3rdparty/openexr-1.7.0/ImfChannelList.cpp	/^Channel::Channel (PixelType t, int xs, int ys, bool pl):$/;"	f	class:Imf::Channel
Channel	3rdparty/openexr-1.7.0/ImfChannelList.h	/^struct Channel$/;"	s	namespace:Imf
ChannelData	3rdparty/openexr-1.7.0/ImfB44Compressor.cpp	/^struct B44Compressor::ChannelData$/;"	s	class:Imf::B44Compressor	file:
ChannelData	3rdparty/openexr-1.7.0/ImfPizCompressor.cpp	/^struct PizCompressor::ChannelData$/;"	s	class:Imf::PizCompressor	file:
ChannelList	3rdparty/openexr-1.7.0/ImfChannelList.h	/^class ChannelList$/;"	c	namespace:Imf
ChannelListAttribute	3rdparty/openexr-1.7.0/ImfChannelListAttribute.h	/^typedef TypedAttribute<ChannelList> ChannelListAttribute;$/;"	t	namespace:Imf
ChannelMap	3rdparty/openexr-1.7.0/ImfChannelList.h	/^    typedef std::map <Name, Channel> ChannelMap;$/;"	t	class:Imf::ChannelList
CharPtrIO	3rdparty/openexr-1.7.0/ImfIO.h	/^struct CharPtrIO$/;"	s	namespace:Imf
CheckDirCount	3rdparty/tiff-3.9.4/tif_dirread.c	/^CheckDirCount(TIFF* tif, TIFFDirEntry* dir, uint32 count)$/;"	f	file:
Checkerboard2DTexture	textures/checkerboard.h	/^    Checkerboard2DTexture(TextureMapping2D *m, Reference<Texture<T> > c1,$/;"	f	class:Checkerboard2DTexture
Checkerboard2DTexture	textures/checkerboard.h	/^template <typename T> class Checkerboard2DTexture : public Texture<T> {$/;"	c
Checkerboard3DTexture	textures/checkerboard.h	/^    Checkerboard3DTexture(TextureMapping3D *m, Reference<Texture<T> > c1,$/;"	f	class:Checkerboard3DTexture
Checkerboard3DTexture	textures/checkerboard.h	/^template <typename T> class Checkerboard3DTexture : public Texture<T> {$/;"	c
ChopUpSingleUncompressedStrip	3rdparty/tiff-3.9.4/tif_dirread.c	/^ChopUpSingleUncompressedStrip(TIFF* tif)$/;"	f	file:
Chromaticities	3rdparty/openexr-1.7.0/ImfChromaticities.cpp	/^Chromaticities::Chromaticities (const Imath::V2f &red,$/;"	f	class:Imf::Chromaticities
Chromaticities	3rdparty/openexr-1.7.0/ImfChromaticities.h	/^struct Chromaticities$/;"	s	namespace:Imf
ChromaticitiesAttribute	3rdparty/openexr-1.7.0/ImfChromaticitiesAttribute.h	/^typedef TypedAttribute<Chromaticities> ChromaticitiesAttribute;$/;"	t	namespace:Imf
Clamp	core/pbrt.h	/^inline float Clamp(float val, float low, float high) {$/;"	f
Clamp	core/pbrt.h	/^inline int Clamp(int val, int low, int high) {$/;"	f
Clamp	core/spectrum.h	/^    CoefficientSpectrum Clamp(float low = 0, float high = INFINITY) const {$/;"	f	class:CoefficientSpectrum
CleanupField	3rdparty/tiff-3.9.4/tif_dir.c	/^#define	CleanupField(/;"	d	file:
CleanupField	3rdparty/tiff-3.9.4/tif_dir.c	/^#undef CleanupField$/;"	d	file:
Clear	core/api.cpp	/^    void Clear() {$/;"	f	class:TransformCache
Clear	core/paramset.cpp	/^void ParamSet::Clear() {$/;"	f	class:ParamSet
ClearCache	textures/imagemap.h	/^    static void ClearCache() {$/;"	f	class:ImageTexture
ClosePhoton	integrators/photonmap.cpp	/^    ClosePhoton(const Photon *p = NULL, float md2 = INFINITY)$/;"	f	struct:ClosePhoton
ClosePhoton	integrators/photonmap.cpp	/^struct ClosePhoton {$/;"	s	file:
ClrBits	3rdparty/tiff-3.9.4/tif_fax3.h	/^#define ClrBits(/;"	d
Code	3rdparty/zlib-1.2.5/deflate.h	/^#define Code /;"	d
Code2V	3rdparty/tiff-3.9.4/tif_color.c	/^#define	Code2V(/;"	d	file:
Code2V	3rdparty/tiff-3.9.4/tif_color.c	/^#undef	Code2V$/;"	d	file:
CoefficientSpectrum	core/spectrum.h	/^    CoefficientSpectrum(const CoefficientSpectrum &s) {$/;"	f	class:CoefficientSpectrum
CoefficientSpectrum	core/spectrum.h	/^    CoefficientSpectrum(float v = 0.f) {$/;"	f	class:CoefficientSpectrum
CoefficientSpectrum	core/spectrum.h	/^template <int nSamples> class CoefficientSpectrum {$/;"	c
Color3	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color3<T>::Color3 (): Vec3 <T> ()$/;"	f	class:Imath::Color3
Color3	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color3<T>::Color3 (T a): Vec3 <T> (a)$/;"	f	class:Imath::Color3
Color3	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color3<T>::Color3 (T a, T b, T c): Vec3 <T> (a, b, c)$/;"	f	class:Imath::Color3
Color3	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color3<T>::Color3 (const Color3 &c): Vec3 <T> (c)$/;"	f	class:Imath::Color3
Color3	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color3<T>::Color3 (const Vec3<S> &v): Vec3 <T> (v)$/;"	f	class:Imath::Color3
Color3	3rdparty/ilmbase-1.0.2/ImathColor.h	/^class Color3: public Vec3 <T>$/;"	c	namespace:Imath
Color3c	3rdparty/ilmbase-1.0.2/ImathColor.h	/^typedef Color3<unsigned char>	Color3c;$/;"	t	namespace:Imath
Color3f	3rdparty/ilmbase-1.0.2/ImathColor.h	/^typedef Color3<float>		Color3f;$/;"	t	namespace:Imath
Color3h	3rdparty/ilmbase-1.0.2/ImathColor.h	/^typedef Color3<half>		Color3h;$/;"	t	namespace:Imath
Color4	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color4<T>::Color4 ()$/;"	f	class:Imath::Color4
Color4	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color4<T>::Color4 (T x)$/;"	f	class:Imath::Color4
Color4	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color4<T>::Color4 (T x, T y, T z, T w)$/;"	f	class:Imath::Color4
Color4	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color4<T>::Color4 (const Color4 &v)$/;"	f	class:Imath::Color4
Color4	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color4<T>::Color4 (const Color4<S> &v)$/;"	f	class:Imath::Color4
Color4	3rdparty/ilmbase-1.0.2/ImathColor.h	/^template <class T> class Color4$/;"	c	namespace:Imath
Color4c	3rdparty/ilmbase-1.0.2/ImathColor.h	/^typedef Color4<unsigned char>	Color4c;$/;"	t	namespace:Imath
Color4f	3rdparty/ilmbase-1.0.2/ImathColor.h	/^typedef Color4<float>		Color4f;$/;"	t	namespace:Imath
Color4h	3rdparty/ilmbase-1.0.2/ImathColor.h	/^typedef Color4<half>		Color4h;$/;"	t	namespace:Imath
CompareNode	core/kdtree.h	/^    CompareNode(int a) { axis = a; }$/;"	f	struct:CompareNode
CompareNode	core/kdtree.h	/^template <typename NodeData> struct CompareNode {$/;"	s
ComparePoints	accelerators/bvh.cpp	/^    ComparePoints(int d) { dim = d; }$/;"	f	struct:ComparePoints
ComparePoints	accelerators/bvh.cpp	/^struct ComparePoints {$/;"	s	file:
CompareToBucket	accelerators/bvh.cpp	/^    CompareToBucket(int split, int num, int d, const BBox &b)$/;"	f	struct:CompareToBucket
CompareToBucket	accelerators/bvh.cpp	/^struct CompareToBucket {$/;"	s	file:
CompareToMid	accelerators/bvh.cpp	/^    CompareToMid(int d, float m) { dim = d; mid = m; }$/;"	f	struct:CompareToMid
CompareToMid	accelerators/bvh.cpp	/^struct CompareToMid {$/;"	s	file:
Compression	3rdparty/openexr-1.7.0/ImfCompression.h	/^enum Compression$/;"	g	namespace:Imf
CompressionAttribute	3rdparty/openexr-1.7.0/ImfCompressionAttribute.h	/^typedef TypedAttribute<Compression> CompressionAttribute;$/;"	t	namespace:Imf
Compressor	3rdparty/openexr-1.7.0/ImfCompressor.cpp	/^Compressor::Compressor (const Header &hdr): _header (hdr) {}$/;"	f	class:Imf::Compressor
Compressor	3rdparty/openexr-1.7.0/ImfCompressor.h	/^class Compressor$/;"	c	namespace:Imf
ComputeDifferentials	core/diffgeom.cpp	/^void DifferentialGeometry::ComputeDifferentials($/;"	f	class:DifferentialGeometry
ComputeLightSamplingCDF	core/integrator.cpp	/^Distribution1D *ComputeLightSamplingCDF(const Scene *scene) {$/;"	f
ComputeRadianceTask	integrators/photonmap.cpp	/^    ComputeRadianceTask(ProgressReporter &prog, uint32_t tn, uint32_t nt,$/;"	f	class:ComputeRadianceTask
ComputeRadianceTask	integrators/photonmap.cpp	/^class ComputeRadianceTask : public Task {$/;"	c	file:
ComputeSubWindow	core/sampler.cpp	/^void Sampler::ComputeSubWindow(int num, int count, int *newXStart,$/;"	f	class:Sampler
ConcentricSampleDisk	core/montecarlo.cpp	/^void ConcentricSampleDisk(float u1, float u2, float *dx, float *dy) {$/;"	f
ConditionVariable	core/parallel.cpp	/^ConditionVariable::ConditionVariable() {$/;"	f	class:ConditionVariable
ConditionVariable	core/parallel.h	/^class ConditionVariable {$/;"	c
Cone	shapes/cone.cpp	/^Cone::Cone(const Transform *o2w, const Transform *w2o, bool ro,$/;"	f	class:Cone
Cone	shapes/cone.h	/^class Cone : public Shape {$/;"	c
ConstIterator	3rdparty/openexr-1.7.0/ImfChannelList.h	/^ChannelList::ConstIterator::ConstIterator (): _i()$/;"	f	class:Imf::ChannelList::ConstIterator
ConstIterator	3rdparty/openexr-1.7.0/ImfChannelList.h	/^ChannelList::ConstIterator::ConstIterator (const ChannelList::Iterator &other):$/;"	f	class:Imf::ChannelList::ConstIterator
ConstIterator	3rdparty/openexr-1.7.0/ImfChannelList.h	/^ChannelList::ConstIterator::ConstIterator$/;"	f	class:Imf::ChannelList::ConstIterator
ConstIterator	3rdparty/openexr-1.7.0/ImfChannelList.h	/^class ChannelList::ConstIterator$/;"	c	class:Imf::ChannelList
ConstIterator	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^FrameBuffer::ConstIterator::ConstIterator (): _i()$/;"	f	class:Imf::FrameBuffer::ConstIterator
ConstIterator	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^FrameBuffer::ConstIterator::ConstIterator (const FrameBuffer::Iterator &other):$/;"	f	class:Imf::FrameBuffer::ConstIterator
ConstIterator	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^FrameBuffer::ConstIterator::ConstIterator$/;"	f	class:Imf::FrameBuffer::ConstIterator
ConstIterator	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^class FrameBuffer::ConstIterator$/;"	c	class:Imf::FrameBuffer
ConstIterator	3rdparty/openexr-1.7.0/ImfHeader.h	/^Header::ConstIterator::ConstIterator (): _i()$/;"	f	class:Imf::Header::ConstIterator
ConstIterator	3rdparty/openexr-1.7.0/ImfHeader.h	/^Header::ConstIterator::ConstIterator (const Header::Iterator &other):$/;"	f	class:Imf::Header::ConstIterator
ConstIterator	3rdparty/openexr-1.7.0/ImfHeader.h	/^Header::ConstIterator::ConstIterator$/;"	f	class:Imf::Header::ConstIterator
ConstIterator	3rdparty/openexr-1.7.0/ImfHeader.h	/^class Header::ConstIterator$/;"	c	class:Imf::Header
ConstantTexture	textures/constant.h	/^    ConstantTexture(const T &v) { value = v; }$/;"	f	class:ConstantTexture
ConstantTexture	textures/constant.h	/^template <typename T> class ConstantTexture : public Texture<T> {$/;"	c
Constructor	3rdparty/openexr-1.7.0/ImfAttribute.cpp	/^typedef Attribute* (*Constructor)();$/;"	t	namespace:Imf::__anon14	file:
CoordinateSystem	core/geometry.h	/^inline void CoordinateSystem(const Vector &v1, Vector *v2, Vector *v3) {$/;"	f
CopperK	materials/metal.cpp	/^const float CopperK[CopperSamples] = {$/;"	v
CopperN	materials/metal.cpp	/^const float CopperN[CopperSamples] = {$/;"	v
CopperSamples	materials/metal.cpp	/^const int CopperSamples = 56;$/;"	v
CopperWavelengths	materials/metal.cpp	/^const float CopperWavelengths[CopperSamples] = {$/;"	v
CosPhi	core/reflection.h	/^inline float CosPhi(const Vector &w) {$/;"	f
CosTheta	core/reflection.h	/^inline float CosTheta(const Vector &w) { return w.z; }$/;"	f
CosineHemispherePdf	core/montecarlo.h	/^inline float CosineHemispherePdf(float costheta, float phi) {$/;"	f
CosineSampleHemisphere	core/montecarlo.h	/^inline Vector CosineSampleHemisphere(float u1, float u2) {$/;"	f
Cr_g_tab	3rdparty/tiff-3.9.4/tiffio.h	/^	int32*	Cr_g_tab;$/;"	m	struct:__anon64
Cr_r_tab	3rdparty/tiff-3.9.4/tiffio.h	/^	int*	Cr_r_tab;$/;"	m	struct:__anon64
Create	core/parallel.cpp	/^Mutex *Mutex::Create() {$/;"	f	class:Mutex
Create	core/parallel.cpp	/^RWMutex *RWMutex::Create() {$/;"	f	class:RWMutex
CreateAdaptiveSampler	samplers/adaptive.cpp	/^AdaptiveSampler *CreateAdaptiveSampler(const ParamSet &params, const Film *film,$/;"	f
CreateAggregateTestRenderer	renderers/aggregatetest.cpp	/^AggregateTest *CreateAggregateTestRenderer(const ParamSet &params,$/;"	f
CreateAmbientOcclusionIntegrator	integrators/ambientocclusion.cpp	/^AmbientOcclusionIntegrator *CreateAmbientOcclusionIntegrator(const ParamSet &params) {$/;"	f
CreateBSDFFunc	tools/bsdftest.cpp	/^typedef void (*CreateBSDFFunc)(BSDF* bsdf);$/;"	t	file:
CreateBVHAccelerator	accelerators/bvh.cpp	/^BVHAccel *CreateBVHAccelerator(const vector<Reference<Primitive> > &prims,$/;"	f
CreateBestCandidateSampler	samplers/bestcandidate.cpp	/^BestCandidateSampler *CreateBestCandidateSampler(const ParamSet &params, const Film *film,$/;"	f
CreateBilerpFloatTexture	textures/bilerp.cpp	/^BilerpTexture<float> *CreateBilerpFloatTexture(const Transform &tex2world,$/;"	f
CreateBilerpSpectrumTexture	textures/bilerp.cpp	/^BilerpTexture<Spectrum> *CreateBilerpSpectrumTexture(const Transform &tex2world,$/;"	f
CreateBoxFilter	filters/box.cpp	/^BoxFilter *CreateBoxFilter(const ParamSet &ps) {$/;"	f
CreateCheckerboardFloatTexture	textures/checkerboard.cpp	/^Texture<float> *CreateCheckerboardFloatTexture(const Transform &tex2world,$/;"	f
CreateCheckerboardSpectrumTexture	textures/checkerboard.cpp	/^Texture<Spectrum> *CreateCheckerboardSpectrumTexture(const Transform &tex2world,$/;"	f
CreateConeShape	shapes/cone.cpp	/^Cone *CreateConeShape(const Transform *o2w, const Transform *w2o,$/;"	f
CreateConstantFloatTexture	textures/constant.cpp	/^ConstantTexture<float> *CreateConstantFloatTexture(const Transform &tex2world,$/;"	f
CreateConstantSpectrumTexture	textures/constant.cpp	/^ConstantTexture<Spectrum> *CreateConstantSpectrumTexture(const Transform &tex2world,$/;"	f
CreateCylinderShape	shapes/cylinder.cpp	/^Cylinder *CreateCylinderShape(const Transform *o2w, const Transform *w2o,$/;"	f
CreateDiffuseAreaLight	lights/diffuse.cpp	/^AreaLight *CreateDiffuseAreaLight(const Transform &light2world, const ParamSet &paramSet,$/;"	f
CreateDiffusePRTIntegratorSurfaceIntegrator	integrators/diffuseprt.cpp	/^DiffusePRTIntegrator *CreateDiffusePRTIntegratorSurfaceIntegrator(const ParamSet &params) {$/;"	f
CreateDipoleSubsurfaceIntegrator	integrators/dipolesubsurface.cpp	/^DipoleSubsurfaceIntegrator *CreateDipoleSubsurfaceIntegrator(const ParamSet &params) {$/;"	f
CreateDirectLightingIntegrator	integrators/directlighting.cpp	/^DirectLightingIntegrator *CreateDirectLightingIntegrator(const ParamSet &params) {$/;"	f
CreateDiskShape	shapes/disk.cpp	/^Disk *CreateDiskShape(const Transform *o2w, const Transform *w2o,$/;"	f
CreateDistantLight	lights/distant.cpp	/^DistantLight *CreateDistantLight(const Transform &light2world,$/;"	f
CreateDotsFloatTexture	textures/dots.cpp	/^DotsTexture<float> *CreateDotsFloatTexture(const Transform &tex2world,$/;"	f
CreateDotsSpectrumTexture	textures/dots.cpp	/^DotsTexture<Spectrum> *CreateDotsSpectrumTexture(const Transform &tex2world,$/;"	f
CreateEmissionVolumeIntegrator	integrators/emission.cpp	/^EmissionIntegrator *CreateEmissionVolumeIntegrator(const ParamSet &params) {$/;"	f
CreateEnvironmentCamera	cameras/environment.cpp	/^EnvironmentCamera *CreateEnvironmentCamera(const ParamSet &params,$/;"	f
CreateExponentialVolumeRegion	volumes/exponential.cpp	/^ExponentialDensity *CreateExponentialVolumeRegion(const Transform &volume2world,$/;"	f
CreateFBmFloatTexture	textures/fbm.cpp	/^FBmTexture<float> *CreateFBmFloatTexture(const Transform &tex2world,$/;"	f
CreateFBmSpectrumTexture	textures/fbm.cpp	/^FBmTexture<Spectrum> *CreateFBmSpectrumTexture(const Transform &tex2world,$/;"	f
CreateGaussianFilter	filters/gaussian.cpp	/^GaussianFilter *CreateGaussianFilter(const ParamSet &ps) {$/;"	f
CreateGlassMaterial	materials/glass.cpp	/^GlassMaterial *CreateGlassMaterial(const Transform &xform,$/;"	f
CreateGlossyPRTIntegratorSurfaceIntegrator	integrators/glossyprt.cpp	/^GlossyPRTIntegrator *CreateGlossyPRTIntegratorSurfaceIntegrator(const ParamSet &params) {$/;"	f
CreateGoniometricLight	lights/goniometric.cpp	/^GonioPhotometricLight *CreateGoniometricLight(const Transform &light2world,$/;"	f
CreateGridAccelerator	accelerators/grid.cpp	/^GridAccel *CreateGridAccelerator(const vector<Reference<Primitive> > &prims,$/;"	f
CreateGridVolumeRegion	volumes/volumegrid.cpp	/^VolumeGridDensity *CreateGridVolumeRegion(const Transform &volume2world,$/;"	f
CreateHaltonSampler	samplers/halton.cpp	/^HaltonSampler *CreateHaltonSampler(const ParamSet &params, const Film *film,$/;"	f
CreateHeightfield2Shape	shapes/heightfield2.cpp	/^Heightfield2 *CreateHeightfield2Shape(const Transform *o2w, const Transform *w2o,$/;"	f
CreateHeightfieldShape	shapes/heightfield.cpp	/^Heightfield *CreateHeightfieldShape(const Transform *o2w, const Transform *w2o,$/;"	f
CreateHomogeneousVolumeDensityRegion	volumes/homogeneous.cpp	/^HomogeneousVolumeDensity *CreateHomogeneousVolumeDensityRegion(const Transform &volume2world,$/;"	f
CreateHyperboloidShape	shapes/hyperboloid.cpp	/^Shape *CreateHyperboloidShape(const Transform *o2w, const Transform *w2o,$/;"	f
CreateIGISurfaceIntegrator	integrators/igi.cpp	/^IGIIntegrator *CreateIGISurfaceIntegrator(const ParamSet &params) {$/;"	f
CreateImageFilm	film/image.cpp	/^ImageFilm *CreateImageFilm(const ParamSet &params, Filter *filter) {$/;"	f
CreateImageFloatTexture	textures/imagemap.cpp	/^ImageTexture<float, float> *CreateImageFloatTexture(const Transform &tex2world,$/;"	f
CreateImageSpectrumTexture	textures/imagemap.cpp	/^ImageTexture<RGBSpectrum, Spectrum> *CreateImageSpectrumTexture(const Transform &tex2world,$/;"	f
CreateInfiniteLight	lights/infinite.cpp	/^InfiniteAreaLight *CreateInfiniteLight(const Transform &light2world,$/;"	f
CreateIrradianceCacheIntegrator	integrators/irradiancecache.cpp	/^IrradianceCacheIntegrator *CreateIrradianceCacheIntegrator(const ParamSet &params) {$/;"	f
CreateKdSubsurfaceMaterial	materials/kdsubsurface.cpp	/^KdSubsurfaceMaterial *CreateKdSubsurfaceMaterial(const Transform &xform,$/;"	f
CreateKdTreeAccelerator	accelerators/kdtreeaccel.cpp	/^KdTreeAccel *CreateKdTreeAccelerator(const vector<Reference<Primitive> > &prims,$/;"	f
CreateLoopSubdivShape	shapes/loopsubdiv.cpp	/^LoopSubdiv *CreateLoopSubdivShape(const Transform *o2w, const Transform *w2o,$/;"	f
CreateLowDiscrepancySampler	samplers/lowdiscrepancy.cpp	/^LDSampler *CreateLowDiscrepancySampler(const ParamSet &params, const Film *film,$/;"	f
CreateMarbleFloatTexture	textures/marble.cpp	/^Texture<float> *CreateMarbleFloatTexture(const Transform &tex2world,$/;"	f
CreateMarbleSpectrumTexture	textures/marble.cpp	/^MarbleTexture *CreateMarbleSpectrumTexture(const Transform &tex2world,$/;"	f
CreateMaterial	core/api.cpp	/^Reference<Material> GraphicsState::CreateMaterial(const ParamSet &params) {$/;"	f	class:GraphicsState
CreateMatteMaterial	materials/matte.cpp	/^MatteMaterial *CreateMatteMaterial(const Transform &xform,$/;"	f
CreateMeasuredMaterial	materials/measured.cpp	/^MeasuredMaterial *CreateMeasuredMaterial(const Transform &xform,$/;"	f
CreateMetalMaterial	materials/metal.cpp	/^MetalMaterial *CreateMetalMaterial(const Transform &xform, const TextureParams &mp) {$/;"	f
CreateMetropolisRenderer	renderers/metropolis.cpp	/^MetropolisRenderer *CreateMetropolisRenderer(const ParamSet &params,$/;"	f
CreateMirrorMaterial	materials/mirror.cpp	/^MirrorMaterial *CreateMirrorMaterial(const Transform &xform,$/;"	f
CreateMitchellFilter	filters/mitchell.cpp	/^MitchellFilter *CreateMitchellFilter(const ParamSet &ps) {$/;"	f
CreateMixFloatTexture	textures/mix.cpp	/^MixTexture<float> *CreateMixFloatTexture(const Transform &tex2world,$/;"	f
CreateMixMaterial	materials/mixmat.cpp	/^MixMaterial *CreateMixMaterial(const Transform &xform,$/;"	f
CreateMixSpectrumTexture	textures/mix.cpp	/^MixTexture<Spectrum> *CreateMixSpectrumTexture(const Transform &tex2world,$/;"	f
CreateNURBSShape	shapes/nurbs.cpp	/^NURBS *CreateNURBSShape(const Transform *o2w, const Transform *w2o,$/;"	f
CreateOrthographicCamera	cameras/orthographic.cpp	/^OrthoCamera *CreateOrthographicCamera(const ParamSet &params,$/;"	f
CreateParaboloidShape	shapes/paraboloid.cpp	/^Paraboloid *CreateParaboloidShape(const Transform *o2w, const Transform *w2o,$/;"	f
CreatePathSurfaceIntegrator	integrators/path.cpp	/^PathIntegrator *CreatePathSurfaceIntegrator(const ParamSet &params) {$/;"	f
CreatePerspectiveCamera	cameras/perspective.cpp	/^PerspectiveCamera *CreatePerspectiveCamera(const ParamSet &params,$/;"	f
CreatePhotonMapSurfaceIntegrator	integrators/photonmap.cpp	/^PhotonIntegrator *CreatePhotonMapSurfaceIntegrator(const ParamSet &params) {$/;"	f
CreatePlasticMaterial	materials/plastic.cpp	/^PlasticMaterial *CreatePlasticMaterial(const Transform &xform,$/;"	f
CreatePointLight	lights/point.cpp	/^PointLight *CreatePointLight(const Transform &light2world,$/;"	f
CreateProjectionLight	lights/projection.cpp	/^ProjectionLight *CreateProjectionLight(const Transform &light2world,$/;"	f
CreateRadProbeTask	renderers/createprobes.cpp	/^CreateRadProbeTask::CreateRadProbeTask(int pn, int d[3], float t,$/;"	f	class:CreateRadProbeTask
CreateRadProbeTask	renderers/createprobes.cpp	/^class CreateRadProbeTask : public Task {$/;"	c	file:
CreateRadianceProbes	renderers/createprobes.cpp	/^CreateRadianceProbes::CreateRadianceProbes(SurfaceIntegrator *surf,$/;"	f	class:CreateRadianceProbes
CreateRadianceProbes	renderers/createprobes.h	/^class CreateRadianceProbes : public Renderer {$/;"	c
CreateRadianceProbesRenderer	renderers/createprobes.cpp	/^CreateRadianceProbes *CreateRadianceProbesRenderer(const Camera *camera,$/;"	f
CreateRadianceProbesSurfaceIntegrator	integrators/useprobes.cpp	/^UseRadianceProbes *CreateRadianceProbesSurfaceIntegrator(const ParamSet &paramSet) {$/;"	f
CreateRandomSampler	samplers/random.cpp	/^Sampler *CreateRandomSampler(const ParamSet &params,$/;"	f
CreateScaleFloatTexture	textures/scale.cpp	/^ScaleTexture<float, float> *CreateScaleFloatTexture(const Transform &tex2world,$/;"	f
CreateScaleSpectrumTexture	textures/scale.cpp	/^ScaleTexture<Spectrum, Spectrum> *CreateScaleSpectrumTexture(const Transform &tex2world,$/;"	f
CreateShinyMetalMaterial	materials/shinymetal.cpp	/^ShinyMetalMaterial *CreateShinyMetalMaterial(const Transform &xform,$/;"	f
CreateSincFilter	filters/sinc.cpp	/^LanczosSincFilter *CreateSincFilter(const ParamSet &ps) {$/;"	f
CreateSingleScatteringIntegrator	integrators/single.cpp	/^SingleScatteringIntegrator *CreateSingleScatteringIntegrator(const ParamSet &params) {$/;"	f
CreateSphereShape	shapes/sphere.cpp	/^Sphere *CreateSphereShape(const Transform *o2w, const Transform *w2o,$/;"	f
CreateSpotLight	lights/spot.cpp	/^SpotLight *CreateSpotLight(const Transform &l2w, const ParamSet &paramSet) {$/;"	f
CreateStratifiedSampler	samplers/stratified.cpp	/^StratifiedSampler *CreateStratifiedSampler(const ParamSet &params, const Film *film,$/;"	f
CreateSubstrateMaterial	materials/substrate.cpp	/^SubstrateMaterial *CreateSubstrateMaterial(const Transform &xform,$/;"	f
CreateSubsurfaceMaterial	materials/subsurface.cpp	/^SubsurfaceMaterial *CreateSubsurfaceMaterial(const Transform &xform,$/;"	f
CreateSurfacePointsRenderer	renderers/surfacepoints.cpp	/^SurfacePointsRenderer *CreateSurfacePointsRenderer(const ParamSet &params,$/;"	f
CreateTranslucentMaterial	materials/translucent.cpp	/^TranslucentMaterial *CreateTranslucentMaterial(const Transform &xform,$/;"	f
CreateTriangleFilter	filters/triangle.cpp	/^TriangleFilter *CreateTriangleFilter(const ParamSet &ps) {$/;"	f
CreateTriangleMeshShape	shapes/trianglemesh.cpp	/^TriangleMesh *CreateTriangleMeshShape(const Transform *o2w, const Transform *w2o,$/;"	f
CreateUVFloatTexture	textures/uv.cpp	/^Texture<float> *CreateUVFloatTexture(const Transform &tex2world,$/;"	f
CreateUVSpectrumTexture	textures/uv.cpp	/^UVTexture *CreateUVSpectrumTexture(const Transform &tex2world,$/;"	f
CreateUberMaterial	materials/uber.cpp	/^UberMaterial *CreateUberMaterial(const Transform &xform,$/;"	f
CreateWhittedSurfaceIntegrator	integrators/whitted.cpp	/^WhittedIntegrator *CreateWhittedSurfaceIntegrator(const ParamSet &params)$/;"	f
CreateWindyFloatTexture	textures/windy.cpp	/^WindyTexture<float> *CreateWindyFloatTexture(const Transform &tex2world,$/;"	f
CreateWindySpectrumTexture	textures/windy.cpp	/^WindyTexture<Spectrum> *CreateWindySpectrumTexture(const Transform &tex2world,$/;"	f
CreateWrinkledFloatTexture	textures/wrinkled.cpp	/^WrinkledTexture<float> *CreateWrinkledFloatTexture(const Transform &tex2world,$/;"	f
CreateWrinkledSpectrumTexture	textures/wrinkled.cpp	/^WrinkledTexture<Spectrum> *CreateWrinkledSpectrumTexture(const Transform &tex2world,$/;"	f
Cross	core/geometry.h	/^inline Vector Cross(const Normal &v1, const Vector &v2) {$/;"	f
Cross	core/geometry.h	/^inline Vector Cross(const Vector &v1, const Normal &v2) {$/;"	f
Cross	core/geometry.h	/^inline Vector Cross(const Vector &v1, const Vector &v2) {$/;"	f
CtoPstr	3rdparty/tiff-3.9.4/tif_apple.c	/^#define	CtoPstr	/;"	d	file:
CubeMap	3rdparty/openexr-1.7.0/ImfEnvmap.cpp	/^namespace CubeMap {$/;"	n	namespace:Imf	file:
CubeMap	3rdparty/openexr-1.7.0/ImfEnvmap.h	/^namespace CubeMap$/;"	n	namespace:Imf
CubeMapFace	3rdparty/openexr-1.7.0/ImfEnvmap.h	/^enum CubeMapFace$/;"	g	namespace:Imf
Cylinder	shapes/cylinder.cpp	/^Cylinder::Cylinder(const Transform *o2w, const Transform *w2o, bool ro,$/;"	f	class:Cylinder
Cylinder	shapes/cylinder.h	/^class Cylinder : public Shape {$/;"	c
CylindricalMapping2D	core/texture.h	/^    CylindricalMapping2D(const Transform &toCyl)$/;"	f	class:CylindricalMapping2D
CylindricalMapping2D	core/texture.h	/^class CylindricalMapping2D : public TextureMapping2D {$/;"	c
D	core/reflection.h	/^    float D(const Vector &wh) const {$/;"	f	class:Anisotropic
D	core/reflection.h	/^    float D(const Vector &wh) const {$/;"	f	class:Blinn
D	volumes/volumegrid.h	/^    float D(int x, int y, int z) const {$/;"	f	class:VolumeGridDensity
D50_X0	3rdparty/tiff-3.9.4/tiffio.h	/^#define D50_X0 /;"	d
D50_Y0	3rdparty/tiff-3.9.4/tiffio.h	/^#define D50_Y0 /;"	d
D50_Z0	3rdparty/tiff-3.9.4/tiffio.h	/^#define D50_Z0 /;"	d
D65_X0	3rdparty/tiff-3.9.4/tiffio.h	/^#define D65_X0 /;"	d
D65_Y0	3rdparty/tiff-3.9.4/tiffio.h	/^#define D65_Y0 /;"	d
D65_Z0	3rdparty/tiff-3.9.4/tiffio.h	/^#define D65_Z0 /;"	d
DATATYPE_IEEEFP	3rdparty/tiff-3.9.4/tif_dir.c	/^#define DATATYPE_IEEEFP	/;"	d	file:
DATATYPE_INT	3rdparty/tiff-3.9.4/tif_dir.c	/^#define DATATYPE_INT	/;"	d	file:
DATATYPE_UINT	3rdparty/tiff-3.9.4/tif_dir.c	/^#define DATATYPE_UINT	/;"	d	file:
DATATYPE_VOID	3rdparty/tiff-3.9.4/tif_dir.c	/^#define DATATYPE_VOID	/;"	d	file:
DCSIMAGERFILTER_CFA	3rdparty/tiff-3.9.4/tiff.h	/^#define     DCSIMAGERFILTER_CFA /;"	d
DCSIMAGERFILTER_IR	3rdparty/tiff-3.9.4/tiff.h	/^#define     DCSIMAGERFILTER_IR /;"	d
DCSIMAGERFILTER_MONO	3rdparty/tiff-3.9.4/tiff.h	/^#define     DCSIMAGERFILTER_MONO /;"	d
DCSIMAGERFILTER_OTHER	3rdparty/tiff-3.9.4/tiff.h	/^#define     DCSIMAGERFILTER_OTHER /;"	d
DCSIMAGERMODEL_M3	3rdparty/tiff-3.9.4/tiff.h	/^#define     DCSIMAGERMODEL_M3 /;"	d
DCSIMAGERMODEL_M5	3rdparty/tiff-3.9.4/tiff.h	/^#define     DCSIMAGERMODEL_M5 /;"	d
DCSIMAGERMODEL_M6	3rdparty/tiff-3.9.4/tiff.h	/^#define     DCSIMAGERMODEL_M6 /;"	d
DCSINTERPMODE_NORMAL	3rdparty/tiff-3.9.4/tiff.h	/^#define     DCSINTERPMODE_NORMAL /;"	d
DCSINTERPMODE_PREVIEW	3rdparty/tiff-3.9.4/tiff.h	/^#define     DCSINTERPMODE_PREVIEW /;"	d
DEBUG_COLOR	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	DEBUG_COLOR(/;"	d	file:
DEBUG_PRINT	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	DEBUG_PRINT(/;"	d	file:
DEBUG_SHOW	3rdparty/tiff-3.9.4/tif_fax3.h	/^#define DEBUG_SHOW /;"	d
DECLAREContigPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^#define	DECLAREContigPutFunc(/;"	d	file:
DECLAREContigPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^DECLAREContigPutFunc(put16bitbwtile)$/;"	f
DECLAREContigPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^DECLAREContigPutFunc(put1bitbwtile)$/;"	f
DECLAREContigPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^DECLAREContigPutFunc(put1bitcmaptile)$/;"	f
DECLAREContigPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^DECLAREContigPutFunc(put2bitbwtile)$/;"	f
DECLAREContigPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^DECLAREContigPutFunc(put2bitcmaptile)$/;"	f
DECLAREContigPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^DECLAREContigPutFunc(put4bitbwtile)$/;"	f
DECLAREContigPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^DECLAREContigPutFunc(put4bitcmaptile)$/;"	f
DECLAREContigPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^DECLAREContigPutFunc(put8bitcmaptile)$/;"	f
DECLAREContigPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^DECLAREContigPutFunc(putRGBAAcontig16bittile)$/;"	f
DECLAREContigPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^DECLAREContigPutFunc(putRGBAAcontig8bittile)$/;"	f
DECLAREContigPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^DECLAREContigPutFunc(putRGBUAcontig16bittile)$/;"	f
DECLAREContigPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^DECLAREContigPutFunc(putRGBUAcontig8bittile)$/;"	f
DECLAREContigPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^DECLAREContigPutFunc(putRGBcontig16bittile)$/;"	f
DECLAREContigPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^DECLAREContigPutFunc(putRGBcontig8bitCMYKMaptile)$/;"	f
DECLAREContigPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^DECLAREContigPutFunc(putRGBcontig8bitCMYKtile)$/;"	f
DECLAREContigPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^DECLAREContigPutFunc(putRGBcontig8bittile)$/;"	f
DECLAREContigPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^DECLAREContigPutFunc(putcontig8bitCIELab)$/;"	f
DECLAREContigPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^DECLAREContigPutFunc(putcontig8bitYCbCr11tile)$/;"	f
DECLAREContigPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^DECLAREContigPutFunc(putcontig8bitYCbCr12tile)$/;"	f
DECLAREContigPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^DECLAREContigPutFunc(putcontig8bitYCbCr21tile)$/;"	f
DECLAREContigPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^DECLAREContigPutFunc(putcontig8bitYCbCr22tile)$/;"	f
DECLAREContigPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^DECLAREContigPutFunc(putcontig8bitYCbCr41tile)$/;"	f
DECLAREContigPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^DECLAREContigPutFunc(putcontig8bitYCbCr42tile)$/;"	f
DECLAREContigPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^DECLAREContigPutFunc(putcontig8bitYCbCr44tile)$/;"	f
DECLAREContigPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^DECLAREContigPutFunc(putgreytile)$/;"	f
DECLARESepPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^#define	DECLARESepPutFunc(/;"	d	file:
DECLARESepPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^DECLARESepPutFunc(putRGBAAseparate16bittile)$/;"	f
DECLARESepPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^DECLARESepPutFunc(putRGBAAseparate8bittile)$/;"	f
DECLARESepPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^DECLARESepPutFunc(putRGBUAseparate16bittile)$/;"	f
DECLARESepPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^DECLARESepPutFunc(putRGBUAseparate8bittile)$/;"	f
DECLARESepPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^DECLARESepPutFunc(putRGBseparate16bittile)$/;"	f
DECLARESepPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^DECLARESepPutFunc(putRGBseparate8bittile)$/;"	f
DECLARESepPutFunc	3rdparty/tiff-3.9.4/tif_getimage.c	/^DECLARESepPutFunc(putseparate8bitYCbCr11tile)$/;"	f
DECLARE_STATE	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	DECLARE_STATE(/;"	d	file:
DECLARE_STATE_2D	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	DECLARE_STATE_2D(/;"	d	file:
DECREASING_Y	3rdparty/openexr-1.7.0/ImfLineOrder.h	/^    DECREASING_Y = 1,	\/\/ first scan line has highest y coordinate$/;"	e	enum:Imf::LineOrder
DEFAULT_EXTRASAMPLE_AS_ALPHA	3rdparty/tiff-3.9.4/tiffconf.h	/^#define DEFAULT_EXTRASAMPLE_AS_ALPHA /;"	d
DEFAULT_EXTRASAMPLE_AS_ALPHA	3rdparty/tiff-3.9.4/tiffconf.vc.h	/^#define DEFAULT_EXTRASAMPLE_AS_ALPHA /;"	d
DEFAULT_EXTRASAMPLE_AS_ALPHA	3rdparty/tiff-3.9.4/tiffconf.wince.h	/^#define DEFAULT_EXTRASAMPLE_AS_ALPHA /;"	d
DEFINE_EXC	3rdparty/ilmbase-1.0.2/IexBaseExc.h	/^#define DEFINE_EXC(/;"	d
DEFLATE_H	3rdparty/zlib-1.2.5/deflate.h	/^#define DEFLATE_H$/;"	d
DEFS	Makefile	/^DEFS=-DPBRT_HAS_OPENEXR$/;"	m
DEF_MEM_LEVEL	3rdparty/zlib-1.2.5/zutil.h	/^#  define DEF_MEM_LEVEL /;"	d
DEF_WBITS	3rdparty/zlib-1.2.5/zutil.h	/^#  define DEF_WBITS /;"	d
DELTA2_SKIP	3rdparty/tiff-3.9.4/tif_thunder.c	/^#define	    DELTA2_SKIP	/;"	d	file:
DELTA3_SKIP	3rdparty/tiff-3.9.4/tif_thunder.c	/^#define	    DELTA3_SKIP	/;"	d	file:
DEL_PARAMS	core/paramset.cpp	/^#define DEL_PARAMS(/;"	d	file:
DEL_PARAMS	core/paramset.cpp	/^#undef DEL_PARAMS$/;"	d	file:
DICT	3rdparty/zlib-1.2.5/inflate.h	/^    DICT,       \/* waiting for inflateSetDictionary() call *\/$/;"	e	enum:__anon75
DICTID	3rdparty/zlib-1.2.5/inflate.h	/^    DICTID,     \/* i: waiting for dictionary check value *\/$/;"	e	enum:__anon75
DIST	3rdparty/zlib-1.2.5/inflate.h	/^            DIST,       \/* i: waiting for distance code *\/$/;"	e	enum:__anon75
DISTEXT	3rdparty/zlib-1.2.5/inflate.h	/^            DISTEXT,    \/* i: waiting for distance extra bits *\/$/;"	e	enum:__anon75
DISTS	3rdparty/zlib-1.2.5/inftrees.h	/^    DISTS$/;"	e	enum:__anon77
DIST_CODE_LEN	3rdparty/zlib-1.2.5/trees.c	/^#define DIST_CODE_LEN /;"	d	file:
DO1	3rdparty/zlib-1.2.5/adler32.c	/^#define DO1(/;"	d	file:
DO1	3rdparty/zlib-1.2.5/crc32.c	/^#define DO1 /;"	d	file:
DO16	3rdparty/zlib-1.2.5/adler32.c	/^#define DO16(/;"	d	file:
DO2	3rdparty/zlib-1.2.5/adler32.c	/^#define DO2(/;"	d	file:
DO4	3rdparty/zlib-1.2.5/adler32.c	/^#define DO4(/;"	d	file:
DO8	3rdparty/zlib-1.2.5/adler32.c	/^#define DO8(/;"	d	file:
DO8	3rdparty/zlib-1.2.5/crc32.c	/^#define DO8 /;"	d	file:
DOBIG32	3rdparty/zlib-1.2.5/crc32.c	/^#define DOBIG32 /;"	d	file:
DOBIG4	3rdparty/zlib-1.2.5/crc32.c	/^#define DOBIG4 /;"	d	file:
DOLIT32	3rdparty/zlib-1.2.5/crc32.c	/^#define DOLIT32 /;"	d	file:
DOLIT4	3rdparty/zlib-1.2.5/crc32.c	/^#define DOLIT4 /;"	d	file:
DONE	3rdparty/zlib-1.2.5/inflate.h	/^    DONE,       \/* finished check, done -- remain here until reset *\/$/;"	e	enum:__anon75
DONT_STORE_PROP	tools/ply.c	/^#define DONT_STORE_PROP /;"	d	file:
DROPBITS	3rdparty/zlib-1.2.5/infback.c	/^#define DROPBITS(/;"	d	file:
DROPBITS	3rdparty/zlib-1.2.5/inflate.c	/^#define DROPBITS(/;"	d	file:
DYNAMIC_CRC_TABLE	3rdparty/zlib-1.2.5/crc32.c	/^#    define DYNAMIC_CRC_TABLE$/;"	d	file:
DYN_TREES	3rdparty/zlib-1.2.5/zutil.h	/^#define DYN_TREES /;"	d
D_CODES	3rdparty/zlib-1.2.5/deflate.h	/^#define D_CODES /;"	d
Dad	3rdparty/zlib-1.2.5/deflate.h	/^#define Dad /;"	d
Data	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^TaskGroup::Data::Data (): isEmpty (1), numPending (0)$/;"	f	class:IlmThread::TaskGroup::Data
Data	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^ThreadPool::Data::Data (): numTasks (0), numThreads (0), stopping (false)$/;"	f	class:IlmThread::ThreadPool::Data
Data	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^struct TaskGroup::Data$/;"	s	class:IlmThread::TaskGroup	file:
Data	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^struct ThreadPool::Data$/;"	s	class:IlmThread::ThreadPool	file:
Data	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesInputFile::Data::Data ():$/;"	f	class:Imf::AcesInputFile::Data
Data	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesOutputFile::Data::Data ():$/;"	f	class:Imf::AcesOutputFile::Data
Data	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^class AcesInputFile::Data$/;"	c	class:Imf::AcesInputFile	file:
Data	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^class AcesOutputFile::Data$/;"	c	class:Imf::AcesOutputFile	file:
Data	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^InputFile::Data::Data (bool del, int numThreads):$/;"	f	class:Imf::InputFile::Data
Data	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^struct InputFile::Data: public Mutex$/;"	s	class:Imf::InputFile	file:
Data	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^OutputFile::Data::Data (bool deleteStream, int numThreads):$/;"	f	class:Imf::OutputFile::Data
Data	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^struct OutputFile::Data: public Mutex$/;"	s	class:Imf::OutputFile	file:
Data	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^ScanLineInputFile::Data::Data (IStream *is, int numThreads):$/;"	f	class:Imf::ScanLineInputFile::Data
Data	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^struct ScanLineInputFile::Data: public Mutex$/;"	s	class:Imf::ScanLineInputFile	file:
Data	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::Data::Data (bool del, int numThreads):$/;"	f	class:Imf::TiledInputFile::Data
Data	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^struct TiledInputFile::Data: public Mutex$/;"	s	class:Imf::TiledInputFile	file:
Data	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::Data::Data (bool del, int numThreads):$/;"	f	class:Imf::TiledOutputFile::Data
Data	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^struct TiledOutputFile::Data: public Mutex$/;"	s	class:Imf::TiledOutputFile	file:
DecoderState	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	DecoderState(/;"	d	file:
DecoderState	3rdparty/tiff-3.9.4/tif_luv.c	/^#define	DecoderState(/;"	d	file:
DecoderState	3rdparty/tiff-3.9.4/tif_lzw.c	/^#define	DecoderState(/;"	d	file:
DecoderState	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^#define	DecoderState(/;"	d	file:
DecoderState	3rdparty/tiff-3.9.4/tif_zip.c	/^#define	DecoderState(/;"	d	file:
Decompose	core/transform.cpp	/^void AnimatedTransform::Decompose(const Matrix4x4 &m, Vector *T,$/;"	f	class:AnimatedTransform
Default	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^	Default	= XYZ$/;"	e	enum:Imath::Euler::Order
Degrees	core/pbrt.h	/^inline float Degrees(float rad) {$/;"	f
Density	volumes/exponential.h	/^    float Density(const Point &Pobj) const {$/;"	f	class:ExponentialDensity
Density	volumes/volumegrid.cpp	/^float VolumeGridDensity::Density(const Point &Pobj) const {$/;"	f	class:VolumeGridDensity
DensityRegion	core/volume.h	/^    DensityRegion(const Spectrum &sa, const Spectrum &ss, float gg,$/;"	f	class:DensityRegion
DensityRegion	core/volume.h	/^class DensityRegion : public VolumeRegion {$/;"	c
DepthToZ	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^long Frustum<T>::DepthToZ(T depth,long zmin,long zmax) const$/;"	f	class:Imath::Frustum
Destroy	core/parallel.cpp	/^void Mutex::Destroy(Mutex *m) {$/;"	f	class:Mutex
Destroy	core/parallel.cpp	/^void RWMutex::Destroy(RWMutex *m) {$/;"	f	class:RWMutex
DifferentialGeometry	core/diffgeom.cpp	/^DifferentialGeometry::DifferentialGeometry(const Point &P,$/;"	f	class:DifferentialGeometry
DifferentialGeometry	core/diffgeom.h	/^    DifferentialGeometry() { $/;"	f	struct:DifferentialGeometry
DifferentialGeometry	core/diffgeom.h	/^struct DifferentialGeometry {$/;"	s
DiffuseAreaLight	lights/diffuse.cpp	/^DiffuseAreaLight::DiffuseAreaLight(const Transform &light2world,$/;"	f	class:DiffuseAreaLight
DiffuseAreaLight	lights/diffuse.h	/^class DiffuseAreaLight : public AreaLight {$/;"	c
DiffusePRTIntegrator	integrators/diffuseprt.cpp	/^DiffusePRTIntegrator::DiffusePRTIntegrator(int lm, int ns)$/;"	f	class:DiffusePRTIntegrator
DiffusePRTIntegrator	integrators/diffuseprt.h	/^class DiffusePRTIntegrator : public SurfaceIntegrator {$/;"	c
DiffusionReflectance	integrators/dipolesubsurface.cpp	/^    DiffusionReflectance(const Spectrum &sigma_a, const Spectrum &sigmap_s,$/;"	f	struct:DiffusionReflectance
DiffusionReflectance	integrators/dipolesubsurface.cpp	/^struct DiffusionReflectance {$/;"	s	file:
DipoleSubsurfaceIntegrator	integrators/dipolesubsurface.h	/^    DipoleSubsurfaceIntegrator(int mdepth, float merror, float mindist,$/;"	f	class:DipoleSubsurfaceIntegrator
DipoleSubsurfaceIntegrator	integrators/dipolesubsurface.h	/^class DipoleSubsurfaceIntegrator : public SurfaceIntegrator {$/;"	c
DirectLightingIntegrator	integrators/directlighting.cpp	/^DirectLightingIntegrator::DirectLightingIntegrator(LightStrategy st, int md) {$/;"	f	class:DirectLightingIntegrator
DirectLightingIntegrator	integrators/directlighting.h	/^class DirectLightingIntegrator : public SurfaceIntegrator {$/;"	c
DirectoryContaining	core/fileutil.cpp	/^string DirectoryContaining(const string &filename)$/;"	f
Disk	shapes/disk.cpp	/^Disk::Disk(const Transform *o2w, const Transform *w2o, bool ro,$/;"	f	class:Disk
Disk	shapes/disk.h	/^class Disk : public Shape {$/;"	c
Distance	core/geometry.h	/^inline float Distance(const Point &p1, const Point &p2) {$/;"	f
DistanceSquared	core/geometry.h	/^inline float DistanceSquared(const Point &p1, const Point &p2) {$/;"	f
DistantLight	lights/distant.cpp	/^DistantLight::DistantLight(const Transform &light2world,$/;"	f	class:DistantLight
DistantLight	lights/distant.h	/^class DistantLight : public Light {$/;"	c
Distribution1D	core/montecarlo.h	/^    Distribution1D(const float *f, int n) {$/;"	f	struct:Distribution1D
Distribution1D	core/montecarlo.h	/^struct Distribution1D {$/;"	s
Distribution2D	core/montecarlo.cpp	/^Distribution2D::Distribution2D(const float *func, int nu, int nv) {$/;"	f	class:Distribution2D
Distribution2D	core/montecarlo.h	/^struct Distribution2D {$/;"	s
Done	core/progressreporter.cpp	/^void ProgressReporter::Done() {$/;"	f	class:ProgressReporter
Dot	core/geometry.h	/^inline float Dot(const Normal &n1, const Normal &n2) {$/;"	f
Dot	core/geometry.h	/^inline float Dot(const Normal &n1, const Vector &v2) {$/;"	f
Dot	core/geometry.h	/^inline float Dot(const Vector &v1, const Normal &n2) {$/;"	f
Dot	core/geometry.h	/^inline float Dot(const Vector &v1, const Vector &v2) {$/;"	f
Dot	core/quaternion.h	/^inline float Dot(const Quaternion &q1, const Quaternion &q2) {$/;"	f
DotsTexture	textures/dots.h	/^    DotsTexture(TextureMapping2D *m, Reference<Texture<T> > t1,$/;"	f	class:DotsTexture
DotsTexture	textures/dots.h	/^template <typename T> class DotsTexture : public Texture<T> {$/;"	c
DoubleAttribute	3rdparty/openexr-1.7.0/ImfDoubleAttribute.h	/^typedef TypedAttribute<double> DoubleAttribute;$/;"	t	namespace:Imf
DowngradeToRead	core/parallel.cpp	/^void RWMutexLock::DowngradeToRead() {$/;"	f	class:RWMutexLock
DumpModeDecode	3rdparty/tiff-3.9.4/tif_dumpmode.c	/^DumpModeDecode(TIFF* tif, tidata_t buf, tsize_t cc, tsample_t s)$/;"	f	file:
DumpModeEncode	3rdparty/tiff-3.9.4/tif_dumpmode.c	/^DumpModeEncode(TIFF* tif, tidata_t pp, tsize_t cc, tsample_t s)$/;"	f	file:
DumpModeSeek	3rdparty/tiff-3.9.4/tif_dumpmode.c	/^DumpModeSeek(TIFF* tif, uint32 nrows)$/;"	f	file:
Duplicate	core/sampler.cpp	/^Sample *Sample::Duplicate(int count) const {$/;"	f	class:Sample
E	integrators/dipolesubsurface.cpp	/^    Spectrum E;$/;"	m	struct:SubsurfaceOctreeNode	file:
E	integrators/dipolesubsurface.h	/^    Spectrum E;$/;"	m	struct:IrradiancePoint
E	integrators/irradiancecache.cpp	/^    Spectrum E;$/;"	m	struct:IrradProcess	file:
E	integrators/irradiancecache.cpp	/^    Spectrum E;$/;"	m	struct:IrradianceSample	file:
ECHO	core/pbrtlex.cpp	/^#define ECHO /;"	d	file:
END	accelerators/kdtreeaccel.cpp	/^    enum { START, END } type;$/;"	e	enum:BoundEdge::__anon81	file:
ENDTIME	core/pbrtparse.cpp	/^     ENDTIME = 273,$/;"	e	enum:yytokentype	file:
ENDTIME	core/pbrtparse.hh	/^     ENDTIME = 273,$/;"	e	enum:yytokentype
END_BLOCK	3rdparty/zlib-1.2.5/trees.c	/^#define END_BLOCK /;"	d	file:
END_TRANSFORM_BITS	core/api.cpp	/^#define END_TRANSFORM_BITS /;"	d	file:
ENOUGH	3rdparty/zlib-1.2.5/inftrees.h	/^#define ENOUGH /;"	d
ENOUGH_DISTS	3rdparty/zlib-1.2.5/inftrees.h	/^#define ENOUGH_DISTS /;"	d
ENOUGH_LENS	3rdparty/zlib-1.2.5/inftrees.h	/^#define ENOUGH_LENS /;"	d
ENVMAP_CUBE	3rdparty/openexr-1.7.0/ImfEnvmap.h	/^    ENVMAP_CUBE = 1,		\/\/ Cube map$/;"	e	enum:Imf::Envmap
ENVMAP_LATLONG	3rdparty/openexr-1.7.0/ImfEnvmap.h	/^    ENVMAP_LATLONG = 0,		\/\/ Latitude-longitude environment map$/;"	e	enum:Imf::Envmap
EOB_ACT_CONTINUE_SCAN	core/pbrtlex.cpp	/^#define EOB_ACT_CONTINUE_SCAN /;"	d	file:
EOB_ACT_END_OF_FILE	core/pbrtlex.cpp	/^#define EOB_ACT_END_OF_FILE /;"	d	file:
EOB_ACT_LAST_MATCH	core/pbrtlex.cpp	/^#define EOB_ACT_LAST_MATCH /;"	d	file:
EOL	3rdparty/tiff-3.9.4/t4.h	/^#define	EOL	/;"	d
EOLH	3rdparty/tiff-3.9.4/mkg3states.c	/^static struct proto EOLH[] = {$/;"	v	typeref:struct:proto	file:
EOLV	3rdparty/tiff-3.9.4/mkg3states.c	/^static struct proto EOLV[]  = {$/;"	v	typeref:struct:proto	file:
EOLcnt	3rdparty/tiff-3.9.4/tif_fax3.c	/^	int	EOLcnt;			\/* count of EOL codes recognized *\/$/;"	m	struct:__anon45	file:
EPhoton	integrators/photonmap.cpp	/^Spectrum EPhoton(KdTree<Photon> *map, int count, int nLookup,$/;"	f
EQUAL	3rdparty/zlib-1.2.5/deflate.c	/^#define EQUAL /;"	d	file:
ERR_MSG	3rdparty/zlib-1.2.5/zutil.h	/^#define ERR_MSG(/;"	d
ERR_RETURN	3rdparty/zlib-1.2.5/zutil.h	/^#define ERR_RETURN(/;"	d
EWA	core/mipmap.h	/^T MIPMap<T>::EWA(uint32_t level, float s, float t, float ds0, float dt0,$/;"	f	class:MIPMap
EXIFTAG_APERTUREVALUE	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_APERTUREVALUE	/;"	d
EXIFTAG_BRIGHTNESSVALUE	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_BRIGHTNESSVALUE	/;"	d
EXIFTAG_CFAPATTERN	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_CFAPATTERN	/;"	d
EXIFTAG_COLORSPACE	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_COLORSPACE	/;"	d
EXIFTAG_COMPONENTSCONFIGURATION	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_COMPONENTSCONFIGURATION	/;"	d
EXIFTAG_COMPRESSEDBITSPERPIXEL	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_COMPRESSEDBITSPERPIXEL	/;"	d
EXIFTAG_CONTRAST	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_CONTRAST	/;"	d
EXIFTAG_CUSTOMRENDERED	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_CUSTOMRENDERED	/;"	d
EXIFTAG_DATETIMEDIGITIZED	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_DATETIMEDIGITIZED	/;"	d
EXIFTAG_DATETIMEORIGINAL	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_DATETIMEORIGINAL	/;"	d
EXIFTAG_DEVICESETTINGDESCRIPTION	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_DEVICESETTINGDESCRIPTION /;"	d
EXIFTAG_DIGITALZOOMRATIO	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_DIGITALZOOMRATIO	/;"	d
EXIFTAG_EXIFVERSION	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_EXIFVERSION	/;"	d
EXIFTAG_EXPOSUREBIASVALUE	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_EXPOSUREBIASVALUE	/;"	d
EXIFTAG_EXPOSUREINDEX	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_EXPOSUREINDEX	/;"	d
EXIFTAG_EXPOSUREMODE	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_EXPOSUREMODE	/;"	d
EXIFTAG_EXPOSUREPROGRAM	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_EXPOSUREPROGRAM	/;"	d
EXIFTAG_EXPOSURETIME	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_EXPOSURETIME	/;"	d
EXIFTAG_FILESOURCE	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_FILESOURCE	/;"	d
EXIFTAG_FLASH	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_FLASH	/;"	d
EXIFTAG_FLASHENERGY	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_FLASHENERGY	/;"	d
EXIFTAG_FLASHPIXVERSION	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_FLASHPIXVERSION	/;"	d
EXIFTAG_FNUMBER	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_FNUMBER	/;"	d
EXIFTAG_FOCALLENGTH	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_FOCALLENGTH	/;"	d
EXIFTAG_FOCALLENGTHIN35MMFILM	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_FOCALLENGTHIN35MMFILM	/;"	d
EXIFTAG_FOCALPLANERESOLUTIONUNIT	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_FOCALPLANERESOLUTIONUNIT /;"	d
EXIFTAG_FOCALPLANEXRESOLUTION	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_FOCALPLANEXRESOLUTION	/;"	d
EXIFTAG_FOCALPLANEYRESOLUTION	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_FOCALPLANEYRESOLUTION	/;"	d
EXIFTAG_GAINCONTROL	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_GAINCONTROL	/;"	d
EXIFTAG_IMAGEUNIQUEID	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_IMAGEUNIQUEID	/;"	d
EXIFTAG_ISOSPEEDRATINGS	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_ISOSPEEDRATINGS	/;"	d
EXIFTAG_LIGHTSOURCE	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_LIGHTSOURCE	/;"	d
EXIFTAG_MAKERNOTE	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_MAKERNOTE	/;"	d
EXIFTAG_MAXAPERTUREVALUE	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_MAXAPERTUREVALUE	/;"	d
EXIFTAG_METERINGMODE	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_METERINGMODE	/;"	d
EXIFTAG_OECF	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_OECF	/;"	d
EXIFTAG_PIXELXDIMENSION	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_PIXELXDIMENSION	/;"	d
EXIFTAG_PIXELYDIMENSION	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_PIXELYDIMENSION	/;"	d
EXIFTAG_RELATEDSOUNDFILE	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_RELATEDSOUNDFILE	/;"	d
EXIFTAG_SATURATION	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_SATURATION	/;"	d
EXIFTAG_SCENECAPTURETYPE	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_SCENECAPTURETYPE	/;"	d
EXIFTAG_SCENETYPE	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_SCENETYPE	/;"	d
EXIFTAG_SENSINGMETHOD	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_SENSINGMETHOD	/;"	d
EXIFTAG_SHARPNESS	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_SHARPNESS	/;"	d
EXIFTAG_SHUTTERSPEEDVALUE	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_SHUTTERSPEEDVALUE	/;"	d
EXIFTAG_SPATIALFREQUENCYRESPONSE	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_SPATIALFREQUENCYRESPONSE /;"	d
EXIFTAG_SPECTRALSENSITIVITY	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_SPECTRALSENSITIVITY	/;"	d
EXIFTAG_SUBJECTAREA	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_SUBJECTAREA	/;"	d
EXIFTAG_SUBJECTDISTANCE	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_SUBJECTDISTANCE	/;"	d
EXIFTAG_SUBJECTDISTANCERANGE	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_SUBJECTDISTANCERANGE	/;"	d
EXIFTAG_SUBJECTLOCATION	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_SUBJECTLOCATION	/;"	d
EXIFTAG_SUBSECTIME	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_SUBSECTIME	/;"	d
EXIFTAG_SUBSECTIMEDIGITIZED	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_SUBSECTIMEDIGITIZED	/;"	d
EXIFTAG_SUBSECTIMEORIGINAL	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_SUBSECTIMEORIGINAL	/;"	d
EXIFTAG_USERCOMMENT	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_USERCOMMENT	/;"	d
EXIFTAG_WHITEBALANCE	3rdparty/tiff-3.9.4/tiff.h	/^#define EXIFTAG_WHITEBALANCE	/;"	d
EXIT_SUCCESS	core/pbrtparse.cpp	/^#      define EXIT_SUCCESS /;"	d	file:
EXIT_SUCCESS	core/pbrtparse.cpp	/^#    define EXIT_SUCCESS /;"	d	file:
EXLEN	3rdparty/zlib-1.2.5/inflate.h	/^    EXLEN,      \/* i: waiting for extra length (gzip) *\/$/;"	e	enum:__anon75
EXPAND1D	3rdparty/tiff-3.9.4/tif_fax3.h	/^#define EXPAND1D(/;"	d
EXPAND2D	3rdparty/tiff-3.9.4/tif_fax3.h	/^#define EXPAND2D(/;"	d
EXPORT_CONST	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.cpp	/^    #define EXPORT_CONST /;"	d	file:
EXRLIBS	Makefile	/^EXRLIBS=$(EXR_LIBDIR) -Bstatic -lIex -lIlmImf -lIlmThread -lImath -lIex -lHalf -Bdynamic$/;"	m
EXR_INCLUDES	Makefile	/^EXR_INCLUDES=-I\/usr\/local\/include\/OpenEXR -I\/usr\/include\/OpenEXR -I\/opt\/local\/include\/OpenEXR $/;"	m
EXR_LIBDIR	Makefile	/^EXR_LIBDIR=-L\/usr\/local\/lib -L\/opt\/local\/lib$/;"	m
EXR_VERSION	3rdparty/openexr-1.7.0/ImfVersion.h	/^const int EXR_VERSION		= 2;$/;"	m	namespace:Imf
EXTERN_TEMPLATE	3rdparty/openexr-1.7.0/ImfAttribute.h	/^    #undef EXTERN_TEMPLATE$/;"	d
EXTRA	3rdparty/zlib-1.2.5/inflate.h	/^    EXTRA,      \/* i: waiting for extra bytes (gzip) *\/$/;"	e	enum:__anon75
EXTRASAMPLE_ASSOCALPHA	3rdparty/tiff-3.9.4/tiff.h	/^#define	    EXTRASAMPLE_ASSOCALPHA	/;"	d
EXTRASAMPLE_COREL_UNASSALPHA	3rdparty/tiff-3.9.4/tif_dir.c	/^#define EXTRASAMPLE_COREL_UNASSALPHA /;"	d	file:
EXTRASAMPLE_COREL_UNASSALPHA	3rdparty/tiff-3.9.4/tif_dir.c	/^#undef EXTRASAMPLE_COREL_UNASSALPHA$/;"	d	file:
EXTRASAMPLE_UNASSALPHA	3rdparty/tiff-3.9.4/tiff.h	/^#define	    EXTRASAMPLE_UNASSALPHA	/;"	d
EXTRASAMPLE_UNSPECIFIED	3rdparty/tiff-3.9.4/tiff.h	/^#define	    EXTRASAMPLE_UNSPECIFIED	/;"	d
EXTRA_STATE	3rdparty/zlib-1.2.5/deflate.h	/^#define EXTRA_STATE /;"	d
EmissionIntegrator	integrators/emission.h	/^    EmissionIntegrator(float ss) { stepSize = ss; }$/;"	f	class:EmissionIntegrator
EmissionIntegrator	integrators/emission.h	/^class EmissionIntegrator : public VolumeIntegrator {$/;"	c
EncoderState	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	EncoderState(/;"	d	file:
EncoderState	3rdparty/tiff-3.9.4/tif_luv.c	/^#define	EncoderState(/;"	d	file:
EncoderState	3rdparty/tiff-3.9.4/tif_lzw.c	/^#define	EncoderState(/;"	d	file:
EncoderState	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^#define	EncoderState(/;"	d	file:
EncoderState	3rdparty/tiff-3.9.4/tif_zip.c	/^#define	EncoderState(/;"	d	file:
EndOfData	3rdparty/tiff-3.9.4/tif_fax3.h	/^#define EndOfData(/;"	d
EndType	tools/ply.h	/^#define EndType /;"	d
EnqueueTasks	core/parallel.cpp	/^void EnqueueTasks(const vector<Task *> &tasks) {$/;"	f
EnvironmentCamera	cameras/environment.h	/^    EnvironmentCamera(const AnimatedTransform &cam2world, float sopen,$/;"	f	class:EnvironmentCamera
EnvironmentCamera	cameras/environment.h	/^class EnvironmentCamera : public Camera {$/;"	c
Envmap	3rdparty/openexr-1.7.0/ImfEnvmap.h	/^enum Envmap$/;"	g	namespace:Imf
EnvmapAttribute	3rdparty/openexr-1.7.0/ImfEnvmapAttribute.h	/^typedef TypedAttribute<Envmap> EnvmapAttribute;$/;"	t	namespace:Imf
EraseBool	core/paramset.cpp	/^bool ParamSet::EraseBool(const string &n) {$/;"	f	class:ParamSet
EraseFloat	core/paramset.cpp	/^bool ParamSet::EraseFloat(const string &n) {$/;"	f	class:ParamSet
EraseInt	core/paramset.cpp	/^bool ParamSet::EraseInt(const string &n) {$/;"	f	class:ParamSet
EraseNormal	core/paramset.cpp	/^bool ParamSet::EraseNormal(const string &n) {$/;"	f	class:ParamSet
ErasePoint	core/paramset.cpp	/^bool ParamSet::ErasePoint(const string &n) {$/;"	f	class:ParamSet
EraseSpectrum	core/paramset.cpp	/^bool ParamSet::EraseSpectrum(const string &n) {$/;"	f	class:ParamSet
EraseString	core/paramset.cpp	/^bool ParamSet::EraseString(const string &n) {$/;"	f	class:ParamSet
EraseTexture	core/paramset.cpp	/^bool ParamSet::EraseTexture(const string &n) {$/;"	f	class:ParamSet
EraseVector	core/paramset.cpp	/^bool ParamSet::EraseVector(const string &n) {$/;"	f	class:ParamSet
Error	core/error.cpp	/^void Error(const char *format, ...) {$/;"	f
EstimateDirect	core/integrator.cpp	/^Spectrum EstimateDirect(const Scene *scene, const Renderer *renderer,$/;"	f
EstimateStripByteCounts	3rdparty/tiff-3.9.4/tif_dirread.c	/^EstimateStripByteCounts(TIFF* tif, TIFFDirEntry* dir, uint16 dircount)$/;"	f	file:
Euler	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^Euler<T>::Euler() :$/;"	f	class:Imath::Euler
Euler	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^Euler<T>::Euler(typename Euler<T>::Order p) :$/;"	f	class:Imath::Euler
Euler	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^class Euler : public Vec3<T>$/;"	c	namespace:Imath
Euler	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^inline Euler<T>::Euler( T xi, T yi, T zi, $/;"	f	class:Imath::Euler
Euler	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^inline Euler<T>::Euler( const Matrix33<T> &M, typename Euler::Order p )$/;"	f	class:Imath::Euler
Euler	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^inline Euler<T>::Euler( const Matrix44<T> &M, typename Euler::Order p )$/;"	f	class:Imath::Euler
Euler	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^inline Euler<T>::Euler( const Vec3<T> &v, $/;"	f	class:Imath::Euler
Euler	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^inline Euler<T>::Euler(const Euler<T> &euler)$/;"	f	class:Imath::Euler
Euler	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^inline Euler<T>::Euler(const Euler<T> &euler,Order p)$/;"	f	class:Imath::Euler
Eulerd	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^typedef Euler<double>	Eulerd;$/;"	t	namespace:Imath
Eulerf	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^typedef Euler<float>	Eulerf;$/;"	t	namespace:Imath
Evaluate	core/reflection.cpp	/^Spectrum FresnelConductor::Evaluate(float cosi) const {$/;"	f	class:FresnelConductor
Evaluate	core/reflection.cpp	/^Spectrum FresnelDielectric::Evaluate(float cosi) const {$/;"	f	class:FresnelDielectric
Evaluate	core/reflection.h	/^    Spectrum Evaluate(float) const { return Spectrum(1.); }$/;"	f	class:FresnelNoOp
Evaluate	filters/box.cpp	/^float BoxFilter::Evaluate(float x, float y) const {$/;"	f	class:BoxFilter
Evaluate	filters/gaussian.cpp	/^float GaussianFilter::Evaluate(float x, float y) const {$/;"	f	class:GaussianFilter
Evaluate	filters/mitchell.cpp	/^float MitchellFilter::Evaluate(float x, float y) const {$/;"	f	class:MitchellFilter
Evaluate	filters/sinc.cpp	/^float LanczosSincFilter::Evaluate(float x, float y) const {$/;"	f	class:LanczosSincFilter
Evaluate	filters/triangle.cpp	/^float TriangleFilter::Evaluate(float x, float y) const {$/;"	f	class:TriangleFilter
Evaluate	textures/bilerp.h	/^    T Evaluate(const DifferentialGeometry &dg) const {$/;"	f	class:BilerpTexture
Evaluate	textures/checkerboard.h	/^    T Evaluate(const DifferentialGeometry &dg) const {$/;"	f	class:Checkerboard2DTexture
Evaluate	textures/checkerboard.h	/^    T Evaluate(const DifferentialGeometry &dg) const {$/;"	f	class:Checkerboard3DTexture
Evaluate	textures/constant.h	/^    T Evaluate(const DifferentialGeometry &) const {$/;"	f	class:ConstantTexture
Evaluate	textures/dots.h	/^    T Evaluate(const DifferentialGeometry &dg) const {$/;"	f	class:DotsTexture
Evaluate	textures/fbm.h	/^    T Evaluate(const DifferentialGeometry &dg) const {$/;"	f	class:FBmTexture
Evaluate	textures/imagemap.cpp	/^             Treturn>::Evaluate(const DifferentialGeometry &dg) const {$/;"	f	class:ImageTexture
Evaluate	textures/marble.h	/^    Spectrum Evaluate(const DifferentialGeometry &dg) const {$/;"	f	class:MarbleTexture
Evaluate	textures/mix.h	/^    T Evaluate(const DifferentialGeometry &dg) const {$/;"	f	class:MixTexture
Evaluate	textures/scale.h	/^    T2 Evaluate(const DifferentialGeometry &dg) const {$/;"	f	class:ScaleTexture
Evaluate	textures/uv.h	/^    Spectrum Evaluate(const DifferentialGeometry &dg) const {$/;"	f	class:UVTexture
Evaluate	textures/windy.h	/^    T Evaluate(const DifferentialGeometry &dg) const {$/;"	f	class:WindyTexture
Evaluate	textures/wrinkled.h	/^    T Evaluate(const DifferentialGeometry &dg) const {$/;"	f	class:WrinkledTexture
Exp	core/spectrum.h	/^    friend CoefficientSpectrum Exp(const CoefficientSpectrum &s) {$/;"	f	class:CoefficientSpectrum
Expand	core/geometry.h	/^    void Expand(float delta) {$/;"	f	class:BBox
ExponentialDensity	volumes/exponential.h	/^    ExponentialDensity(const Spectrum &sa, const Spectrum &ss,$/;"	f	class:ExponentialDensity
ExponentialDensity	volumes/exponential.h	/^class ExponentialDensity : public DensityRegion {$/;"	c
Ext	3rdparty/tiff-3.9.4/mkg3states.c	/^static struct proto Ext[]  = {$/;"	v	typeref:struct:proto	file:
FALSE	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define FALSE /;"	d	file:
FALSE	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	FALSE	/;"	d
FAR	3rdparty/tiff-3.9.4/tif_jpeg.c	/^#undef FAR$/;"	d	file:
FAR	3rdparty/zlib-1.2.5/zconf.h	/^#      define FAR /;"	d
FAR	3rdparty/zlib-1.2.5/zconf.h	/^#      undef FAR$/;"	d
FAR	3rdparty/zlib-1.2.5/zconf.h	/^#  define FAR$/;"	d
FAXMODE_BYTEALIGN	3rdparty/tiff-3.9.4/tiff.h	/^#define	    FAXMODE_BYTEALIGN	/;"	d
FAXMODE_CLASSF	3rdparty/tiff-3.9.4/tiff.h	/^#define	    FAXMODE_CLASSF	/;"	d
FAXMODE_CLASSIC	3rdparty/tiff-3.9.4/tiff.h	/^#define	    FAXMODE_CLASSIC	/;"	d
FAXMODE_NOEOL	3rdparty/tiff-3.9.4/tiff.h	/^#define	    FAXMODE_NOEOL	/;"	d
FAXMODE_NORTC	3rdparty/tiff-3.9.4/tiff.h	/^#define	    FAXMODE_NORTC	/;"	d
FAXMODE_WORDALIGN	3rdparty/tiff-3.9.4/tiff.h	/^#define	    FAXMODE_WORDALIGN	/;"	d
FBm	core/texture.cpp	/^float FBm(const Point &P, const Vector &dpdx, const Vector &dpdy,$/;"	f
FBmTexture	textures/fbm.h	/^    FBmTexture(int oct, float roughness, TextureMapping3D *map)$/;"	f	class:FBmTexture
FBmTexture	textures/fbm.h	/^template <typename T> class FBmTexture : public Texture<T> {$/;"	c
FHeapCompare	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^struct FHeapCompare$/;"	s	namespace:Imf::__anon20	file:
FIELD_BADFAXLINES	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	FIELD_BADFAXLINES	/;"	d	file:
FIELD_BADFAXRUN	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	FIELD_BADFAXRUN	/;"	d	file:
FIELD_BITSPERSAMPLE	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_BITSPERSAMPLE	/;"	d
FIELD_CLEANFAXDATA	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	FIELD_CLEANFAXDATA	/;"	d	file:
FIELD_CODEC	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_CODEC	/;"	d
FIELD_COLORMAP	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_COLORMAP	/;"	d
FIELD_COMPRESSION	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_COMPRESSION	/;"	d
FIELD_CUSTOM	3rdparty/tiff-3.9.4/tiffio.h	/^#define FIELD_CUSTOM /;"	d
FIELD_EXTRASAMPLES	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_EXTRASAMPLES	/;"	d
FIELD_FAXDCS	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	FIELD_FAXDCS	/;"	d	file:
FIELD_FAXDCS	3rdparty/tiff-3.9.4/tif_jbig.c	/^#define FIELD_FAXDCS /;"	d	file:
FIELD_FAXDCS	3rdparty/tiff-3.9.4/tif_jpeg.c	/^#define	FIELD_FAXDCS	/;"	d	file:
FIELD_FILLORDER	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_FILLORDER	/;"	d
FIELD_HALFTONEHINTS	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_HALFTONEHINTS	/;"	d
FIELD_IGNORE	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_IGNORE	/;"	d
FIELD_IMAGEDEPTH	3rdparty/tiff-3.9.4/tif_dir.h	/^#define FIELD_IMAGEDEPTH	/;"	d
FIELD_IMAGEDIMENSIONS	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_IMAGEDIMENSIONS	/;"	d
FIELD_INKNAMES	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_INKNAMES	/;"	d
FIELD_JPEGTABLES	3rdparty/tiff-3.9.4/tif_jpeg.c	/^#define	FIELD_JPEGTABLES	/;"	d	file:
FIELD_LAST	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_LAST	/;"	d
FIELD_MAXSAMPLEVALUE	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_MAXSAMPLEVALUE	/;"	d
FIELD_MINSAMPLEVALUE	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_MINSAMPLEVALUE	/;"	d
FIELD_OJPEG_COUNT	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^#define FIELD_OJPEG_COUNT /;"	d	file:
FIELD_OJPEG_JPEGACTABLES	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^#define FIELD_OJPEG_JPEGACTABLES /;"	d	file:
FIELD_OJPEG_JPEGDCTABLES	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^#define FIELD_OJPEG_JPEGDCTABLES /;"	d	file:
FIELD_OJPEG_JPEGINTERCHANGEFORMAT	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^#define FIELD_OJPEG_JPEGINTERCHANGEFORMAT /;"	d	file:
FIELD_OJPEG_JPEGINTERCHANGEFORMATLENGTH	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^#define FIELD_OJPEG_JPEGINTERCHANGEFORMATLENGTH /;"	d	file:
FIELD_OJPEG_JPEGPROC	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^#define FIELD_OJPEG_JPEGPROC /;"	d	file:
FIELD_OJPEG_JPEGQTABLES	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^#define FIELD_OJPEG_JPEGQTABLES /;"	d	file:
FIELD_OJPEG_JPEGRESTARTINTERVAL	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^#define FIELD_OJPEG_JPEGRESTARTINTERVAL /;"	d	file:
FIELD_OPTIONS	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	FIELD_OPTIONS	/;"	d	file:
FIELD_ORIENTATION	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_ORIENTATION	/;"	d
FIELD_PAGENUMBER	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_PAGENUMBER	/;"	d
FIELD_PHOTOMETRIC	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_PHOTOMETRIC	/;"	d
FIELD_PLANARCONFIG	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_PLANARCONFIG	/;"	d
FIELD_POSITION	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_POSITION	/;"	d
FIELD_PREDICTOR	3rdparty/tiff-3.9.4/tif_predict.c	/^#define	FIELD_PREDICTOR	/;"	d	file:
FIELD_PSEUDO	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_PSEUDO	/;"	d
FIELD_RECVPARAMS	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	FIELD_RECVPARAMS	/;"	d	file:
FIELD_RECVPARAMS	3rdparty/tiff-3.9.4/tif_jbig.c	/^#define FIELD_RECVPARAMS /;"	d	file:
FIELD_RECVPARAMS	3rdparty/tiff-3.9.4/tif_jpeg.c	/^#define	FIELD_RECVPARAMS	/;"	d	file:
FIELD_RECVTIME	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	FIELD_RECVTIME	/;"	d	file:
FIELD_RECVTIME	3rdparty/tiff-3.9.4/tif_jbig.c	/^#define FIELD_RECVTIME /;"	d	file:
FIELD_RECVTIME	3rdparty/tiff-3.9.4/tif_jpeg.c	/^#define	FIELD_RECVTIME	/;"	d	file:
FIELD_REFBLACKWHITE	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_REFBLACKWHITE	/;"	d
FIELD_RESOLUTION	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_RESOLUTION	/;"	d
FIELD_RESOLUTIONUNIT	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_RESOLUTIONUNIT	/;"	d
FIELD_ROWSPERSTRIP	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_ROWSPERSTRIP	/;"	d
FIELD_SAMPLEFORMAT	3rdparty/tiff-3.9.4/tif_dir.h	/^#define FIELD_SAMPLEFORMAT	/;"	d
FIELD_SAMPLESPERPIXEL	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_SAMPLESPERPIXEL	/;"	d
FIELD_SETLONGS	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_SETLONGS	/;"	d
FIELD_SMAXSAMPLEVALUE	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_SMAXSAMPLEVALUE	/;"	d
FIELD_SMINSAMPLEVALUE	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_SMINSAMPLEVALUE	/;"	d
FIELD_STRIPBYTECOUNTS	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_STRIPBYTECOUNTS	/;"	d
FIELD_STRIPOFFSETS	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_STRIPOFFSETS	/;"	d
FIELD_SUBADDRESS	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	FIELD_SUBADDRESS	/;"	d	file:
FIELD_SUBADDRESS	3rdparty/tiff-3.9.4/tif_jbig.c	/^#define FIELD_SUBADDRESS /;"	d	file:
FIELD_SUBADDRESS	3rdparty/tiff-3.9.4/tif_jpeg.c	/^#define	FIELD_SUBADDRESS	/;"	d	file:
FIELD_SUBFILETYPE	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_SUBFILETYPE	/;"	d
FIELD_SUBIFD	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_SUBIFD	/;"	d
FIELD_THRESHHOLDING	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_THRESHHOLDING	/;"	d
FIELD_TILEDEPTH	3rdparty/tiff-3.9.4/tif_dir.h	/^#define FIELD_TILEDEPTH	/;"	d
FIELD_TILEDIMENSIONS	3rdparty/tiff-3.9.4/tif_dir.h	/^#define FIELD_TILEDIMENSIONS	/;"	d
FIELD_TRANSFERFUNCTION	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FIELD_TRANSFERFUNCTION	/;"	d
FIELD_YCBCRPOSITIONING	3rdparty/tiff-3.9.4/tif_dir.h	/^#define FIELD_YCBCRPOSITIONING	/;"	d
FIELD_YCBCRSUBSAMPLING	3rdparty/tiff-3.9.4/tif_dir.h	/^#define FIELD_YCBCRSUBSAMPLING	/;"	d
FILETYPE_MASK	3rdparty/tiff-3.9.4/tiff.h	/^#define	    FILETYPE_MASK	/;"	d
FILETYPE_PAGE	3rdparty/tiff-3.9.4/tiff.h	/^#define	    FILETYPE_PAGE	/;"	d
FILETYPE_REDUCEDIMAGE	3rdparty/tiff-3.9.4/tiff.h	/^#define	    FILETYPE_REDUCEDIMAGE	/;"	d
FILL	3rdparty/tiff-3.9.4/tif_fax3.c	/^# define FILL(/;"	d	file:
FILL	3rdparty/tiff-3.9.4/tif_fax3.c	/^#undef	FILL$/;"	d	file:
FILLORDER_LSB2MSB	3rdparty/tiff-3.9.4/tiff.h	/^#define	    FILLORDER_LSB2MSB	/;"	d
FILLORDER_MSB2LSB	3rdparty/tiff-3.9.4/tiff.h	/^#define	    FILLORDER_MSB2LSB	/;"	d
FILM	core/pbrtparse.cpp	/^     FILM = 274,$/;"	e	enum:yytokentype	file:
FILM	core/pbrtparse.hh	/^     FILM = 274,$/;"	e	enum:yytokentype
FILM24_PACKING	3rdparty/openexr-1.7.0/ImfTimeCode.h	/^	FILM24_PACKING		\/\/ packing for 24-frame film$/;"	e	enum:Imf::TimeCode::Packing
FILTER_TABLE_SIZE	film/image.cpp	/^#define FILTER_TABLE_SIZE /;"	d	file:
FINISH_STATE	3rdparty/zlib-1.2.5/deflate.h	/^#define FINISH_STATE /;"	d
FIVE_BITS	core/targa.c	/^            #define FIVE_BITS /;"	d	file:
FIVE_BITS	core/targa.c	/^            #undef FIVE_BITS$/;"	d	file:
FIX	3rdparty/tiff-3.9.4/tif_color.c	/^#define	FIX(/;"	d	file:
FIX	3rdparty/tiff-3.9.4/tif_color.c	/^#undef	FIX$/;"	d	file:
FLAGS	3rdparty/zlib-1.2.5/inflate.h	/^    FLAGS,      \/* i: waiting for method and flags (gzip) *\/$/;"	e	enum:__anon75
FLEXINT_H	core/pbrtlex.cpp	/^#define FLEXINT_H$/;"	d	file:
FLEX_BETA	core/pbrtlex.cpp	/^#define FLEX_BETA$/;"	d	file:
FLEX_SCANNER	core/pbrtlex.cpp	/^#define FLEX_SCANNER$/;"	d	file:
FLIP_HORIZONTALLY	3rdparty/tiff-3.9.4/tif_getimage.c	/^#define FLIP_HORIZONTALLY /;"	d	file:
FLIP_VERTICALLY	3rdparty/tiff-3.9.4/tif_getimage.c	/^#define FLIP_VERTICALLY /;"	d	file:
FLOAT	3rdparty/openexr-1.7.0/ImfPixelType.h	/^    FLOAT = 2,		\/\/ float (32 bit floating point)$/;"	e	enum:Imf::PixelType
FLUSH_BLOCK	3rdparty/zlib-1.2.5/deflate.c	/^#define FLUSH_BLOCK(/;"	d	file:
FLUSH_BLOCK_ONLY	3rdparty/zlib-1.2.5/deflate.c	/^#define FLUSH_BLOCK_ONLY(/;"	d	file:
FOR_ACTIVE_TRANSFORMS	core/api.cpp	/^#define FOR_ACTIVE_TRANSFORMS(/;"	d	file:
F_OPEN	3rdparty/zlib-1.2.5/zutil.h	/^#  define F_OPEN(/;"	d
Face	tools/ply2pbrt.c	/^typedef struct Face {$/;"	s	file:
Face	tools/ply2pbrt.c	/^} Face;$/;"	t	typeref:struct:Face	file:
Faceforward	core/geometry.h	/^inline Normal Faceforward(const Normal &n, const Normal &n2) {$/;"	f
Faceforward	core/geometry.h	/^inline Normal Faceforward(const Normal &n, const Vector &v) {$/;"	f
Faceforward	core/geometry.h	/^inline Vector Faceforward(const Vector &v, const Normal &n2) {$/;"	f
Faceforward	core/geometry.h	/^inline Vector Faceforward(const Vector &v, const Vector &v2) {$/;"	f
Falloff	lights/spot.cpp	/^float SpotLight::Falloff(const Vector &w) const {$/;"	f	class:SpotLight
Fax3BadLength	3rdparty/tiff-3.9.4/tif_fax3.c	/^Fax3BadLength(const char* module, TIFF* tif, uint32 line, uint32 a0, uint32 lastx)$/;"	f	file:
Fax3BaseState	3rdparty/tiff-3.9.4/tif_fax3.c	/^} Fax3BaseState;$/;"	t	typeref:struct:__anon43	file:
Fax3Cleanup	3rdparty/tiff-3.9.4/tif_fax3.c	/^Fax3Cleanup(TIFF* tif)$/;"	f	file:
Fax3Close	3rdparty/tiff-3.9.4/tif_fax3.c	/^Fax3Close(TIFF* tif)$/;"	f	file:
Fax3CodecState	3rdparty/tiff-3.9.4/tif_fax3.c	/^} Fax3CodecState;$/;"	t	typeref:struct:__anon45	file:
Fax3Decode1D	3rdparty/tiff-3.9.4/tif_fax3.c	/^Fax3Decode1D(TIFF* tif, tidata_t buf, tsize_t occ, tsample_t s)$/;"	f	file:
Fax3Decode2D	3rdparty/tiff-3.9.4/tif_fax3.c	/^Fax3Decode2D(TIFF* tif, tidata_t buf, tsize_t occ, tsample_t s)$/;"	f	file:
Fax3DecodeRLE	3rdparty/tiff-3.9.4/tif_fax3.c	/^Fax3DecodeRLE(TIFF* tif, tidata_t buf, tsize_t occ, tsample_t s)$/;"	f	file:
Fax3Encode	3rdparty/tiff-3.9.4/tif_fax3.c	/^Fax3Encode(TIFF* tif, tidata_t bp, tsize_t cc, tsample_t s)$/;"	f	file:
Fax3Encode1DRow	3rdparty/tiff-3.9.4/tif_fax3.c	/^Fax3Encode1DRow(TIFF* tif, unsigned char* bp, uint32 bits)$/;"	f	file:
Fax3Encode2DRow	3rdparty/tiff-3.9.4/tif_fax3.c	/^Fax3Encode2DRow(TIFF* tif, unsigned char* bp, unsigned char* rp, uint32 bits)$/;"	f	file:
Fax3Extension	3rdparty/tiff-3.9.4/tif_fax3.c	/^Fax3Extension(const char* module, TIFF* tif, uint32 line, uint32 a0)$/;"	f	file:
Fax3FlushBits	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	Fax3FlushBits(/;"	d	file:
Fax3PostEncode	3rdparty/tiff-3.9.4/tif_fax3.c	/^Fax3PostEncode(TIFF* tif)$/;"	f	file:
Fax3PreDecode	3rdparty/tiff-3.9.4/tif_fax3.c	/^Fax3PreDecode(TIFF* tif, tsample_t s)$/;"	f	file:
Fax3PreEncode	3rdparty/tiff-3.9.4/tif_fax3.c	/^Fax3PreEncode(TIFF* tif, tsample_t s)$/;"	f	file:
Fax3PrematureEOF	3rdparty/tiff-3.9.4/tif_fax3.c	/^Fax3PrematureEOF(const char* module, TIFF* tif, uint32 line, uint32 a0)$/;"	f	file:
Fax3PrintDir	3rdparty/tiff-3.9.4/tif_fax3.c	/^Fax3PrintDir(TIFF* tif, FILE* fd, long flags)$/;"	f	file:
Fax3PutBits	3rdparty/tiff-3.9.4/tif_fax3.c	/^Fax3PutBits(TIFF* tif, unsigned int bits, unsigned int length)$/;"	f	file:
Fax3PutEOL	3rdparty/tiff-3.9.4/tif_fax3.c	/^Fax3PutEOL(TIFF* tif)$/;"	f	file:
Fax3SetupState	3rdparty/tiff-3.9.4/tif_fax3.c	/^Fax3SetupState(TIFF* tif)$/;"	f	file:
Fax3State	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	Fax3State(/;"	d	file:
Fax3Unexpected	3rdparty/tiff-3.9.4/tif_fax3.c	/^Fax3Unexpected(const char* module, TIFF* tif, uint32 line, uint32 a0)$/;"	f	file:
Fax3VGetField	3rdparty/tiff-3.9.4/tif_fax3.c	/^Fax3VGetField(TIFF* tif, ttag_t tag, va_list ap)$/;"	f	file:
Fax3VSetField	3rdparty/tiff-3.9.4/tif_fax3.c	/^Fax3VSetField(TIFF* tif, ttag_t tag, va_list ap)$/;"	f	file:
Fax4Decode	3rdparty/tiff-3.9.4/tif_fax3.c	/^Fax4Decode(TIFF* tif, tidata_t buf, tsize_t occ, tsample_t s)$/;"	f	file:
Fax4Encode	3rdparty/tiff-3.9.4/tif_fax3.c	/^Fax4Encode(TIFF* tif, tidata_t bp, tsize_t cc, tsample_t s)$/;"	f	file:
Fax4PostEncode	3rdparty/tiff-3.9.4/tif_fax3.c	/^Fax4PostEncode(TIFF* tif)$/;"	f	file:
Fdr	core/reflection.h	/^inline float Fdr(float eta) {$/;"	f
FieldSet	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	FieldSet(/;"	d
FillTable	3rdparty/tiff-3.9.4/mkg3states.c	/^FillTable(TIFFFaxTabEnt *T, int Size, struct proto *P, int State)$/;"	f	file:
Film	core/film.h	/^    Film(int xres, int yres)$/;"	f	class:Film
Film	core/film.h	/^class Film {$/;"	c
FilmName	core/api.cpp	/^    string FilmName;$/;"	m	struct:RenderOptions	file:
FilmParams	core/api.cpp	/^    ParamSet FilmParams;$/;"	m	struct:RenderOptions	file:
Filter	core/filter.h	/^    Filter(float xw, float yw)$/;"	f	class:Filter
Filter	core/filter.h	/^class Filter {$/;"	c
FilterName	core/api.cpp	/^    string FilterName;$/;"	m	struct:RenderOptions	file:
FilterParams	core/api.cpp	/^    ParamSet FilterParams;$/;"	m	struct:RenderOptions	file:
FindBool	core/paramset.cpp	/^const bool *ParamSet::FindBool(const string &name, int *nItems) const {$/;"	f	class:ParamSet
FindBool	core/paramset.h	/^    bool FindBool(const string &n, bool d) const {$/;"	f	class:TextureParams
FindFilename	core/paramset.h	/^    string FindFilename(const string &n, const string &d = "") const {$/;"	f	class:TextureParams
FindFloat	core/paramset.cpp	/^const float *ParamSet::FindFloat(const string &name, int *n) const {$/;"	f	class:ParamSet
FindFloat	core/paramset.h	/^    float FindFloat(const string &n, float d) const {$/;"	f	class:TextureParams
FindInt	core/paramset.cpp	/^const int *ParamSet::FindInt(const string &name, int *nItems) const {$/;"	f	class:ParamSet
FindInt	core/paramset.h	/^    int FindInt(const string &n, int d) const {$/;"	f	class:TextureParams
FindNormal	core/paramset.cpp	/^const Normal *ParamSet::FindNormal(const string &name, int *nItems) const {$/;"	f	class:ParamSet
FindNormal	core/paramset.h	/^    Normal FindNormal(const string &n, const Normal &d) const {$/;"	f	class:TextureParams
FindOneBool	core/paramset.cpp	/^bool ParamSet::FindOneBool(const string &name, bool d) const {$/;"	f	class:ParamSet
FindOneFilename	core/paramset.cpp	/^string ParamSet::FindOneFilename(const string &name, const string &d) const {$/;"	f	class:ParamSet
FindOneFloat	core/paramset.cpp	/^float ParamSet::FindOneFloat(const string &name, float d) const {$/;"	f	class:ParamSet
FindOneInt	core/paramset.cpp	/^int ParamSet::FindOneInt(const string &name, int d) const {$/;"	f	class:ParamSet
FindOneNormal	core/paramset.cpp	/^Normal ParamSet::FindOneNormal(const string &name, const Normal &d) const {$/;"	f	class:ParamSet
FindOnePoint	core/paramset.cpp	/^Point ParamSet::FindOnePoint(const string &name, const Point &d) const {$/;"	f	class:ParamSet
FindOneSpectrum	core/paramset.cpp	/^Spectrum ParamSet::FindOneSpectrum(const string &name, const Spectrum &d) const {$/;"	f	class:ParamSet
FindOneString	core/paramset.cpp	/^string ParamSet::FindOneString(const string &name, const string &d) const {$/;"	f	class:ParamSet
FindOneVector	core/paramset.cpp	/^Vector ParamSet::FindOneVector(const string &name, const Vector &d) const {$/;"	f	class:ParamSet
FindPoint	core/paramset.cpp	/^const Point *ParamSet::FindPoint(const string &name, int *nItems) const {$/;"	f	class:ParamSet
FindPoint	core/paramset.h	/^    Point FindPoint(const string &n, const Point &d) const {$/;"	f	class:TextureParams
FindPoissonPointDistribution	renderers/surfacepoints.cpp	/^void FindPoissonPointDistribution(const Point &pCamera, float time,$/;"	f
FindSpectrum	core/paramset.cpp	/^const Spectrum *ParamSet::FindSpectrum(const string &name, int *nItems) const {$/;"	f	class:ParamSet
FindSpectrum	core/paramset.h	/^    Spectrum FindSpectrum(const string &n, const Spectrum &d) const {$/;"	f	class:TextureParams
FindString	core/paramset.cpp	/^const string *ParamSet::FindString(const string &name, int *nItems) const {$/;"	f	class:ParamSet
FindString	core/paramset.h	/^    string FindString(const string &n, const string &d = "") const {$/;"	f	class:TextureParams
FindTexture	core/paramset.cpp	/^string ParamSet::FindTexture(const string &name) const {$/;"	f	class:ParamSet
FindVector	core/paramset.cpp	/^const Vector *ParamSet::FindVector(const string &name, int *nItems) const {$/;"	f	class:ParamSet
FindVector	core/paramset.h	/^    Vector FindVector(const string &n, const Vector &d) const {$/;"	f	class:TextureParams
Float2Int	core/pbrt.h	/^inline int Float2Int(float val) {$/;"	f
Float32	tools/ply.h	/^#define Float32 /;"	d
Float64	tools/ply.h	/^#define Float64 /;"	d
FloatAttribute	3rdparty/openexr-1.7.0/ImfFloatAttribute.h	/^typedef TypedAttribute<float> FloatAttribute;$/;"	t	namespace:Imf
Floor2Int	core/pbrt.h	/^inline int Floor2Int(float val) {$/;"	f
Fltsize	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^static float  Fltsize;$/;"	v	file:
Format	3rdparty/openexr-1.7.0/ImfCompressor.h	/^    enum Format$/;"	g	class:Imf::Compressor
FrCond	core/reflection.cpp	/^Spectrum FrCond(float cosi, const Spectrum &eta, const Spectrum &k) {$/;"	f
FrDiel	core/reflection.cpp	/^Spectrum FrDiel(float cosi, float cost, const Spectrum &etai,$/;"	f
FrameBuffer	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^class FrameBuffer$/;"	c	namespace:Imf
FreeAligned	core/memory.cpp	/^void FreeAligned(void *ptr) {$/;"	f
FreeAll	core/memory.h	/^    void FreeAll() {$/;"	f	class:MemoryArena
FreeArgs	core/pbrtparse.cpp	/^static void FreeArgs() {$/;"	f	file:
Freq	3rdparty/zlib-1.2.5/deflate.h	/^#define Freq /;"	d
Fresnel	core/reflection.h	/^class Fresnel {$/;"	c
FresnelApproxEta	materials/shinymetal.cpp	/^static inline Spectrum FresnelApproxEta(const Spectrum &Fr) {$/;"	f	file:
FresnelApproxK	materials/shinymetal.cpp	/^static inline Spectrum FresnelApproxK(const Spectrum &Fr) {$/;"	f	file:
FresnelBlend	core/reflection.cpp	/^FresnelBlend::FresnelBlend(const Spectrum &d, const Spectrum &s,$/;"	f	class:FresnelBlend
FresnelBlend	core/reflection.h	/^class FresnelBlend : public BxDF {$/;"	c
FresnelConductor	core/reflection.h	/^    FresnelConductor(const Spectrum &e, const Spectrum &kk)$/;"	f	class:FresnelConductor
FresnelConductor	core/reflection.h	/^class FresnelConductor : public Fresnel {$/;"	c
FresnelDielectric	core/reflection.h	/^    FresnelDielectric(float ei, float et) : eta_i(ei), eta_t(et) { }$/;"	f	class:FresnelDielectric
FresnelDielectric	core/reflection.h	/^class FresnelDielectric : public Fresnel {$/;"	c
FresnelNoOp	core/reflection.h	/^class FresnelNoOp : public Fresnel {$/;"	c
From14	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^	uint16  *From14; \/* Really for 16-bit data, but we shift down 2 *\/$/;"	m	struct:__anon57	file:
From8	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^	uint16  *From8;$/;"	m	struct:__anon57	file:
FromLT2	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^	uint16  *FromLT2;$/;"	m	struct:__anon57	file:
FromRGB	core/spectrum.cpp	/^SampledSpectrum SampledSpectrum::FromRGB(const float rgb[3],$/;"	f	class:SampledSpectrum
FromRGB	core/spectrum.h	/^    static RGBSpectrum FromRGB(const float rgb[3],$/;"	f	class:RGBSpectrum
FromSampled	core/spectrum.h	/^    static RGBSpectrum FromSampled(const float *lambda, const float *v,$/;"	f	class:RGBSpectrum
FromSampled	core/spectrum.h	/^    static SampledSpectrum FromSampled(const float *lambda,$/;"	f	class:SampledSpectrum
FromXYZ	core/spectrum.h	/^    static RGBSpectrum FromXYZ(const float xyz[3],$/;"	f	class:RGBSpectrum
FromXYZ	core/spectrum.h	/^    static SampledSpectrum FromXYZ(const float xyz[3],$/;"	f	class:SampledSpectrum
FromYa	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::FromYa::FromYa (TiledInputFile &inputFile)$/;"	f	class:Imf::TiledRgbaInputFile::FromYa
FromYa	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^class TiledRgbaInputFile::FromYa: public Mutex$/;"	c	class:Imf::TiledRgbaInputFile	file:
FromYca	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaInputFile::FromYca::FromYca (InputFile &inputFile,$/;"	f	class:Imf::RgbaInputFile::FromYca
FromYca	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^class RgbaInputFile::FromYca: public Mutex$/;"	c	class:Imf::RgbaInputFile	file:
Frustum	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^class Frustum$/;"	c	namespace:Imath
Frustum	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^inline Frustum<T>::Frustum()$/;"	f	class:Imath::Frustum
Frustum	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^inline Frustum<T>::Frustum(T n, T f, T l, T r, T t, T b, bool o)$/;"	f	class:Imath::Frustum
Frustum	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^inline Frustum<T>::Frustum(T near, T far, T fovx, T fovy, T aspect)$/;"	f	class:Imath::Frustum
Frustum	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^inline Frustum<T>::Frustum(const Frustum &f)$/;"	f	class:Imath::Frustum
Frustumd	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^typedef Frustum<double> Frustumd;$/;"	t	namespace:Imath
Frustumf	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^typedef Frustum<float>	Frustumf;$/;"	t	namespace:Imath
FullyRefine	core/primitive.cpp	/^Primitive::FullyRefine(vector<Reference<Primitive> > &refined) const {$/;"	f	class:Primitive
G	core/reflection.h	/^    float G(const Vector &wo, const Vector &wi, const Vector &wh) const {$/;"	f	class:Microfacet
G3CODES	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	G3CODES$/;"	d	file:
G3CODE_EOF	3rdparty/tiff-3.9.4/t4.h	/^#define	G3CODE_EOF	/;"	d
G3CODE_EOL	3rdparty/tiff-3.9.4/t4.h	/^#define	G3CODE_EOL	/;"	d
G3CODE_INCOMP	3rdparty/tiff-3.9.4/t4.h	/^#define	G3CODE_INCOMP	/;"	d
G3CODE_INVALID	3rdparty/tiff-3.9.4/t4.h	/^#define	G3CODE_INVALID	/;"	d
G3_1D	3rdparty/tiff-3.9.4/tif_fax3.c	/^typedef enum { G3_1D, G3_2D } Ttag;$/;"	e	enum:__anon44	file:
G3_2D	3rdparty/tiff-3.9.4/tif_fax3.c	/^typedef enum { G3_1D, G3_2D } Ttag;$/;"	e	enum:__anon44	file:
GF2_DIM	3rdparty/zlib-1.2.5/crc32.c	/^#define GF2_DIM /;"	d	file:
GLBegin	3rdparty/ilmbase-1.0.2/ImathGL.h	/^    GLBegin (GLenum mode)		{ glBegin (mode); }$/;"	f	class:Imath::GLBegin
GLBegin	3rdparty/ilmbase-1.0.2/ImathGL.h	/^class GLBegin {$/;"	c	namespace:Imath
GLPushAttrib	3rdparty/ilmbase-1.0.2/ImathGL.h	/^    GLPushAttrib (GLbitfield mask)	{ glPushAttrib (mask); }$/;"	f	class:Imath::GLPushAttrib
GLPushAttrib	3rdparty/ilmbase-1.0.2/ImathGL.h	/^class GLPushAttrib {$/;"	c	namespace:Imath
GLPushMatrix	3rdparty/ilmbase-1.0.2/ImathGL.h	/^    GLPushMatrix ()			{ glPushMatrix(); }$/;"	f	class:Imath::GLPushMatrix
GLPushMatrix	3rdparty/ilmbase-1.0.2/ImathGL.h	/^class GLPushMatrix {$/;"	c	namespace:Imath
GL_FLOAT_MAX	3rdparty/ilmbase-1.0.2/ImathGL.h	/^const float GL_FLOAT_MAX = 1.8e+19; \/\/ sqrt (FLT_MAX)$/;"	m	namespace:__anon6
GRAYRESPONSEUNIT_100000S	3rdparty/tiff-3.9.4/tiff.h	/^#define	    GRAYRESPONSEUNIT_100000S	/;"	d
GRAYRESPONSEUNIT_10000S	3rdparty/tiff-3.9.4/tiff.h	/^#define	    GRAYRESPONSEUNIT_10000S	/;"	d
GRAYRESPONSEUNIT_1000S	3rdparty/tiff-3.9.4/tiff.h	/^#define	    GRAYRESPONSEUNIT_1000S	/;"	d
GRAYRESPONSEUNIT_100S	3rdparty/tiff-3.9.4/tiff.h	/^#define	    GRAYRESPONSEUNIT_100S	/;"	d
GRAYRESPONSEUNIT_10S	3rdparty/tiff-3.9.4/tiff.h	/^#define	    GRAYRESPONSEUNIT_10S	/;"	d
GREY	3rdparty/tiff-3.9.4/tif_getimage.c	/^#define	GREY(/;"	d	file:
GREY	3rdparty/tiff-3.9.4/tif_getimage.c	/^#undef	GREY$/;"	d	file:
GRID	tools/samplepat.cpp	/^#define GRID(/;"	d	file:
GROUP3OPT_2DENCODING	3rdparty/tiff-3.9.4/tiff.h	/^#define	    GROUP3OPT_2DENCODING	/;"	d
GROUP3OPT_FILLBITS	3rdparty/tiff-3.9.4/tiff.h	/^#define	    GROUP3OPT_FILLBITS	/;"	d
GROUP3OPT_UNCOMPRESSED	3rdparty/tiff-3.9.4/tiff.h	/^#define	    GROUP3OPT_UNCOMPRESSED	/;"	d
GROUP4OPT_UNCOMPRESSED	3rdparty/tiff-3.9.4/tiff.h	/^#define	    GROUP4OPT_UNCOMPRESSED	/;"	d
GT_OFF	3rdparty/zlib-1.2.5/gzguts.h	/^#  define GT_OFF(/;"	d
GUNZIP	3rdparty/zlib-1.2.5/inflate.h	/^#  define GUNZIP$/;"	d
GZBUFSIZE	3rdparty/zlib-1.2.5/gzguts.h	/^#define GZBUFSIZE /;"	d
GZIP	3rdparty/zlib-1.2.5/deflate.h	/^#  define GZIP$/;"	d
GZIP	3rdparty/zlib-1.2.5/gzguts.h	/^#define GZIP /;"	d
GZ_APPEND	3rdparty/zlib-1.2.5/gzguts.h	/^#define GZ_APPEND /;"	d
GZ_NONE	3rdparty/zlib-1.2.5/gzguts.h	/^#define GZ_NONE /;"	d
GZ_READ	3rdparty/zlib-1.2.5/gzguts.h	/^#define GZ_READ /;"	d
GZ_SUFFIX	3rdparty/zlib-1.2.5/minigzip.c	/^#  define GZ_SUFFIX /;"	d	file:
GZ_WRITE	3rdparty/zlib-1.2.5/gzguts.h	/^#define GZ_WRITE /;"	d
Gaussian	filters/gaussian.h	/^    float Gaussian(float d, float expv) const {$/;"	f	class:GaussianFilter
GaussianFilter	filters/gaussian.h	/^    GaussianFilter(float xw, float yw, float a)$/;"	f	class:GaussianFilter
GaussianFilter	filters/gaussian.h	/^class GaussianFilter : public Filter {$/;"	c
GenSampleFunc	tools/bsdftest.cpp	/^typedef void (*GenSampleFunc)(BSDF* bsdf,$/;"	t	file:
Gen_CosHemisphere	tools/bsdftest.cpp	/^void Gen_CosHemisphere(BSDF* bsdf,$/;"	f
Gen_Sample_f	tools/bsdftest.cpp	/^void Gen_Sample_f(BSDF* bsdf,$/;"	f
Gen_UniformHemisphere	tools/bsdftest.cpp	/^void Gen_UniformHemisphere(BSDF* bsdf,$/;"	f
GeneratePath	renderers/metropolis.cpp	/^static uint32_t GeneratePath(const RayDifferential &r,$/;"	f	file:
GeneratePermutation	core/montecarlo.h	/^inline void GeneratePermutation(uint32_t *buf, uint32_t b, RNG &rng) {$/;"	f
GenerateRay	cameras/environment.cpp	/^float EnvironmentCamera::GenerateRay(const CameraSample &sample,$/;"	f	class:EnvironmentCamera
GenerateRay	cameras/orthographic.cpp	/^float OrthoCamera::GenerateRay(const CameraSample &sample, Ray *ray) const {$/;"	f	class:OrthoCamera
GenerateRay	cameras/perspective.cpp	/^float PerspectiveCamera::GenerateRay(const CameraSample &sample,$/;"	f	class:PerspectiveCamera
GenerateRayDifferential	cameras/orthographic.cpp	/^float OrthoCamera::GenerateRayDifferential(const CameraSample &sample,$/;"	f	class:OrthoCamera
GenerateRayDifferential	cameras/perspective.cpp	/^float PerspectiveCamera::GenerateRayDifferential(const CameraSample &sample,$/;"	f	class:PerspectiveCamera
GenerateRayDifferential	core/camera.cpp	/^float Camera::GenerateRayDifferential(const CameraSample &sample,$/;"	f	class:Camera
GeometricPrimitive	core/primitive.cpp	/^GeometricPrimitive::GeometricPrimitive(const Reference<Shape> &s,$/;"	f	class:GeometricPrimitive
GeometricPrimitive	core/primitive.h	/^class GeometricPrimitive : public Primitive {$/;"	c
GetAreaLight	core/primitive.cpp	/^const AreaLight *Aggregate::GetAreaLight() const {$/;"	f	class:Aggregate
GetAreaLight	core/primitive.cpp	/^const AreaLight *GeometricPrimitive::GetAreaLight() const {$/;"	f	class:GeometricPrimitive
GetAreaLight	core/primitive.h	/^    const AreaLight *GetAreaLight() const { return NULL; }$/;"	f	class:TransformedPrimitive
GetAverageDirection	integrators/irradiancecache.cpp	/^    Vector GetAverageDirection() const { return wAvg; }$/;"	f	struct:IrradProcess
GetBSDF	core/intersection.cpp	/^BSDF *Intersection::GetBSDF(const RayDifferential &ray,$/;"	f	class:Intersection
GetBSDF	core/primitive.cpp	/^BSDF *Aggregate::GetBSDF(const DifferentialGeometry &,$/;"	f	class:Aggregate
GetBSDF	core/primitive.cpp	/^BSDF *GeometricPrimitive::GetBSDF(const DifferentialGeometry &dg,$/;"	f	class:GeometricPrimitive
GetBSDF	core/primitive.h	/^    BSDF *GetBSDF(const DifferentialGeometry &dg,$/;"	f	class:TransformedPrimitive
GetBSDF	materials/glass.cpp	/^BSDF *GlassMaterial::GetBSDF(const DifferentialGeometry &dgGeom, const DifferentialGeometry &dgShading, MemoryArena &arena) const {$/;"	f	class:GlassMaterial
GetBSDF	materials/kdsubsurface.cpp	/^BSDF *KdSubsurfaceMaterial::GetBSDF(const DifferentialGeometry &dgGeom,$/;"	f	class:KdSubsurfaceMaterial
GetBSDF	materials/matte.cpp	/^BSDF *MatteMaterial::GetBSDF(const DifferentialGeometry &dgGeom,$/;"	f	class:MatteMaterial
GetBSDF	materials/measured.cpp	/^BSDF *MeasuredMaterial::GetBSDF(const DifferentialGeometry &dgGeom,$/;"	f	class:MeasuredMaterial
GetBSDF	materials/metal.cpp	/^BSDF *MetalMaterial::GetBSDF(const DifferentialGeometry &dgGeom,$/;"	f	class:MetalMaterial
GetBSDF	materials/mirror.cpp	/^BSDF *MirrorMaterial::GetBSDF(const DifferentialGeometry &dgGeom, const DifferentialGeometry &dgShading, MemoryArena &arena) const {$/;"	f	class:MirrorMaterial
GetBSDF	materials/mixmat.cpp	/^BSDF *MixMaterial::GetBSDF(const DifferentialGeometry &dgGeom,$/;"	f	class:MixMaterial
GetBSDF	materials/plastic.cpp	/^BSDF *PlasticMaterial::GetBSDF(const DifferentialGeometry &dgGeom,$/;"	f	class:PlasticMaterial
GetBSDF	materials/shinymetal.cpp	/^BSDF *ShinyMetalMaterial::GetBSDF(const DifferentialGeometry &dgGeom, $/;"	f	class:ShinyMetalMaterial
GetBSDF	materials/substrate.cpp	/^BSDF *SubstrateMaterial::GetBSDF(const DifferentialGeometry &dgGeom, const DifferentialGeometry &dgShading, MemoryArena &arena) const {$/;"	f	class:SubstrateMaterial
GetBSDF	materials/subsurface.cpp	/^BSDF *SubsurfaceMaterial::GetBSDF(const DifferentialGeometry &dgGeom,$/;"	f	class:SubsurfaceMaterial
GetBSDF	materials/translucent.cpp	/^BSDF *TranslucentMaterial::GetBSDF(const DifferentialGeometry &dgGeom, const DifferentialGeometry &dgShading, MemoryArena &arena) const {$/;"	f	class:TranslucentMaterial
GetBSDF	materials/uber.cpp	/^BSDF *UberMaterial::GetBSDF(const DifferentialGeometry &dgGeom, const DifferentialGeometry &dgShading, MemoryArena &arena) const {$/;"	f	class:UberMaterial
GetBSSRDF	core/intersection.cpp	/^BSSRDF *Intersection::GetBSSRDF(const RayDifferential &ray,$/;"	f	class:Intersection
GetBSSRDF	core/material.h	/^    virtual BSSRDF *GetBSSRDF(const DifferentialGeometry &dgGeom,$/;"	f	class:Material
GetBSSRDF	core/primitive.cpp	/^BSSRDF *Aggregate::GetBSSRDF(const DifferentialGeometry &,$/;"	f	class:Aggregate
GetBSSRDF	core/primitive.cpp	/^BSSRDF *GeometricPrimitive::GetBSSRDF(const DifferentialGeometry &dg,$/;"	f	class:GeometricPrimitive
GetBSSRDF	core/primitive.h	/^    BSSRDF *GetBSSRDF(const DifferentialGeometry &dg,$/;"	f	class:TransformedPrimitive
GetBSSRDF	materials/kdsubsurface.cpp	/^BSSRDF *KdSubsurfaceMaterial::GetBSSRDF(const DifferentialGeometry &dgGeom,$/;"	f	class:KdSubsurfaceMaterial
GetBSSRDF	materials/subsurface.cpp	/^BSSRDF *SubsurfaceMaterial::GetBSSRDF(const DifferentialGeometry &dgGeom,$/;"	f	class:SubsurfaceMaterial
GetBits	3rdparty/tiff-3.9.4/tif_fax3.h	/^#define GetBits(/;"	d
GetFloatTexture	core/paramset.cpp	/^Reference<Texture<float> > TextureParams::GetFloatTexture(const string &n,$/;"	f	class:TextureParams
GetFloatTextureOrNull	core/paramset.cpp	/^Reference<Texture<float> > TextureParams::GetFloatTextureOrNull(const string &n) const {$/;"	f	class:TextureParams
GetGeomParams	core/paramset.h	/^    const ParamSet &GetGeomParams() const { return geomParams; }$/;"	f	class:TextureParams
GetInverseMatrix	core/transform.h	/^    const Matrix4x4 &GetInverseMatrix() const { return mInv; }$/;"	f	class:Transform
GetIrradiance	integrators/irradiancecache.cpp	/^    Spectrum GetIrradiance() const { return E \/ sumWt; }$/;"	f	struct:IrradProcess
GetJBIGState	3rdparty/tiff-3.9.4/tif_jbig.c	/^#define GetJBIGState(/;"	d	file:
GetLinearArray	core/memory.h	/^    void GetLinearArray(T *a) const {$/;"	f	class:BlockedArray
GetMaterialParams	core/paramset.h	/^    const ParamSet &GetMaterialParams() const { return materialParams; }$/;"	f	class:TextureParams
GetMatrix	core/transform.h	/^    const Matrix4x4 &GetMatrix() const { return m; }$/;"	f	class:Transform
GetMoreSamples	samplers/adaptive.cpp	/^int AdaptiveSampler::GetMoreSamples(Sample *samples, RNG &rng) {$/;"	f	class:AdaptiveSampler
GetMoreSamples	samplers/bestcandidate.cpp	/^int BestCandidateSampler::GetMoreSamples(Sample *sample, RNG &rng) {$/;"	f	class:BestCandidateSampler
GetMoreSamples	samplers/halton.cpp	/^int HaltonSampler::GetMoreSamples(Sample *samples, RNG &rng) {$/;"	f	class:HaltonSampler
GetMoreSamples	samplers/lowdiscrepancy.cpp	/^int LDSampler::GetMoreSamples(Sample *samples, RNG &rng) {$/;"	f	class:LDSampler
GetMoreSamples	samplers/random.cpp	/^int RandomSampler::GetMoreSamples(Sample *sample, RNG &rng) {$/;"	f	class:RandomSampler
GetMoreSamples	samplers/stratified.cpp	/^int StratifiedSampler::GetMoreSamples(Sample *samples, RNG &rng) {$/;"	f	class:StratifiedSampler
GetNextCode	3rdparty/tiff-3.9.4/tif_lzw.c	/^#define	GetNextCode(/;"	d	file:
GetNextCodeCompat	3rdparty/tiff-3.9.4/tif_lzw.c	/^#define	GetNextCodeCompat(/;"	d	file:
GetPixelExtent	film/image.cpp	/^void ImageFilm::GetPixelExtent(int *xstart, int *xend,$/;"	f	class:ImageFilm
GetPtr	core/memory.h	/^    const T *GetPtr() const { return ptr; }$/;"	f	class:Reference
GetSampleExtent	film/image.cpp	/^void ImageFilm::GetSampleExtent(int *xstart, int *xend,$/;"	f	class:ImageFilm
GetShadingGeometry	core/shape.h	/^    virtual void GetShadingGeometry(const Transform &obj2world,$/;"	f	class:Shape
GetShadingGeometry	shapes/trianglemesh.cpp	/^void Triangle::GetShadingGeometry(const Transform &obj2world,$/;"	f	class:Triangle
GetSpectrumTexture	core/paramset.cpp	/^TextureParams::GetSpectrumTexture(const string &n,$/;"	f	class:TextureParams
GetSubSampler	samplers/adaptive.cpp	/^Sampler *AdaptiveSampler::GetSubSampler(int num, int count) {$/;"	f	class:AdaptiveSampler
GetSubSampler	samplers/bestcandidate.cpp	/^Sampler *BestCandidateSampler::GetSubSampler(int num, int count) {$/;"	f	class:BestCandidateSampler
GetSubSampler	samplers/halton.cpp	/^Sampler *HaltonSampler::GetSubSampler(int num, int count) {$/;"	f	class:HaltonSampler
GetSubSampler	samplers/lowdiscrepancy.cpp	/^Sampler *LDSampler::GetSubSampler(int num, int count) {$/;"	f	class:LDSampler
GetSubSampler	samplers/random.cpp	/^Sampler *RandomSampler::GetSubSampler(int num, int count) {$/;"	f	class:RandomSampler
GetSubSampler	samplers/stratified.cpp	/^Sampler *StratifiedSampler::GetSubSampler(int num, int count) {$/;"	f	class:StratifiedSampler
GetTexture	textures/imagemap.cpp	/^ImageTexture<Tmemory, Treturn>::GetTexture(const string &filename,$/;"	f	class:ImageTexture
GetTime	core/timer.cpp	/^double Timer::GetTime()$/;"	f	class:Timer
GetUVs	shapes/trianglemesh.h	/^    void GetUVs(float uv[3][2]) const {$/;"	f	class:Triangle
GetVolumeScatteringProperties	core/volume.cpp	/^bool GetVolumeScatteringProperties(const string &name, Spectrum *sigma_a,$/;"	f
GlassMaterial	materials/glass.h	/^    GlassMaterial(Reference<Texture<Spectrum> > r, Reference<Texture<Spectrum> > t,$/;"	f	class:GlassMaterial
GlassMaterial	materials/glass.h	/^class GlassMaterial : public Material {$/;"	c
GlossyPRTIntegrator	integrators/glossyprt.h	/^    GlossyPRTIntegrator(const Spectrum &kd, const Spectrum &ks,$/;"	f	class:GlossyPRTIntegrator
GlossyPRTIntegrator	integrators/glossyprt.h	/^class GlossyPRTIntegrator : public SurfaceIntegrator {$/;"	c
GonioPhotometricLight	lights/goniometric.cpp	/^GonioPhotometricLight::GonioPhotometricLight(const Transform &light2world,$/;"	f	class:GonioPhotometricLight
GonioPhotometricLight	lights/goniometric.h	/^class GonioPhotometricLight : public Light {$/;"	c
Grad	core/texture.cpp	/^inline float Grad(int x, int y, int z, float dx, float dy, float dz) {$/;"	f
GraphicsState	core/api.cpp	/^GraphicsState::GraphicsState() {$/;"	f	class:GraphicsState
GraphicsState	core/api.cpp	/^struct GraphicsState {$/;"	s	file:
GridAccel	accelerators/grid.cpp	/^GridAccel::GridAccel(const vector<Reference<Primitive> > &p,$/;"	f	class:GridAccel
GridAccel	accelerators/grid.h	/^class GridAccel : public Aggregate {$/;"	c
HALF	3rdparty/openexr-1.7.0/ImfPixelType.h	/^    HALF  = 1,		\/\/ half (16 bit floating point)$/;"	e	enum:Imf::PixelType
HALF_DIG	3rdparty/ilmbase-1.0.2/half.h	/^#define HALF_DIG	/;"	d
HALF_EPSILON	3rdparty/ilmbase-1.0.2/half.h	/^  #define HALF_EPSILON	/;"	d
HALF_EXPORT	3rdparty/ilmbase-1.0.2/half.h	/^	#define HALF_EXPORT /;"	d
HALF_EXPORT	3rdparty/ilmbase-1.0.2/half.h	/^    #define HALF_EXPORT$/;"	d
HALF_EXPORT_CONST	3rdparty/ilmbase-1.0.2/half.h	/^    #define HALF_EXPORT_CONST /;"	d
HALF_EXPORT_CONST	3rdparty/ilmbase-1.0.2/half.h	/^    #define HALF_EXPORT_CONST$/;"	d
HALF_MANT_DIG	3rdparty/ilmbase-1.0.2/half.h	/^#define HALF_MANT_DIG	/;"	d
HALF_MAX	3rdparty/ilmbase-1.0.2/half.h	/^  #define HALF_MAX	/;"	d
HALF_MAX_10_EXP	3rdparty/ilmbase-1.0.2/half.h	/^#define HALF_MAX_10_EXP	/;"	d
HALF_MAX_EXP	3rdparty/ilmbase-1.0.2/half.h	/^#define HALF_MAX_EXP	/;"	d
HALF_MIN	3rdparty/ilmbase-1.0.2/half.h	/^  #define HALF_MIN	/;"	d
HALF_MIN_10_EXP	3rdparty/ilmbase-1.0.2/half.h	/^#define HALF_MIN_10_EXP	/;"	d
HALF_MIN_EXP	3rdparty/ilmbase-1.0.2/half.h	/^#define HALF_MIN_EXP	/;"	d
HALF_NRM_MIN	3rdparty/ilmbase-1.0.2/half.h	/^  #define HALF_NRM_MIN	/;"	d
HALF_RADIX	3rdparty/ilmbase-1.0.2/half.h	/^#define HALF_RADIX	/;"	d
HAVE_ASSERT_H	3rdparty/tiff-3.9.4/tif_config.h	/^#define HAVE_ASSERT_H /;"	d
HAVE_ASSERT_H	3rdparty/tiff-3.9.4/tif_config.vc.h	/^#define HAVE_ASSERT_H /;"	d
HAVE_ASSERT_H	3rdparty/tiff-3.9.4/tif_config.wince.h	/^#define HAVE_ASSERT_H /;"	d
HAVE_BOOLEAN	3rdparty/tiff-3.9.4/tif_jpeg.c	/^# define HAVE_BOOLEAN /;"	d	file:
HAVE_BSEARCH	3rdparty/tiff-3.9.4/tif_config.wince.h	/^#define HAVE_BSEARCH /;"	d
HAVE_COMPLETE_IOMANIP	3rdparty/openexr-1.7.0/OpenEXRConfig.h	/^#define HAVE_COMPLETE_IOMANIP /;"	d
HAVE_DTRACE	Makefile	/^HAVE_DTRACE=0$/;"	m
HAVE_EXR	Makefile	/^HAVE_EXR=1$/;"	m
HAVE_FCNTL_H	3rdparty/tiff-3.9.4/tif_config.h	/^#define HAVE_FCNTL_H /;"	d
HAVE_FCNTL_H	3rdparty/tiff-3.9.4/tif_config.vc.h	/^#define HAVE_FCNTL_H /;"	d
HAVE_FCNTL_H	3rdparty/tiff-3.9.4/tif_config.wince.h	/^#define  HAVE_FCNTL_H /;"	d
HAVE_IEEEFP	3rdparty/tiff-3.9.4/tif_config.h	/^#define HAVE_IEEEFP /;"	d
HAVE_IEEEFP	3rdparty/tiff-3.9.4/tif_config.vc.h	/^#define HAVE_IEEEFP /;"	d
HAVE_IEEEFP	3rdparty/tiff-3.9.4/tif_config.wince.h	/^#define HAVE_IEEEFP /;"	d
HAVE_IEEEFP	3rdparty/tiff-3.9.4/tiffconf.h	/^#define HAVE_IEEEFP /;"	d
HAVE_IEEEFP	3rdparty/tiff-3.9.4/tiffconf.vc.h	/^#define HAVE_IEEEFP /;"	d
HAVE_IEEEFP	3rdparty/tiff-3.9.4/tiffconf.wince.h	/^#define HAVE_IEEEFP /;"	d
HAVE_IO_H	3rdparty/tiff-3.9.4/tif_config.h	/^#define HAVE_IO_H /;"	d
HAVE_IO_H	3rdparty/tiff-3.9.4/tif_config.vc.h	/^#define HAVE_IO_H /;"	d
HAVE_IO_H	3rdparty/tiff-3.9.4/tif_config.wince.h	/^#define HAVE_IO_H /;"	d
HAVE_JBG_NEWLEN	3rdparty/tiff-3.9.4/tif_config.h	/^#define HAVE_JBG_NEWLEN /;"	d
HAVE_JBG_NEWLEN	3rdparty/tiff-3.9.4/tif_config.vc.h	/^#define HAVE_JBG_NEWLEN /;"	d
HAVE_JBG_NEWLEN	3rdparty/tiff-3.9.4/tif_config.wince.h	/^#define HAVE_JBG_NEWLEN /;"	d
HAVE_LFIND	3rdparty/tiff-3.9.4/tif_config.wince.h	/^#define HAVE_LFIND /;"	d
HAVE_LIBTIFF	Makefile	/^HAVE_LIBTIFF=0$/;"	m
HAVE_MEMCPY	3rdparty/zlib-1.2.5/zutil.h	/^#  define HAVE_MEMCPY$/;"	d
HAVE_POSIX_SEMAPHORES	3rdparty/ilmbase-1.0.2/IlmBaseConfig.h	/^#undef HAVE_POSIX_SEMAPHORES$/;"	d
HAVE_PTHREAD	3rdparty/ilmbase-1.0.2/IlmBaseConfig.h	/^#undef HAVE_PTHREAD$/;"	d
HAVE_SEARCH_H	3rdparty/tiff-3.9.4/tif_config.h	/^#define HAVE_SEARCH_H /;"	d
HAVE_SEARCH_H	3rdparty/tiff-3.9.4/tif_config.vc.h	/^#define HAVE_SEARCH_H /;"	d
HAVE_SEARCH_H	3rdparty/tiff-3.9.4/tif_config.wince.h	/^#define HAVE_SEARCH_H /;"	d
HAVE_SETMODE	3rdparty/tiff-3.9.4/tif_config.h	/^#define HAVE_SETMODE /;"	d
HAVE_SETMODE	3rdparty/tiff-3.9.4/tif_config.vc.h	/^#define HAVE_SETMODE /;"	d
HAVE_SETMODE	3rdparty/tiff-3.9.4/tif_config.wince.h	/^#define HAVE_SETMODE /;"	d
HAVE_STRING_H	3rdparty/tiff-3.9.4/tif_config.h	/^#define HAVE_STRING_H /;"	d
HAVE_STRING_H	3rdparty/tiff-3.9.4/tif_config.vc.h	/^#define HAVE_STRING_H /;"	d
HAVE_STRING_H	3rdparty/tiff-3.9.4/tif_config.wince.h	/^#define HAVE_STRING_H /;"	d
HAVE_SYS_TYPES_H	3rdparty/tiff-3.9.4/tif_config.h	/^#define HAVE_SYS_TYPES_H /;"	d
HAVE_SYS_TYPES_H	3rdparty/tiff-3.9.4/tif_config.vc.h	/^#define HAVE_SYS_TYPES_H /;"	d
HAVE_SYS_TYPES_H	3rdparty/tiff-3.9.4/tif_config.wince.h	/^#undef HAVE_SYS_TYPES_H$/;"	d
HAVE_VSNPRINTF	3rdparty/zlib-1.2.5/zutil.h	/^#    define HAVE_VSNPRINTF$/;"	d
HCRC	3rdparty/zlib-1.2.5/inflate.h	/^    HCRC,       \/* i: waiting for header crc (gzip) *\/$/;"	e	enum:__anon75
HCRC_STATE	3rdparty/zlib-1.2.5/deflate.h	/^#define HCRC_STATE /;"	d
HEAD	3rdparty/zlib-1.2.5/inflate.h	/^    HEAD,       \/* i: waiting for magic header *\/$/;"	e	enum:__anon75
HEADERS	Makefile	/^HEADERS = $(wildcard *\/*.h)$/;"	m
HEAP_SIZE	3rdparty/zlib-1.2.5/deflate.h	/^#define HEAP_SIZE /;"	d
HGPdf	core/montecarlo.cpp	/^float HGPdf(const Vector &w, const Vector &wp, float g) {$/;"	f
HICLAMP	3rdparty/tiff-3.9.4/tif_color.c	/^#define HICLAMP(/;"	d	file:
HICLAMP	3rdparty/tiff-3.9.4/tif_color.c	/^#undef	HICLAMP$/;"	d	file:
HIGH_PRECEDENCE	core/pbrtparse.cpp	/^     HIGH_PRECEDENCE = 304$/;"	e	enum:yytokentype	file:
HIGH_PRECEDENCE	core/pbrtparse.hh	/^     HIGH_PRECEDENCE = 304$/;"	e	enum:yytokentype
HOST_BIGENDIAN	3rdparty/tiff-3.9.4/tiffconf.h	/^#define HOST_BIGENDIAN /;"	d
HOST_BIGENDIAN	3rdparty/tiff-3.9.4/tiffconf.vc.h	/^#define HOST_BIGENDIAN /;"	d
HOST_BIGENDIAN	3rdparty/tiff-3.9.4/tiffconf.wince.h	/^#define HOST_BIGENDIAN /;"	d
HOST_FILLORDER	3rdparty/tiff-3.9.4/tif_config.h	/^#define HOST_FILLORDER /;"	d
HOST_FILLORDER	3rdparty/tiff-3.9.4/tif_config.vc.h	/^#define HOST_FILLORDER /;"	d
HOST_FILLORDER	3rdparty/tiff-3.9.4/tif_config.wince.h	/^#define HOST_FILLORDER /;"	d
HOST_FILLORDER	3rdparty/tiff-3.9.4/tiffconf.h	/^#define HOST_FILLORDER /;"	d
HOST_FILLORDER	3rdparty/tiff-3.9.4/tiffconf.vc.h	/^#define HOST_FILLORDER /;"	d
HOST_FILLORDER	3rdparty/tiff-3.9.4/tiffconf.wince.h	/^#define HOST_FILLORDER /;"	d
HSHIFT	3rdparty/tiff-3.9.4/tif_lzw.c	/^#define	HSHIFT	/;"	d	file:
HSIZE	3rdparty/tiff-3.9.4/tif_lzw.c	/^#define	HSIZE	/;"	d	file:
HUF_DECBITS	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^const int HUF_DECBITS = 14;			\/\/ decoding bit size (>= 8)$/;"	m	namespace:Imf::__anon20	file:
HUF_DECMASK	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^const int HUF_DECMASK = HUF_DECSIZE - 1;$/;"	m	namespace:Imf::__anon20	file:
HUF_DECSIZE	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^const int HUF_DECSIZE =  1 << HUF_DECBITS;	\/\/ decoding table size$/;"	m	namespace:Imf::__anon20	file:
HUF_ENCBITS	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^const int HUF_ENCBITS = 16;			\/\/ literal (value) bit length$/;"	m	namespace:Imf::__anon20	file:
HUF_ENCSIZE	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^const int HUF_ENCSIZE = (1 << HUF_ENCBITS) + 1;	\/\/ encoding table size$/;"	m	namespace:Imf::__anon20	file:
HalfLut	3rdparty/openexr-1.7.0/ImfLut.h	/^HalfLut::HalfLut (Function f):$/;"	f	class:Imf::HalfLut
HalfLut	3rdparty/openexr-1.7.0/ImfLut.h	/^class HalfLut$/;"	c	namespace:Imf
HaltonSampler	samplers/halton.cpp	/^HaltonSampler::HaltonSampler(int xs, int xe, int ys, int ye, int ps,$/;"	f	class:HaltonSampler
HaltonSampler	samplers/halton.h	/^class HaltonSampler : public Sampler {$/;"	c
HasNaNs	core/geometry.h	/^    bool HasNaNs() const { return isnan(x) || isnan(y) || isnan(z); }$/;"	f	class:Vector
HasNaNs	core/geometry.h	/^    bool HasNaNs() const {$/;"	f	class:Normal
HasNaNs	core/geometry.h	/^    bool HasNaNs() const {$/;"	f	class:Point
HasNaNs	core/geometry.h	/^    bool HasNaNs() const {$/;"	f	class:Ray
HasNaNs	core/geometry.h	/^    bool HasNaNs() const {$/;"	f	class:RayDifferential
HasNaNs	core/spectrum.h	/^    bool HasNaNs() const {$/;"	f	class:CoefficientSpectrum
HasScale	core/transform.h	/^    bool HasScale() const { return startTransform->HasScale() || endTransform->HasScale(); }$/;"	f	class:AnimatedTransform
HasScale	core/transform.h	/^    bool HasScale() const {$/;"	f	class:Transform
Header	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::Header (const Box2i &displayWindow,$/;"	f	class:Imf::Header
Header	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::Header (const Header &other): _map()$/;"	f	class:Imf::Header
Header	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::Header (int width,$/;"	f	class:Imf::Header
Header	3rdparty/openexr-1.7.0/ImfHeader.h	/^class Header$/;"	c	namespace:Imf
Height	core/mipmap.h	/^    uint32_t Height() const { return height; }$/;"	f	class:MIPMap
Heightfield	shapes/heightfield.cpp	/^Heightfield::Heightfield(const Transform *o2w, const Transform *w2o,$/;"	f	class:Heightfield
Heightfield	shapes/heightfield.h	/^class Heightfield : public Shape {$/;"	c
Heightfield2	shapes/heightfield2.cpp	/^Heightfield2::Heightfield2(const Transform *o2w, const Transform *w2o,$/;"	f	class:Heightfield2
Heightfield2	shapes/heightfield2.h	/^class Heightfield2 : public Shape {$/;"	c
Homogeneous3	shapes/nurbs.cpp	/^Homogeneous3() { x = y = z = w = 0.; }$/;"	f	struct:Homogeneous3
Homogeneous3	shapes/nurbs.cpp	/^Homogeneous3(float xx, float yy, float zz, float ww) {$/;"	f	struct:Homogeneous3
Homogeneous3	shapes/nurbs.cpp	/^struct Homogeneous3 {$/;"	s	file:
HomogeneousVolumeDensity	volumes/homogeneous.h	/^    HomogeneousVolumeDensity(const Spectrum &sa, const Spectrum &ss, float gg,$/;"	f	class:HomogeneousVolumeDensity
HomogeneousVolumeDensity	volumes/homogeneous.h	/^class HomogeneousVolumeDensity : public VolumeRegion {$/;"	c
Horiz	3rdparty/tiff-3.9.4/mkg3states.c	/^static struct proto Horiz[]  = {$/;"	v	typeref:struct:proto	file:
HufDec	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^struct HufDec$/;"	s	namespace:Imf::__anon20	file:
Hyperboloid	shapes/hyperboloid.cpp	/^Hyperboloid::Hyperboloid(const Transform *o2w, const Transform *w2o, bool ro,$/;"	f	class:Hyperboloid
Hyperboloid	shapes/hyperboloid.h	/^class Hyperboloid : public Shape {$/;"	c
I	renderers/metropolis.cpp	/^inline float I(const Spectrum &L) {$/;"	f
ICC_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.h	/^#define ICC_SUPPORT$/;"	d
ICC_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.vc.h	/^#define ICC_SUPPORT$/;"	d
ICC_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.wince.h	/^#define ICC_SUPPORT$/;"	d
ID	core/pbrtparse.cpp	/^     ID = 259,$/;"	e	enum:yytokentype	file:
ID	core/pbrtparse.hh	/^     ID = 259,$/;"	e	enum:yytokentype
IDENTITY	core/pbrtparse.cpp	/^     IDENTITY = 275,$/;"	e	enum:yytokentype	file:
IDENTITY	core/pbrtparse.hh	/^     IDENTITY = 275,$/;"	e	enum:yytokentype
IGIIntegrator	integrators/igi.h	/^    IGIIntegrator(uint32_t nl, uint32_t ns, float rrt, int maxd, float gl, int ng) {$/;"	f	class:IGIIntegrator
IGIIntegrator	integrators/igi.h	/^class IGIIntegrator : public SurfaceIntegrator {$/;"	c
IGNORE	3rdparty/tiff-3.9.4/tif_dirread.c	/^#define	IGNORE	/;"	d	file:
IJKLayout	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^    enum InputLayout { XYZLayout, IJKLayout };$/;"	e	enum:Imath::Euler::InputLayout
ILMTHREAD_EXPORT	3rdparty/ilmbase-1.0.2/IlmThread.h	/^	#define ILMTHREAD_EXPORT /;"	d
ILMTHREAD_EXPORT	3rdparty/ilmbase-1.0.2/IlmThread.h	/^    #define ILMTHREAD_EXPORT /;"	d
IMATH_EXPORT_CONST	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^	#define IMATH_EXPORT_CONST /;"	d
IMATH_EXPORT_CONST	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^        #define IMATH_EXPORT_CONST /;"	d
IMATH_EXPORT_CONST	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^    #define IMATH_EXPORT_CONST /;"	d
IMATH_RESTRICT	3rdparty/ilmbase-1.0.2/ImathPlatform.h	/^    #define IMATH_RESTRICT /;"	d
IMATH_RESTRICT	3rdparty/ilmbase-1.0.2/ImathPlatform.h	/^    #define IMATH_RESTRICT$/;"	d
IMF_B44A_COMPRESSION	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^#define IMF_B44A_COMPRESSION	/;"	d
IMF_B44_COMPRESSION	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^#define IMF_B44_COMPRESSION	/;"	d
IMF_DECREASING_Y	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^#define IMF_DECREASING_Y	/;"	d
IMF_EXPIMP_TEMPLATE	3rdparty/openexr-1.7.0/ImfAttribute.h	/^ 	#define IMF_EXPIMP_TEMPLATE$/;"	d
IMF_INCREASING_Y	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^#define IMF_INCREASING_Y	/;"	d
IMF_MAGIC	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^#define IMF_MAGIC /;"	d
IMF_MIPMAP_LEVELS	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^#define IMF_MIPMAP_LEVELS	/;"	d
IMF_NO_COMPRESSION	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^#define IMF_NO_COMPRESSION	/;"	d
IMF_ONE_LEVEL	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^#define IMF_ONE_LEVEL	/;"	d
IMF_PIZ_COMPRESSION	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^#define IMF_PIZ_COMPRESSION	/;"	d
IMF_PXR24_COMPRESSION	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^#define IMF_PXR24_COMPRESSION	/;"	d
IMF_RAMDOM_Y	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^#define IMF_RAMDOM_Y	/;"	d
IMF_RIPMAP_LEVELS	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^#define IMF_RIPMAP_LEVELS	/;"	d
IMF_RLE_COMPRESSION	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^#define IMF_RLE_COMPRESSION	/;"	d
IMF_ROUND_DOWN	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^#define IMF_ROUND_DOWN	/;"	d
IMF_ROUND_UP	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^#define IMF_ROUND_UP	/;"	d
IMF_STATIC_ASSERT	3rdparty/openexr-1.7.0/ImfCheckedArithmetic.h	/^#define IMF_STATIC_ASSERT(/;"	d
IMF_STD_ATTRIBUTE_DEF	3rdparty/openexr-1.7.0/ImfStandardAttributes.h	/^#define IMF_STD_ATTRIBUTE_DEF(/;"	d
IMF_STD_ATTRIBUTE_IMP	3rdparty/openexr-1.7.0/ImfStandardAttributes.cpp	/^#define IMF_STD_ATTRIBUTE_IMP(/;"	d	file:
IMF_STRING	3rdparty/openexr-1.7.0/ImfStandardAttributes.cpp	/^#define IMF_STRING(/;"	d	file:
IMF_VERSION_NUMBER	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^#define IMF_VERSION_NUMBER /;"	d
IMF_WRITE_A	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^#define IMF_WRITE_A	/;"	d
IMF_WRITE_B	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^#define IMF_WRITE_B	/;"	d
IMF_WRITE_C	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^#define IMF_WRITE_C	/;"	d
IMF_WRITE_G	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^#define IMF_WRITE_G	/;"	d
IMF_WRITE_R	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^#define IMF_WRITE_R	/;"	d
IMF_WRITE_RGB	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^#define IMF_WRITE_RGB	/;"	d
IMF_WRITE_RGBA	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^#define IMF_WRITE_RGBA	/;"	d
IMF_WRITE_Y	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^#define IMF_WRITE_Y	/;"	d
IMF_WRITE_YA	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^#define IMF_WRITE_YA	/;"	d
IMF_WRITE_YC	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^#define IMF_WRITE_YC	/;"	d
IMF_WRITE_YCA	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^#define IMF_WRITE_YCA	/;"	d
IMF_ZIPS_COMPRESSION	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^#define IMF_ZIPS_COMPRESSION	/;"	d
IMF_ZIP_COMPRESSION	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^#define IMF_ZIP_COMPRESSION	/;"	d
INCL	core/pbrtlex.cpp	/^#define INCL /;"	d	file:
INCLUDE	Makefile	/^INCLUDE=-I. -Icore $(EXR_INCLUDES) $(TIFF_INCLUDES)$/;"	m
INCLUDE	core/pbrtparse.cpp	/^     INCLUDE = 276,$/;"	e	enum:yytokentype	file:
INCLUDE	core/pbrtparse.hh	/^     INCLUDE = 276,$/;"	e	enum:yytokentype
INCLUDED_HALF_LIMITS_H	3rdparty/ilmbase-1.0.2/halfLimits.h	/^#define INCLUDED_HALF_LIMITS_H$/;"	d
INCLUDED_IEXBASEEXC_H	3rdparty/ilmbase-1.0.2/IexBaseExc.h	/^#define INCLUDED_IEXBASEEXC_H$/;"	d
INCLUDED_IEXERRNOEXC_H	3rdparty/ilmbase-1.0.2/IexErrnoExc.h	/^#define INCLUDED_IEXERRNOEXC_H$/;"	d
INCLUDED_IEXMACROS_H	3rdparty/ilmbase-1.0.2/IexMacros.h	/^#define INCLUDED_IEXMACROS_H$/;"	d
INCLUDED_IEXMATHEXC_H	3rdparty/ilmbase-1.0.2/IexMathExc.h	/^#define INCLUDED_IEXMATHEXC_H$/;"	d
INCLUDED_IEXTHROWERRNOEXC_H	3rdparty/ilmbase-1.0.2/IexThrowErrnoExc.h	/^#define INCLUDED_IEXTHROWERRNOEXC_H$/;"	d
INCLUDED_IEX_H	3rdparty/ilmbase-1.0.2/Iex.h	/^#define INCLUDED_IEX_H$/;"	d
INCLUDED_ILM_THREAD_H	3rdparty/ilmbase-1.0.2/IlmThread.h	/^#define INCLUDED_ILM_THREAD_H$/;"	d
INCLUDED_ILM_THREAD_MUTEX_H	3rdparty/ilmbase-1.0.2/IlmThreadMutex.h	/^#define INCLUDED_ILM_THREAD_MUTEX_H$/;"	d
INCLUDED_ILM_THREAD_POOL_H	3rdparty/ilmbase-1.0.2/IlmThreadPool.h	/^#define INCLUDED_ILM_THREAD_POOL_H$/;"	d
INCLUDED_ILM_THREAD_SEMAPHORE_H	3rdparty/ilmbase-1.0.2/IlmThreadSemaphore.h	/^#define INCLUDED_ILM_THREAD_SEMAPHORE_H$/;"	d
INCLUDED_IMATHBOXALGO_H	3rdparty/ilmbase-1.0.2/ImathBoxAlgo.h	/^#define INCLUDED_IMATHBOXALGO_H$/;"	d
INCLUDED_IMATHBOX_H	3rdparty/ilmbase-1.0.2/ImathBox.h	/^#define INCLUDED_IMATHBOX_H$/;"	d
INCLUDED_IMATHCOLORALGO_H	3rdparty/ilmbase-1.0.2/ImathColorAlgo.h	/^#define INCLUDED_IMATHCOLORALGO_H$/;"	d
INCLUDED_IMATHCOLOR_H	3rdparty/ilmbase-1.0.2/ImathColor.h	/^#define INCLUDED_IMATHCOLOR_H$/;"	d
INCLUDED_IMATHEULER_H	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^#define INCLUDED_IMATHEULER_H$/;"	d
INCLUDED_IMATHEXC_H	3rdparty/ilmbase-1.0.2/ImathExc.h	/^#define INCLUDED_IMATHEXC_H$/;"	d
INCLUDED_IMATHFRAME_H	3rdparty/ilmbase-1.0.2/ImathFrame.h	/^#define INCLUDED_IMATHFRAME_H$/;"	d
INCLUDED_IMATHFRUSTUM_H	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^#define INCLUDED_IMATHFRUSTUM_H$/;"	d
INCLUDED_IMATHFUN_H	3rdparty/ilmbase-1.0.2/ImathFun.h	/^#define INCLUDED_IMATHFUN_H$/;"	d
INCLUDED_IMATHGLU_H	3rdparty/ilmbase-1.0.2/ImathGLU.h	/^#define INCLUDED_IMATHGLU_H$/;"	d
INCLUDED_IMATHGL_H	3rdparty/ilmbase-1.0.2/ImathGL.h	/^#define INCLUDED_IMATHGL_H$/;"	d
INCLUDED_IMATHHALFLIMITS_H	3rdparty/ilmbase-1.0.2/ImathHalfLimits.h	/^#define INCLUDED_IMATHHALFLIMITS_H$/;"	d
INCLUDED_IMATHINTERVAL_H	3rdparty/ilmbase-1.0.2/ImathInterval.h	/^#define INCLUDED_IMATHINTERVAL_H$/;"	d
INCLUDED_IMATHLIMITS_H	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^#define INCLUDED_IMATHLIMITS_H$/;"	d
INCLUDED_IMATHLINEALGO_H	3rdparty/ilmbase-1.0.2/ImathLineAlgo.h	/^#define INCLUDED_IMATHLINEALGO_H$/;"	d
INCLUDED_IMATHLINE_H	3rdparty/ilmbase-1.0.2/ImathLine.h	/^#define INCLUDED_IMATHLINE_H$/;"	d
INCLUDED_IMATHMATH_H	3rdparty/ilmbase-1.0.2/ImathMath.h	/^#define INCLUDED_IMATHMATH_H$/;"	d
INCLUDED_IMATHMATRIXALGO_H	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^#define INCLUDED_IMATHMATRIXALGO_H$/;"	d
INCLUDED_IMATHMATRIX_H	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^#define INCLUDED_IMATHMATRIX_H$/;"	d
INCLUDED_IMATHPLANE_H	3rdparty/ilmbase-1.0.2/ImathPlane.h	/^#define INCLUDED_IMATHPLANE_H$/;"	d
INCLUDED_IMATHPLATFORM_H	3rdparty/ilmbase-1.0.2/ImathPlatform.h	/^#define INCLUDED_IMATHPLATFORM_H$/;"	d
INCLUDED_IMATHQUAT_H	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^#define INCLUDED_IMATHQUAT_H$/;"	d
INCLUDED_IMATHRANDOM_H	3rdparty/ilmbase-1.0.2/ImathRandom.h	/^#define INCLUDED_IMATHRANDOM_H$/;"	d
INCLUDED_IMATHROOTS_H	3rdparty/ilmbase-1.0.2/ImathRoots.h	/^#define INCLUDED_IMATHROOTS_H$/;"	d
INCLUDED_IMATHSHEAR_H	3rdparty/ilmbase-1.0.2/ImathShear.h	/^#define INCLUDED_IMATHSHEAR_H$/;"	d
INCLUDED_IMATHSPHERE_H	3rdparty/ilmbase-1.0.2/ImathSphere.h	/^#define INCLUDED_IMATHSPHERE_H$/;"	d
INCLUDED_IMATHVECALGO_H	3rdparty/ilmbase-1.0.2/ImathVecAlgo.h	/^#define INCLUDED_IMATHVECALGO_H$/;"	d
INCLUDED_IMATHVEC_H	3rdparty/ilmbase-1.0.2/ImathVec.h	/^#define INCLUDED_IMATHVEC_H$/;"	d
INCLUDED_IMATH_INT64_H	3rdparty/ilmbase-1.0.2/ImathInt64.h	/^#define INCLUDED_IMATH_INT64_H$/;"	d
INCLUDED_IMF_ACES_FILE_H	3rdparty/openexr-1.7.0/ImfAcesFile.h	/^#define INCLUDED_IMF_ACES_FILE_H$/;"	d
INCLUDED_IMF_ARRAY_H	3rdparty/openexr-1.7.0/ImfArray.h	/^#define INCLUDED_IMF_ARRAY_H$/;"	d
INCLUDED_IMF_ATTRIBUTE_H	3rdparty/openexr-1.7.0/ImfAttribute.h	/^#define INCLUDED_IMF_ATTRIBUTE_H$/;"	d
INCLUDED_IMF_AUTO_ARRAY_H	3rdparty/openexr-1.7.0/ImfAutoArray.h	/^#define INCLUDED_IMF_AUTO_ARRAY_H$/;"	d
INCLUDED_IMF_B44_COMPRESSOR_H	3rdparty/openexr-1.7.0/ImfB44Compressor.h	/^#define INCLUDED_IMF_B44_COMPRESSOR_H$/;"	d
INCLUDED_IMF_BOX_ATTRIBUTE_H	3rdparty/openexr-1.7.0/ImfBoxAttribute.h	/^#define INCLUDED_IMF_BOX_ATTRIBUTE_H$/;"	d
INCLUDED_IMF_CHANNEL_LIST_ATTRIBUTE_H	3rdparty/openexr-1.7.0/ImfChannelListAttribute.h	/^#define INCLUDED_IMF_CHANNEL_LIST_ATTRIBUTE_H$/;"	d
INCLUDED_IMF_CHANNEL_LIST_H	3rdparty/openexr-1.7.0/ImfChannelList.h	/^#define INCLUDED_IMF_CHANNEL_LIST_H$/;"	d
INCLUDED_IMF_CHECKED_ARITHMETIC_H	3rdparty/openexr-1.7.0/ImfCheckedArithmetic.h	/^#define INCLUDED_IMF_CHECKED_ARITHMETIC_H$/;"	d
INCLUDED_IMF_CHROMATICITIES_ATTRIBUTE_H	3rdparty/openexr-1.7.0/ImfChromaticitiesAttribute.h	/^#define INCLUDED_IMF_CHROMATICITIES_ATTRIBUTE_H$/;"	d
INCLUDED_IMF_CHROMATICITIES_H	3rdparty/openexr-1.7.0/ImfChromaticities.h	/^#define INCLUDED_IMF_CHROMATICITIES_H$/;"	d
INCLUDED_IMF_COMPRESSION_ATTRIBUTE_H	3rdparty/openexr-1.7.0/ImfCompressionAttribute.h	/^#define INCLUDED_IMF_COMPRESSION_ATTRIBUTE_H$/;"	d
INCLUDED_IMF_COMPRESSION_H	3rdparty/openexr-1.7.0/ImfCompression.h	/^#define INCLUDED_IMF_COMPRESSION_H$/;"	d
INCLUDED_IMF_COMPRESSOR_H	3rdparty/openexr-1.7.0/ImfCompressor.h	/^#define INCLUDED_IMF_COMPRESSOR_H$/;"	d
INCLUDED_IMF_CONVERT_H	3rdparty/openexr-1.7.0/ImfConvert.h	/^#define INCLUDED_IMF_CONVERT_H$/;"	d
INCLUDED_IMF_C_RGBA_FILE_H	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^#define INCLUDED_IMF_C_RGBA_FILE_H$/;"	d
INCLUDED_IMF_DOUBLE_ATTRIBUTE_H	3rdparty/openexr-1.7.0/ImfDoubleAttribute.h	/^#define INCLUDED_IMF_DOUBLE_ATTRIBUTE_H$/;"	d
INCLUDED_IMF_ENVMAP_ATTRIBUTE_H	3rdparty/openexr-1.7.0/ImfEnvmapAttribute.h	/^#define INCLUDED_IMF_ENVMAP_ATTRIBUTE_H$/;"	d
INCLUDED_IMF_ENVMAP_H	3rdparty/openexr-1.7.0/ImfEnvmap.h	/^#define INCLUDED_IMF_ENVMAP_H$/;"	d
INCLUDED_IMF_FLOAT_ATTRIBUTE_H	3rdparty/openexr-1.7.0/ImfFloatAttribute.h	/^#define INCLUDED_IMF_FLOAT_ATTRIBUTE_H$/;"	d
INCLUDED_IMF_FRAMES_PER_SECOND_H	3rdparty/openexr-1.7.0/ImfFramesPerSecond.h	/^#define INCLUDED_IMF_FRAMES_PER_SECOND_H$/;"	d
INCLUDED_IMF_FRAME_BUFFER_H	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^#define INCLUDED_IMF_FRAME_BUFFER_H$/;"	d
INCLUDED_IMF_HEADER_H	3rdparty/openexr-1.7.0/ImfHeader.h	/^#define INCLUDED_IMF_HEADER_H$/;"	d
INCLUDED_IMF_HUF_H	3rdparty/openexr-1.7.0/ImfHuf.h	/^#define INCLUDED_IMF_HUF_H$/;"	d
INCLUDED_IMF_INPUT_FILE_H	3rdparty/openexr-1.7.0/ImfInputFile.h	/^#define INCLUDED_IMF_INPUT_FILE_H$/;"	d
INCLUDED_IMF_INT64_H	3rdparty/openexr-1.7.0/ImfInt64.h	/^#define INCLUDED_IMF_INT64_H$/;"	d
INCLUDED_IMF_INT_ATTRIBUTE_H	3rdparty/openexr-1.7.0/ImfIntAttribute.h	/^#define INCLUDED_IMF_INT_ATTRIBUTE_H$/;"	d
INCLUDED_IMF_IO_H	3rdparty/openexr-1.7.0/ImfIO.h	/^#define INCLUDED_IMF_IO_H$/;"	d
INCLUDED_IMF_KEY_CODE_ATTRIBUTE_H	3rdparty/openexr-1.7.0/ImfKeyCodeAttribute.h	/^#define INCLUDED_IMF_KEY_CODE_ATTRIBUTE_H$/;"	d
INCLUDED_IMF_KEY_CODE_H	3rdparty/openexr-1.7.0/ImfKeyCode.h	/^#define INCLUDED_IMF_KEY_CODE_H$/;"	d
INCLUDED_IMF_LINE_ORDER_ATTRIBUTE_H	3rdparty/openexr-1.7.0/ImfLineOrderAttribute.h	/^#define INCLUDED_IMF_LINE_ORDER_ATTRIBUTE_H$/;"	d
INCLUDED_IMF_LINE_ORDER_H	3rdparty/openexr-1.7.0/ImfLineOrder.h	/^#define INCLUDED_IMF_LINE_ORDER_H$/;"	d
INCLUDED_IMF_LUT_H	3rdparty/openexr-1.7.0/ImfLut.h	/^#define INCLUDED_IMF_LUT_H$/;"	d
INCLUDED_IMF_MATRIX_ATTRIBUTE_H	3rdparty/openexr-1.7.0/ImfMatrixAttribute.h	/^#define INCLUDED_IMF_MATRIX_ATTRIBUTE_H$/;"	d
INCLUDED_IMF_MISC_H	3rdparty/openexr-1.7.0/ImfMisc.h	/^#define INCLUDED_IMF_MISC_H$/;"	d
INCLUDED_IMF_MULTIVIEW_H	3rdparty/openexr-1.7.0/ImfMultiView.h	/^#define INCLUDED_IMF_MULTIVIEW_H$/;"	d
INCLUDED_IMF_NAME_H	3rdparty/openexr-1.7.0/ImfName.h	/^#define INCLUDED_IMF_NAME_H$/;"	d
INCLUDED_IMF_OPAQUE_ATTRIBUTE_H	3rdparty/openexr-1.7.0/ImfOpaqueAttribute.h	/^#define INCLUDED_IMF_OPAQUE_ATTRIBUTE_H$/;"	d
INCLUDED_IMF_OUTPUT_FILE_H	3rdparty/openexr-1.7.0/ImfOutputFile.h	/^#define INCLUDED_IMF_OUTPUT_FILE_H$/;"	d
INCLUDED_IMF_PIXEL_TYPE_H	3rdparty/openexr-1.7.0/ImfPixelType.h	/^#define INCLUDED_IMF_PIXEL_TYPE_H$/;"	d
INCLUDED_IMF_PIZ_COMPRESSOR_H	3rdparty/openexr-1.7.0/ImfPizCompressor.h	/^#define INCLUDED_IMF_PIZ_COMPRESSOR_H$/;"	d
INCLUDED_IMF_PREVIEW_IMAGE_ATTRIBUTE_H	3rdparty/openexr-1.7.0/ImfPreviewImageAttribute.h	/^#define INCLUDED_IMF_PREVIEW_IMAGE_ATTRIBUTE_H$/;"	d
INCLUDED_IMF_PREVIEW_IMAGE_H	3rdparty/openexr-1.7.0/ImfPreviewImage.h	/^#define INCLUDED_IMF_PREVIEW_IMAGE_H$/;"	d
INCLUDED_IMF_PXR24_COMPRESSOR_H	3rdparty/openexr-1.7.0/ImfPxr24Compressor.h	/^#define INCLUDED_IMF_PXR24_COMPRESSOR_H$/;"	d
INCLUDED_IMF_RATIONAL_ATTRIBUTE_H	3rdparty/openexr-1.7.0/ImfRationalAttribute.h	/^#define INCLUDED_IMF_RATIONAL_ATTRIBUTE_H$/;"	d
INCLUDED_IMF_RATIONAL_H	3rdparty/openexr-1.7.0/ImfRational.h	/^#define INCLUDED_IMF_RATIONAL_H$/;"	d
INCLUDED_IMF_RGBA_FILE_H	3rdparty/openexr-1.7.0/ImfRgbaFile.h	/^#define INCLUDED_IMF_RGBA_FILE_H$/;"	d
INCLUDED_IMF_RGBA_H	3rdparty/openexr-1.7.0/ImfRgba.h	/^#define INCLUDED_IMF_RGBA_H$/;"	d
INCLUDED_IMF_RGBA_YCA_H	3rdparty/openexr-1.7.0/ImfRgbaYca.h	/^#define INCLUDED_IMF_RGBA_YCA_H$/;"	d
INCLUDED_IMF_RLE_COMPRESSOR_H	3rdparty/openexr-1.7.0/ImfRleCompressor.h	/^#define INCLUDED_IMF_RLE_COMPRESSOR_H$/;"	d
INCLUDED_IMF_SCAN_LINE_INPUT_FILE_H	3rdparty/openexr-1.7.0/ImfScanLineInputFile.h	/^#define INCLUDED_IMF_SCAN_LINE_INPUT_FILE_H$/;"	d
INCLUDED_IMF_STANDARD_ATTRIBUTES_H	3rdparty/openexr-1.7.0/ImfStandardAttributes.h	/^#define INCLUDED_IMF_STANDARD_ATTRIBUTES_H$/;"	d
INCLUDED_IMF_STD_IO_H	3rdparty/openexr-1.7.0/ImfStdIO.h	/^#define INCLUDED_IMF_STD_IO_H$/;"	d
INCLUDED_IMF_STRINGVECTOR_ATTRIBUTE_H	3rdparty/openexr-1.7.0/ImfStringVectorAttribute.h	/^#define INCLUDED_IMF_STRINGVECTOR_ATTRIBUTE_H$/;"	d
INCLUDED_IMF_STRING_ATTRIBUTE_H	3rdparty/openexr-1.7.0/ImfStringAttribute.h	/^#define INCLUDED_IMF_STRING_ATTRIBUTE_H$/;"	d
INCLUDED_IMF_TEST_FILE_H	3rdparty/openexr-1.7.0/ImfTestFile.h	/^#define INCLUDED_IMF_TEST_FILE_H$/;"	d
INCLUDED_IMF_THREADING_H	3rdparty/openexr-1.7.0/ImfThreading.h	/^#define INCLUDED_IMF_THREADING_H$/;"	d
INCLUDED_IMF_TILED_INPUT_FILE_H	3rdparty/openexr-1.7.0/ImfTiledInputFile.h	/^#define INCLUDED_IMF_TILED_INPUT_FILE_H$/;"	d
INCLUDED_IMF_TILED_MISC_H	3rdparty/openexr-1.7.0/ImfTiledMisc.h	/^#define INCLUDED_IMF_TILED_MISC_H$/;"	d
INCLUDED_IMF_TILED_OUTPUT_FILE_H	3rdparty/openexr-1.7.0/ImfTiledOutputFile.h	/^#define INCLUDED_IMF_TILED_OUTPUT_FILE_H$/;"	d
INCLUDED_IMF_TILED_RGBA_FILE_H	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.h	/^#define INCLUDED_IMF_TILED_RGBA_FILE_H$/;"	d
INCLUDED_IMF_TILE_DESCRIPTION_ATTRIBUTE_H	3rdparty/openexr-1.7.0/ImfTileDescriptionAttribute.h	/^#define INCLUDED_IMF_TILE_DESCRIPTION_ATTRIBUTE_H$/;"	d
INCLUDED_IMF_TILE_DESCRIPTION_H	3rdparty/openexr-1.7.0/ImfTileDescription.h	/^#define INCLUDED_IMF_TILE_DESCRIPTION_H$/;"	d
INCLUDED_IMF_TILE_OFFSETS_H	3rdparty/openexr-1.7.0/ImfTileOffsets.h	/^#define INCLUDED_IMF_TILE_OFFSETS_H$/;"	d
INCLUDED_IMF_TIME_CODE_ATTRIBUTE_H	3rdparty/openexr-1.7.0/ImfTimeCodeAttribute.h	/^#define INCLUDED_IMF_TIME_CODE_ATTRIBUTE_H$/;"	d
INCLUDED_IMF_TIME_CODE_H	3rdparty/openexr-1.7.0/ImfTimeCode.h	/^#define INCLUDED_IMF_TIME_CODE_H$/;"	d
INCLUDED_IMF_VEC_ATTRIBUTE_H	3rdparty/openexr-1.7.0/ImfVecAttribute.h	/^#define INCLUDED_IMF_VEC_ATTRIBUTE_H$/;"	d
INCLUDED_IMF_VERSION_H	3rdparty/openexr-1.7.0/ImfVersion.h	/^#define INCLUDED_IMF_VERSION_H$/;"	d
INCLUDED_IMF_WAV_H	3rdparty/openexr-1.7.0/ImfWav.h	/^#define INCLUDED_IMF_WAV_H$/;"	d
INCLUDED_IMF_XDR_H	3rdparty/openexr-1.7.0/ImfXdr.h	/^#define INCLUDED_IMF_XDR_H$/;"	d
INCLUDED_IMF_ZIP_COMPRESSOR_H	3rdparty/openexr-1.7.0/ImfZipCompressor.h	/^#define INCLUDED_IMF_ZIP_COMPRESSOR_H$/;"	d
INCLUDE_STB_IMAGE_WRITE_H	core/stb_image_write.h	/^#define INCLUDE_STB_IMAGE_WRITE_H$/;"	d
INCL_FILE	core/pbrtlex.cpp	/^#define INCL_FILE /;"	d	file:
INCREASING_Y	3rdparty/openexr-1.7.0/ImfLineOrder.h	/^    INCREASING_Y = 0,	\/\/ first scan line has lowest y coordinate$/;"	e	enum:Imf::LineOrder
INFINITY	core/pbrt.h	/^#define INFINITY /;"	d
INF_EXCEPTION	3rdparty/ilmbase-1.0.2/ImathVec.h	/^enum InfException {INF_EXCEPTION};$/;"	e	enum:Imath::InfException
INITBITS	3rdparty/zlib-1.2.5/infback.c	/^#define INITBITS(/;"	d	file:
INITBITS	3rdparty/zlib-1.2.5/inflate.c	/^#define INITBITS(/;"	d	file:
INITIAL	core/pbrtlex.cpp	/^#define INITIAL /;"	d	file:
INIT_STATE	3rdparty/zlib-1.2.5/deflate.h	/^#define INIT_STATE /;"	d
INKSET_CMYK	3rdparty/tiff-3.9.4/tiff.h	/^#define	    INKSET_CMYK	/;"	d
INKSET_MULTIINK	3rdparty/tiff-3.9.4/tiff.h	/^#define	    INKSET_MULTIINK	/;"	d
INSERT_STRING	3rdparty/zlib-1.2.5/deflate.c	/^#define INSERT_STRING(/;"	d	file:
INT16_MAX	core/pbrtlex.cpp	/^#define INT16_MAX /;"	d	file:
INT16_MIN	core/pbrtlex.cpp	/^#define INT16_MIN /;"	d	file:
INT32_MAX	core/pbrtlex.cpp	/^#define INT32_MAX /;"	d	file:
INT32_MIN	core/pbrtlex.cpp	/^#define INT32_MIN /;"	d	file:
INT8_MAX	core/pbrtlex.cpp	/^#define INT8_MAX /;"	d	file:
INT8_MIN	core/pbrtlex.cpp	/^#define INT8_MIN /;"	d	file:
INTERP	core/spectrum.cpp	/^#define INTERP(/;"	d	file:
INTERP	core/spectrum.cpp	/^#undef INTERP$/;"	d	file:
INV_255	tools/tifftoexr.cpp	/^#define INV_255 /;"	d	file:
INV_FOURPI	core/pbrt.h	/^#define INV_FOURPI /;"	d
INV_PI	core/pbrt.h	/^#define INV_PI /;"	d
INV_TWOPI	core/pbrt.h	/^#define INV_TWOPI /;"	d
IPTC_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.h	/^#define IPTC_SUPPORT$/;"	d
IPTC_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.vc.h	/^#define IPTC_SUPPORT$/;"	d
IPTC_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.wince.h	/^#define IPTC_SUPPORT$/;"	d
IPos	3rdparty/zlib-1.2.5/deflate.h	/^typedef unsigned IPos;$/;"	t
IStream	3rdparty/openexr-1.7.0/ImfIO.cpp	/^IStream::IStream (const char fileName[]): _fileName (fileName)$/;"	f	class:Imf::IStream
IStream	3rdparty/openexr-1.7.0/ImfIO.h	/^class IStream$/;"	c	namespace:Imf
IdentityMapping3D	core/texture.h	/^    IdentityMapping3D(const Transform &x)$/;"	f	class:IdentityMapping3D
IdentityMapping3D	core/texture.h	/^class IdentityMapping3D : public TextureMapping3D {$/;"	c
Iex	3rdparty/ilmbase-1.0.2/IexBaseExc.cpp	/^namespace Iex {$/;"	n	file:
Iex	3rdparty/ilmbase-1.0.2/IexBaseExc.h	/^namespace Iex {$/;"	n
Iex	3rdparty/ilmbase-1.0.2/IexErrnoExc.h	/^namespace Iex {$/;"	n
Iex	3rdparty/ilmbase-1.0.2/IexMathExc.h	/^namespace Iex {$/;"	n
Iex	3rdparty/ilmbase-1.0.2/IexThrowErrnoExc.cpp	/^namespace Iex {$/;"	n	file:
Iex	3rdparty/ilmbase-1.0.2/IexThrowErrnoExc.h	/^namespace Iex {$/;"	n
IlmThread	3rdparty/ilmbase-1.0.2/IlmThread.cpp	/^namespace IlmThread {$/;"	n	file:
IlmThread	3rdparty/ilmbase-1.0.2/IlmThread.h	/^namespace IlmThread {$/;"	n
IlmThread	3rdparty/ilmbase-1.0.2/IlmThreadMutex.cpp	/^namespace IlmThread {$/;"	n	file:
IlmThread	3rdparty/ilmbase-1.0.2/IlmThreadMutex.h	/^namespace IlmThread {$/;"	n
IlmThread	3rdparty/ilmbase-1.0.2/IlmThreadMutexPosix.cpp	/^namespace IlmThread {$/;"	n	file:
IlmThread	3rdparty/ilmbase-1.0.2/IlmThreadMutexWin32.cpp	/^namespace IlmThread {$/;"	n	file:
IlmThread	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^namespace IlmThread {$/;"	n	file:
IlmThread	3rdparty/ilmbase-1.0.2/IlmThreadPool.h	/^namespace IlmThread {$/;"	n
IlmThread	3rdparty/ilmbase-1.0.2/IlmThreadPosix.cpp	/^namespace IlmThread {$/;"	n	file:
IlmThread	3rdparty/ilmbase-1.0.2/IlmThreadSemaphore.cpp	/^namespace IlmThread {$/;"	n	file:
IlmThread	3rdparty/ilmbase-1.0.2/IlmThreadSemaphore.h	/^namespace IlmThread {$/;"	n
IlmThread	3rdparty/ilmbase-1.0.2/IlmThreadSemaphorePosix.cpp	/^namespace IlmThread {$/;"	n	file:
IlmThread	3rdparty/ilmbase-1.0.2/IlmThreadSemaphorePosixCompat.cpp	/^namespace IlmThread {$/;"	n	file:
IlmThread	3rdparty/ilmbase-1.0.2/IlmThreadSemaphoreWin32.cpp	/^namespace IlmThread {$/;"	n	file:
IlmThread	3rdparty/ilmbase-1.0.2/IlmThreadWin32.cpp	/^namespace IlmThread {$/;"	n	file:
ImageFilm	film/image.cpp	/^ImageFilm::ImageFilm(int xres, int yres, Filter *filt, const float crop[4],$/;"	f	class:ImageFilm
ImageFilm	film/image.h	/^class ImageFilm : public Film {$/;"	c
ImageTexture	textures/imagemap.cpp	/^ImageTexture<Tmemory, Treturn>::ImageTexture(TextureMapping2D *m,$/;"	f	class:ImageTexture
ImageTexture	textures/imagemap.h	/^    class ImageTexture : public Texture<Treturn> {$/;"	c
ImageWrap	core/mipmap.h	/^} ImageWrap;$/;"	t	typeref:enum:__anon82
Imath	3rdparty/ilmbase-1.0.2/ImathBox.h	/^namespace Imath {$/;"	n
Imath	3rdparty/ilmbase-1.0.2/ImathBoxAlgo.h	/^namespace Imath {$/;"	n
Imath	3rdparty/ilmbase-1.0.2/ImathColor.h	/^namespace Imath {$/;"	n
Imath	3rdparty/ilmbase-1.0.2/ImathColorAlgo.cpp	/^namespace Imath {$/;"	n	file:
Imath	3rdparty/ilmbase-1.0.2/ImathColorAlgo.h	/^namespace Imath {$/;"	n
Imath	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^namespace Imath {$/;"	n
Imath	3rdparty/ilmbase-1.0.2/ImathExc.h	/^namespace Imath {$/;"	n
Imath	3rdparty/ilmbase-1.0.2/ImathFrame.h	/^namespace Imath {$/;"	n
Imath	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^namespace Imath {$/;"	n
Imath	3rdparty/ilmbase-1.0.2/ImathFun.cpp	/^namespace Imath {$/;"	n	file:
Imath	3rdparty/ilmbase-1.0.2/ImathFun.h	/^namespace Imath {$/;"	n
Imath	3rdparty/ilmbase-1.0.2/ImathGL.h	/^namespace Imath {$/;"	n
Imath	3rdparty/ilmbase-1.0.2/ImathHalfLimits.h	/^namespace Imath {$/;"	n
Imath	3rdparty/ilmbase-1.0.2/ImathInt64.h	/^namespace Imath {$/;"	n
Imath	3rdparty/ilmbase-1.0.2/ImathInterval.h	/^namespace Imath {$/;"	n
Imath	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^namespace Imath {$/;"	n
Imath	3rdparty/ilmbase-1.0.2/ImathLine.h	/^namespace Imath {$/;"	n
Imath	3rdparty/ilmbase-1.0.2/ImathLineAlgo.h	/^namespace Imath {$/;"	n
Imath	3rdparty/ilmbase-1.0.2/ImathMath.h	/^namespace Imath {$/;"	n
Imath	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^namespace Imath {$/;"	n
Imath	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.cpp	/^namespace Imath {$/;"	n	file:
Imath	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^namespace Imath {$/;"	n
Imath	3rdparty/ilmbase-1.0.2/ImathPlane.h	/^namespace Imath {$/;"	n
Imath	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^namespace Imath {$/;"	n
Imath	3rdparty/ilmbase-1.0.2/ImathRandom.cpp	/^namespace Imath {$/;"	n	file:
Imath	3rdparty/ilmbase-1.0.2/ImathRandom.h	/^namespace Imath {$/;"	n
Imath	3rdparty/ilmbase-1.0.2/ImathRoots.h	/^namespace Imath {$/;"	n
Imath	3rdparty/ilmbase-1.0.2/ImathShear.cpp	/^namespace Imath {$/;"	n	file:
Imath	3rdparty/ilmbase-1.0.2/ImathShear.h	/^namespace Imath {$/;"	n
Imath	3rdparty/ilmbase-1.0.2/ImathSphere.h	/^namespace Imath {$/;"	n
Imath	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^namespace Imath {$/;"	n	file:
Imath	3rdparty/ilmbase-1.0.2/ImathVec.h	/^namespace Imath {$/;"	n
Imath	3rdparty/ilmbase-1.0.2/ImathVecAlgo.h	/^namespace Imath {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfAcesFile.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfArray.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfAttribute.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfAttribute.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfAutoArray.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfB44Compressor.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfB44Compressor.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfBoxAttribute.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfBoxAttribute.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfChannelList.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfChannelList.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfChannelListAttribute.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfChannelListAttribute.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfCheckedArithmetic.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfChromaticities.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfChromaticities.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfChromaticitiesAttribute.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfChromaticitiesAttribute.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfCompression.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfCompressionAttribute.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfCompressionAttribute.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfCompressor.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfCompressor.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfConvert.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfConvert.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfDoubleAttribute.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfDoubleAttribute.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfEnvmap.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfEnvmap.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfEnvmapAttribute.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfEnvmapAttribute.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfFloatAttribute.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfFloatAttribute.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfFrameBuffer.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfFramesPerSecond.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfFramesPerSecond.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfHeader.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfHuf.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfIO.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfIO.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfInputFile.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfInt64.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfIntAttribute.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfIntAttribute.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfKeyCode.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfKeyCode.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfKeyCodeAttribute.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfKeyCodeAttribute.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfLineOrder.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfLineOrderAttribute.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfLineOrderAttribute.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfLut.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfLut.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfMatrixAttribute.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfMatrixAttribute.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfMisc.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfMisc.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfMultiView.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfMultiView.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfName.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfOpaqueAttribute.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfOpaqueAttribute.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfOutputFile.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfPixelType.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfPizCompressor.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfPizCompressor.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfPreviewImage.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfPreviewImage.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfPreviewImageAttribute.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfPreviewImageAttribute.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfPxr24Compressor.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfPxr24Compressor.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfRational.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfRational.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfRationalAttribute.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfRationalAttribute.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfRgba.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfRgbaFile.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfRgbaYca.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfRgbaYca.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfRleCompressor.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfRleCompressor.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfScanLineInputFile.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfStandardAttributes.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfStandardAttributes.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfStdIO.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfStdIO.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfStringAttribute.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfStringAttribute.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfStringVectorAttribute.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfStringVectorAttribute.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfTestFile.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfTestFile.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfThreading.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfThreading.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfTileDescription.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfTileDescriptionAttribute.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfTileDescriptionAttribute.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfTileOffsets.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfTileOffsets.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfTiledInputFile.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfTiledMisc.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfTiledMisc.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfTiledOutputFile.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfTimeCode.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfTimeCodeAttribute.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfTimeCodeAttribute.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfVecAttribute.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfVecAttribute.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfVersion.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfVersion.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfWav.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfWav.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfXdr.h	/^namespace Imf {$/;"	n
Imf	3rdparty/openexr-1.7.0/ImfZipCompressor.cpp	/^namespace Imf {$/;"	n	file:
Imf	3rdparty/openexr-1.7.0/ImfZipCompressor.h	/^namespace Imf {$/;"	n
ImfApplyLut	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfApplyLut (ImfLut *lut, ImfRgba *data, int nData, int stride)$/;"	f
ImfCloseInputFile	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfCloseInputFile (ImfInputFile *in)$/;"	f
ImfCloseOutputFile	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfCloseOutputFile (ImfOutputFile *out)$/;"	f
ImfCloseTiledInputFile	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfCloseTiledInputFile (ImfTiledInputFile *in)$/;"	f
ImfCloseTiledOutputFile	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfCloseTiledOutputFile (ImfTiledOutputFile *out)$/;"	f
ImfCopyHeader	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfCopyHeader (const ImfHeader *hdr)$/;"	f
ImfDeleteHeader	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfDeleteHeader (ImfHeader *hdr)$/;"	f
ImfDeleteLut	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfDeleteLut (ImfLut *lut)$/;"	f
ImfErrorMessage	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfErrorMessage ()$/;"	f
ImfFloatToHalf	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfFloatToHalf (float f, ImfHalf *h)$/;"	f
ImfFloatToHalfArray	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfFloatToHalfArray (int n, const float f[\/*n*\/], ImfHalf h[\/*n*\/])$/;"	f
ImfHalf	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^typedef unsigned short ImfHalf;$/;"	t
ImfHalfToFloat	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHalfToFloat (ImfHalf h)$/;"	f
ImfHalfToFloatArray	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHalfToFloatArray (int n, const ImfHalf h[\/*n*\/], float f[\/*n*\/])$/;"	f
ImfHeader	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^typedef struct ImfHeader ImfHeader;$/;"	t	typeref:struct:ImfHeader
ImfHeaderBox2fAttribute	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderBox2fAttribute (const ImfHeader *hdr,$/;"	f
ImfHeaderBox2iAttribute	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderBox2iAttribute (const ImfHeader *hdr,$/;"	f
ImfHeaderCompression	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderCompression (const ImfHeader *hdr)$/;"	f
ImfHeaderDataWindow	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderDataWindow (const ImfHeader *hdr,$/;"	f
ImfHeaderDisplayWindow	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderDisplayWindow (const ImfHeader *hdr,$/;"	f
ImfHeaderDoubleAttribute	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderDoubleAttribute (const ImfHeader *hdr,$/;"	f
ImfHeaderFloatAttribute	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderFloatAttribute (const ImfHeader *hdr, const char name[], float *value)$/;"	f
ImfHeaderIntAttribute	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderIntAttribute (const ImfHeader *hdr, const char name[], int *value)$/;"	f
ImfHeaderLineOrder	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderLineOrder (const ImfHeader *hdr)$/;"	f
ImfHeaderM33fAttribute	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderM33fAttribute (const ImfHeader *hdr,$/;"	f
ImfHeaderM44fAttribute	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderM44fAttribute (const ImfHeader *hdr,$/;"	f
ImfHeaderPixelAspectRatio	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderPixelAspectRatio (const ImfHeader *hdr)$/;"	f
ImfHeaderScreenWindowCenter	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderScreenWindowCenter (const ImfHeader *hdr, float *x, float *y)$/;"	f
ImfHeaderScreenWindowWidth	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderScreenWindowWidth (const ImfHeader *hdr)$/;"	f
ImfHeaderSetBox2fAttribute	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderSetBox2fAttribute (ImfHeader *hdr,$/;"	f
ImfHeaderSetBox2iAttribute	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderSetBox2iAttribute (ImfHeader *hdr,$/;"	f
ImfHeaderSetCompression	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderSetCompression (ImfHeader *hdr, int compression)$/;"	f
ImfHeaderSetDataWindow	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderSetDataWindow (ImfHeader *hdr,$/;"	f
ImfHeaderSetDisplayWindow	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderSetDisplayWindow (ImfHeader *hdr,$/;"	f
ImfHeaderSetDoubleAttribute	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderSetDoubleAttribute (ImfHeader *hdr, const char name[], double value)$/;"	f
ImfHeaderSetFloatAttribute	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderSetFloatAttribute (ImfHeader *hdr, const char name[], float value)$/;"	f
ImfHeaderSetIntAttribute	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderSetIntAttribute (ImfHeader *hdr, const char name[], int value)$/;"	f
ImfHeaderSetLineOrder	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderSetLineOrder (ImfHeader *hdr, int lineOrder)$/;"	f
ImfHeaderSetM33fAttribute	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderSetM33fAttribute (ImfHeader *hdr,$/;"	f
ImfHeaderSetM44fAttribute	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderSetM44fAttribute (ImfHeader *hdr,$/;"	f
ImfHeaderSetPixelAspectRatio	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderSetPixelAspectRatio (ImfHeader *hdr, float pixelAspectRatio)$/;"	f
ImfHeaderSetScreenWindowCenter	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderSetScreenWindowCenter (ImfHeader *hdr, float x, float y)$/;"	f
ImfHeaderSetScreenWindowWidth	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderSetScreenWindowWidth (ImfHeader *hdr, float width)$/;"	f
ImfHeaderSetStringAttribute	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderSetStringAttribute (ImfHeader *hdr,$/;"	f
ImfHeaderSetV2fAttribute	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderSetV2fAttribute (ImfHeader *hdr,$/;"	f
ImfHeaderSetV2iAttribute	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderSetV2iAttribute (ImfHeader *hdr,$/;"	f
ImfHeaderSetV3fAttribute	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderSetV3fAttribute (ImfHeader *hdr,$/;"	f
ImfHeaderSetV3iAttribute	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderSetV3iAttribute (ImfHeader *hdr,$/;"	f
ImfHeaderStringAttribute	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderStringAttribute (const ImfHeader *hdr,$/;"	f
ImfHeaderV2fAttribute	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderV2fAttribute (const ImfHeader *hdr,$/;"	f
ImfHeaderV2iAttribute	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderV2iAttribute (const ImfHeader *hdr,$/;"	f
ImfHeaderV3fAttribute	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderV3fAttribute (const ImfHeader *hdr,$/;"	f
ImfHeaderV3iAttribute	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfHeaderV3iAttribute (const ImfHeader *hdr,$/;"	f
ImfInputChannels	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfInputChannels (const ImfInputFile *in)$/;"	f
ImfInputFile	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^typedef struct ImfInputFile ImfInputFile;$/;"	t	typeref:struct:ImfInputFile
ImfInputFileName	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfInputFileName (const ImfInputFile *in)$/;"	f
ImfInputHeader	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfInputHeader (const ImfInputFile *in)$/;"	f
ImfInputReadPixels	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfInputReadPixels (ImfInputFile *in, int scanLine1, int scanLine2)$/;"	f
ImfInputSetFrameBuffer	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfInputSetFrameBuffer (ImfInputFile *in,$/;"	f
ImfLut	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^typedef struct ImfLut ImfLut;$/;"	t	typeref:struct:ImfLut
ImfNewHeader	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfNewHeader (void)$/;"	f
ImfNewRound12logLut	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfNewRound12logLut (int channels)$/;"	f
ImfNewRoundNBitLut	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfNewRoundNBitLut (unsigned int n, int channels)$/;"	f
ImfOpenInputFile	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfOpenInputFile (const char name[])$/;"	f
ImfOpenOutputFile	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfOpenOutputFile (const char name[], const ImfHeader *hdr, int channels)$/;"	f
ImfOpenTiledInputFile	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfOpenTiledInputFile (const char name[])$/;"	f
ImfOpenTiledOutputFile	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfOpenTiledOutputFile (const char name[],$/;"	f
ImfOutputChannels	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfOutputChannels (const ImfOutputFile *out)$/;"	f
ImfOutputCurrentScanLine	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfOutputCurrentScanLine (const ImfOutputFile *out)$/;"	f
ImfOutputFile	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^typedef struct ImfOutputFile ImfOutputFile;$/;"	t	typeref:struct:ImfOutputFile
ImfOutputHeader	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfOutputHeader (const ImfOutputFile *out)$/;"	f
ImfOutputSetFrameBuffer	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfOutputSetFrameBuffer (ImfOutputFile *out,$/;"	f
ImfOutputWritePixels	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfOutputWritePixels (ImfOutputFile *out, int numScanLines)$/;"	f
ImfRgba	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^struct ImfRgba$/;"	s
ImfRgba	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^typedef struct ImfRgba ImfRgba;$/;"	t	typeref:struct:ImfRgba
ImfTiledInputChannels	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfTiledInputChannels (const ImfTiledInputFile *in)$/;"	f
ImfTiledInputFile	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^typedef struct ImfTiledInputFile ImfTiledInputFile;$/;"	t	typeref:struct:ImfTiledInputFile
ImfTiledInputFileName	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfTiledInputFileName (const ImfTiledInputFile *in)$/;"	f
ImfTiledInputHeader	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfTiledInputHeader (const ImfTiledInputFile *in)$/;"	f
ImfTiledInputLevelMode	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfTiledInputLevelMode (const ImfTiledInputFile *in)$/;"	f
ImfTiledInputLevelRoundingMode	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfTiledInputLevelRoundingMode (const ImfTiledInputFile *in)$/;"	f
ImfTiledInputReadTile	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfTiledInputReadTile (ImfTiledInputFile *in,$/;"	f
ImfTiledInputReadTiles	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfTiledInputReadTiles (ImfTiledInputFile *in,$/;"	f
ImfTiledInputSetFrameBuffer	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfTiledInputSetFrameBuffer (ImfTiledInputFile *in,$/;"	f
ImfTiledInputTileXSize	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfTiledInputTileXSize (const ImfTiledInputFile *in)$/;"	f
ImfTiledInputTileYSize	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfTiledInputTileYSize (const ImfTiledInputFile *in)$/;"	f
ImfTiledOutputChannels	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfTiledOutputChannels (const ImfTiledOutputFile *out)$/;"	f
ImfTiledOutputFile	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^typedef struct ImfTiledOutputFile ImfTiledOutputFile;$/;"	t	typeref:struct:ImfTiledOutputFile
ImfTiledOutputHeader	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfTiledOutputHeader (const ImfTiledOutputFile *out)$/;"	f
ImfTiledOutputLevelMode	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfTiledOutputLevelMode (const ImfTiledOutputFile *out)$/;"	f
ImfTiledOutputLevelRoundingMode	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfTiledOutputLevelRoundingMode (const ImfTiledOutputFile *out)$/;"	f
ImfTiledOutputSetFrameBuffer	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfTiledOutputSetFrameBuffer (ImfTiledOutputFile *out,$/;"	f
ImfTiledOutputTileXSize	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfTiledOutputTileXSize (const ImfTiledOutputFile *out)$/;"	f
ImfTiledOutputTileYSize	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfTiledOutputTileYSize (const ImfTiledOutputFile *out)$/;"	f
ImfTiledOutputWriteTile	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfTiledOutputWriteTile (ImfTiledOutputFile *out,$/;"	f
ImfTiledOutputWriteTiles	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^ImfTiledOutputWriteTiles (ImfTiledOutputFile *out,$/;"	f
InSliceInfo	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^InSliceInfo::InSliceInfo (PixelType tifb,$/;"	f	class:Imf::__anon31::InSliceInfo
InSliceInfo	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^struct InSliceInfo$/;"	s	namespace:Imf::__anon31	file:
IncludeInfo	core/pbrtlex.cpp	/^struct IncludeInfo {$/;"	s	file:
InfException	3rdparty/ilmbase-1.0.2/ImathVec.h	/^enum InfException {INF_EXCEPTION};$/;"	g	namespace:Imath
InfiniteAreaCube	lights/infinite.cpp	/^    InfiniteAreaCube(const InfiniteAreaLight *l, const Scene *s,$/;"	f	struct:InfiniteAreaCube
InfiniteAreaCube	lights/infinite.cpp	/^struct InfiniteAreaCube {$/;"	s	file:
InfiniteAreaLight	lights/infinite.cpp	/^InfiniteAreaLight::InfiniteAreaLight(const Transform &light2world,$/;"	f	class:InfiniteAreaLight
InfiniteAreaLight	lights/infinite.h	/^class InfiniteAreaLight : public Light {$/;"	c
Info	core/error.cpp	/^void Info(const char *format, ...) {$/;"	f
Init	core/spectrum.h	/^    static void Init() {$/;"	f	class:SampledSpectrum
InitCCITTFax3	3rdparty/tiff-3.9.4/tif_fax3.c	/^InitCCITTFax3(TIFF* tif)$/;"	f	file:
InitHierarchy	integrators/dipolesubsurface.cpp	/^    void InitHierarchy() {$/;"	f	struct:SubsurfaceOctreeNode
InitInterior	accelerators/bvh.cpp	/^    void InitInterior(uint32_t axis, BVHBuildNode *c0, BVHBuildNode *c1) {$/;"	f	struct:BVHBuildNode
InitLeaf	accelerators/bvh.cpp	/^    void InitLeaf(uint32_t first, uint32_t n, const BBox &b) {$/;"	f	struct:BVHBuildNode
InitMaterial	tools/obj2pbrt.cpp	/^void InitMaterial(material_t& material) {$/;"	f	namespace:tinyobj
InitParamSet	core/pbrtparse.cpp	/^static void InitParamSet(ParamSet &ps, SpectrumType type) {$/;"	f	file:
InputFile	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^InputFile::InputFile (IStream &is, int numThreads):$/;"	f	class:Imf::InputFile
InputFile	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^InputFile::InputFile (const char fileName[], int numThreads):$/;"	f	class:Imf::InputFile
InputFile	3rdparty/openexr-1.7.0/ImfInputFile.h	/^class InputFile$/;"	c	namespace:Imf
InputLayout	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^    enum InputLayout { XYZLayout, IJKLayout };$/;"	g	class:Imath::Euler
Insert	integrators/dipolesubsurface.cpp	/^    void Insert(const BBox &nodeBound, IrradiancePoint *ip,$/;"	f	struct:SubsurfaceOctreeNode
Inside	core/geometry.h	/^    bool Inside(const Point &pt) const {$/;"	f	class:BBox
Int16	tools/ply.h	/^#define Int16 /;"	d
Int32	tools/ply.h	/^#define Int32 /;"	d
Int64	3rdparty/ilmbase-1.0.2/ImathInt64.h	/^    typedef unsigned __int64 Int64;$/;"	t	namespace:Imath
Int8	tools/ply.h	/^#define Int8 /;"	d
IntAttribute	3rdparty/openexr-1.7.0/ImfIntAttribute.h	/^typedef TypedAttribute<int> IntAttribute;$/;"	t	namespace:Imf
Integrator	core/integrator.h	/^class Integrator {$/;"	c
Intensity	lights/goniometric.h	/^    Spectrum Intensity;$/;"	m	class:GonioPhotometricLight
Intensity	lights/point.h	/^    Spectrum Intensity;$/;"	m	class:PointLight
Intensity	lights/projection.h	/^    Spectrum Intensity;$/;"	m	class:ProjectionLight
Intensity	lights/spot.h	/^    Spectrum Intensity;$/;"	m	class:SpotLight
Interpolate	core/transform.cpp	/^void AnimatedTransform::Interpolate(float time, Transform *t) const {$/;"	f	class:AnimatedTransform
InterpolateSpectrumSamples	core/spectrum.cpp	/^float InterpolateSpectrumSamples(const float *lambda, const float *vals,$/;"	f
Intersect	accelerators/bvh.cpp	/^bool BVHAccel::Intersect(const Ray &ray, Intersection *isect) const {$/;"	f	class:BVHAccel
Intersect	accelerators/grid.cpp	/^bool GridAccel::Intersect(const Ray &ray, Intersection *isect) const {$/;"	f	class:GridAccel
Intersect	accelerators/grid.cpp	/^bool Voxel::Intersect(const Ray &ray, Intersection *isect,$/;"	f	class:Voxel
Intersect	accelerators/kdtreeaccel.cpp	/^bool KdTreeAccel::Intersect(const Ray &ray,$/;"	f	class:KdTreeAccel
Intersect	core/primitive.cpp	/^bool GeometricPrimitive::Intersect(const Ray &r,$/;"	f	class:GeometricPrimitive
Intersect	core/primitive.cpp	/^bool TransformedPrimitive::Intersect(const Ray &r,$/;"	f	class:TransformedPrimitive
Intersect	core/scene.h	/^    bool Intersect(const Ray &ray, Intersection *isect) const {$/;"	f	class:Scene
Intersect	core/shape.cpp	/^bool Shape::Intersect(const Ray &ray, float *tHit, float *rayEpsilon,$/;"	f	class:Shape
Intersect	shapes/cone.cpp	/^bool Cone::Intersect(const Ray &r, float *tHit, float *rayEpsilon,$/;"	f	class:Cone
Intersect	shapes/cylinder.cpp	/^bool Cylinder::Intersect(const Ray &r, float *tHit, float *rayEpsilon,$/;"	f	class:Cylinder
Intersect	shapes/disk.cpp	/^bool Disk::Intersect(const Ray &r, float *tHit, float *rayEpsilon,$/;"	f	class:Disk
Intersect	shapes/hyperboloid.cpp	/^bool Hyperboloid::Intersect(const Ray &r, float *tHit,$/;"	f	class:Hyperboloid
Intersect	shapes/paraboloid.cpp	/^bool Paraboloid::Intersect(const Ray &r, float *tHit,$/;"	f	class:Paraboloid
Intersect	shapes/sphere.cpp	/^bool Sphere::Intersect(const Ray &r, float *tHit, float *rayEpsilon,$/;"	f	class:Sphere
Intersect	shapes/trianglemesh.cpp	/^bool Triangle::Intersect(const Ray &ray, float *tHit, float *rayEpsilon,$/;"	f	class:Triangle
IntersectP	accelerators/bvh.cpp	/^bool BVHAccel::IntersectP(const Ray &ray) const {$/;"	f	class:BVHAccel
IntersectP	accelerators/bvh.cpp	/^static inline bool IntersectP(const BBox &bounds, const Ray &ray,$/;"	f	file:
IntersectP	accelerators/grid.cpp	/^bool GridAccel::IntersectP(const Ray &ray) const {$/;"	f	class:GridAccel
IntersectP	accelerators/grid.cpp	/^bool Voxel::IntersectP(const Ray &ray, RWMutexLock &lock) {$/;"	f	class:Voxel
IntersectP	accelerators/kdtreeaccel.cpp	/^bool KdTreeAccel::IntersectP(const Ray &ray) const {$/;"	f	class:KdTreeAccel
IntersectP	core/geometry.cpp	/^bool BBox::IntersectP(const Ray &ray, float *hitt0,$/;"	f	class:BBox
IntersectP	core/primitive.cpp	/^bool GeometricPrimitive::IntersectP(const Ray &r) const {$/;"	f	class:GeometricPrimitive
IntersectP	core/primitive.cpp	/^bool TransformedPrimitive::IntersectP(const Ray &r) const {$/;"	f	class:TransformedPrimitive
IntersectP	core/scene.h	/^    bool IntersectP(const Ray &ray) const {$/;"	f	class:Scene
IntersectP	core/shape.cpp	/^bool Shape::IntersectP(const Ray &ray) const {$/;"	f	class:Shape
IntersectP	core/volume.cpp	/^bool AggregateVolume::IntersectP(const Ray &ray,$/;"	f	class:AggregateVolume
IntersectP	shapes/cone.cpp	/^bool Cone::IntersectP(const Ray &r) const {$/;"	f	class:Cone
IntersectP	shapes/cylinder.cpp	/^bool Cylinder::IntersectP(const Ray &r) const {$/;"	f	class:Cylinder
IntersectP	shapes/disk.cpp	/^bool Disk::IntersectP(const Ray &r) const {$/;"	f	class:Disk
IntersectP	shapes/hyperboloid.cpp	/^bool Hyperboloid::IntersectP(const Ray &r) const {$/;"	f	class:Hyperboloid
IntersectP	shapes/paraboloid.cpp	/^bool Paraboloid::IntersectP(const Ray &r) const {$/;"	f	class:Paraboloid
IntersectP	shapes/sphere.cpp	/^bool Sphere::IntersectP(const Ray &r) const {$/;"	f	class:Sphere
IntersectP	shapes/trianglemesh.cpp	/^bool Triangle::IntersectP(const Ray &ray) const {$/;"	f	class:Triangle
IntersectP	volumes/exponential.h	/^    bool IntersectP(const Ray &r, float *t0, float *t1) const {$/;"	f	class:ExponentialDensity
IntersectP	volumes/homogeneous.h	/^    bool IntersectP(const Ray &r, float *t0, float *t1) const {$/;"	f	class:HomogeneousVolumeDensity
IntersectP	volumes/volumegrid.h	/^    bool IntersectP(const Ray &r, float *t0, float *t1) const {$/;"	f	class:VolumeGridDensity
Intersection	core/intersection.h	/^    Intersection() {$/;"	f	struct:Intersection
Intersection	core/intersection.h	/^struct Intersection {$/;"	s
Interval	3rdparty/ilmbase-1.0.2/ImathInterval.h	/^class Interval$/;"	c	namespace:Imath
Interval	3rdparty/ilmbase-1.0.2/ImathInterval.h	/^inline Interval<T>::Interval()$/;"	f	class:Imath::Interval
Interval	3rdparty/ilmbase-1.0.2/ImathInterval.h	/^inline Interval<T>::Interval(const T& minV, const T& maxV)$/;"	f	class:Imath::Interval
Interval	3rdparty/ilmbase-1.0.2/ImathInterval.h	/^inline Interval<T>::Interval(const T& point)$/;"	f	class:Imath::Interval
Intervald	3rdparty/ilmbase-1.0.2/ImathInterval.h	/^typedef Interval <double> Intervald;$/;"	t	namespace:Imath
Intervalf	3rdparty/ilmbase-1.0.2/ImathInterval.h	/^typedef Interval <float>  Intervalf;$/;"	t	namespace:Imath
Intervali	3rdparty/ilmbase-1.0.2/ImathInterval.h	/^typedef Interval <int>    Intervali;$/;"	t	namespace:Imath
Intervals	3rdparty/ilmbase-1.0.2/ImathInterval.h	/^typedef Interval <short>  Intervals;$/;"	t	namespace:Imath
Inverse	core/api.cpp	/^   friend TransformSet Inverse(const TransformSet &ts) {$/;"	f	struct:TransformSet
Inverse	core/transform.cpp	/^Matrix4x4 Inverse(const Matrix4x4 &m) {$/;"	f
Inverse	core/transform.h	/^    friend Transform Inverse(const Transform &t) {$/;"	f	class:Transform
IrradProcess	integrators/irradiancecache.cpp	/^    IrradProcess(const Point &P, const Normal &N, float mw, float cmsad) {$/;"	f	struct:IrradProcess
IrradProcess	integrators/irradiancecache.cpp	/^struct IrradProcess {$/;"	s	file:
IrradianceCacheIntegrator	integrators/irradiancecache.h	/^    IrradianceCacheIntegrator(float minwt, float minsp, float maxsp,$/;"	f	class:IrradianceCacheIntegrator
IrradianceCacheIntegrator	integrators/irradiancecache.h	/^class IrradianceCacheIntegrator : public SurfaceIntegrator {$/;"	c
IrradiancePoint	integrators/dipolesubsurface.h	/^    IrradiancePoint() { }$/;"	f	struct:IrradiancePoint
IrradiancePoint	integrators/dipolesubsurface.h	/^    IrradiancePoint(const SurfacePoint &sp, const Spectrum &ee)$/;"	f	struct:IrradiancePoint
IrradiancePoint	integrators/dipolesubsurface.h	/^struct IrradiancePoint {$/;"	s
IrradiancePrimeTask	integrators/irradiancecache.cpp	/^    IrradiancePrimeTask(const Scene *sc, const Renderer *sr, const Camera *c, Sampler *samp,$/;"	f	struct:IrradiancePrimeTask
IrradiancePrimeTask	integrators/irradiancecache.cpp	/^struct IrradiancePrimeTask : public Task {$/;"	s	file:
IrradianceSample	integrators/irradiancecache.cpp	/^    IrradianceSample() { }$/;"	f	struct:IrradianceSample
IrradianceSample	integrators/irradiancecache.cpp	/^    IrradianceSample(const Spectrum &e, const Point &P, const Normal &N,$/;"	f	struct:IrradianceSample
IrradianceSample	integrators/irradiancecache.cpp	/^struct IrradianceSample {$/;"	s	file:
IrregIsoProc	core/reflection.cpp	/^    IrregIsoProc() { sumWeights = 0.f; nFound = 0; }$/;"	f	struct:IrregIsoProc
IrregIsoProc	core/reflection.cpp	/^struct IrregIsoProc {$/;"	s	file:
IrregIsotropicBRDF	core/reflection.h	/^    IrregIsotropicBRDF(const KdTree<IrregIsotropicBRDFSample> *d)$/;"	f	class:IrregIsotropicBRDF
IrregIsotropicBRDF	core/reflection.h	/^class IrregIsotropicBRDF : public BxDF {$/;"	c
IrregIsotropicBRDFSample	core/reflection.h	/^    IrregIsotropicBRDFSample() { }$/;"	f	struct:IrregIsotropicBRDFSample
IrregIsotropicBRDFSample	core/reflection.h	/^    IrregIsotropicBRDFSample(const Point &pp, const Spectrum &vv)$/;"	f	struct:IrregIsotropicBRDFSample
IrregIsotropicBRDFSample	core/reflection.h	/^struct IrregIsotropicBRDFSample {$/;"	s
IsAbsolutePath	core/fileutil.cpp	/^bool IsAbsolutePath(const string &filename)$/;"	f
IsAnimated	core/api.cpp	/^   bool IsAnimated() const {$/;"	f	struct:TransformSet
IsBlack	core/spectrum.h	/^    bool IsBlack() const {$/;"	f	class:CoefficientSpectrum
IsBumpMap	tools/obj2pbrt.cpp	/^bool IsBumpMap(const char *&token) {$/;"	f	namespace:tinyobj
IsDeltaLight	lights/diffuse.h	/^    bool IsDeltaLight() const { return false; }$/;"	f	class:DiffuseAreaLight
IsDeltaLight	lights/distant.h	/^    bool IsDeltaLight() const { return true; }$/;"	f	class:DistantLight
IsDeltaLight	lights/goniometric.h	/^    bool IsDeltaLight() const { return true; }$/;"	f	class:GonioPhotometricLight
IsDeltaLight	lights/infinite.h	/^    bool IsDeltaLight() const { return false; }$/;"	f	class:InfiniteAreaLight
IsDeltaLight	lights/point.h	/^    bool IsDeltaLight() const { return true; }$/;"	f	class:PointLight
IsDeltaLight	lights/projection.h	/^    bool IsDeltaLight() const { return true; }$/;"	f	class:ProjectionLight
IsDeltaLight	lights/spot.h	/^    bool IsDeltaLight() const { return true; }$/;"	f	class:SpotLight
IsFloat	tools/obj2pbrt.cpp	/^bool IsFloat(const char *token) {$/;"	f	namespace:tinyobj
IsIdentity	core/transform.h	/^    bool IsIdentity() const {$/;"	f	class:Transform
IsLeaf	accelerators/kdtreeaccel.cpp	/^    bool IsLeaf() const { return (flags & 3) == 3; }$/;"	f	struct:KdAccelNode
IsPowerOf2	core/pbrt.h	/^inline bool IsPowerOf2(int v) {$/;"	f
Iterator	3rdparty/openexr-1.7.0/ImfChannelList.h	/^ChannelList::Iterator::Iterator (): _i()$/;"	f	class:Imf::ChannelList::Iterator
Iterator	3rdparty/openexr-1.7.0/ImfChannelList.h	/^ChannelList::Iterator::Iterator (const ChannelList::ChannelMap::iterator &i):$/;"	f	class:Imf::ChannelList::Iterator
Iterator	3rdparty/openexr-1.7.0/ImfChannelList.h	/^class ChannelList::Iterator$/;"	c	class:Imf::ChannelList
Iterator	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^FrameBuffer::Iterator::Iterator (): _i()$/;"	f	class:Imf::FrameBuffer::Iterator
Iterator	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^FrameBuffer::Iterator::Iterator (const FrameBuffer::SliceMap::iterator &i):$/;"	f	class:Imf::FrameBuffer::Iterator
Iterator	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^class FrameBuffer::Iterator$/;"	c	class:Imf::FrameBuffer
Iterator	3rdparty/openexr-1.7.0/ImfHeader.h	/^Header::Iterator::Iterator (): _i()$/;"	f	class:Imf::Header::Iterator
Iterator	3rdparty/openexr-1.7.0/ImfHeader.h	/^Header::Iterator::Iterator (const Header::AttributeMap::iterator &i): _i (i)$/;"	f	class:Imf::Header::Iterator
Iterator	3rdparty/openexr-1.7.0/ImfHeader.h	/^class Header::Iterator$/;"	c	class:Imf::Header
JBIGCleanup	3rdparty/tiff-3.9.4/tif_jbig.c	/^static void JBIGCleanup(TIFF* tif)$/;"	f	file:
JBIGCopyEncodedData	3rdparty/tiff-3.9.4/tif_jbig.c	/^static int JBIGCopyEncodedData(TIFF* tif, tidata_t pp, tsize_t cc, tsample_t s)$/;"	f	file:
JBIGDecode	3rdparty/tiff-3.9.4/tif_jbig.c	/^static int JBIGDecode(TIFF* tif, tidata_t buffer, tsize_t size, tsample_t s)$/;"	f	file:
JBIGEncode	3rdparty/tiff-3.9.4/tif_jbig.c	/^static int JBIGEncode(TIFF* tif, tidata_t buffer, tsize_t size, tsample_t s)$/;"	f	file:
JBIGOutputBie	3rdparty/tiff-3.9.4/tif_jbig.c	/^static void JBIGOutputBie(unsigned char* buffer, size_t len, void *userData)$/;"	f	file:
JBIGPrintDir	3rdparty/tiff-3.9.4/tif_jbig.c	/^static void JBIGPrintDir(TIFF* tif, FILE* fd, long flags)$/;"	f	file:
JBIGSetupDecode	3rdparty/tiff-3.9.4/tif_jbig.c	/^static int JBIGSetupDecode(TIFF* tif)$/;"	f	file:
JBIGSetupEncode	3rdparty/tiff-3.9.4/tif_jbig.c	/^static int JBIGSetupEncode(TIFF* tif)$/;"	f	file:
JBIGState	3rdparty/tiff-3.9.4/tif_jbig.c	/^} JBIGState;$/;"	t	typeref:struct:__anon47	file:
JBIGVGetField	3rdparty/tiff-3.9.4/tif_jbig.c	/^static int JBIGVGetField(TIFF* tif, ttag_t tag, va_list ap)$/;"	f	file:
JBIGVSetField	3rdparty/tiff-3.9.4/tif_jbig.c	/^static int JBIGVSetField(TIFF* tif, ttag_t tag, va_list ap)$/;"	f	file:
JMP_BUF	3rdparty/tiff-3.9.4/tif_jpeg.c	/^#define JMP_BUF	/;"	d	file:
JMP_BUF	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^#define JMP_BUF /;"	d	file:
JPEGCOLORMODE_RAW	3rdparty/tiff-3.9.4/tiff.h	/^#define	    JPEGCOLORMODE_RAW	/;"	d
JPEGCOLORMODE_RGB	3rdparty/tiff-3.9.4/tiff.h	/^#define	    JPEGCOLORMODE_RGB	/;"	d
JPEGCleanup	3rdparty/tiff-3.9.4/tif_jpeg.c	/^JPEGCleanup(TIFF* tif)$/;"	f	file:
JPEGDecode	3rdparty/tiff-3.9.4/tif_jpeg.c	/^JPEGDecode(TIFF* tif, tidata_t buf, tsize_t cc, tsample_t s)$/;"	f	file:
JPEGDecodeRaw	3rdparty/tiff-3.9.4/tif_jpeg.c	/^JPEGDecodeRaw(TIFF* tif, tidata_t buf, tsize_t cc, tsample_t s)$/;"	f	file:
JPEGDefaultStripSize	3rdparty/tiff-3.9.4/tif_jpeg.c	/^JPEGDefaultStripSize(TIFF* tif, uint32 s)$/;"	f	file:
JPEGDefaultTileSize	3rdparty/tiff-3.9.4/tif_jpeg.c	/^JPEGDefaultTileSize(TIFF* tif, uint32* tw, uint32* th)$/;"	f	file:
JPEGEncode	3rdparty/tiff-3.9.4/tif_jpeg.c	/^JPEGEncode(TIFF* tif, tidata_t buf, tsize_t cc, tsample_t s)$/;"	f	file:
JPEGEncodeRaw	3rdparty/tiff-3.9.4/tif_jpeg.c	/^JPEGEncodeRaw(TIFF* tif, tidata_t buf, tsize_t cc, tsample_t s)$/;"	f	file:
JPEGFixupTestSubsampling	3rdparty/tiff-3.9.4/tif_jpeg.c	/^JPEGFixupTestSubsampling( TIFF * tif )$/;"	f	file:
JPEGInitializeLibJPEG	3rdparty/tiff-3.9.4/tif_jpeg.c	/^static int JPEGInitializeLibJPEG( TIFF * tif, int force_encode, int force_decode )$/;"	f	file:
JPEGPROC_BASELINE	3rdparty/tiff-3.9.4/tiff.h	/^#define	    JPEGPROC_BASELINE	/;"	d
JPEGPROC_LOSSLESS	3rdparty/tiff-3.9.4/tiff.h	/^#define	    JPEGPROC_LOSSLESS	/;"	d
JPEGPostEncode	3rdparty/tiff-3.9.4/tif_jpeg.c	/^JPEGPostEncode(TIFF* tif)$/;"	f	file:
JPEGPreDecode	3rdparty/tiff-3.9.4/tif_jpeg.c	/^JPEGPreDecode(TIFF* tif, tsample_t s)$/;"	f	file:
JPEGPreEncode	3rdparty/tiff-3.9.4/tif_jpeg.c	/^JPEGPreEncode(TIFF* tif, tsample_t s)$/;"	f	file:
JPEGPrintDir	3rdparty/tiff-3.9.4/tif_jpeg.c	/^JPEGPrintDir(TIFF* tif, FILE* fd, long flags)$/;"	f	file:
JPEGResetUpsampled	3rdparty/tiff-3.9.4/tif_jpeg.c	/^JPEGResetUpsampled( TIFF* tif )$/;"	f	file:
JPEGSetupDecode	3rdparty/tiff-3.9.4/tif_jpeg.c	/^JPEGSetupDecode(TIFF* tif)$/;"	f	file:
JPEGSetupEncode	3rdparty/tiff-3.9.4/tif_jpeg.c	/^JPEGSetupEncode(TIFF* tif)$/;"	f	file:
JPEGState	3rdparty/tiff-3.9.4/tif_jpeg.c	/^} JPEGState;$/;"	t	typeref:struct:__anon48	file:
JPEGTABLESMODE_HUFF	3rdparty/tiff-3.9.4/tiff.h	/^#define	    JPEGTABLESMODE_HUFF	/;"	d
JPEGTABLESMODE_QUANT	3rdparty/tiff-3.9.4/tiff.h	/^#define	    JPEGTABLESMODE_QUANT /;"	d
JPEGVGetField	3rdparty/tiff-3.9.4/tif_jpeg.c	/^JPEGVGetField(TIFF* tif, ttag_t tag, va_list ap)$/;"	f	file:
JPEGVSetField	3rdparty/tiff-3.9.4/tif_jpeg.c	/^JPEGVSetField(TIFF* tif, ttag_t tag, va_list ap)$/;"	f	file:
JPEG_MARKER_APP0	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^#define JPEG_MARKER_APP0 /;"	d	file:
JPEG_MARKER_COM	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^#define JPEG_MARKER_COM /;"	d	file:
JPEG_MARKER_DHT	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^#define JPEG_MARKER_DHT /;"	d	file:
JPEG_MARKER_DQT	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^#define JPEG_MARKER_DQT /;"	d	file:
JPEG_MARKER_DRI	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^#define JPEG_MARKER_DRI /;"	d	file:
JPEG_MARKER_EOI	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^#define JPEG_MARKER_EOI /;"	d	file:
JPEG_MARKER_RST0	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^#define JPEG_MARKER_RST0 /;"	d	file:
JPEG_MARKER_SOF0	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^#define JPEG_MARKER_SOF0 /;"	d	file:
JPEG_MARKER_SOF1	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^#define JPEG_MARKER_SOF1 /;"	d	file:
JPEG_MARKER_SOF3	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^#define JPEG_MARKER_SOF3 /;"	d	file:
JPEG_MARKER_SOI	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^#define JPEG_MARKER_SOI /;"	d	file:
JPEG_MARKER_SOS	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^#define JPEG_MARKER_SOS /;"	d	file:
JState	3rdparty/tiff-3.9.4/tif_jpeg.c	/^#define	JState(/;"	d	file:
K	core/sh.cpp	/^static inline float K(int l, int m) {$/;"	f	file:
Kd	integrators/glossyprt.h	/^    const Spectrum Kd, Ks;$/;"	m	class:GlossyPRTIntegrator
Kd	materials/kdsubsurface.h	/^    Reference<Texture<Spectrum> > Kd, Kr;$/;"	m	class:KdSubsurfaceMaterial
Kd	materials/matte.h	/^    Reference<Texture<Spectrum> > Kd;$/;"	m	class:MatteMaterial
Kd	materials/plastic.h	/^    Reference<Texture<Spectrum> > Kd, Ks;$/;"	m	class:PlasticMaterial
Kd	materials/substrate.h	/^    Reference<Texture<Spectrum> > Kd, Ks;$/;"	m	class:SubstrateMaterial
Kd	materials/translucent.h	/^    Reference<Texture<Spectrum> > Kd, Ks;$/;"	m	class:TranslucentMaterial
Kd	materials/uber.h	/^    Reference<Texture<Spectrum> > Kd, Ks, Kr, Kt, opacity;$/;"	m	class:UberMaterial
KdAccelNode	accelerators/kdtreeaccel.cpp	/^struct KdAccelNode {$/;"	s	file:
KdNode	core/kdtree.h	/^struct KdNode {$/;"	s
KdSubsurfaceMaterial	materials/kdsubsurface.h	/^    KdSubsurfaceMaterial(Reference<Texture<Spectrum> > kd,$/;"	f	class:KdSubsurfaceMaterial
KdSubsurfaceMaterial	materials/kdsubsurface.h	/^class KdSubsurfaceMaterial : public Material {$/;"	c
KdToDo	accelerators/kdtreeaccel.h	/^struct KdToDo {$/;"	s
KdTree	core/kdtree.h	/^KdTree<NodeData>::KdTree(const vector<NodeData> &d) {$/;"	f	class:KdTree
KdTree	core/kdtree.h	/^template <typename NodeData> class KdTree {$/;"	c
KdTreeAccel	accelerators/kdtreeaccel.cpp	/^KdTreeAccel::KdTreeAccel(const vector<Reference<Primitive> > &p,$/;"	f	class:KdTreeAccel
KdTreeAccel	accelerators/kdtreeaccel.h	/^class KdTreeAccel : public Aggregate {$/;"	c
KeyCode	3rdparty/openexr-1.7.0/ImfKeyCode.cpp	/^KeyCode::KeyCode (const KeyCode &other)$/;"	f	class:Imf::KeyCode
KeyCode	3rdparty/openexr-1.7.0/ImfKeyCode.cpp	/^KeyCode::KeyCode (int filmMfcCode,$/;"	f	class:Imf::KeyCode
KeyCode	3rdparty/openexr-1.7.0/ImfKeyCode.h	/^class KeyCode$/;"	c	namespace:Imf
KeyCodeAttribute	3rdparty/openexr-1.7.0/ImfKeyCodeAttribute.h	/^typedef TypedAttribute<KeyCode> KeyCodeAttribute;$/;"	t	namespace:Imf
KnotOffset	shapes/nurbs.cpp	/^static int KnotOffset(const float *knot, int order, int np, float t) {$/;"	f	file:
Kr	materials/glass.h	/^    Reference<Texture<Spectrum> > Kr, Kt;$/;"	m	class:GlassMaterial
Kr	materials/kdsubsurface.h	/^    Reference<Texture<Spectrum> > Kd, Kr;$/;"	m	class:KdSubsurfaceMaterial
Kr	materials/mirror.h	/^    Reference<Texture<Spectrum> > Kr;$/;"	m	class:MirrorMaterial
Kr	materials/shinymetal.h	/^    Reference<Texture<Spectrum> > Ks, Kr;$/;"	m	class:ShinyMetalMaterial
Kr	materials/subsurface.h	/^    Reference<Texture<Spectrum> > Kr, sigma_a, sigma_prime_s;$/;"	m	class:SubsurfaceMaterial
Kr	materials/uber.h	/^    Reference<Texture<Spectrum> > Kd, Ks, Kr, Kt, opacity;$/;"	m	class:UberMaterial
Ks	integrators/glossyprt.h	/^    const Spectrum Kd, Ks;$/;"	m	class:GlossyPRTIntegrator
Ks	materials/plastic.h	/^    Reference<Texture<Spectrum> > Kd, Ks;$/;"	m	class:PlasticMaterial
Ks	materials/shinymetal.h	/^    Reference<Texture<Spectrum> > Ks, Kr;$/;"	m	class:ShinyMetalMaterial
Ks	materials/substrate.h	/^    Reference<Texture<Spectrum> > Kd, Ks;$/;"	m	class:SubstrateMaterial
Ks	materials/translucent.h	/^    Reference<Texture<Spectrum> > Kd, Ks;$/;"	m	class:TranslucentMaterial
Ks	materials/uber.h	/^    Reference<Texture<Spectrum> > Kd, Ks, Kr, Kt, opacity;$/;"	m	class:UberMaterial
Kt	materials/glass.h	/^    Reference<Texture<Spectrum> > Kr, Kt;$/;"	m	class:GlassMaterial
Kt	materials/uber.h	/^    Reference<Texture<Spectrum> > Kd, Ks, Kr, Kt, opacity;$/;"	m	class:UberMaterial
L	lights/diffuse.h	/^    Spectrum L(const Point &p, const Normal &n, const Vector &w) const {$/;"	f	class:DiffuseAreaLight
L	lights/distant.h	/^    Spectrum L;$/;"	m	class:DistantLight
L16fromY	3rdparty/tiff-3.9.4/tif_luv.c	/^L16fromY(LogLuvState* sp, tidata_t op, int n)$/;"	f	file:
L16toGry	3rdparty/tiff-3.9.4/tif_luv.c	/^L16toGry(LogLuvState* sp, tidata_t op, int n)$/;"	f	file:
L16toY	3rdparty/tiff-3.9.4/tif_luv.c	/^L16toY(LogLuvState* sp, tidata_t op, int n)$/;"	f	file:
LBRACK	core/pbrtparse.cpp	/^     LBRACK = 261,$/;"	e	enum:yytokentype	file:
LBRACK	core/pbrtparse.hh	/^     LBRACK = 261,$/;"	e	enum:yytokentype
LD	Makefile	/^LD=$(CXX) $(OPT) $(MARCH)$/;"	m
LDPixelSample	core/montecarlo.cpp	/^void LDPixelSample(int xPos, int yPos, float shutterOpen,$/;"	f
LDPixelSampleFloatsNeeded	core/montecarlo.cpp	/^int LDPixelSampleFloatsNeeded(const Sample *sample, int nPixelSamples) {$/;"	f
LDSampler	samplers/lowdiscrepancy.cpp	/^LDSampler::LDSampler(int xstart, int xend, int ystart, int yend, int ps,$/;"	f	class:LDSampler
LDSampler	samplers/lowdiscrepancy.h	/^class LDSampler : public Sampler {$/;"	c
LDShuffleScrambled1D	core/montecarlo.h	/^inline void LDShuffleScrambled1D(int nSamples, int nPixel,$/;"	f
LDShuffleScrambled2D	core/montecarlo.h	/^inline void LDShuffleScrambled2D(int nSamples, int nPixel,$/;"	f
LEBLIB	Makefile	/^    LEBLIB = -lfl$/;"	m
LEN	3rdparty/zlib-1.2.5/inflate.h	/^            LEN,        \/* i: waiting for length\/lit\/eob code *\/$/;"	e	enum:__anon75
LENEXT	3rdparty/zlib-1.2.5/inflate.h	/^            LENEXT,     \/* i: waiting for length extra bits *\/$/;"	e	enum:__anon75
LENGTH	3rdparty/zlib-1.2.5/inflate.h	/^    LENGTH,     \/* i: waiting for 32-bit length (gzip) *\/$/;"	e	enum:__anon75
LENGTH_CODES	3rdparty/zlib-1.2.5/deflate.h	/^#define LENGTH_CODES /;"	d
LENLENS	3rdparty/zlib-1.2.5/inflate.h	/^        LENLENS,    \/* i: waiting for code length code lengths *\/$/;"	e	enum:__anon75
LENS	3rdparty/zlib-1.2.5/inftrees.h	/^    LENS,$/;"	e	enum:__anon77
LEN_	3rdparty/zlib-1.2.5/inflate.h	/^            LEN_,       \/* i: same as LEN below, but only first time in *\/$/;"	e	enum:__anon75
LEX	Makefile	/^LEX=flex$/;"	m
LEXLIB	Makefile	/^    LEXLIB = -ll$/;"	m
LIBOBJS	Makefile	/^LIBOBJS  = $(addprefix objs\/, $(subst \/,_,$(LIB_CSRCS:.c=.o)))$/;"	m
LIBS	Makefile	/^LIBS=$(LEXLIB) $(EXR_LIBDIR) $(EXRLIBS) -lm $/;"	m
LIB_CSRCS	Makefile	/^LIB_CSRCS=core\/targa.c$/;"	m
LIB_CXXSRCS	Makefile	/^LIB_CXXSRCS  = $(wildcard core\/*.cpp) core\/pbrtlex.cpp core\/pbrtparse.cpp$/;"	m
LIGHTSOURCE	core/pbrtparse.cpp	/^     LIGHTSOURCE = 277,$/;"	e	enum:yytokentype	file:
LIGHTSOURCE	core/pbrtparse.hh	/^     LIGHTSOURCE = 277,$/;"	e	enum:yytokentype
LIT	3rdparty/zlib-1.2.5/inflate.h	/^            LIT,        \/* o: waiting for output space to write literal *\/$/;"	e	enum:__anon75
LITERALROW	3rdparty/tiff-3.9.4/tif_next.c	/^#define LITERALROW	/;"	d	file:
LITERALS	3rdparty/zlib-1.2.5/deflate.h	/^#define LITERALS /;"	d
LITERALSPAN	3rdparty/tiff-3.9.4/tif_next.c	/^#define LITERALSPAN	/;"	d	file:
LOAD	3rdparty/zlib-1.2.5/infback.c	/^#define LOAD(/;"	d	file:
LOAD	3rdparty/zlib-1.2.5/inflate.c	/^#define LOAD(/;"	d	file:
LOGLUV_PUBLIC	3rdparty/tiff-3.9.4/tiffio.h	/^#define LOGLUV_PUBLIC	/;"	d
LOGLUV_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.h	/^#define LOGLUV_SUPPORT /;"	d
LOGLUV_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.vc.h	/^#define LOGLUV_SUPPORT /;"	d
LOGLUV_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.wince.h	/^#define LOGLUV_SUPPORT /;"	d
LONGEST_LONG_RUN	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^const int LONGEST_LONG_RUN   = 255 + SHORTEST_LONG_RUN;$/;"	m	namespace:Imf::__anon20	file:
LONGJMP	3rdparty/tiff-3.9.4/tif_jpeg.c	/^#define LONGJMP(/;"	d	file:
LONGJMP	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^#define LONGJMP(/;"	d	file:
LONG_NAMES_FLAG	3rdparty/openexr-1.7.0/ImfVersion.h	/^const int LONG_NAMES_FLAG       = 0x00000400;   \/\/ File contains long$/;"	m	namespace:Imf
LONG_ZEROCODE_RUN	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^const int LONG_ZEROCODE_RUN  = 63;$/;"	m	namespace:Imf::__anon20	file:
LOOK	3rdparty/zlib-1.2.5/gzguts.h	/^#define LOOK /;"	d
LOOKAT	core/pbrtparse.cpp	/^     LOOKAT = 278,$/;"	e	enum:yytokentype	file:
LOOKAT	core/pbrtparse.hh	/^     LOOKAT = 278,$/;"	e	enum:yytokentype
LOOKUP16	3rdparty/tiff-3.9.4/tif_fax3.h	/^#define LOOKUP16(/;"	d
LOOKUP8	3rdparty/tiff-3.9.4/tif_fax3.h	/^#define LOOKUP8(/;"	d
LOOKUP_ONE	core/paramset.cpp	/^#define LOOKUP_ONE(/;"	d	file:
LOOKUP_PTR	core/paramset.cpp	/^#define LOOKUP_PTR(/;"	d	file:
LOWER_MASK	core/rng.cpp	/^#define LOWER_MASK /;"	d	file:
LPhoton	integrators/photonmap.cpp	/^Spectrum LPhoton(KdTree<Photon> *map, int nPaths, int nLookup,$/;"	f
LSEEK	3rdparty/zlib-1.2.5/gzlib.c	/^#  define LSEEK /;"	d	file:
LZWBaseState	3rdparty/tiff-3.9.4/tif_lzw.c	/^} LZWBaseState;$/;"	t	typeref:struct:__anon50	file:
LZWCleanup	3rdparty/tiff-3.9.4/tif_lzw.c	/^LZWCleanup(TIFF* tif)$/;"	f	file:
LZWCodecState	3rdparty/tiff-3.9.4/tif_lzw.c	/^} LZWCodecState;$/;"	t	typeref:struct:__anon52	file:
LZWDecode	3rdparty/tiff-3.9.4/tif_lzw.c	/^LZWDecode(TIFF* tif, tidata_t op0, tsize_t occ0, tsample_t s)$/;"	f	file:
LZWDecodeCompat	3rdparty/tiff-3.9.4/tif_lzw.c	/^LZWDecodeCompat(TIFF* tif, tidata_t op0, tsize_t occ0, tsample_t s)$/;"	f	file:
LZWEncode	3rdparty/tiff-3.9.4/tif_lzw.c	/^LZWEncode(TIFF* tif, tidata_t bp, tsize_t cc, tsample_t s)$/;"	f	file:
LZWPostEncode	3rdparty/tiff-3.9.4/tif_lzw.c	/^LZWPostEncode(TIFF* tif)$/;"	f	file:
LZWPreDecode	3rdparty/tiff-3.9.4/tif_lzw.c	/^LZWPreDecode(TIFF* tif, tsample_t s)$/;"	f	file:
LZWPreEncode	3rdparty/tiff-3.9.4/tif_lzw.c	/^LZWPreEncode(TIFF* tif, tsample_t s)$/;"	f	file:
LZWSetupDecode	3rdparty/tiff-3.9.4/tif_lzw.c	/^LZWSetupDecode(TIFF* tif)$/;"	f	file:
LZWSetupEncode	3rdparty/tiff-3.9.4/tif_lzw.c	/^LZWSetupEncode(TIFF* tif)$/;"	f	file:
LZWState	3rdparty/tiff-3.9.4/tif_lzw.c	/^#define	LZWState(/;"	d	file:
LZW_CHECKEOS	3rdparty/tiff-3.9.4/tif_lzw.c	/^#define	LZW_CHECKEOS	/;"	d	file:
LZW_COMPAT	3rdparty/tiff-3.9.4/tif_lzw.c	/^#define	LZW_COMPAT	/;"	d	file:
LZW_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.h	/^#define LZW_SUPPORT /;"	d
LZW_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.vc.h	/^#define LZW_SUPPORT /;"	d
LZW_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.wince.h	/^#define LZW_SUPPORT /;"	d
L_CODES	3rdparty/zlib-1.2.5/deflate.h	/^#define L_CODES /;"	d
Lambertian	core/reflection.h	/^    Lambertian(const Spectrum &reflectance)$/;"	f	class:Lambertian
Lambertian	core/reflection.h	/^class Lambertian : public BxDF {$/;"	c
Lanczos	core/texture.cpp	/^float Lanczos(float x, float tau) {$/;"	f
LanczosSincFilter	filters/sinc.h	/^    LanczosSincFilter(float xw, float yw, float t)$/;"	f	class:LanczosSincFilter
LanczosSincFilter	filters/sinc.h	/^class LanczosSincFilter : public Filter {$/;"	c
LarcherPillichshammer2	core/montecarlo.h	/^LarcherPillichshammer2(uint32_t n, uint32_t scramble) {$/;"	f
LargeStep	renderers/metropolis.cpp	/^static void LargeStep(RNG &rng, MLTSample *sample, int maxDepth,$/;"	f	file:
LatLongMap	3rdparty/openexr-1.7.0/ImfEnvmap.cpp	/^namespace LatLongMap {$/;"	n	namespace:Imf	file:
LatLongMap	3rdparty/openexr-1.7.0/ImfEnvmap.h	/^namespace LatLongMap$/;"	n	namespace:Imf
LatinHypercube	core/montecarlo.cpp	/^void LatinHypercube(float *samples, uint32_t nSamples, uint32_t nDim,$/;"	f
Lbidir	renderers/metropolis.cpp	/^Spectrum MetropolisRenderer::Lbidir(const Scene *scene,$/;"	f	class:MetropolisRenderer
Le	core/intersection.cpp	/^Spectrum Intersection::Le(const Vector &w) const {$/;"	f	class:Intersection
Le	core/light.cpp	/^Spectrum Light::Le(const RayDifferential &) const {$/;"	f	class:Light
Le	lights/infinite.cpp	/^Spectrum InfiniteAreaLight::Le(const RayDifferential &r) const {$/;"	f	class:InfiniteAreaLight
Legal	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^	Legal	=   XYZ | XZY | YZX | YXZ | ZXY | ZYX |$/;"	e	enum:Imath::Euler::Order
Lemit	lights/diffuse.h	/^    Spectrum Lemit;$/;"	m	class:DiffuseAreaLight
Len	3rdparty/zlib-1.2.5/deflate.h	/^#define Len /;"	d
Length	core/geometry.h	/^    float Length() const        { return sqrtf(LengthSquared()); }$/;"	f	class:Normal
Length	core/geometry.h	/^    float Length() const { return sqrtf(LengthSquared()); }$/;"	f	class:Vector
LengthSquared	core/geometry.h	/^    float LengthSquared() const { return x*x + y*y + z*z; }$/;"	f	class:Normal
LengthSquared	core/geometry.h	/^    float LengthSquared() const { return x*x + y*y + z*z; }$/;"	f	class:Vector
Lerp	core/geometry.h	/^    Point Lerp(float tx, float ty, float tz) const {$/;"	f	class:BBox
Lerp	core/pbrt.h	/^inline float Lerp(float t, float v1, float v2) {$/;"	f
Lerp	core/spectrum.h	/^inline Spectrum Lerp(float t, const Spectrum &s1, const Spectrum &s2) {$/;"	f
Lerp	tools/exrtotiff.cpp	/^inline float Lerp(float t, float a, float b) {$/;"	f
LevelMode	3rdparty/openexr-1.7.0/ImfTileDescription.h	/^enum LevelMode$/;"	g	namespace:Imf
LevelRoundingMode	3rdparty/openexr-1.7.0/ImfTileDescription.h	/^enum LevelRoundingMode$/;"	g	namespace:Imf
Levels	core/mipmap.h	/^    uint32_t Levels() const { return nLevels; }$/;"	f	class:MIPMap
Li	integrators/ambientocclusion.cpp	/^Spectrum AmbientOcclusionIntegrator::Li(const Scene *scene, const Renderer *renderer,$/;"	f	class:AmbientOcclusionIntegrator
Li	integrators/diffuseprt.cpp	/^Spectrum DiffusePRTIntegrator::Li(const Scene *scene, const Renderer *,$/;"	f	class:DiffusePRTIntegrator
Li	integrators/dipolesubsurface.cpp	/^Spectrum DipoleSubsurfaceIntegrator::Li(const Scene *scene, const Renderer *renderer,$/;"	f	class:DipoleSubsurfaceIntegrator
Li	integrators/directlighting.cpp	/^Spectrum DirectLightingIntegrator::Li(const Scene *scene,$/;"	f	class:DirectLightingIntegrator
Li	integrators/emission.cpp	/^Spectrum EmissionIntegrator::Li(const Scene *scene,$/;"	f	class:EmissionIntegrator
Li	integrators/glossyprt.cpp	/^Spectrum GlossyPRTIntegrator::Li(const Scene *scene, const Renderer *,$/;"	f	class:GlossyPRTIntegrator
Li	integrators/igi.cpp	/^Spectrum IGIIntegrator::Li(const Scene *scene, const Renderer *renderer,$/;"	f	class:IGIIntegrator
Li	integrators/irradiancecache.cpp	/^Spectrum IrradianceCacheIntegrator::Li(const Scene *scene,$/;"	f	class:IrradianceCacheIntegrator
Li	integrators/path.cpp	/^Spectrum PathIntegrator::Li(const Scene *scene, const Renderer *renderer,$/;"	f	class:PathIntegrator
Li	integrators/photonmap.cpp	/^Spectrum PhotonIntegrator::Li(const Scene *scene, const Renderer *renderer,$/;"	f	class:PhotonIntegrator
Li	integrators/single.cpp	/^Spectrum SingleScatteringIntegrator::Li(const Scene *scene, const Renderer *renderer,$/;"	f	class:SingleScatteringIntegrator
Li	integrators/useprobes.cpp	/^Spectrum UseRadianceProbes::Li(const Scene *scene, const Renderer *renderer,$/;"	f	class:UseRadianceProbes
Li	integrators/whitted.cpp	/^Spectrum WhittedIntegrator::Li(const Scene *scene,$/;"	f	class:WhittedIntegrator
Li	renderers/aggregatetest.cpp	/^Spectrum AggregateTest::Li(const Scene *scene, const RayDifferential &ray,$/;"	f	class:AggregateTest
Li	renderers/createprobes.cpp	/^Spectrum CreateRadianceProbes::Li(const Scene *scene, const RayDifferential &ray,$/;"	f	class:CreateRadianceProbes
Li	renderers/metropolis.cpp	/^Spectrum MetropolisRenderer::Li(const Scene *scene, const RayDifferential &ray,$/;"	f	class:MetropolisRenderer
Li	renderers/samplerrenderer.cpp	/^Spectrum SamplerRenderer::Li(const Scene *scene,$/;"	f	class:SamplerRenderer
Li	renderers/surfacepoints.cpp	/^Spectrum SurfacePointsRenderer::Li(const Scene *scene,$/;"	f	class:SurfacePointsRenderer
Light	core/light.h	/^    Light(const Transform &l2w, int ns = 1)$/;"	f	class:Light
Light	core/light.h	/^class Light {$/;"	c
LightSample	core/light.cpp	/^LightSample::LightSample(const Sample *sample,$/;"	f	class:LightSample
LightSample	core/light.h	/^   LightSample() { }$/;"	f	struct:LightSample
LightSample	core/light.h	/^   LightSample(RNG &rng) {$/;"	f	struct:LightSample
LightSample	core/light.h	/^   LightSample(float up0, float up1, float ucomp) {$/;"	f	struct:LightSample
LightSample	core/light.h	/^struct LightSample {$/;"	s
LightSampleOffsets	core/light.cpp	/^LightSampleOffsets::LightSampleOffsets(int count, Sample *sample) {$/;"	f	class:LightSampleOffsets
LightSampleOffsets	core/light.h	/^    LightSampleOffsets() { }$/;"	f	struct:LightSampleOffsets
LightSampleOffsets	core/light.h	/^struct LightSampleOffsets {$/;"	s
LightStrategy	integrators/directlighting.h	/^enum LightStrategy { SAMPLE_ALL_UNIFORM, SAMPLE_ONE_UNIFORM };$/;"	g
LightToWorld	core/light.h	/^    const Transform LightToWorld, WorldToLight;$/;"	m	class:Light
LightingSample	renderers/metropolis.cpp	/^struct LightingSample {$/;"	s	file:
Line3	3rdparty/ilmbase-1.0.2/ImathLine.h	/^    Line3() {}$/;"	f	class:Imath::Line3
Line3	3rdparty/ilmbase-1.0.2/ImathLine.h	/^class Line3$/;"	c	namespace:Imath
Line3	3rdparty/ilmbase-1.0.2/ImathLine.h	/^inline Line3<T>::Line3(const Vec3<T> &p0, const Vec3<T> &p1)$/;"	f	class:Imath::Line3
Line3d	3rdparty/ilmbase-1.0.2/ImathLine.h	/^typedef Line3<double> Line3d;$/;"	t	namespace:Imath
Line3f	3rdparty/ilmbase-1.0.2/ImathLine.h	/^typedef Line3<float> Line3f;$/;"	t	namespace:Imath
LineBuffer	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^LineBuffer::LineBuffer (Compressor *comp) :$/;"	f	class:Imf::__anon23::LineBuffer
LineBuffer	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^struct LineBuffer$/;"	s	namespace:Imf::__anon23	file:
LineBuffer	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^LineBuffer::LineBuffer (Compressor *comp):$/;"	f	class:Imf::__anon31::LineBuffer
LineBuffer	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^struct LineBuffer$/;"	s	namespace:Imf::__anon31	file:
LineBufferTask	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^LineBufferTask::LineBufferTask$/;"	f	class:Imf::__anon24::LineBufferTask
LineBufferTask	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^class LineBufferTask: public Task$/;"	c	namespace:Imf::__anon24	file:
LineBufferTask	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^LineBufferTask::LineBufferTask$/;"	f	class:Imf::__anon32::LineBufferTask
LineBufferTask	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^class LineBufferTask : public Task$/;"	c	namespace:Imf::__anon32	file:
LineOrder	3rdparty/openexr-1.7.0/ImfLineOrder.h	/^enum LineOrder$/;"	g	namespace:Imf
LineOrderAttribute	3rdparty/openexr-1.7.0/ImfLineOrderAttribute.h	/^typedef TypedAttribute<LineOrder> LineOrderAttribute;$/;"	t	namespace:Imf
LinearBVHNode	accelerators/bvh.cpp	/^struct LinearBVHNode {$/;"	s	file:
Lo	integrators/photonmap.cpp	/^    Spectrum Lo;$/;"	m	struct:RadiancePhoton	file:
LoadMtl	tools/obj2pbrt.cpp	/^std::string LoadMtl ($/;"	f	namespace:tinyobj
LoadObj	tools/obj2pbrt.cpp	/^LoadObj($/;"	f	namespace:tinyobj
LocalToWorld	core/reflection.h	/^    Vector LocalToWorld(const Vector &v) const {$/;"	f	class:BSDF
Lock	3rdparty/ilmbase-1.0.2/IlmThreadMutex.h	/^    Lock (const Mutex& m, bool autoLock = true):$/;"	f	class:IlmThread::Lock
Lock	3rdparty/ilmbase-1.0.2/IlmThreadMutex.h	/^class Lock$/;"	c	namespace:IlmThread
Lock	core/parallel.cpp	/^void ConditionVariable::Lock() {$/;"	f	class:ConditionVariable
LockedTypeMap	3rdparty/openexr-1.7.0/ImfAttribute.cpp	/^class LockedTypeMap: public TypeMap$/;"	c	namespace:Imf::__anon14	file:
Log2	core/pbrt.h	/^inline float Log2(float x) {$/;"	f
Log2Int	core/pbrt.h	/^inline int Log2Int(float v) {$/;"	f
LogK1	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^static float  LogK1, LogK2;$/;"	v	file:
LogK2	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^static float  LogK1, LogK2;$/;"	v	file:
LogL10fromY	3rdparty/tiff-3.9.4/tif_luv.c	/^LogL10fromY(double Y, int em)	\/* get 10-bit LogL from Y *\/$/;"	f	file:
LogL10toY	3rdparty/tiff-3.9.4/tif_luv.c	/^LogL10toY(int p10)		\/* compute luminance from 10-bit LogL *\/$/;"	f	file:
LogL16Decode	3rdparty/tiff-3.9.4/tif_luv.c	/^LogL16Decode(TIFF* tif, tidata_t op, tsize_t occ, tsample_t s)$/;"	f	file:
LogL16Encode	3rdparty/tiff-3.9.4/tif_luv.c	/^LogL16Encode(TIFF* tif, tidata_t bp, tsize_t cc, tsample_t s)$/;"	f	file:
LogL16GuessDataFmt	3rdparty/tiff-3.9.4/tif_luv.c	/^LogL16GuessDataFmt(TIFFDirectory *td)$/;"	f	file:
LogL16InitState	3rdparty/tiff-3.9.4/tif_luv.c	/^LogL16InitState(TIFF* tif)$/;"	f	file:
LogL16fromY	3rdparty/tiff-3.9.4/tif_luv.c	/^LogL16fromY(double Y, int em)	\/* get 16-bit LogL from Y *\/$/;"	f	file:
LogL16toY	3rdparty/tiff-3.9.4/tif_luv.c	/^LogL16toY(int p16)		\/* compute luminance from 16-bit LogL *\/$/;"	f	file:
LogLuv24fromXYZ	3rdparty/tiff-3.9.4/tif_luv.c	/^LogLuv24fromXYZ(float XYZ[3], int em)$/;"	f	file:
LogLuv24toXYZ	3rdparty/tiff-3.9.4/tif_luv.c	/^LogLuv24toXYZ(uint32 p, float XYZ[3])$/;"	f	file:
LogLuv32fromXYZ	3rdparty/tiff-3.9.4/tif_luv.c	/^LogLuv32fromXYZ(float XYZ[3], int em)$/;"	f	file:
LogLuv32toXYZ	3rdparty/tiff-3.9.4/tif_luv.c	/^LogLuv32toXYZ(uint32 p, float XYZ[3])$/;"	f	file:
LogLuvCleanup	3rdparty/tiff-3.9.4/tif_luv.c	/^LogLuvCleanup(TIFF* tif)$/;"	f	file:
LogLuvClose	3rdparty/tiff-3.9.4/tif_luv.c	/^LogLuvClose(TIFF* tif)$/;"	f	file:
LogLuvDecode24	3rdparty/tiff-3.9.4/tif_luv.c	/^LogLuvDecode24(TIFF* tif, tidata_t op, tsize_t occ, tsample_t s)$/;"	f	file:
LogLuvDecode32	3rdparty/tiff-3.9.4/tif_luv.c	/^LogLuvDecode32(TIFF* tif, tidata_t op, tsize_t occ, tsample_t s)$/;"	f	file:
LogLuvDecodeStrip	3rdparty/tiff-3.9.4/tif_luv.c	/^LogLuvDecodeStrip(TIFF* tif, tidata_t bp, tsize_t cc, tsample_t s)$/;"	f	file:
LogLuvDecodeTile	3rdparty/tiff-3.9.4/tif_luv.c	/^LogLuvDecodeTile(TIFF* tif, tidata_t bp, tsize_t cc, tsample_t s)$/;"	f	file:
LogLuvEncode24	3rdparty/tiff-3.9.4/tif_luv.c	/^LogLuvEncode24(TIFF* tif, tidata_t bp, tsize_t cc, tsample_t s)$/;"	f	file:
LogLuvEncode32	3rdparty/tiff-3.9.4/tif_luv.c	/^LogLuvEncode32(TIFF* tif, tidata_t bp, tsize_t cc, tsample_t s)$/;"	f	file:
LogLuvEncodeStrip	3rdparty/tiff-3.9.4/tif_luv.c	/^LogLuvEncodeStrip(TIFF* tif, tidata_t bp, tsize_t cc, tsample_t s)$/;"	f	file:
LogLuvEncodeTile	3rdparty/tiff-3.9.4/tif_luv.c	/^LogLuvEncodeTile(TIFF* tif, tidata_t bp, tsize_t cc, tsample_t s)$/;"	f	file:
LogLuvFieldInfo	3rdparty/tiff-3.9.4/tif_luv.c	/^static const TIFFFieldInfo LogLuvFieldInfo[] = {$/;"	v	file:
LogLuvGuessDataFmt	3rdparty/tiff-3.9.4/tif_luv.c	/^LogLuvGuessDataFmt(TIFFDirectory *td)$/;"	f	file:
LogLuvInitState	3rdparty/tiff-3.9.4/tif_luv.c	/^LogLuvInitState(TIFF* tif)$/;"	f	file:
LogLuvSetupDecode	3rdparty/tiff-3.9.4/tif_luv.c	/^LogLuvSetupDecode(TIFF* tif)$/;"	f	file:
LogLuvSetupEncode	3rdparty/tiff-3.9.4/tif_luv.c	/^LogLuvSetupEncode(TIFF* tif)$/;"	f	file:
LogLuvState	3rdparty/tiff-3.9.4/tif_luv.c	/^typedef	struct logLuvState LogLuvState;$/;"	t	typeref:struct:logLuvState	file:
LogLuvVGetField	3rdparty/tiff-3.9.4/tif_luv.c	/^LogLuvVGetField(TIFF* tif, ttag_t tag, va_list ap)$/;"	f	file:
LogLuvVSetField	3rdparty/tiff-3.9.4/tif_luv.c	/^LogLuvVSetField(TIFF* tif, ttag_t tag, va_list ap)$/;"	f	file:
LookAt	core/transform.cpp	/^Transform LookAt(const Point &pos, const Point &look, const Vector &up) {$/;"	f
Lookup	core/api.cpp	/^    void Lookup(const Transform &t, Transform **tCached,$/;"	f	class:TransformCache
Lookup	core/kdtree.h	/^void KdTree<NodeData>::Lookup(const Point &p, LookupProc &proc,$/;"	f	class:KdTree
Lookup	core/mipmap.h	/^T MIPMap<T>::Lookup(float s, float t, float ds0, float dt0,$/;"	f	class:MIPMap
Lookup	core/mipmap.h	/^T MIPMap<T>::Lookup(float s, float t, float width) const {$/;"	f	class:MIPMap
Lookup	core/octree.h	/^    template <typename LookupProc> void Lookup(const Point &p,$/;"	f	class:Octree
LoopSubdiv	shapes/loopsubdiv.cpp	/^LoopSubdiv::LoopSubdiv(const Transform *o2w, const Transform *w2o,$/;"	f	class:LoopSubdiv
LoopSubdiv	shapes/loopsubdiv.h	/^class LoopSubdiv : public Shape {$/;"	c
Lpath	renderers/metropolis.cpp	/^Spectrum MetropolisRenderer::Lpath(const Scene *scene,$/;"	f	class:MetropolisRenderer
LumaBlue	3rdparty/tiff-3.9.4/tif_color.c	/^#define LumaBlue /;"	d	file:
LumaBlue	3rdparty/tiff-3.9.4/tif_color.c	/^#undef LumaBlue$/;"	d	file:
LumaGreen	3rdparty/tiff-3.9.4/tif_color.c	/^#define LumaGreen /;"	d	file:
LumaGreen	3rdparty/tiff-3.9.4/tif_color.c	/^#undef LumaGreen$/;"	d	file:
LumaRed	3rdparty/tiff-3.9.4/tif_color.c	/^#define LumaRed	/;"	d	file:
LumaRed	3rdparty/tiff-3.9.4/tif_color.c	/^#undef LumaRed$/;"	d	file:
Luv24fromLuv48	3rdparty/tiff-3.9.4/tif_luv.c	/^Luv24fromLuv48(LogLuvState* sp, tidata_t op, int n)$/;"	f	file:
Luv24fromXYZ	3rdparty/tiff-3.9.4/tif_luv.c	/^Luv24fromXYZ(LogLuvState* sp, tidata_t op, int n)$/;"	f	file:
Luv24toLuv48	3rdparty/tiff-3.9.4/tif_luv.c	/^Luv24toLuv48(LogLuvState* sp, tidata_t op, int n)$/;"	f	file:
Luv24toRGB	3rdparty/tiff-3.9.4/tif_luv.c	/^Luv24toRGB(LogLuvState* sp, tidata_t op, int n)$/;"	f	file:
Luv24toXYZ	3rdparty/tiff-3.9.4/tif_luv.c	/^Luv24toXYZ(LogLuvState* sp, tidata_t op, int n)$/;"	f	file:
Luv32fromLuv48	3rdparty/tiff-3.9.4/tif_luv.c	/^Luv32fromLuv48(LogLuvState* sp, tidata_t op, int n)$/;"	f	file:
Luv32fromXYZ	3rdparty/tiff-3.9.4/tif_luv.c	/^Luv32fromXYZ(LogLuvState* sp, tidata_t op, int n)$/;"	f	file:
Luv32toLuv48	3rdparty/tiff-3.9.4/tif_luv.c	/^Luv32toLuv48(LogLuvState* sp, tidata_t op, int n)$/;"	f	file:
Luv32toRGB	3rdparty/tiff-3.9.4/tif_luv.c	/^Luv32toRGB(LogLuvState* sp, tidata_t op, int n)$/;"	f	file:
Luv32toXYZ	3rdparty/tiff-3.9.4/tif_luv.c	/^Luv32toXYZ(LogLuvState* sp, tidata_t op, int n)$/;"	f	file:
Lve	core/volume.cpp	/^Spectrum AggregateVolume::Lve(const Point &p, const Vector &w, float time) const {$/;"	f	class:AggregateVolume
Lve	core/volume.h	/^    Spectrum Lve(const Point &p, const Vector &, float) const {$/;"	f	class:DensityRegion
Lve	volumes/homogeneous.h	/^    Spectrum Lve(const Point &p, const Vector &, float) const {$/;"	f	class:HomogeneousVolumeDensity
Lxyz	film/image.h	/^        float Lxyz[3];$/;"	m	struct:ImageFilm::Pixel
M	core/rng.cpp	/^#define M /;"	d	file:
M	core/sh.cpp	/^#define M(/;"	d	file:
M	core/sh.cpp	/^#undef M$/;"	d	file:
M33d	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^typedef Matrix33 <double> M33d;$/;"	t	namespace:Imath
M33dAttribute	3rdparty/openexr-1.7.0/ImfMatrixAttribute.h	/^typedef TypedAttribute<Imath::M33d> M33dAttribute;$/;"	t	namespace:Imf
M33f	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^typedef Matrix33 <float>  M33f;$/;"	t	namespace:Imath
M33fAttribute	3rdparty/openexr-1.7.0/ImfMatrixAttribute.h	/^typedef TypedAttribute<Imath::M33f> M33fAttribute;$/;"	t	namespace:Imf
M44d	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^typedef Matrix44 <double> M44d;$/;"	t	namespace:Imath
M44dAttribute	3rdparty/openexr-1.7.0/ImfMatrixAttribute.h	/^typedef TypedAttribute<Imath::M44d> M44dAttribute;$/;"	t	namespace:Imf
M44f	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^typedef Matrix44 <float>  M44f;$/;"	t	namespace:Imath
M44fAttribute	3rdparty/openexr-1.7.0/ImfMatrixAttribute.h	/^typedef TypedAttribute<Imath::M44f> M44fAttribute;$/;"	t	namespace:Imf
MAGIC	3rdparty/openexr-1.7.0/ImfVersion.h	/^const int MAGIC = 20000630;$/;"	m	namespace:Imf
MAJORITY_RULE	tools/ply.h	/^#define MAJORITY_RULE /;"	d
MAKENAMEDMATERIAL	core/pbrtparse.cpp	/^     MAKENAMEDMATERIAL = 279,$/;"	e	enum:yytokentype	file:
MAKENAMEDMATERIAL	core/pbrtparse.hh	/^     MAKENAMEDMATERIAL = 279,$/;"	e	enum:yytokentype
MARCH	Makefile	/^MARCH=-m64$/;"	m
MATCH	3rdparty/zlib-1.2.5/inflate.h	/^            MATCH,      \/* o: waiting for output space to copy string *\/$/;"	e	enum:__anon75
MATERIAL	core/pbrtparse.cpp	/^     MATERIAL = 280,$/;"	e	enum:yytokentype	file:
MATERIAL	core/pbrtparse.hh	/^     MATERIAL = 280,$/;"	e	enum:yytokentype
MATRIX_A	core/rng.cpp	/^#define MATRIX_A /;"	d	file:
MAXBITS	3rdparty/zlib-1.2.5/inftrees.c	/^#define MAXBITS /;"	d	file:
MAXCODE	3rdparty/tiff-3.9.4/tif_lzw.c	/^#define MAXCODE(/;"	d	file:
MAXIMUM_RULE	tools/ply.h	/^#define MAXIMUM_RULE /;"	d
MAXSEG_64K	3rdparty/zlib-1.2.5/zconf.h	/^#  define MAXSEG_64K$/;"	d
MAX_BITS	3rdparty/zlib-1.2.5/deflate.h	/^#define MAX_BITS /;"	d
MAX_BL_BITS	3rdparty/zlib-1.2.5/trees.c	/^#define MAX_BL_BITS /;"	d	file:
MAX_BxDFS	core/reflection.h	/^#define MAX_BxDFS /;"	d
MAX_DIST	3rdparty/zlib-1.2.5/deflate.h	/^#define MAX_DIST(/;"	d
MAX_ERR_LENGTH	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^const int MAX_ERR_LENGTH = 1024;$/;"	m	namespace:__anon18	file:
MAX_LENGTH	3rdparty/openexr-1.7.0/ImfName.h	/^    static const int	MAX_LENGTH = SIZE - 1;$/;"	m	class:Imf::Name
MAX_MATCH	3rdparty/zlib-1.2.5/zutil.h	/^#define MAX_MATCH /;"	d
MAX_MEM_LEVEL	3rdparty/zlib-1.2.5/zconf.h	/^#    define MAX_MEM_LEVEL /;"	d
MAX_NAME_LEN	3rdparty/zlib-1.2.5/minigzip.c	/^#define MAX_NAME_LEN /;"	d	file:
MAX_PTR	3rdparty/zlib-1.2.5/zutil.c	/^#define MAX_PTR /;"	d	file:
MAX_RUN_LENGTH	3rdparty/openexr-1.7.0/ImfRleCompressor.cpp	/^const int MAX_RUN_LENGTH = 127;$/;"	m	namespace:Imf::__anon30	file:
MAX_TODO	accelerators/kdtreeaccel.cpp	/^#define MAX_TODO /;"	d	file:
MAX_TRANSFORMS	core/api.cpp	/^#define MAX_TRANSFORMS /;"	d	file:
MAX_WBITS	3rdparty/zlib-1.2.5/zconf.h	/^#  define MAX_WBITS /;"	d
MDI_BIGENDIAN	3rdparty/tiff-3.9.4/tiff.h	/^#define	MDI_BIGENDIAN /;"	d
MDI_LITTLEENDIAN	3rdparty/tiff-3.9.4/tiff.h	/^#define	MDI_LITTLEENDIAN /;"	d
MEM	3rdparty/zlib-1.2.5/inflate.h	/^    MEM,        \/* got an inflate() memory error -- remain here until reset *\/$/;"	e	enum:__anon75
MINIMUM_RULE	tools/ply.h	/^#define MINIMUM_RULE /;"	d
MINRUN	3rdparty/tiff-3.9.4/tif_luv.c	/^#define MINRUN	/;"	d	file:
MIN_LOOKAHEAD	3rdparty/zlib-1.2.5/deflate.h	/^#define MIN_LOOKAHEAD /;"	d
MIN_MATCH	3rdparty/zlib-1.2.5/zutil.h	/^#define MIN_MATCH /;"	d
MIN_RUN_LENGTH	3rdparty/openexr-1.7.0/ImfRleCompressor.cpp	/^const int MIN_RUN_LENGTH = 3;$/;"	m	namespace:Imf::__anon30	file:
MIPMAP_LEVELS	3rdparty/openexr-1.7.0/ImfTileDescription.h	/^    MIPMAP_LEVELS = 1,$/;"	e	enum:Imf::LevelMode
MIPMap	core/mipmap.h	/^    MIPMap() { pyramid = NULL; width = height = nLevels = 0; }$/;"	f	class:MIPMap
MIPMap	core/mipmap.h	/^MIPMap<T>::MIPMap(uint32_t sres, uint32_t tres, const T *img, bool doTri,$/;"	f	class:MIPMap
MIPMap	core/mipmap.h	/^template <typename T> class MIPMap {$/;"	c
MLTSample	renderers/metropolis.cpp	/^    MLTSample(int maxLength) {$/;"	f	struct:MLTSample
MLTSample	renderers/metropolis.cpp	/^struct MLTSample {$/;"	s	file:
MLTTask	renderers/metropolis.cpp	/^MLTTask::MLTTask(ProgressReporter &prog, uint32_t pfreq, uint32_t tn,$/;"	f	class:MLTTask
MLTTask	renderers/metropolis.cpp	/^class MLTTask : public Task {$/;"	c	file:
MOD	3rdparty/zlib-1.2.5/adler32.c	/^#  define MOD(/;"	d	file:
MOD4	3rdparty/zlib-1.2.5/adler32.c	/^#  define MOD4(/;"	d	file:
MOD_MASK	3rdparty/openexr-1.7.0/ImfWav.cpp	/^const int MOD_MASK = (1 <<  NBITS) - 1;$/;"	m	namespace:Imf::__anon41	file:
MSDOS	3rdparty/zlib-1.2.5/zconf.h	/^#  define MSDOS$/;"	d
MY_ZCALLOC	3rdparty/zlib-1.2.5/zutil.c	/^#  define MY_ZCALLOC$/;"	d	file:
M_LN2	3rdparty/tiff-3.9.4/tif_luv.c	/^#define M_LN2	/;"	d	file:
M_OFFSET	3rdparty/openexr-1.7.0/ImfWav.cpp	/^const int M_OFFSET =  1 << (NBITS  - 1);$/;"	m	namespace:Imf::__anon41	file:
M_PI	3rdparty/ilmbase-1.0.2/ImathPlatform.h	/^    #define M_PI /;"	d
M_PI	3rdparty/tiff-3.9.4/tif_luv.c	/^#define M_PI	/;"	d	file:
M_PI	core/pbrt.h	/^#define M_PI /;"	d
M_PI	core/pbrt.h	/^#undef M_PI$/;"	d
M_PI_2	3rdparty/ilmbase-1.0.2/ImathPlatform.h	/^    #define M_PI_2 /;"	d
MainTable	3rdparty/tiff-3.9.4/mkg3states.c	/^TIFFFaxTabEnt MainTable[128];$/;"	v
MakeAccelerator	core/api.cpp	/^Primitive *MakeAccelerator(const string &name,$/;"	f
MakeAreaLight	core/api.cpp	/^AreaLight *MakeAreaLight(const string &name,$/;"	f
MakeCamera	core/api.cpp	/^Camera *MakeCamera(const string &name,$/;"	f
MakeCamera	core/api.cpp	/^Camera *RenderOptions::MakeCamera() const {$/;"	f	class:RenderOptions
MakeFilm	core/api.cpp	/^Film *MakeFilm(const string &name,$/;"	f
MakeFilter	core/api.cpp	/^Filter *MakeFilter(const string &name,$/;"	f
MakeFloatTexture	core/api.cpp	/^Reference<Texture<float> > MakeFloatTexture(const string &name,$/;"	f
MakeLight	core/api.cpp	/^Light *MakeLight(const string &name,$/;"	f
MakeMaterial	core/api.cpp	/^Reference<Material> MakeMaterial(const string &name,$/;"	f
MakeRenderer	core/api.cpp	/^Renderer *RenderOptions::MakeRenderer() const {$/;"	f	class:RenderOptions
MakeSampler	core/api.cpp	/^Sampler *MakeSampler(const string &name,$/;"	f
MakeScene	core/api.cpp	/^Scene *RenderOptions::MakeScene() {$/;"	f	class:RenderOptions
MakeShape	core/api.cpp	/^Reference<Shape> MakeShape(const string &name,$/;"	f
MakeShortDirent	3rdparty/tiff-3.9.4/tif_dirwrite.c	/^#undef MakeShortDirent$/;"	d	file:
MakeSpectrumTexture	core/api.cpp	/^Reference<Texture<Spectrum> > MakeSpectrumTexture(const string &name,$/;"	f
MakeSurfaceIntegrator	core/api.cpp	/^SurfaceIntegrator *MakeSurfaceIntegrator(const string &name,$/;"	f
MakeUp	3rdparty/tiff-3.9.4/mkg3states.c	/^static struct proto MakeUp[] = {$/;"	v	typeref:struct:proto	file:
MakeUpB	3rdparty/tiff-3.9.4/mkg3states.c	/^static struct proto MakeUpB[] = {$/;"	v	typeref:struct:proto	file:
MakeUpW	3rdparty/tiff-3.9.4/mkg3states.c	/^static struct proto MakeUpW[] = {$/;"	v	typeref:struct:proto	file:
MakeVolumeIntegrator	core/api.cpp	/^VolumeIntegrator *MakeVolumeIntegrator(const string &name,$/;"	f
MakeVolumeRegion	core/api.cpp	/^VolumeRegion *MakeVolumeRegion(const string &name,$/;"	f
Map	3rdparty/tiff-3.9.4/tiffio.h	/^	TIFFRGBValue* Map;                      \/* sample mapping array *\/$/;"	m	struct:_TIFFRGBAImage
Map	core/texture.cpp	/^Point IdentityMapping3D::Map(const DifferentialGeometry &dg,$/;"	f	class:IdentityMapping3D
Map	core/texture.cpp	/^void CylindricalMapping2D::Map(const DifferentialGeometry &dg,$/;"	f	class:CylindricalMapping2D
Map	core/texture.cpp	/^void PlanarMapping2D::Map(const DifferentialGeometry &dg,$/;"	f	class:PlanarMapping2D
Map	core/texture.cpp	/^void SphericalMapping2D::Map(const DifferentialGeometry &dg,$/;"	f	class:SphericalMapping2D
Map	core/texture.cpp	/^void UVMapping2D::Map(const DifferentialGeometry &dg,$/;"	f	class:UVMapping2D
MarbleTexture	textures/marble.h	/^    MarbleTexture(int oct, float roughness, float sc, float var,$/;"	f	class:MarbleTexture
MarbleTexture	textures/marble.h	/^class MarbleTexture : public Texture<Spectrum> {$/;"	c
MatchesFlags	core/reflection.h	/^    bool MatchesFlags(BxDFType flags) const {$/;"	f	class:BxDF
Material	core/material.h	/^class Material : public ReferenceCounted {$/;"	c
Math	3rdparty/ilmbase-1.0.2/ImathMath.h	/^struct Math$/;"	s	namespace:Imath
Math	3rdparty/ilmbase-1.0.2/ImathMath.h	/^struct Math<float>$/;"	s	namespace:Imath
Matrix33	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^    Matrix33 (Uninitialized) {}$/;"	f	class:Imath::Matrix33
Matrix33	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::Matrix33 ()$/;"	f	class:Imath::Matrix33
Matrix33	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::Matrix33 (T a)$/;"	f	class:Imath::Matrix33
Matrix33	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::Matrix33 (T a, T b, T c, T d, T e, T f, T g, T h, T i)$/;"	f	class:Imath::Matrix33
Matrix33	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::Matrix33 (const Matrix33 &v)$/;"	f	class:Imath::Matrix33
Matrix33	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::Matrix33 (const Matrix33<S> &v)$/;"	f	class:Imath::Matrix33
Matrix33	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::Matrix33 (const T a[3][3]) $/;"	f	class:Imath::Matrix33
Matrix33	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^template <class T> class Matrix33$/;"	c	namespace:Imath
Matrix44	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^    Matrix44 (Uninitialized) {}$/;"	f	class:Imath::Matrix44
Matrix44	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::Matrix44 ()$/;"	f	class:Imath::Matrix44
Matrix44	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::Matrix44 (Matrix33<T> r, Vec3<T> t)$/;"	f	class:Imath::Matrix44
Matrix44	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::Matrix44 (T a)$/;"	f	class:Imath::Matrix44
Matrix44	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::Matrix44 (T a, T b, T c, T d, T e, T f, T g, T h,$/;"	f	class:Imath::Matrix44
Matrix44	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::Matrix44 (const Matrix44 &v)$/;"	f	class:Imath::Matrix44
Matrix44	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::Matrix44 (const Matrix44<S> &v)$/;"	f	class:Imath::Matrix44
Matrix44	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::Matrix44 (const T a[4][4]) $/;"	f	class:Imath::Matrix44
Matrix44	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^template <class T> class Matrix44$/;"	c	namespace:Imath
Matrix4x4	core/transform.cpp	/^Matrix4x4::Matrix4x4(float mat[4][4]) {$/;"	f	class:Matrix4x4
Matrix4x4	core/transform.cpp	/^Matrix4x4::Matrix4x4(float t00, float t01, float t02, float t03,$/;"	f	class:Matrix4x4
Matrix4x4	core/transform.h	/^    Matrix4x4() {$/;"	f	struct:Matrix4x4
Matrix4x4	core/transform.h	/^struct Matrix4x4 {$/;"	s
MatteMaterial	materials/matte.h	/^    MatteMaterial(Reference<Texture<Spectrum> > kd,$/;"	f	class:MatteMaterial
MatteMaterial	materials/matte.h	/^class MatteMaterial : public Material {$/;"	c
Max	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^	Max	= 0x2111,$/;"	e	enum:Imath::Euler::Order
Max	core/probes.cpp	/^    void Max(int32_t newval) {$/;"	f	class:StatsCounter
Max	core/probes.cpp	/^    void Max(int64_t newval) {$/;"	f	class:StatsCounter
MaximumExtent	core/geometry.h	/^    int MaximumExtent() const {$/;"	f	class:BBox
MaximumSampleCount	samplers/adaptive.h	/^    int MaximumSampleCount() { return maxSamples; }$/;"	f	class:AdaptiveSampler
MaximumSampleCount	samplers/bestcandidate.h	/^    int MaximumSampleCount() { return 1; }$/;"	f	class:BestCandidateSampler
MaximumSampleCount	samplers/halton.h	/^    int MaximumSampleCount() { return 1; }$/;"	f	class:HaltonSampler
MaximumSampleCount	samplers/lowdiscrepancy.h	/^    int MaximumSampleCount() { return nPixelSamples; }$/;"	f	class:LDSampler
MaximumSampleCount	samplers/random.h	/^    int MaximumSampleCount() { return 1; }$/;"	f	class:RandomSampler
MaximumSampleCount	samplers/stratified.h	/^    int MaximumSampleCount() { return xPixelSamples * yPixelSamples; }$/;"	f	class:StratifiedSampler
MeasuredMaterial	materials/measured.cpp	/^MeasuredMaterial::MeasuredMaterial(const string &filename,$/;"	f	class:MeasuredMaterial
MeasuredMaterial	materials/measured.h	/^class MeasuredMaterial : public Material {$/;"	c
MeasuredSS	core/volume.cpp	/^struct MeasuredSS {$/;"	s	file:
MemoryArena	core/memory.h	/^    MemoryArena(uint32_t bs = 32768) {$/;"	f	class:MemoryArena
MemoryArena	core/memory.h	/^class MemoryArena {$/;"	c
MetalMaterial	materials/metal.cpp	/^MetalMaterial::MetalMaterial(Reference<Texture<Spectrum> > et,$/;"	f	class:MetalMaterial
MetalMaterial	materials/metal.h	/^class MetalMaterial : public Material {$/;"	c
MetropolisRenderer	renderers/metropolis.cpp	/^MetropolisRenderer::MetropolisRenderer(int perPixelSamples,$/;"	f	class:MetropolisRenderer
MetropolisRenderer	renderers/metropolis.h	/^class MetropolisRenderer : public Renderer {$/;"	c
Microfacet	core/reflection.cpp	/^Microfacet::Microfacet(const Spectrum &reflectance, Fresnel *f,$/;"	f	class:Microfacet
Microfacet	core/reflection.h	/^class Microfacet : public BxDF {$/;"	c
MicrofacetDistribution	core/reflection.h	/^class MicrofacetDistribution {$/;"	c
Min	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^	Min	= 0x0000,$/;"	e	enum:Imath::Euler::Order
Min	core/probes.cpp	/^    void Min(int32_t newval) {$/;"	f	class:StatsCounter
Min	core/probes.cpp	/^    void Min(int64_t newval) {$/;"	f	class:StatsCounter
MirrorMaterial	materials/mirror.h	/^    MirrorMaterial(Reference<Texture<Spectrum> > r, Reference<Texture<float> > bump) {$/;"	f	class:MirrorMaterial
MirrorMaterial	materials/mirror.h	/^class MirrorMaterial : public Material {$/;"	c
MissingRequired	3rdparty/tiff-3.9.4/tif_dirread.c	/^MissingRequired(TIFF* tif, const char* tagname)$/;"	f	file:
Mitchell1D	filters/mitchell.h	/^    float Mitchell1D(float x) const {$/;"	f	class:MitchellFilter
MitchellFilter	filters/mitchell.h	/^    MitchellFilter(float b, float c, float xw, float yw)$/;"	f	class:MitchellFilter
MitchellFilter	filters/mitchell.h	/^class MitchellFilter : public Filter {$/;"	c
MixMaterial	materials/mixmat.h	/^    MixMaterial(Reference<Material> mat1, Reference<Material> mat2,$/;"	f	class:MixMaterial
MixMaterial	materials/mixmat.h	/^class MixMaterial : public Material {$/;"	c
MixTexture	textures/mix.h	/^    MixTexture(Reference<Texture<T> > t1, Reference<Texture<T> > t2,$/;"	f	class:MixTexture
MixTexture	textures/mix.h	/^template <typename T> class MixTexture : public Texture<T> {$/;"	c
Mo	integrators/dipolesubsurface.cpp	/^Spectrum SubsurfaceOctreeNode::Mo(const BBox &nodeBound, const Point &pt,$/;"	f	class:SubsurfaceOctreeNode
Mod	core/pbrt.h	/^inline int Mod(int a, int b) {$/;"	f
MotionBounds	core/transform.cpp	/^BBox AnimatedTransform::MotionBounds(const BBox &b,$/;"	f	class:AnimatedTransform
Mul	core/transform.h	/^    static Matrix4x4 Mul(const Matrix4x4 &m1, const Matrix4x4 &m2) {$/;"	f	struct:Matrix4x4
Mutex	3rdparty/ilmbase-1.0.2/IlmThreadMutex.cpp	/^Mutex::Mutex () {}$/;"	f	class:IlmThread::Mutex
Mutex	3rdparty/ilmbase-1.0.2/IlmThreadMutex.h	/^class Mutex$/;"	c	namespace:IlmThread
Mutex	3rdparty/ilmbase-1.0.2/IlmThreadMutexPosix.cpp	/^Mutex::Mutex ()$/;"	f	class:IlmThread::Mutex
Mutex	3rdparty/ilmbase-1.0.2/IlmThreadMutexWin32.cpp	/^Mutex::Mutex ()$/;"	f	class:IlmThread::Mutex
Mutex	core/parallel.cpp	/^Mutex::Mutex() {$/;"	f	class:Mutex
Mutex	core/parallel.h	/^class Mutex {$/;"	c
MutexLock	core/parallel.cpp	/^MutexLock::MutexLock(Mutex &m) : mutex(m) {$/;"	f	class:MutexLock
MutexLock	core/parallel.h	/^struct MutexLock {$/;"	s
N	3rdparty/openexr-1.7.0/ImfRgbaYca.h	/^static const int N = 27;$/;"	m	namespace:Imf::RgbaYca
N	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	N(/;"	d	file:
N	3rdparty/tiff-3.9.4/tif_jpeg.c	/^#define	N(/;"	d	file:
N	core/rng.h	/^    static const int N = 624;$/;"	m	class:RNG
N2	3rdparty/openexr-1.7.0/ImfRgbaYca.h	/^static const int N2 = N \/ 2;$/;"	m	namespace:Imf::RgbaYca
NAME	3rdparty/zlib-1.2.5/inflate.h	/^    NAME,       \/* i: waiting for end of file name (gzip) *\/$/;"	e	enum:__anon75
NAMEDMATERIAL	core/pbrtparse.cpp	/^     NAMEDMATERIAL = 281,$/;"	e	enum:yytokentype	file:
NAMEDMATERIAL	core/pbrtparse.hh	/^     NAMEDMATERIAL = 281,$/;"	e	enum:yytokentype
NAMED_PROP	tools/ply.c	/^#define NAMED_PROP /;"	d	file:
NAME_STATE	3rdparty/zlib-1.2.5/deflate.h	/^#define NAME_STATE /;"	d
NANGLES	3rdparty/tiff-3.9.4/tif_luv.c	/^#define NANGLES	/;"	d	file:
NANGLES	3rdparty/tiff-3.9.4/tif_luv.c	/^#undef NANGLES$/;"	d	file:
NATIVE	3rdparty/openexr-1.7.0/ImfCompressor.h	/^	NATIVE,		\/\/ the machine's native format$/;"	e	enum:Imf::Compressor::Format
NBITS	3rdparty/openexr-1.7.0/ImfWav.cpp	/^const int NBITS = 16;$/;"	m	namespace:Imf::__anon41	file:
NC	textures/marble.h	/^#define NC /;"	d
NEEDBITS	3rdparty/zlib-1.2.5/infback.c	/^#define NEEDBITS(/;"	d	file:
NEEDBITS	3rdparty/zlib-1.2.5/inflate.c	/^#define NEEDBITS(/;"	d	file:
NEXT	3rdparty/zlib-1.2.5/gzread.c	/^#define NEXT(/;"	d	file:
NEXT	shapes/loopsubdiv.cpp	/^#define NEXT(/;"	d	file:
NEXT_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.h	/^#define NEXT_SUPPORT /;"	d
NEXT_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.vc.h	/^#define NEXT_SUPPORT /;"	d
NEXT_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.wince.h	/^#define NEXT_SUPPORT /;"	d
NIL	3rdparty/zlib-1.2.5/deflate.c	/^#define NIL /;"	d	file:
NITEMS	3rdparty/tiff-3.9.4/tif_dirread.c	/^#define	NITEMS(/;"	d	file:
NITEMS	3rdparty/tiff-3.9.4/tif_dirread.c	/^#undef NITEMS$/;"	d	file:
NITEMS	3rdparty/tiff-3.9.4/tif_dirwrite.c	/^#define	NITEMS(/;"	d	file:
NITEMS	3rdparty/tiff-3.9.4/tif_dirwrite.c	/^#undef NITEMS$/;"	d	file:
NMAX	3rdparty/zlib-1.2.5/adler32.c	/^#define NMAX /;"	d	file:
NOISE_PERM_SIZE	core/texture.cpp	/^#define NOISE_PERM_SIZE /;"	d	file:
NOMINMAX	3rdparty/ilmbase-1.0.2/IlmThread.h	/^        #undef NOMINMAX$/;"	d
NOMINMAX	3rdparty/ilmbase-1.0.2/IlmThread.h	/^    #define NOMINMAX$/;"	d
NOMINMAX	3rdparty/ilmbase-1.0.2/IlmThreadMutex.h	/^        #undef NOMINMAX$/;"	d
NOMINMAX	3rdparty/ilmbase-1.0.2/IlmThreadMutex.h	/^    #define NOMINMAX$/;"	d
NOMINMAX	3rdparty/ilmbase-1.0.2/IlmThreadSemaphore.h	/^        #undef NOMINMAX$/;"	d
NOMINMAX	3rdparty/ilmbase-1.0.2/IlmThreadSemaphore.h	/^    #define NOMINMAX$/;"	d
NOMINMAX	core/pbrt.h	/^#define NOMINMAX /;"	d
NONE	textures/checkerboard.h	/^    enum { NONE, CLOSEDFORM } aaMethod;$/;"	e	enum:Checkerboard2DTexture::__anon89
NOP	3rdparty/tiff-3.9.4/tif_getimage.c	/^#define	NOP$/;"	d	file:
NORIENTNAMES	3rdparty/tiff-3.9.4/tif_print.c	/^#define	NORIENTNAMES	/;"	d	file:
NOSTRIP	3rdparty/tiff-3.9.4/tif_read.c	/^#define	NOSTRIP	/;"	d	file:
NOTILE	3rdparty/tiff-3.9.4/tif_read.c	/^#define	NOTILE	/;"	d	file:
NOT_ONE	core/transform.h	/^#define NOT_ONE(/;"	d
NOT_ONE	core/transform.h	/^#undef NOT_ONE$/;"	d
NO_COMPRESSION	3rdparty/openexr-1.7.0/ImfCompression.h	/^    NO_COMPRESSION  = 0,	\/\/ no compression$/;"	e	enum:Imf::Compression
NO_DUMMY_DECL	3rdparty/zlib-1.2.5/zconf.h	/^#  define NO_DUMMY_DECL$/;"	d
NO_GZCOMPRESS	3rdparty/zlib-1.2.5/gzguts.h	/^#  define NO_GZCOMPRESS$/;"	d
NO_MEMCPY	3rdparty/zlib-1.2.5/zutil.h	/^#  define NO_MEMCPY$/;"	d
NO_OTHER_PROPS	tools/ply.c	/^#define NO_OTHER_PROPS /;"	d	file:
NO_vsnprintf	3rdparty/zlib-1.2.5/zconf.h	/^#  define NO_vsnprintf$/;"	d
NO_vsnprintf	3rdparty/zlib-1.2.5/zutil.h	/^#    define NO_vsnprintf$/;"	d
NO_vsnprintf	3rdparty/zlib-1.2.5/zutil.h	/^#  define NO_vsnprintf$/;"	d
NPHOTONAMES	3rdparty/tiff-3.9.4/tif_print.c	/^#define	NPHOTONAMES	/;"	d	file:
NSEG	textures/marble.h	/^#define NSEG /;"	d
NULL	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define NULL /;"	d	file:
NUM	core/pbrtparse.cpp	/^     NUM = 260,$/;"	e	enum:yytokentype	file:
NUM	core/pbrtparse.hh	/^     NUM = 260,$/;"	e	enum:yytokentype
NUM_COMPRESSION_METHODS	3rdparty/openexr-1.7.0/ImfCompression.h	/^    NUM_COMPRESSION_METHODS	\/\/ number of different compression methods$/;"	e	enum:Imf::Compression
NUM_ENVMAPTYPES	3rdparty/openexr-1.7.0/ImfEnvmap.h	/^    NUM_ENVMAPTYPES		\/\/ Number of different environment map types$/;"	e	enum:Imf::Envmap
NUM_EVENTS	core/parallel.h	/^    enum { SIGNAL = 0, BROADCAST=1, NUM_EVENTS=2 };$/;"	e	enum:ConditionVariable::__anon83
NUM_LEVELMODES	3rdparty/openexr-1.7.0/ImfTileDescription.h	/^    NUM_LEVELMODES	\/\/ number of different level modes$/;"	e	enum:Imf::LevelMode
NUM_LINEORDERS	3rdparty/openexr-1.7.0/ImfLineOrder.h	/^    NUM_LINEORDERS	\/\/ number of different line orders$/;"	e	enum:Imf::LineOrder
NUM_PIXELTYPES	3rdparty/openexr-1.7.0/ImfPixelType.h	/^    NUM_PIXELTYPES	\/\/ number of different pixel types$/;"	e	enum:Imf::PixelType
NUM_ROUNDINGMODES	3rdparty/openexr-1.7.0/ImfTileDescription.h	/^    NUM_ROUNDINGMODES	\/\/ number of different rounding modes$/;"	e	enum:Imf::LevelRoundingMode
NURBS	shapes/nurbs.cpp	/^NURBS::NURBS(const Transform *o2w, const Transform *w2o,$/;"	f	class:NURBS
NURBS	shapes/nurbs.h	/^class NURBS : public Shape {$/;"	c
NURBSEvaluate	shapes/nurbs.cpp	/^NURBSEvaluate(int order, const float *knot, const Homogeneous3 *cp, int np,$/;"	f	file:
NURBSEvaluateSurface	shapes/nurbs.cpp	/^NURBSEvaluateSurface(int uOrder, const float *uKnot, int ucp, float u,$/;"	f	file:
Name	3rdparty/openexr-1.7.0/ImfName.h	/^Name::Name ()$/;"	f	class:Imf::Name
Name	3rdparty/openexr-1.7.0/ImfName.h	/^Name::Name (const char text[])$/;"	f	class:Imf::Name
Name	3rdparty/openexr-1.7.0/ImfName.h	/^class Name$/;"	c	namespace:Imf
NameCompare	3rdparty/openexr-1.7.0/ImfAttribute.cpp	/^struct NameCompare: std::binary_function <const char *, const char *, bool>$/;"	s	namespace:Imf::__anon14	file:
NeXTDecode	3rdparty/tiff-3.9.4/tif_next.c	/^NeXTDecode(TIFF* tif, tidata_t buf, tsize_t occ, tsample_t s)$/;"	f	file:
NeedBits16	3rdparty/tiff-3.9.4/tif_fax3.h	/^#define NeedBits16(/;"	d
NeedBits8	3rdparty/tiff-3.9.4/tif_fax3.h	/^#define NeedBits8(/;"	d
NextCode	3rdparty/tiff-3.9.4/tif_lzw.c	/^#define	NextCode(/;"	d	file:
Noise	core/texture.cpp	/^float Noise(const Point &P) { return Noise(P.x, P.y, P.z); }$/;"	f
Noise	core/texture.cpp	/^float Noise(float x, float y, float z) {$/;"	f
NoisePerm	core/texture.cpp	/^static int NoisePerm[2 * NOISE_PERM_SIZE] = {$/;"	v	file:
NoiseWeight	core/texture.cpp	/^inline float NoiseWeight(float t) {$/;"	f
Nop	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	Nop$/;"	d	file:
Normal	core/geometry.h	/^    Normal() { x = y = z = 0.f; }$/;"	f	class:Normal
Normal	core/geometry.h	/^    Normal(const Normal &n) {$/;"	f	class:Normal
Normal	core/geometry.h	/^    Normal(float xx, float yy, float zz)$/;"	f	class:Normal
Normal	core/geometry.h	/^    explicit Normal(const Vector &v)$/;"	f	class:Normal
Normal	core/geometry.h	/^class Normal {$/;"	c
Normalize	core/geometry.h	/^inline Normal Normalize(const Normal &n) {$/;"	f
Normalize	core/geometry.h	/^inline Vector Normalize(const Vector &v) { return v \/ v.Length(); }$/;"	f
Normalize	core/quaternion.h	/^inline Quaternion Normalize(const Quaternion &q) {$/;"	f
NotConfigured	3rdparty/tiff-3.9.4/tif_codec.c	/^NotConfigured(TIFF* tif, int scheme)$/;"	f	file:
NumComponents	core/reflection.h	/^    int NumComponents() const { return nBxDFs; }$/;"	f	class:BSDF
NumComponents	core/reflection.h	/^inline int BSDF::NumComponents(BxDFType flags) const {$/;"	f	class:BSDF
NumSystemCores	core/parallel.cpp	/^int NumSystemCores() {$/;"	f
O	core/shrots.cpp	/^#define O(/;"	d	file:
O	core/shrots.cpp	/^#undef O$/;"	d	file:
OBJECTBEGIN	core/pbrtparse.cpp	/^     OBJECTBEGIN = 282,$/;"	e	enum:yytokentype	file:
OBJECTBEGIN	core/pbrtparse.hh	/^     OBJECTBEGIN = 282,$/;"	e	enum:yytokentype
OBJECTEND	core/pbrtparse.cpp	/^     OBJECTEND = 283,$/;"	e	enum:yytokentype	file:
OBJECTEND	core/pbrtparse.hh	/^     OBJECTEND = 283,$/;"	e	enum:yytokentype
OBJECTINSTANCE	core/pbrtparse.cpp	/^     OBJECTINSTANCE = 284,$/;"	e	enum:yytokentype	file:
OBJECTINSTANCE	core/pbrtparse.hh	/^     OBJECTINSTANCE = 284,$/;"	e	enum:yytokentype
OF	3rdparty/zlib-1.2.5/zconf.h	/^#    define OF(/;"	d
OFF	3rdparty/zlib-1.2.5/inffast.c	/^#  define OFF /;"	d	file:
OFILETYPE_IMAGE	3rdparty/tiff-3.9.4/tiff.h	/^#define	    OFILETYPE_IMAGE	/;"	d
OFILETYPE_PAGE	3rdparty/tiff-3.9.4/tiff.h	/^#define	    OFILETYPE_PAGE	/;"	d
OFILETYPE_REDUCEDIMAGE	3rdparty/tiff-3.9.4/tiff.h	/^#define	    OFILETYPE_REDUCEDIMAGE	/;"	d
OJPEGCleanup	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGCleanup(TIFF* tif)$/;"	f	file:
OJPEGDecode	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGDecode(TIFF* tif, tidata_t buf, tsize_t cc, tsample_t s)$/;"	f	file:
OJPEGDecodeRaw	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGDecodeRaw(TIFF* tif, tidata_t buf, tsize_t cc)$/;"	f	file:
OJPEGDecodeScanlines	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGDecodeScanlines(TIFF* tif, tidata_t buf, tsize_t cc)$/;"	f	file:
OJPEGEncode	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGEncode(TIFF* tif, tidata_t buf, tsize_t cc, tsample_t s)$/;"	f	file:
OJPEGLibjpegJpegErrorMgrErrorExit	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGLibjpegJpegErrorMgrErrorExit(jpeg_common_struct* cinfo)$/;"	f	file:
OJPEGLibjpegJpegErrorMgrOutputMessage	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGLibjpegJpegErrorMgrOutputMessage(jpeg_common_struct* cinfo)$/;"	f	file:
OJPEGLibjpegJpegSourceMgrFillInputBuffer	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGLibjpegJpegSourceMgrFillInputBuffer(jpeg_decompress_struct* cinfo)$/;"	f	file:
OJPEGLibjpegJpegSourceMgrInitSource	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGLibjpegJpegSourceMgrInitSource(jpeg_decompress_struct* cinfo)$/;"	f	file:
OJPEGLibjpegJpegSourceMgrResyncToRestart	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGLibjpegJpegSourceMgrResyncToRestart(jpeg_decompress_struct* cinfo, int desired)$/;"	f	file:
OJPEGLibjpegJpegSourceMgrSkipInputData	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGLibjpegJpegSourceMgrSkipInputData(jpeg_decompress_struct* cinfo, long num_bytes)$/;"	f	file:
OJPEGLibjpegJpegSourceMgrTermSource	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGLibjpegJpegSourceMgrTermSource(jpeg_decompress_struct* cinfo)$/;"	f	file:
OJPEGLibjpegSessionAbort	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGLibjpegSessionAbort(TIFF* tif)$/;"	f	file:
OJPEGPostDecode	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGPostDecode(TIFF* tif, tidata_t buf, tsize_t cc)$/;"	f	file:
OJPEGPostEncode	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGPostEncode(TIFF* tif)$/;"	f	file:
OJPEGPreDecode	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGPreDecode(TIFF* tif, tsample_t s)$/;"	f	file:
OJPEGPreDecodeSkipRaw	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGPreDecodeSkipRaw(TIFF* tif)$/;"	f	file:
OJPEGPreDecodeSkipScanlines	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGPreDecodeSkipScanlines(TIFF* tif)$/;"	f	file:
OJPEGPreEncode	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGPreEncode(TIFF* tif, tsample_t s)$/;"	f	file:
OJPEGPrintDir	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGPrintDir(TIFF* tif, FILE* fd, long flags)$/;"	f	file:
OJPEGReadBlock	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGReadBlock(OJPEGState* sp, uint16 len, void* mem)$/;"	f	file:
OJPEGReadBufferFill	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGReadBufferFill(OJPEGState* sp)$/;"	f	file:
OJPEGReadByte	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGReadByte(OJPEGState* sp, uint8* byte)$/;"	f	file:
OJPEGReadByteAdvance	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGReadByteAdvance(OJPEGState* sp)$/;"	f	file:
OJPEGReadBytePeek	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGReadBytePeek(OJPEGState* sp, uint8* byte)$/;"	f	file:
OJPEGReadHeaderInfo	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGReadHeaderInfo(TIFF* tif)$/;"	f	file:
OJPEGReadHeaderInfoSec	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGReadHeaderInfoSec(TIFF* tif)$/;"	f	file:
OJPEGReadHeaderInfoSecStreamDht	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGReadHeaderInfoSecStreamDht(TIFF* tif)$/;"	f	file:
OJPEGReadHeaderInfoSecStreamDqt	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGReadHeaderInfoSecStreamDqt(TIFF* tif)$/;"	f	file:
OJPEGReadHeaderInfoSecStreamDri	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGReadHeaderInfoSecStreamDri(TIFF* tif)$/;"	f	file:
OJPEGReadHeaderInfoSecStreamSof	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGReadHeaderInfoSecStreamSof(TIFF* tif, uint8 marker_id)$/;"	f	file:
OJPEGReadHeaderInfoSecStreamSos	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGReadHeaderInfoSecStreamSos(TIFF* tif)$/;"	f	file:
OJPEGReadHeaderInfoSecTablesAcTable	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGReadHeaderInfoSecTablesAcTable(TIFF* tif)$/;"	f	file:
OJPEGReadHeaderInfoSecTablesDcTable	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGReadHeaderInfoSecTablesDcTable(TIFF* tif)$/;"	f	file:
OJPEGReadHeaderInfoSecTablesQTable	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGReadHeaderInfoSecTablesQTable(TIFF* tif)$/;"	f	file:
OJPEGReadSecondarySos	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGReadSecondarySos(TIFF* tif, tsample_t s)$/;"	f	file:
OJPEGReadSkip	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGReadSkip(OJPEGState* sp, uint16 len)$/;"	f	file:
OJPEGReadWord	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGReadWord(OJPEGState* sp, uint16* word)$/;"	f	file:
OJPEGSetupDecode	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGSetupDecode(TIFF* tif)$/;"	f	file:
OJPEGSetupEncode	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGSetupEncode(TIFF* tif)$/;"	f	file:
OJPEGState	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^} OJPEGState;$/;"	t	typeref:struct:__anon55	file:
OJPEGStateInBufferSource	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^} OJPEGStateInBufferSource;$/;"	t	typeref:enum:__anon53	file:
OJPEGStateOutState	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^} OJPEGStateOutState;$/;"	t	typeref:enum:__anon54	file:
OJPEGSubsamplingCorrect	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGSubsamplingCorrect(TIFF* tif)$/;"	f	file:
OJPEGVGetField	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGVGetField(TIFF* tif, ttag_t tag, va_list ap)$/;"	f	file:
OJPEGVSetField	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGVSetField(TIFF* tif, ttag_t tag, va_list ap)$/;"	f	file:
OJPEGWriteHeaderInfo	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGWriteHeaderInfo(TIFF* tif)$/;"	f	file:
OJPEGWriteStream	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGWriteStream(TIFF* tif, void** mem, uint32* len)$/;"	f	file:
OJPEGWriteStreamAcTable	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGWriteStreamAcTable(TIFF* tif, uint8 table_index, void** mem, uint32* len)$/;"	f	file:
OJPEGWriteStreamCompressed	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGWriteStreamCompressed(TIFF* tif, void** mem, uint32* len)$/;"	f	file:
OJPEGWriteStreamDcTable	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGWriteStreamDcTable(TIFF* tif, uint8 table_index, void** mem, uint32* len)$/;"	f	file:
OJPEGWriteStreamDri	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGWriteStreamDri(TIFF* tif, void** mem, uint32* len)$/;"	f	file:
OJPEGWriteStreamEoi	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGWriteStreamEoi(TIFF* tif, void** mem, uint32* len)$/;"	f	file:
OJPEGWriteStreamQTable	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGWriteStreamQTable(TIFF* tif, uint8 table_index, void** mem, uint32* len)$/;"	f	file:
OJPEGWriteStreamRst	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGWriteStreamRst(TIFF* tif, void** mem, uint32* len)$/;"	f	file:
OJPEGWriteStreamSof	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGWriteStreamSof(TIFF* tif, void** mem, uint32* len)$/;"	f	file:
OJPEGWriteStreamSoi	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGWriteStreamSoi(TIFF* tif, void** mem, uint32* len)$/;"	f	file:
OJPEGWriteStreamSos	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^OJPEGWriteStreamSos(TIFF* tif, void** mem, uint32* len)$/;"	f	file:
OJPEG_BUFFER	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^#define OJPEG_BUFFER /;"	d	file:
ONE	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^#define  ONE	/;"	d	file:
ONE_HALF	3rdparty/tiff-3.9.4/tif_color.c	/^#define	ONE_HALF	/;"	d	file:
ONE_HALF	3rdparty/tiff-3.9.4/tif_color.c	/^#undef	ONE_HALF$/;"	d	file:
ONE_LEVEL	3rdparty/openexr-1.7.0/ImfTileDescription.h	/^    ONE_LEVEL = 0,$/;"	e	enum:Imf::LevelMode
OPT	Makefile	/^OPT=-O2$/;"	m
ORIENTATION_BOTLEFT	3rdparty/tiff-3.9.4/tiff.h	/^#define	    ORIENTATION_BOTLEFT	/;"	d
ORIENTATION_BOTRIGHT	3rdparty/tiff-3.9.4/tiff.h	/^#define	    ORIENTATION_BOTRIGHT	/;"	d
ORIENTATION_LEFTBOT	3rdparty/tiff-3.9.4/tiff.h	/^#define	    ORIENTATION_LEFTBOT	/;"	d
ORIENTATION_LEFTTOP	3rdparty/tiff-3.9.4/tiff.h	/^#define	    ORIENTATION_LEFTTOP	/;"	d
ORIENTATION_RIGHTBOT	3rdparty/tiff-3.9.4/tiff.h	/^#define	    ORIENTATION_RIGHTBOT	/;"	d
ORIENTATION_RIGHTTOP	3rdparty/tiff-3.9.4/tiff.h	/^#define	    ORIENTATION_RIGHTTOP	/;"	d
ORIENTATION_TOPLEFT	3rdparty/tiff-3.9.4/tiff.h	/^#define	    ORIENTATION_TOPLEFT	/;"	d
ORIENTATION_TOPRIGHT	3rdparty/tiff-3.9.4/tiff.h	/^#define	    ORIENTATION_TOPRIGHT	/;"	d
OS	3rdparty/zlib-1.2.5/inflate.h	/^    OS,         \/* i: waiting for extra flags and operating system (gzip) *\/$/;"	e	enum:__anon75
OS2	3rdparty/zlib-1.2.5/zconf.h	/^#  define OS2$/;"	d
OSArgs_ReadExt	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define OSArgs_ReadExt /;"	d	file:
OSArgs_ReadExt	3rdparty/tiff-3.9.4/tif_acorn.c	/^#undef  OSArgs_ReadExt$/;"	d	file:
OSArgs_ReadPtr	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define OSArgs_ReadPtr /;"	d	file:
OSArgs_ReadPtr	3rdparty/tiff-3.9.4/tif_acorn.c	/^#undef  OSArgs_ReadPtr$/;"	d	file:
OSArgs_SetPtr	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define OSArgs_SetPtr /;"	d	file:
OSArgs_SetPtr	3rdparty/tiff-3.9.4/tif_acorn.c	/^#undef  OSArgs_SetPtr$/;"	d	file:
OSFind_Close	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define OSFind_Close /;"	d	file:
OSFind_Close	3rdparty/tiff-3.9.4/tif_acorn.c	/^#undef  OSFind_Close$/;"	d	file:
OSFind_Openin	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define OSFind_Openin /;"	d	file:
OSFind_Openin	3rdparty/tiff-3.9.4/tif_acorn.c	/^#undef  OSFind_Openin$/;"	d	file:
OSFind_Openout	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define OSFind_Openout /;"	d	file:
OSFind_Openout	3rdparty/tiff-3.9.4/tif_acorn.c	/^#undef  OSFind_Openout$/;"	d	file:
OSFind_Openup	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define OSFind_Openup /;"	d	file:
OSFind_Openup	3rdparty/tiff-3.9.4/tif_acorn.c	/^#undef  OSFind_Openup$/;"	d	file:
OSGBPB_Read	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define OSGBPB_Read /;"	d	file:
OSGBPB_Read	3rdparty/tiff-3.9.4/tif_acorn.c	/^#undef  OSGBPB_Read$/;"	d	file:
OSGBPB_Write	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define OSGBPB_Write /;"	d	file:
OSGBPB_Write	3rdparty/tiff-3.9.4/tif_acorn.c	/^#undef  OSGBPB_Write$/;"	d	file:
OS_Args	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define OS_Args /;"	d	file:
OS_Args	3rdparty/tiff-3.9.4/tif_acorn.c	/^#undef  OS_Args$/;"	d	file:
OS_CODE	3rdparty/zlib-1.2.5/zutil.h	/^#    define OS_CODE /;"	d
OS_CODE	3rdparty/zlib-1.2.5/zutil.h	/^#  define OS_CODE /;"	d
OS_File	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define OS_File /;"	d	file:
OS_File	3rdparty/tiff-3.9.4/tif_acorn.c	/^#undef  OS_File$/;"	d	file:
OS_Find	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define OS_Find /;"	d	file:
OS_Find	3rdparty/tiff-3.9.4/tif_acorn.c	/^#undef  OS_Find$/;"	d	file:
OS_GBPB	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define OS_GBPB /;"	d	file:
OS_GBPB	3rdparty/tiff-3.9.4/tif_acorn.c	/^#undef  OS_GBPB$/;"	d	file:
OStream	3rdparty/openexr-1.7.0/ImfIO.cpp	/^OStream::OStream (const char fileName[]): _fileName (fileName)$/;"	f	class:Imf::OStream
OStream	3rdparty/openexr-1.7.0/ImfIO.h	/^class OStream$/;"	c	namespace:Imf
OTHER_PROP	tools/ply.c	/^#define OTHER_PROP /;"	d	file:
O_ACCMODE	3rdparty/tiff-3.9.4/tif_atari.c	/^#define O_ACCMODE /;"	d	file:
ObjectBound	shapes/cone.cpp	/^BBox Cone::ObjectBound() const {$/;"	f	class:Cone
ObjectBound	shapes/cylinder.cpp	/^BBox Cylinder::ObjectBound() const {$/;"	f	class:Cylinder
ObjectBound	shapes/disk.cpp	/^BBox Disk::ObjectBound() const {$/;"	f	class:Disk
ObjectBound	shapes/heightfield.cpp	/^BBox Heightfield::ObjectBound() const {$/;"	f	class:Heightfield
ObjectBound	shapes/heightfield2.cpp	/^BBox Heightfield2::ObjectBound() const {$/;"	f	class:Heightfield2
ObjectBound	shapes/hyperboloid.cpp	/^BBox Hyperboloid::ObjectBound() const {$/;"	f	class:Hyperboloid
ObjectBound	shapes/loopsubdiv.cpp	/^BBox LoopSubdiv::ObjectBound() const {$/;"	f	class:LoopSubdiv
ObjectBound	shapes/nurbs.cpp	/^BBox NURBS::ObjectBound() const {$/;"	f	class:NURBS
ObjectBound	shapes/paraboloid.cpp	/^BBox Paraboloid::ObjectBound() const {$/;"	f	class:Paraboloid
ObjectBound	shapes/sphere.cpp	/^BBox Sphere::ObjectBound() const {$/;"	f	class:Sphere
ObjectBound	shapes/trianglemesh.cpp	/^BBox Triangle::ObjectBound() const {$/;"	f	class:Triangle
ObjectBound	shapes/trianglemesh.cpp	/^BBox TriangleMesh::ObjectBound() const {$/;"	f	class:TriangleMesh
ObjectToWorld	core/intersection.h	/^    Transform WorldToObject, ObjectToWorld;$/;"	m	struct:Intersection
ObjectToWorld	core/shape.h	/^    const Transform *ObjectToWorld, *WorldToObject;$/;"	m	class:Shape
OctNode	core/octree.h	/^    OctNode() {$/;"	f	struct:OctNode
OctNode	core/octree.h	/^template <typename NodeData> struct OctNode {$/;"	s
Octree	core/octree.h	/^    Octree(const BBox &b, int md = 16)$/;"	f	class:Octree
Octree	core/octree.h	/^template <typename NodeData> class Octree {$/;"	c
Offset	core/geometry.h	/^    Vector Offset(const Point &p) const {$/;"	f	class:BBox
Offset	core/memory.h	/^    uint32_t Offset(uint32_t a) const { return (a & (BlockSize() - 1)); }$/;"	f	class:BlockedArray
OkToChangeTag	3rdparty/tiff-3.9.4/tif_dir.c	/^OkToChangeTag(TIFF* tif, ttag_t tag)$/;"	f	file:
OneMinusEpsilon	core/montecarlo.h	/^static const float OneMinusEpsilon=0.9999999403953552f;$/;"	v
OneMinusEpsilon	core/montecarlo.h	/^static const float OneMinusEpsilon=0x1.fffffep-1;$/;"	v
OpaqueAttribute	3rdparty/openexr-1.7.0/ImfOpaqueAttribute.cpp	/^OpaqueAttribute::OpaqueAttribute (const OpaqueAttribute &other):$/;"	f	class:Imf::OpaqueAttribute
OpaqueAttribute	3rdparty/openexr-1.7.0/ImfOpaqueAttribute.cpp	/^OpaqueAttribute::OpaqueAttribute (const char typeName[]):$/;"	f	class:Imf::OpaqueAttribute
OpaqueAttribute	3rdparty/openexr-1.7.0/ImfOpaqueAttribute.h	/^class OpaqueAttribute: public Attribute$/;"	c	namespace:Imf
Options	core/pbrt.h	/^    Options() { nCores = 0;$/;"	f	struct:Options
Options	core/pbrt.h	/^struct Options {$/;"	s
Order	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^    enum Order$/;"	g	class:Imath::Euler
OrenNayar	core/reflection.h	/^    OrenNayar(const Spectrum &reflectance, float sig)$/;"	f	class:OrenNayar
OrenNayar	core/reflection.h	/^class OrenNayar : public BxDF {$/;"	c
OrthoCamera	cameras/orthographic.cpp	/^OrthoCamera::OrthoCamera(const AnimatedTransform &cam2world,$/;"	f	class:OrthoCamera
OrthoCamera	cameras/orthographic.h	/^class OrthoCamera : public ProjectiveCamera {$/;"	c
Orthographic	core/transform.cpp	/^Transform Orthographic(float znear, float zfar) {$/;"	f
OtherData	tools/ply.h	/^typedef struct OtherData { \/* for storing other_props for an other element *\/$/;"	s
OtherData	tools/ply.h	/^} OtherData;$/;"	t	typeref:struct:OtherData
OtherElem	tools/ply.h	/^typedef struct OtherElem {     \/* data for one "other" element *\/$/;"	s
OtherElem	tools/ply.h	/^} OtherElem;$/;"	t	typeref:struct:OtherElem
OutSliceInfo	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^OutSliceInfo::OutSliceInfo (PixelType t,$/;"	f	class:Imf::__anon23::OutSliceInfo
OutSliceInfo	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^struct OutSliceInfo$/;"	s	namespace:Imf::__anon23	file:
OutputFile	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^OutputFile::OutputFile$/;"	f	class:Imf::OutputFile
OutputFile	3rdparty/openexr-1.7.0/ImfOutputFile.h	/^class OutputFile$/;"	c	namespace:Imf
Overlaps	core/geometry.h	/^    bool Overlaps(const BBox &b) const {$/;"	f	class:BBox
P	core/sh.cpp	/^#define P(/;"	d	file:
P	core/sh.cpp	/^#undef P$/;"	d	file:
P	shapes/loopsubdiv.cpp	/^    Point P;$/;"	m	struct:SDVertex	file:
P	shapes/nurbs.h	/^    float *P;$/;"	m	class:NURBS
PACK	3rdparty/tiff-3.9.4/tif_getimage.c	/^#define	PACK(/;"	d	file:
PACK	3rdparty/tiff-3.9.4/tif_luv.c	/^#define	PACK(/;"	d	file:
PACK	3rdparty/tiff-3.9.4/tif_luv.c	/^#undef PACK$/;"	d	file:
PACK4	3rdparty/tiff-3.9.4/tif_getimage.c	/^#define	PACK4(/;"	d	file:
PACKBITS_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.h	/^#define PACKBITS_SUPPORT /;"	d
PACKBITS_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.vc.h	/^#define PACKBITS_SUPPORT /;"	d
PACKBITS_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.wince.h	/^#define PACKBITS_SUPPORT /;"	d
PACKW	3rdparty/tiff-3.9.4/tif_getimage.c	/^#define	PACKW(/;"	d	file:
PACKW4	3rdparty/tiff-3.9.4/tif_getimage.c	/^#define	PACKW4(/;"	d	file:
PALmap	3rdparty/tiff-3.9.4/tiffio.h	/^	uint32** PALmap;                        \/* palette image map *\/$/;"	m	struct:_TIFFRGBAImage
PARAM_TYPE_BLACKBODY	core/pbrtparse.cpp	/^    PARAM_TYPE_BLACKBODY, PARAM_TYPE_SPECTRUM,$/;"	e	enum:__anon84	file:
PARAM_TYPE_BOOL	core/pbrtparse.cpp	/^enum { PARAM_TYPE_INT, PARAM_TYPE_BOOL, PARAM_TYPE_FLOAT, PARAM_TYPE_POINT,$/;"	e	enum:__anon84	file:
PARAM_TYPE_FLOAT	core/pbrtparse.cpp	/^enum { PARAM_TYPE_INT, PARAM_TYPE_BOOL, PARAM_TYPE_FLOAT, PARAM_TYPE_POINT,$/;"	e	enum:__anon84	file:
PARAM_TYPE_INT	core/pbrtparse.cpp	/^enum { PARAM_TYPE_INT, PARAM_TYPE_BOOL, PARAM_TYPE_FLOAT, PARAM_TYPE_POINT,$/;"	e	enum:__anon84	file:
PARAM_TYPE_NORMAL	core/pbrtparse.cpp	/^    PARAM_TYPE_VECTOR, PARAM_TYPE_NORMAL, PARAM_TYPE_RGB, PARAM_TYPE_XYZ,$/;"	e	enum:__anon84	file:
PARAM_TYPE_POINT	core/pbrtparse.cpp	/^enum { PARAM_TYPE_INT, PARAM_TYPE_BOOL, PARAM_TYPE_FLOAT, PARAM_TYPE_POINT,$/;"	e	enum:__anon84	file:
PARAM_TYPE_RGB	core/pbrtparse.cpp	/^    PARAM_TYPE_VECTOR, PARAM_TYPE_NORMAL, PARAM_TYPE_RGB, PARAM_TYPE_XYZ,$/;"	e	enum:__anon84	file:
PARAM_TYPE_SPECTRUM	core/pbrtparse.cpp	/^    PARAM_TYPE_BLACKBODY, PARAM_TYPE_SPECTRUM,$/;"	e	enum:__anon84	file:
PARAM_TYPE_STRING	core/pbrtparse.cpp	/^    PARAM_TYPE_STRING, PARAM_TYPE_TEXTURE };$/;"	e	enum:__anon84	file:
PARAM_TYPE_TEXTURE	core/pbrtparse.cpp	/^    PARAM_TYPE_STRING, PARAM_TYPE_TEXTURE };$/;"	e	enum:__anon84	file:
PARAM_TYPE_VECTOR	core/pbrtparse.cpp	/^    PARAM_TYPE_VECTOR, PARAM_TYPE_NORMAL, PARAM_TYPE_RGB, PARAM_TYPE_XYZ,$/;"	e	enum:__anon84	file:
PARAM_TYPE_XYZ	core/pbrtparse.cpp	/^    PARAM_TYPE_VECTOR, PARAM_TYPE_NORMAL, PARAM_TYPE_RGB, PARAM_TYPE_XYZ,$/;"	e	enum:__anon84	file:
PBRT_ACCELERATORS_BVH_H	accelerators/bvh.h	/^#define PBRT_ACCELERATORS_BVH_H$/;"	d
PBRT_ACCELERATORS_GRID_H	accelerators/grid.h	/^#define PBRT_ACCELERATORS_GRID_H$/;"	d
PBRT_ACCELERATORS_KDTREEACCEL_H	accelerators/kdtreeaccel.h	/^#define PBRT_ACCELERATORS_KDTREEACCEL_H$/;"	d
PBRT_ACCESSED_TEXEL	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_ACCESSED_TEXEL(/;"	d
PBRT_ACCESSED_TEXEL	core/probes.h	/^#define PBRT_ACCESSED_TEXEL(/;"	d
PBRT_ACCESSED_TEXEL_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_ACCESSED_TEXEL_ENABLED(/;"	d
PBRT_ALLOCATED_CACHED_TRANSFORM	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_ALLOCATED_CACHED_TRANSFORM(/;"	d
PBRT_ALLOCATED_CACHED_TRANSFORM	core/probes.h	/^#define PBRT_ALLOCATED_CACHED_TRANSFORM(/;"	d
PBRT_ALLOCATED_CACHED_TRANSFORM_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_ALLOCATED_CACHED_TRANSFORM_ENABLED(/;"	d
PBRT_AREA_LIGHT_FINISHED_SAMPLE	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_AREA_LIGHT_FINISHED_SAMPLE(/;"	d
PBRT_AREA_LIGHT_FINISHED_SAMPLE	core/probes.h	/^#define PBRT_AREA_LIGHT_FINISHED_SAMPLE(/;"	d
PBRT_AREA_LIGHT_FINISHED_SAMPLE_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_AREA_LIGHT_FINISHED_SAMPLE_ENABLED(/;"	d
PBRT_AREA_LIGHT_STARTED_SAMPLE	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_AREA_LIGHT_STARTED_SAMPLE(/;"	d
PBRT_AREA_LIGHT_STARTED_SAMPLE	core/probes.h	/^#define PBRT_AREA_LIGHT_STARTED_SAMPLE(/;"	d
PBRT_AREA_LIGHT_STARTED_SAMPLE_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_AREA_LIGHT_STARTED_SAMPLE_ENABLED(/;"	d
PBRT_ATOMIC_MEMORY_OP	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_ATOMIC_MEMORY_OP(/;"	d
PBRT_ATOMIC_MEMORY_OP	core/probes.h	/^#define PBRT_ATOMIC_MEMORY_OP(/;"	d
PBRT_ATOMIC_MEMORY_OP_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_ATOMIC_MEMORY_OP_ENABLED(/;"	d
PBRT_BVH_FINISHED_CONSTRUCTION	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_BVH_FINISHED_CONSTRUCTION(/;"	d
PBRT_BVH_FINISHED_CONSTRUCTION	core/probes.h	/^#define PBRT_BVH_FINISHED_CONSTRUCTION(/;"	d
PBRT_BVH_FINISHED_CONSTRUCTION_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_BVH_FINISHED_CONSTRUCTION_ENABLED(/;"	d
PBRT_BVH_INTERSECTIONP_FINISHED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_BVH_INTERSECTIONP_FINISHED(/;"	d
PBRT_BVH_INTERSECTIONP_FINISHED	core/probes.h	/^#define PBRT_BVH_INTERSECTIONP_FINISHED(/;"	d
PBRT_BVH_INTERSECTIONP_FINISHED_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_BVH_INTERSECTIONP_FINISHED_ENABLED(/;"	d
PBRT_BVH_INTERSECTIONP_PRIMITIVE_HIT	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_BVH_INTERSECTIONP_PRIMITIVE_HIT(/;"	d
PBRT_BVH_INTERSECTIONP_PRIMITIVE_HIT	core/probes.h	/^#define PBRT_BVH_INTERSECTIONP_PRIMITIVE_HIT(/;"	d
PBRT_BVH_INTERSECTIONP_PRIMITIVE_HIT_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_BVH_INTERSECTIONP_PRIMITIVE_HIT_ENABLED(/;"	d
PBRT_BVH_INTERSECTIONP_PRIMITIVE_MISSED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_BVH_INTERSECTIONP_PRIMITIVE_MISSED(/;"	d
PBRT_BVH_INTERSECTIONP_PRIMITIVE_MISSED	core/probes.h	/^#define PBRT_BVH_INTERSECTIONP_PRIMITIVE_MISSED(/;"	d
PBRT_BVH_INTERSECTIONP_PRIMITIVE_MISSED_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_BVH_INTERSECTIONP_PRIMITIVE_MISSED_ENABLED(/;"	d
PBRT_BVH_INTERSECTIONP_PRIMITIVE_TEST	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_BVH_INTERSECTIONP_PRIMITIVE_TEST(/;"	d
PBRT_BVH_INTERSECTIONP_PRIMITIVE_TEST	core/probes.h	/^#define PBRT_BVH_INTERSECTIONP_PRIMITIVE_TEST(/;"	d
PBRT_BVH_INTERSECTIONP_PRIMITIVE_TEST_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_BVH_INTERSECTIONP_PRIMITIVE_TEST_ENABLED(/;"	d
PBRT_BVH_INTERSECTIONP_STARTED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_BVH_INTERSECTIONP_STARTED(/;"	d
PBRT_BVH_INTERSECTIONP_STARTED	core/probes.h	/^#define PBRT_BVH_INTERSECTIONP_STARTED(/;"	d
PBRT_BVH_INTERSECTIONP_STARTED_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_BVH_INTERSECTIONP_STARTED_ENABLED(/;"	d
PBRT_BVH_INTERSECTIONP_TRAVERSED_INTERIOR_NODE	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_BVH_INTERSECTIONP_TRAVERSED_INTERIOR_NODE(/;"	d
PBRT_BVH_INTERSECTIONP_TRAVERSED_INTERIOR_NODE	core/probes.h	/^#define PBRT_BVH_INTERSECTIONP_TRAVERSED_INTERIOR_NODE(/;"	d
PBRT_BVH_INTERSECTIONP_TRAVERSED_INTERIOR_NODE_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_BVH_INTERSECTIONP_TRAVERSED_INTERIOR_NODE_ENABLED(/;"	d
PBRT_BVH_INTERSECTIONP_TRAVERSED_LEAF_NODE	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_BVH_INTERSECTIONP_TRAVERSED_LEAF_NODE(/;"	d
PBRT_BVH_INTERSECTIONP_TRAVERSED_LEAF_NODE	core/probes.h	/^#define PBRT_BVH_INTERSECTIONP_TRAVERSED_LEAF_NODE(/;"	d
PBRT_BVH_INTERSECTIONP_TRAVERSED_LEAF_NODE_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_BVH_INTERSECTIONP_TRAVERSED_LEAF_NODE_ENABLED(/;"	d
PBRT_BVH_INTERSECTION_FINISHED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_BVH_INTERSECTION_FINISHED(/;"	d
PBRT_BVH_INTERSECTION_FINISHED	core/probes.h	/^#define PBRT_BVH_INTERSECTION_FINISHED(/;"	d
PBRT_BVH_INTERSECTION_FINISHED_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_BVH_INTERSECTION_FINISHED_ENABLED(/;"	d
PBRT_BVH_INTERSECTION_PRIMITIVE_HIT	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_BVH_INTERSECTION_PRIMITIVE_HIT(/;"	d
PBRT_BVH_INTERSECTION_PRIMITIVE_HIT	core/probes.h	/^#define PBRT_BVH_INTERSECTION_PRIMITIVE_HIT(/;"	d
PBRT_BVH_INTERSECTION_PRIMITIVE_HIT_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_BVH_INTERSECTION_PRIMITIVE_HIT_ENABLED(/;"	d
PBRT_BVH_INTERSECTION_PRIMITIVE_MISSED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_BVH_INTERSECTION_PRIMITIVE_MISSED(/;"	d
PBRT_BVH_INTERSECTION_PRIMITIVE_MISSED	core/probes.h	/^#define PBRT_BVH_INTERSECTION_PRIMITIVE_MISSED(/;"	d
PBRT_BVH_INTERSECTION_PRIMITIVE_MISSED_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_BVH_INTERSECTION_PRIMITIVE_MISSED_ENABLED(/;"	d
PBRT_BVH_INTERSECTION_PRIMITIVE_TEST	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_BVH_INTERSECTION_PRIMITIVE_TEST(/;"	d
PBRT_BVH_INTERSECTION_PRIMITIVE_TEST	core/probes.h	/^#define PBRT_BVH_INTERSECTION_PRIMITIVE_TEST(/;"	d
PBRT_BVH_INTERSECTION_PRIMITIVE_TEST_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_BVH_INTERSECTION_PRIMITIVE_TEST_ENABLED(/;"	d
PBRT_BVH_INTERSECTION_STARTED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_BVH_INTERSECTION_STARTED(/;"	d
PBRT_BVH_INTERSECTION_STARTED	core/probes.h	/^#define PBRT_BVH_INTERSECTION_STARTED(/;"	d
PBRT_BVH_INTERSECTION_STARTED_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_BVH_INTERSECTION_STARTED_ENABLED(/;"	d
PBRT_BVH_INTERSECTION_TRAVERSED_INTERIOR_NODE	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_BVH_INTERSECTION_TRAVERSED_INTERIOR_NODE(/;"	d
PBRT_BVH_INTERSECTION_TRAVERSED_INTERIOR_NODE	core/probes.h	/^#define PBRT_BVH_INTERSECTION_TRAVERSED_INTERIOR_NODE(/;"	d
PBRT_BVH_INTERSECTION_TRAVERSED_INTERIOR_NODE_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_BVH_INTERSECTION_TRAVERSED_INTERIOR_NODE_ENABLED(/;"	d
PBRT_BVH_INTERSECTION_TRAVERSED_LEAF_NODE	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_BVH_INTERSECTION_TRAVERSED_LEAF_NODE(/;"	d
PBRT_BVH_INTERSECTION_TRAVERSED_LEAF_NODE	core/probes.h	/^#define PBRT_BVH_INTERSECTION_TRAVERSED_LEAF_NODE(/;"	d
PBRT_BVH_INTERSECTION_TRAVERSED_LEAF_NODE_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_BVH_INTERSECTION_TRAVERSED_LEAF_NODE_ENABLED(/;"	d
PBRT_BVH_STARTED_CONSTRUCTION	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_BVH_STARTED_CONSTRUCTION(/;"	d
PBRT_BVH_STARTED_CONSTRUCTION	core/probes.h	/^#define PBRT_BVH_STARTED_CONSTRUCTION(/;"	d
PBRT_BVH_STARTED_CONSTRUCTION_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_BVH_STARTED_CONSTRUCTION_ENABLED(/;"	d
PBRT_CAMERAS_ENVIRONMENT_H	cameras/environment.h	/^#define PBRT_CAMERAS_ENVIRONMENT_H$/;"	d
PBRT_CAMERAS_ORTHOGRAPHIC_H	cameras/orthographic.h	/^#define PBRT_CAMERAS_ORTHOGRAPHIC_H$/;"	d
PBRT_CAMERAS_PERSPECTIVE_H	cameras/perspective.h	/^#define PBRT_CAMERAS_PERSPECTIVE_H$/;"	d
PBRT_CORE_API_H	core/api.h	/^#define PBRT_CORE_API_H$/;"	d
PBRT_CORE_CAMERA_H	core/camera.h	/^#define PBRT_CORE_CAMERA_H$/;"	d
PBRT_CORE_DIFFGEOM_H	core/diffgeom.h	/^#define PBRT_CORE_DIFFGEOM_H$/;"	d
PBRT_CORE_ERROR_H	core/error.h	/^#define PBRT_CORE_ERROR_H$/;"	d
PBRT_CORE_FILEUTIL_H	core/fileutil.h	/^#define PBRT_CORE_FILEUTIL_H$/;"	d
PBRT_CORE_FILM_H	core/film.h	/^#define PBRT_CORE_FILM_H$/;"	d
PBRT_CORE_FILTER_H	core/filter.h	/^#define PBRT_CORE_FILTER_H$/;"	d
PBRT_CORE_FLOATFILE_H	core/floatfile.h	/^#define PBRT_CORE_FLOATFILE_H$/;"	d
PBRT_CORE_GEOMETRY_H	core/geometry.h	/^#define PBRT_CORE_GEOMETRY_H$/;"	d
PBRT_CORE_IMAGEIO_H	core/imageio.h	/^#define PBRT_CORE_IMAGEIO_H$/;"	d
PBRT_CORE_INTEGRATOR_H	core/integrator.h	/^#define PBRT_CORE_INTEGRATOR_H$/;"	d
PBRT_CORE_INTERSECTION_H	core/intersection.h	/^#define PBRT_CORE_INTERSECTION_H$/;"	d
PBRT_CORE_KDTREE_H	core/kdtree.h	/^#define PBRT_CORE_KDTREE_H$/;"	d
PBRT_CORE_LIGHT_H	core/light.h	/^#define PBRT_CORE_LIGHT_H$/;"	d
PBRT_CORE_MATERIAL_H	core/material.h	/^#define PBRT_CORE_MATERIAL_H$/;"	d
PBRT_CORE_MEMORY_H	core/memory.h	/^#define PBRT_CORE_MEMORY_H$/;"	d
PBRT_CORE_MIPMAP_H	core/mipmap.h	/^#define PBRT_CORE_MIPMAP_H$/;"	d
PBRT_CORE_MONTECARLO_H	core/montecarlo.h	/^#define PBRT_CORE_MONTECARLO_H$/;"	d
PBRT_CORE_OCTREE_H	core/octree.h	/^#define PBRT_CORE_OCTREE_H$/;"	d
PBRT_CORE_PARALLEL_H	core/parallel.h	/^#define PBRT_CORE_PARALLEL_H$/;"	d
PBRT_CORE_PARAMSET_H	core/paramset.h	/^#define PBRT_CORE_PARAMSET_H$/;"	d
PBRT_CORE_PARSER_H	core/parser.h	/^#define PBRT_CORE_PARSER_H$/;"	d
PBRT_CORE_PBRT_H	core/pbrt.h	/^#define PBRT_CORE_PBRT_H$/;"	d
PBRT_CORE_PRIMITIVE_H	core/primitive.h	/^#define PBRT_CORE_PRIMITIVE_H$/;"	d
PBRT_CORE_PROBES_H	core/probes.h	/^#define PBRT_CORE_PROBES_H$/;"	d
PBRT_CORE_PROGRESSREPORTER_H	core/progressreporter.h	/^#define PBRT_CORE_PROGRESSREPORTER_H$/;"	d
PBRT_CORE_QUATERNION_H	core/quaternion.h	/^#define PBRT_CORE_QUATERNION_H$/;"	d
PBRT_CORE_REFLECTION_H	core/reflection.h	/^#define PBRT_CORE_REFLECTION_H$/;"	d
PBRT_CORE_RENDERER_H	core/renderer.h	/^#define PBRT_CORE_RENDERER_H$/;"	d
PBRT_CORE_RNG_H	core/rng.h	/^#define PBRT_CORE_RNG_H$/;"	d
PBRT_CORE_SAMPLER_H	core/sampler.h	/^#define PBRT_CORE_SAMPLER_H$/;"	d
PBRT_CORE_SCENE_H	core/scene.h	/^#define PBRT_CORE_SCENE_H$/;"	d
PBRT_CORE_SHAPE_H	core/shape.h	/^#define PBRT_CORE_SHAPE_H$/;"	d
PBRT_CORE_SH_H	core/sh.h	/^#define PBRT_CORE_SH_H$/;"	d
PBRT_CORE_SPECTRUM_H	core/spectrum.h	/^#define PBRT_CORE_SPECTRUM_H$/;"	d
PBRT_CORE_TEXTURE_H	core/texture.h	/^#define PBRT_CORE_TEXTURE_H$/;"	d
PBRT_CORE_TIMER_H	core/timer.h	/^#define PBRT_CORE_TIMER_H$/;"	d
PBRT_CORE_TRANSFORM_H	core/transform.h	/^#define PBRT_CORE_TRANSFORM_H$/;"	d
PBRT_CORE_VOLUME_H	core/volume.h	/^#define PBRT_CORE_VOLUME_H$/;"	d
PBRT_CREATED_SHAPE	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_CREATED_SHAPE(/;"	d
PBRT_CREATED_SHAPE	core/probes.cpp	/^void PBRT_CREATED_SHAPE(Shape *) {$/;"	f
PBRT_CREATED_SHAPE	core/probes.h	/^#define PBRT_CREATED_SHAPE(/;"	d
PBRT_CREATED_SHAPE_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_CREATED_SHAPE_ENABLED(/;"	d
PBRT_CREATED_TRIANGLE	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_CREATED_TRIANGLE(/;"	d
PBRT_CREATED_TRIANGLE	core/probes.cpp	/^void PBRT_CREATED_TRIANGLE(Triangle *) {$/;"	f
PBRT_CREATED_TRIANGLE	core/probes.h	/^#define PBRT_CREATED_TRIANGLE(/;"	d
PBRT_CREATED_TRIANGLE_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_CREATED_TRIANGLE_ENABLED(/;"	d
PBRT_ERROR_ABORT	core/error.cpp	/^#define PBRT_ERROR_ABORT /;"	d	file:
PBRT_ERROR_CONTINUE	core/error.cpp	/^#define PBRT_ERROR_CONTINUE /;"	d	file:
PBRT_ERROR_IGNORE	core/error.cpp	/^#define PBRT_ERROR_IGNORE /;"	d	file:
PBRT_FILM_IMAGE_H	film/image.h	/^#define PBRT_FILM_IMAGE_H$/;"	d
PBRT_FILTERS_BOX_H	filters/box.h	/^#define PBRT_FILTERS_BOX_H$/;"	d
PBRT_FILTERS_GAUSSIAN_H	filters/gaussian.h	/^#define PBRT_FILTERS_GAUSSIAN_H$/;"	d
PBRT_FILTERS_MITCHELL_H	filters/mitchell.h	/^#define PBRT_FILTERS_MITCHELL_H$/;"	d
PBRT_FILTERS_SINC_H	filters/sinc.h	/^#define PBRT_FILTERS_SINC_H$/;"	d
PBRT_FILTERS_TRIANGLE_H	filters/triangle.h	/^#define PBRT_FILTERS_TRIANGLE_H$/;"	d
PBRT_FINISHED_ADDING_IMAGE_SAMPLE	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_ADDING_IMAGE_SAMPLE(/;"	d
PBRT_FINISHED_ADDING_IMAGE_SAMPLE	core/probes.h	/^#define PBRT_FINISHED_ADDING_IMAGE_SAMPLE(/;"	d
PBRT_FINISHED_ADDING_IMAGE_SAMPLE_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_ADDING_IMAGE_SAMPLE_ENABLED(/;"	d
PBRT_FINISHED_BSDF_EVAL	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_BSDF_EVAL(/;"	d
PBRT_FINISHED_BSDF_EVAL	core/probes.h	/^#define PBRT_FINISHED_BSDF_EVAL(/;"	d
PBRT_FINISHED_BSDF_EVAL_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_BSDF_EVAL_ENABLED(/;"	d
PBRT_FINISHED_BSDF_PDF	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_BSDF_PDF(/;"	d
PBRT_FINISHED_BSDF_PDF	core/probes.h	/^#define PBRT_FINISHED_BSDF_PDF(/;"	d
PBRT_FINISHED_BSDF_PDF_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_BSDF_PDF_ENABLED(/;"	d
PBRT_FINISHED_BSDF_SAMPLE	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_BSDF_SAMPLE(/;"	d
PBRT_FINISHED_BSDF_SAMPLE	core/probes.h	/^#define PBRT_FINISHED_BSDF_SAMPLE(/;"	d
PBRT_FINISHED_BSDF_SAMPLE_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_BSDF_SAMPLE_ENABLED(/;"	d
PBRT_FINISHED_BSDF_SHADING	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_BSDF_SHADING(/;"	d
PBRT_FINISHED_BSDF_SHADING	core/probes.h	/^#define PBRT_FINISHED_BSDF_SHADING(/;"	d
PBRT_FINISHED_BSDF_SHADING_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_BSDF_SHADING_ENABLED(/;"	d
PBRT_FINISHED_BSSRDF_SHADING	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_BSSRDF_SHADING(/;"	d
PBRT_FINISHED_BSSRDF_SHADING	core/probes.h	/^#define PBRT_FINISHED_BSSRDF_SHADING(/;"	d
PBRT_FINISHED_BSSRDF_SHADING_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_BSSRDF_SHADING_ENABLED(/;"	d
PBRT_FINISHED_CAMERA_RAY_INTEGRATION	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_CAMERA_RAY_INTEGRATION(/;"	d
PBRT_FINISHED_CAMERA_RAY_INTEGRATION	core/probes.h	/^#define PBRT_FINISHED_CAMERA_RAY_INTEGRATION(/;"	d
PBRT_FINISHED_CAMERA_RAY_INTEGRATION_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_CAMERA_RAY_INTEGRATION_ENABLED(/;"	d
PBRT_FINISHED_EWA_TEXTURE_LOOKUP	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_EWA_TEXTURE_LOOKUP(/;"	d
PBRT_FINISHED_EWA_TEXTURE_LOOKUP	core/probes.h	/^#define PBRT_FINISHED_EWA_TEXTURE_LOOKUP(/;"	d
PBRT_FINISHED_EWA_TEXTURE_LOOKUP_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_EWA_TEXTURE_LOOKUP_ENABLED(/;"	d
PBRT_FINISHED_GENERATING_CAMERA_RAY	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_GENERATING_CAMERA_RAY(/;"	d
PBRT_FINISHED_GENERATING_CAMERA_RAY	core/probes.h	/^#define PBRT_FINISHED_GENERATING_CAMERA_RAY(/;"	d
PBRT_FINISHED_GENERATING_CAMERA_RAY_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_GENERATING_CAMERA_RAY_ENABLED(/;"	d
PBRT_FINISHED_PARSING	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_PARSING(/;"	d
PBRT_FINISHED_PARSING	core/probes.h	/^#define PBRT_FINISHED_PARSING(/;"	d
PBRT_FINISHED_PARSING_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_PARSING_ENABLED(/;"	d
PBRT_FINISHED_PREPROCESSING	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_PREPROCESSING(/;"	d
PBRT_FINISHED_PREPROCESSING	core/probes.h	/^#define PBRT_FINISHED_PREPROCESSING(/;"	d
PBRT_FINISHED_PREPROCESSING_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_PREPROCESSING_ENABLED(/;"	d
PBRT_FINISHED_RAY_INTERSECTION	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_RAY_INTERSECTION(/;"	d
PBRT_FINISHED_RAY_INTERSECTION	core/probes.cpp	/^void PBRT_FINISHED_RAY_INTERSECTION(const Ray *, const Intersection *, int hit) {$/;"	f
PBRT_FINISHED_RAY_INTERSECTION	core/probes.h	/^#define PBRT_FINISHED_RAY_INTERSECTION(/;"	d
PBRT_FINISHED_RAY_INTERSECTIONP	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_RAY_INTERSECTIONP(/;"	d
PBRT_FINISHED_RAY_INTERSECTIONP	core/probes.cpp	/^void PBRT_FINISHED_RAY_INTERSECTIONP(const Ray *, int hit) {$/;"	f
PBRT_FINISHED_RAY_INTERSECTIONP	core/probes.h	/^#define PBRT_FINISHED_RAY_INTERSECTIONP(/;"	d
PBRT_FINISHED_RAY_INTERSECTIONP_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_RAY_INTERSECTIONP_ENABLED(/;"	d
PBRT_FINISHED_RAY_INTERSECTION_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_RAY_INTERSECTION_ENABLED(/;"	d
PBRT_FINISHED_RENDERING	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_RENDERING(/;"	d
PBRT_FINISHED_RENDERING	core/probes.h	/^#define PBRT_FINISHED_RENDERING(/;"	d
PBRT_FINISHED_RENDERING_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_RENDERING_ENABLED(/;"	d
PBRT_FINISHED_RENDERTASK	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_RENDERTASK(/;"	d
PBRT_FINISHED_RENDERTASK	core/probes.h	/^#define PBRT_FINISHED_RENDERTASK(/;"	d
PBRT_FINISHED_RENDERTASK_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_RENDERTASK_ENABLED(/;"	d
PBRT_FINISHED_SPECULAR_REFLECTION_RAY	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_SPECULAR_REFLECTION_RAY(/;"	d
PBRT_FINISHED_SPECULAR_REFLECTION_RAY	core/probes.h	/^#define PBRT_FINISHED_SPECULAR_REFLECTION_RAY(/;"	d
PBRT_FINISHED_SPECULAR_REFLECTION_RAY_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_SPECULAR_REFLECTION_RAY_ENABLED(/;"	d
PBRT_FINISHED_SPECULAR_REFRACTION_RAY	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_SPECULAR_REFRACTION_RAY(/;"	d
PBRT_FINISHED_SPECULAR_REFRACTION_RAY	core/probes.h	/^#define PBRT_FINISHED_SPECULAR_REFRACTION_RAY(/;"	d
PBRT_FINISHED_SPECULAR_REFRACTION_RAY_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_SPECULAR_REFRACTION_RAY_ENABLED(/;"	d
PBRT_FINISHED_TASK	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_TASK(/;"	d
PBRT_FINISHED_TASK	core/probes.h	/^#define PBRT_FINISHED_TASK(/;"	d
PBRT_FINISHED_TASK_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_TASK_ENABLED(/;"	d
PBRT_FINISHED_TRILINEAR_TEXTURE_LOOKUP	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_TRILINEAR_TEXTURE_LOOKUP(/;"	d
PBRT_FINISHED_TRILINEAR_TEXTURE_LOOKUP	core/probes.h	/^#define PBRT_FINISHED_TRILINEAR_TEXTURE_LOOKUP(/;"	d
PBRT_FINISHED_TRILINEAR_TEXTURE_LOOKUP_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FINISHED_TRILINEAR_TEXTURE_LOOKUP_ENABLED(/;"	d
PBRT_FOUND_CACHED_TRANSFORM	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FOUND_CACHED_TRANSFORM(/;"	d
PBRT_FOUND_CACHED_TRANSFORM	core/probes.h	/^#define PBRT_FOUND_CACHED_TRANSFORM(/;"	d
PBRT_FOUND_CACHED_TRANSFORM_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_FOUND_CACHED_TRANSFORM_ENABLED(/;"	d
PBRT_GRID_BOUNDS_AND_RESOLUTION	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_GRID_BOUNDS_AND_RESOLUTION(/;"	d
PBRT_GRID_BOUNDS_AND_RESOLUTION	core/probes.h	/^#define PBRT_GRID_BOUNDS_AND_RESOLUTION(/;"	d
PBRT_GRID_BOUNDS_AND_RESOLUTION_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_GRID_BOUNDS_AND_RESOLUTION_ENABLED(/;"	d
PBRT_GRID_FINISHED_CONSTRUCTION	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_GRID_FINISHED_CONSTRUCTION(/;"	d
PBRT_GRID_FINISHED_CONSTRUCTION	core/probes.h	/^#define PBRT_GRID_FINISHED_CONSTRUCTION(/;"	d
PBRT_GRID_FINISHED_CONSTRUCTION_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_GRID_FINISHED_CONSTRUCTION_ENABLED(/;"	d
PBRT_GRID_INTERSECTIONP_TEST	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_GRID_INTERSECTIONP_TEST(/;"	d
PBRT_GRID_INTERSECTIONP_TEST	core/probes.h	/^#define PBRT_GRID_INTERSECTIONP_TEST(/;"	d
PBRT_GRID_INTERSECTIONP_TEST_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_GRID_INTERSECTIONP_TEST_ENABLED(/;"	d
PBRT_GRID_INTERSECTION_TEST	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_GRID_INTERSECTION_TEST(/;"	d
PBRT_GRID_INTERSECTION_TEST	core/probes.h	/^#define PBRT_GRID_INTERSECTION_TEST(/;"	d
PBRT_GRID_INTERSECTION_TEST_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_GRID_INTERSECTION_TEST_ENABLED(/;"	d
PBRT_GRID_RAY_MISSED_BOUNDS	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_GRID_RAY_MISSED_BOUNDS(/;"	d
PBRT_GRID_RAY_MISSED_BOUNDS	core/probes.h	/^#define PBRT_GRID_RAY_MISSED_BOUNDS(/;"	d
PBRT_GRID_RAY_MISSED_BOUNDS_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_GRID_RAY_MISSED_BOUNDS_ENABLED(/;"	d
PBRT_GRID_RAY_PRIMITIVE_HIT	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_GRID_RAY_PRIMITIVE_HIT(/;"	d
PBRT_GRID_RAY_PRIMITIVE_HIT	core/probes.h	/^#define PBRT_GRID_RAY_PRIMITIVE_HIT(/;"	d
PBRT_GRID_RAY_PRIMITIVE_HIT_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_GRID_RAY_PRIMITIVE_HIT_ENABLED(/;"	d
PBRT_GRID_RAY_PRIMITIVE_INTERSECTIONP_TEST	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_GRID_RAY_PRIMITIVE_INTERSECTIONP_TEST(/;"	d
PBRT_GRID_RAY_PRIMITIVE_INTERSECTIONP_TEST	core/probes.h	/^#define PBRT_GRID_RAY_PRIMITIVE_INTERSECTIONP_TEST(/;"	d
PBRT_GRID_RAY_PRIMITIVE_INTERSECTIONP_TEST_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_GRID_RAY_PRIMITIVE_INTERSECTIONP_TEST_ENABLED(/;"	d
PBRT_GRID_RAY_PRIMITIVE_INTERSECTION_TEST	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_GRID_RAY_PRIMITIVE_INTERSECTION_TEST(/;"	d
PBRT_GRID_RAY_PRIMITIVE_INTERSECTION_TEST	core/probes.h	/^#define PBRT_GRID_RAY_PRIMITIVE_INTERSECTION_TEST(/;"	d
PBRT_GRID_RAY_PRIMITIVE_INTERSECTION_TEST_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_GRID_RAY_PRIMITIVE_INTERSECTION_TEST_ENABLED(/;"	d
PBRT_GRID_RAY_TRAVERSED_VOXEL	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_GRID_RAY_TRAVERSED_VOXEL(/;"	d
PBRT_GRID_RAY_TRAVERSED_VOXEL	core/probes.h	/^#define PBRT_GRID_RAY_TRAVERSED_VOXEL(/;"	d
PBRT_GRID_RAY_TRAVERSED_VOXEL_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_GRID_RAY_TRAVERSED_VOXEL_ENABLED(/;"	d
PBRT_GRID_STARTED_CONSTRUCTION	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_GRID_STARTED_CONSTRUCTION(/;"	d
PBRT_GRID_STARTED_CONSTRUCTION	core/probes.h	/^#define PBRT_GRID_STARTED_CONSTRUCTION(/;"	d
PBRT_GRID_STARTED_CONSTRUCTION_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_GRID_STARTED_CONSTRUCTION_ENABLED(/;"	d
PBRT_GRID_VOXELIZED_PRIMITIVE	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_GRID_VOXELIZED_PRIMITIVE(/;"	d
PBRT_GRID_VOXELIZED_PRIMITIVE	core/probes.h	/^#define PBRT_GRID_VOXELIZED_PRIMITIVE(/;"	d
PBRT_GRID_VOXELIZED_PRIMITIVE_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_GRID_VOXELIZED_PRIMITIVE_ENABLED(/;"	d
PBRT_HAS_64_BIT_ATOMICS	core/pbrt.h	/^#define PBRT_HAS_64_BIT_ATOMICS$/;"	d
PBRT_INFINITE_LIGHT_FINISHED_PDF	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_INFINITE_LIGHT_FINISHED_PDF(/;"	d
PBRT_INFINITE_LIGHT_FINISHED_PDF	core/probes.h	/^#define PBRT_INFINITE_LIGHT_FINISHED_PDF(/;"	d
PBRT_INFINITE_LIGHT_FINISHED_PDF_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_INFINITE_LIGHT_FINISHED_PDF_ENABLED(/;"	d
PBRT_INFINITE_LIGHT_FINISHED_SAMPLE	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_INFINITE_LIGHT_FINISHED_SAMPLE(/;"	d
PBRT_INFINITE_LIGHT_FINISHED_SAMPLE	core/probes.h	/^#define PBRT_INFINITE_LIGHT_FINISHED_SAMPLE(/;"	d
PBRT_INFINITE_LIGHT_FINISHED_SAMPLE_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_INFINITE_LIGHT_FINISHED_SAMPLE_ENABLED(/;"	d
PBRT_INFINITE_LIGHT_STARTED_PDF	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_INFINITE_LIGHT_STARTED_PDF(/;"	d
PBRT_INFINITE_LIGHT_STARTED_PDF	core/probes.h	/^#define PBRT_INFINITE_LIGHT_STARTED_PDF(/;"	d
PBRT_INFINITE_LIGHT_STARTED_PDF_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_INFINITE_LIGHT_STARTED_PDF_ENABLED(/;"	d
PBRT_INFINITE_LIGHT_STARTED_SAMPLE	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_INFINITE_LIGHT_STARTED_SAMPLE(/;"	d
PBRT_INFINITE_LIGHT_STARTED_SAMPLE	core/probes.h	/^#define PBRT_INFINITE_LIGHT_STARTED_SAMPLE(/;"	d
PBRT_INFINITE_LIGHT_STARTED_SAMPLE_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_INFINITE_LIGHT_STARTED_SAMPLE_ENABLED(/;"	d
PBRT_INTEGRATORS_AMBIENTOCCLUSION_H	integrators/ambientocclusion.h	/^#define PBRT_INTEGRATORS_AMBIENTOCCLUSION_H$/;"	d
PBRT_INTEGRATORS_DIFFUSEPRT_H	integrators/diffuseprt.h	/^#define PBRT_INTEGRATORS_DIFFUSEPRT_H$/;"	d
PBRT_INTEGRATORS_DIPOLESUBSURFACE_H	integrators/dipolesubsurface.h	/^#define PBRT_INTEGRATORS_DIPOLESUBSURFACE_H$/;"	d
PBRT_INTEGRATORS_DIRECTLIGHTING_H	integrators/directlighting.h	/^#define PBRT_INTEGRATORS_DIRECTLIGHTING_H$/;"	d
PBRT_INTEGRATORS_EMISSION_H	integrators/emission.h	/^#define PBRT_INTEGRATORS_EMISSION_H$/;"	d
PBRT_INTEGRATORS_GLOSSYPRT_H	integrators/glossyprt.h	/^#define PBRT_INTEGRATORS_GLOSSYPRT_H$/;"	d
PBRT_INTEGRATORS_IGI_H	integrators/igi.h	/^#define PBRT_INTEGRATORS_IGI_H$/;"	d
PBRT_INTEGRATORS_IRRADIANCECACHE_H	integrators/irradiancecache.h	/^#define PBRT_INTEGRATORS_IRRADIANCECACHE_H$/;"	d
PBRT_INTEGRATORS_PATH_H	integrators/path.h	/^#define PBRT_INTEGRATORS_PATH_H$/;"	d
PBRT_INTEGRATORS_PHOTONMAP_H	integrators/photonmap.h	/^#define PBRT_INTEGRATORS_PHOTONMAP_H$/;"	d
PBRT_INTEGRATORS_SINGLE_H	integrators/single.h	/^#define PBRT_INTEGRATORS_SINGLE_H$/;"	d
PBRT_INTEGRATORS_USEPROBES_H	integrators/useprobes.h	/^#define PBRT_INTEGRATORS_USEPROBES_H$/;"	d
PBRT_INTEGRATORS_WHITTED_H	integrators/whitted.h	/^#define PBRT_INTEGRATORS_WHITTED_H$/;"	d
PBRT_IRRADIANCE_CACHE_ADDED_NEW_SAMPLE	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_IRRADIANCE_CACHE_ADDED_NEW_SAMPLE(/;"	d
PBRT_IRRADIANCE_CACHE_ADDED_NEW_SAMPLE	core/probes.h	/^#define PBRT_IRRADIANCE_CACHE_ADDED_NEW_SAMPLE(/;"	d
PBRT_IRRADIANCE_CACHE_ADDED_NEW_SAMPLE_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_IRRADIANCE_CACHE_ADDED_NEW_SAMPLE_ENABLED(/;"	d
PBRT_IRRADIANCE_CACHE_CHECKED_SAMPLE	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_IRRADIANCE_CACHE_CHECKED_SAMPLE(/;"	d
PBRT_IRRADIANCE_CACHE_CHECKED_SAMPLE	core/probes.h	/^#define PBRT_IRRADIANCE_CACHE_CHECKED_SAMPLE(/;"	d
PBRT_IRRADIANCE_CACHE_CHECKED_SAMPLE_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_IRRADIANCE_CACHE_CHECKED_SAMPLE_ENABLED(/;"	d
PBRT_IRRADIANCE_CACHE_FINISHED_COMPUTING_IRRADIANCE	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_IRRADIANCE_CACHE_FINISHED_COMPUTING_IRRADIANCE(/;"	d
PBRT_IRRADIANCE_CACHE_FINISHED_COMPUTING_IRRADIANCE	core/probes.h	/^#define PBRT_IRRADIANCE_CACHE_FINISHED_COMPUTING_IRRADIANCE(/;"	d
PBRT_IRRADIANCE_CACHE_FINISHED_COMPUTING_IRRADIANCE_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_IRRADIANCE_CACHE_FINISHED_COMPUTING_IRRADIANCE_ENABLED(/;"	d
PBRT_IRRADIANCE_CACHE_FINISHED_INTERPOLATION	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_IRRADIANCE_CACHE_FINISHED_INTERPOLATION(/;"	d
PBRT_IRRADIANCE_CACHE_FINISHED_INTERPOLATION	core/probes.h	/^#define PBRT_IRRADIANCE_CACHE_FINISHED_INTERPOLATION(/;"	d
PBRT_IRRADIANCE_CACHE_FINISHED_INTERPOLATION_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_IRRADIANCE_CACHE_FINISHED_INTERPOLATION_ENABLED(/;"	d
PBRT_IRRADIANCE_CACHE_FINISHED_RAY	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_IRRADIANCE_CACHE_FINISHED_RAY(/;"	d
PBRT_IRRADIANCE_CACHE_FINISHED_RAY	core/probes.h	/^#define PBRT_IRRADIANCE_CACHE_FINISHED_RAY(/;"	d
PBRT_IRRADIANCE_CACHE_FINISHED_RAY_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_IRRADIANCE_CACHE_FINISHED_RAY_ENABLED(/;"	d
PBRT_IRRADIANCE_CACHE_STARTED_COMPUTING_IRRADIANCE	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_IRRADIANCE_CACHE_STARTED_COMPUTING_IRRADIANCE(/;"	d
PBRT_IRRADIANCE_CACHE_STARTED_COMPUTING_IRRADIANCE	core/probes.h	/^#define PBRT_IRRADIANCE_CACHE_STARTED_COMPUTING_IRRADIANCE(/;"	d
PBRT_IRRADIANCE_CACHE_STARTED_COMPUTING_IRRADIANCE_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_IRRADIANCE_CACHE_STARTED_COMPUTING_IRRADIANCE_ENABLED(/;"	d
PBRT_IRRADIANCE_CACHE_STARTED_INTERPOLATION	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_IRRADIANCE_CACHE_STARTED_INTERPOLATION(/;"	d
PBRT_IRRADIANCE_CACHE_STARTED_INTERPOLATION	core/probes.h	/^#define PBRT_IRRADIANCE_CACHE_STARTED_INTERPOLATION(/;"	d
PBRT_IRRADIANCE_CACHE_STARTED_INTERPOLATION_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_IRRADIANCE_CACHE_STARTED_INTERPOLATION_ENABLED(/;"	d
PBRT_IRRADIANCE_CACHE_STARTED_RAY	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_IRRADIANCE_CACHE_STARTED_RAY(/;"	d
PBRT_IRRADIANCE_CACHE_STARTED_RAY	core/probes.h	/^#define PBRT_IRRADIANCE_CACHE_STARTED_RAY(/;"	d
PBRT_IRRADIANCE_CACHE_STARTED_RAY_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_IRRADIANCE_CACHE_STARTED_RAY_ENABLED(/;"	d
PBRT_IS_APPLE	core/pbrt.h	/^  #define PBRT_IS_APPLE$/;"	d
PBRT_IS_APPLE_PPC	core/pbrt.h	/^  #define PBRT_IS_APPLE_PPC$/;"	d
PBRT_IS_APPLE_X86	core/pbrt.h	/^  #define PBRT_IS_APPLE_X86$/;"	d
PBRT_IS_LINUX	core/pbrt.h	/^#define PBRT_IS_LINUX$/;"	d
PBRT_IS_OPENBSD	core/pbrt.h	/^#define PBRT_IS_OPENBSD$/;"	d
PBRT_IS_WINDOWS	core/pbrt.h	/^#define PBRT_IS_WINDOWS$/;"	d
PBRT_KDTREE_CREATED_INTERIOR_NODE	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_CREATED_INTERIOR_NODE(/;"	d
PBRT_KDTREE_CREATED_INTERIOR_NODE	core/probes.cpp	/^void PBRT_KDTREE_CREATED_INTERIOR_NODE(int axis, float split) {$/;"	f
PBRT_KDTREE_CREATED_INTERIOR_NODE	core/probes.h	/^#define PBRT_KDTREE_CREATED_INTERIOR_NODE(/;"	d
PBRT_KDTREE_CREATED_INTERIOR_NODE_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_CREATED_INTERIOR_NODE_ENABLED(/;"	d
PBRT_KDTREE_CREATED_LEAF	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_CREATED_LEAF(/;"	d
PBRT_KDTREE_CREATED_LEAF	core/probes.cpp	/^void PBRT_KDTREE_CREATED_LEAF(int nprims, int depth) {$/;"	f
PBRT_KDTREE_CREATED_LEAF	core/probes.h	/^#define PBRT_KDTREE_CREATED_LEAF(/;"	d
PBRT_KDTREE_CREATED_LEAF_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_CREATED_LEAF_ENABLED(/;"	d
PBRT_KDTREE_FINISHED_CONSTRUCTION	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_FINISHED_CONSTRUCTION(/;"	d
PBRT_KDTREE_FINISHED_CONSTRUCTION	core/probes.h	/^#define PBRT_KDTREE_FINISHED_CONSTRUCTION(/;"	d
PBRT_KDTREE_FINISHED_CONSTRUCTION_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_FINISHED_CONSTRUCTION_ENABLED(/;"	d
PBRT_KDTREE_INTERSECTIONP_HIT	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_INTERSECTIONP_HIT(/;"	d
PBRT_KDTREE_INTERSECTIONP_HIT	core/probes.h	/^#define PBRT_KDTREE_INTERSECTIONP_HIT(/;"	d
PBRT_KDTREE_INTERSECTIONP_HIT_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_INTERSECTIONP_HIT_ENABLED(/;"	d
PBRT_KDTREE_INTERSECTIONP_MISSED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_INTERSECTIONP_MISSED(/;"	d
PBRT_KDTREE_INTERSECTIONP_MISSED	core/probes.h	/^#define PBRT_KDTREE_INTERSECTIONP_MISSED(/;"	d
PBRT_KDTREE_INTERSECTIONP_MISSED_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_INTERSECTIONP_MISSED_ENABLED(/;"	d
PBRT_KDTREE_INTERSECTIONP_PRIMITIVE_TEST	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_INTERSECTIONP_PRIMITIVE_TEST(/;"	d
PBRT_KDTREE_INTERSECTIONP_PRIMITIVE_TEST	core/probes.h	/^#define PBRT_KDTREE_INTERSECTIONP_PRIMITIVE_TEST(/;"	d
PBRT_KDTREE_INTERSECTIONP_PRIMITIVE_TEST_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_INTERSECTIONP_PRIMITIVE_TEST_ENABLED(/;"	d
PBRT_KDTREE_INTERSECTIONP_TEST	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_INTERSECTIONP_TEST(/;"	d
PBRT_KDTREE_INTERSECTIONP_TEST	core/probes.h	/^#define PBRT_KDTREE_INTERSECTIONP_TEST(/;"	d
PBRT_KDTREE_INTERSECTIONP_TEST_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_INTERSECTIONP_TEST_ENABLED(/;"	d
PBRT_KDTREE_INTERSECTIONP_TRAVERSED_INTERIOR_NODE	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_INTERSECTIONP_TRAVERSED_INTERIOR_NODE(/;"	d
PBRT_KDTREE_INTERSECTIONP_TRAVERSED_INTERIOR_NODE	core/probes.h	/^#define PBRT_KDTREE_INTERSECTIONP_TRAVERSED_INTERIOR_NODE(/;"	d
PBRT_KDTREE_INTERSECTIONP_TRAVERSED_INTERIOR_NODE_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_INTERSECTIONP_TRAVERSED_INTERIOR_NODE_ENABLED(/;"	d
PBRT_KDTREE_INTERSECTIONP_TRAVERSED_LEAF_NODE	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_INTERSECTIONP_TRAVERSED_LEAF_NODE(/;"	d
PBRT_KDTREE_INTERSECTIONP_TRAVERSED_LEAF_NODE	core/probes.h	/^#define PBRT_KDTREE_INTERSECTIONP_TRAVERSED_LEAF_NODE(/;"	d
PBRT_KDTREE_INTERSECTIONP_TRAVERSED_LEAF_NODE_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_INTERSECTIONP_TRAVERSED_LEAF_NODE_ENABLED(/;"	d
PBRT_KDTREE_INTERSECTION_FINISHED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_INTERSECTION_FINISHED(/;"	d
PBRT_KDTREE_INTERSECTION_FINISHED	core/probes.h	/^#define PBRT_KDTREE_INTERSECTION_FINISHED(/;"	d
PBRT_KDTREE_INTERSECTION_FINISHED_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_INTERSECTION_FINISHED_ENABLED(/;"	d
PBRT_KDTREE_INTERSECTION_HIT	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_INTERSECTION_HIT(/;"	d
PBRT_KDTREE_INTERSECTION_HIT	core/probes.h	/^#define PBRT_KDTREE_INTERSECTION_HIT(/;"	d
PBRT_KDTREE_INTERSECTION_HIT_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_INTERSECTION_HIT_ENABLED(/;"	d
PBRT_KDTREE_INTERSECTION_PRIMITIVE_TEST	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_INTERSECTION_PRIMITIVE_TEST(/;"	d
PBRT_KDTREE_INTERSECTION_PRIMITIVE_TEST	core/probes.h	/^#define PBRT_KDTREE_INTERSECTION_PRIMITIVE_TEST(/;"	d
PBRT_KDTREE_INTERSECTION_PRIMITIVE_TEST_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_INTERSECTION_PRIMITIVE_TEST_ENABLED(/;"	d
PBRT_KDTREE_INTERSECTION_TEST	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_INTERSECTION_TEST(/;"	d
PBRT_KDTREE_INTERSECTION_TEST	core/probes.h	/^#define PBRT_KDTREE_INTERSECTION_TEST(/;"	d
PBRT_KDTREE_INTERSECTION_TEST_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_INTERSECTION_TEST_ENABLED(/;"	d
PBRT_KDTREE_INTERSECTION_TRAVERSED_INTERIOR_NODE	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_INTERSECTION_TRAVERSED_INTERIOR_NODE(/;"	d
PBRT_KDTREE_INTERSECTION_TRAVERSED_INTERIOR_NODE	core/probes.h	/^#define PBRT_KDTREE_INTERSECTION_TRAVERSED_INTERIOR_NODE(/;"	d
PBRT_KDTREE_INTERSECTION_TRAVERSED_INTERIOR_NODE_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_INTERSECTION_TRAVERSED_INTERIOR_NODE_ENABLED(/;"	d
PBRT_KDTREE_INTERSECTION_TRAVERSED_LEAF_NODE	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_INTERSECTION_TRAVERSED_LEAF_NODE(/;"	d
PBRT_KDTREE_INTERSECTION_TRAVERSED_LEAF_NODE	core/probes.h	/^#define PBRT_KDTREE_INTERSECTION_TRAVERSED_LEAF_NODE(/;"	d
PBRT_KDTREE_INTERSECTION_TRAVERSED_LEAF_NODE_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_INTERSECTION_TRAVERSED_LEAF_NODE_ENABLED(/;"	d
PBRT_KDTREE_RAY_MISSED_BOUNDS	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_RAY_MISSED_BOUNDS(/;"	d
PBRT_KDTREE_RAY_MISSED_BOUNDS	core/probes.h	/^#define PBRT_KDTREE_RAY_MISSED_BOUNDS(/;"	d
PBRT_KDTREE_RAY_MISSED_BOUNDS_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_RAY_MISSED_BOUNDS_ENABLED(/;"	d
PBRT_KDTREE_STARTED_CONSTRUCTION	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_STARTED_CONSTRUCTION(/;"	d
PBRT_KDTREE_STARTED_CONSTRUCTION	core/probes.h	/^#define PBRT_KDTREE_STARTED_CONSTRUCTION(/;"	d
PBRT_KDTREE_STARTED_CONSTRUCTION_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_KDTREE_STARTED_CONSTRUCTION_ENABLED(/;"	d
PBRT_L1_CACHE_LINE_SIZE	core/pbrt.h	/^#define PBRT_L1_CACHE_LINE_SIZE /;"	d
PBRT_LIGHTS_DIFFUSE_H	lights/diffuse.h	/^#define PBRT_LIGHTS_DIFFUSE_H$/;"	d
PBRT_LIGHTS_DISTANT_H	lights/distant.h	/^#define PBRT_LIGHTS_DISTANT_H$/;"	d
PBRT_LIGHTS_GONIOMETRIC_H	lights/goniometric.h	/^#define PBRT_LIGHTS_GONIOMETRIC_H$/;"	d
PBRT_LIGHTS_INFINITE_H	lights/infinite.h	/^#define PBRT_LIGHTS_INFINITE_H$/;"	d
PBRT_LIGHTS_POINT_H	lights/point.h	/^#define PBRT_LIGHTS_POINT_H$/;"	d
PBRT_LIGHTS_PROJECTION_H	lights/projection.h	/^#define PBRT_LIGHTS_PROJECTION_H$/;"	d
PBRT_LIGHTS_SPOT_H	lights/spot.h	/^#define PBRT_LIGHTS_SPOT_H$/;"	d
PBRT_LOADED_IMAGE_MAP	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_LOADED_IMAGE_MAP(/;"	d
PBRT_LOADED_IMAGE_MAP	core/probes.h	/^#define PBRT_LOADED_IMAGE_MAP(/;"	d
PBRT_LOADED_IMAGE_MAP_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_LOADED_IMAGE_MAP_ENABLED(/;"	d
PBRT_MATERIALS_GLASS_H	materials/glass.h	/^#define PBRT_MATERIALS_GLASS_H$/;"	d
PBRT_MATERIALS_KDSUBSURFACE_H	materials/kdsubsurface.h	/^#define PBRT_MATERIALS_KDSUBSURFACE_H$/;"	d
PBRT_MATERIALS_MATTE_H	materials/matte.h	/^#define PBRT_MATERIALS_MATTE_H$/;"	d
PBRT_MATERIALS_MEASURED_H	materials/measured.h	/^#define PBRT_MATERIALS_MEASURED_H$/;"	d
PBRT_MATERIALS_METAL_H	materials/metal.h	/^#define PBRT_MATERIALS_METAL_H$/;"	d
PBRT_MATERIALS_MIRROR_H	materials/mirror.h	/^#define PBRT_MATERIALS_MIRROR_H$/;"	d
PBRT_MATERIALS_MIXMAT_H	materials/mixmat.h	/^#define PBRT_MATERIALS_MIXMAT_H$/;"	d
PBRT_MATERIALS_PLASTIC_H	materials/plastic.h	/^#define PBRT_MATERIALS_PLASTIC_H$/;"	d
PBRT_MATERIALS_SHINYMETAL_H	materials/shinymetal.h	/^#define PBRT_MATERIALS_SHINYMETAL_H$/;"	d
PBRT_MATERIALS_SUBSTRATE_H	materials/substrate.h	/^#define PBRT_MATERIALS_SUBSTRATE_H$/;"	d
PBRT_MATERIALS_SUBSURFACE_H	materials/subsurface.h	/^#define PBRT_MATERIALS_SUBSURFACE_H$/;"	d
PBRT_MATERIALS_TRANSLUCENT_H	materials/translucent.h	/^#define PBRT_MATERIALS_TRANSLUCENT_H$/;"	d
PBRT_MATERIALS_UBER_H	materials/uber.h	/^#define PBRT_MATERIALS_UBER_H$/;"	d
PBRT_MIPMAP_EWA_FILTER	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MIPMAP_EWA_FILTER(/;"	d
PBRT_MIPMAP_EWA_FILTER	core/probes.h	/^#define PBRT_MIPMAP_EWA_FILTER(/;"	d
PBRT_MIPMAP_EWA_FILTER_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MIPMAP_EWA_FILTER_ENABLED(/;"	d
PBRT_MIPMAP_TRILINEAR_FILTER	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MIPMAP_TRILINEAR_FILTER(/;"	d
PBRT_MIPMAP_TRILINEAR_FILTER	core/probes.h	/^#define PBRT_MIPMAP_TRILINEAR_FILTER(/;"	d
PBRT_MIPMAP_TRILINEAR_FILTER_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MIPMAP_TRILINEAR_FILTER_ENABLED(/;"	d
PBRT_MLT_ACCEPTED_MUTATION	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_ACCEPTED_MUTATION(/;"	d
PBRT_MLT_ACCEPTED_MUTATION	core/probes.h	/^#define PBRT_MLT_ACCEPTED_MUTATION(/;"	d
PBRT_MLT_ACCEPTED_MUTATION_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_ACCEPTED_MUTATION_ENABLED(/;"	d
PBRT_MLT_FINISHED_BOOTSTRAPPING	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_FINISHED_BOOTSTRAPPING(/;"	d
PBRT_MLT_FINISHED_BOOTSTRAPPING	core/probes.h	/^#define PBRT_MLT_FINISHED_BOOTSTRAPPING(/;"	d
PBRT_MLT_FINISHED_BOOTSTRAPPING_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_FINISHED_BOOTSTRAPPING_ENABLED(/;"	d
PBRT_MLT_FINISHED_DIRECTLIGHTING	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_FINISHED_DIRECTLIGHTING(/;"	d
PBRT_MLT_FINISHED_DIRECTLIGHTING	core/probes.h	/^#define PBRT_MLT_FINISHED_DIRECTLIGHTING(/;"	d
PBRT_MLT_FINISHED_DIRECTLIGHTING_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_FINISHED_DIRECTLIGHTING_ENABLED(/;"	d
PBRT_MLT_FINISHED_DISPLAY_UPDATE	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_FINISHED_DISPLAY_UPDATE(/;"	d
PBRT_MLT_FINISHED_DISPLAY_UPDATE	core/probes.h	/^#define PBRT_MLT_FINISHED_DISPLAY_UPDATE(/;"	d
PBRT_MLT_FINISHED_DISPLAY_UPDATE_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_FINISHED_DISPLAY_UPDATE_ENABLED(/;"	d
PBRT_MLT_FINISHED_ESTIMATE_DIRECT	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_FINISHED_ESTIMATE_DIRECT(/;"	d
PBRT_MLT_FINISHED_ESTIMATE_DIRECT	core/probes.h	/^#define PBRT_MLT_FINISHED_ESTIMATE_DIRECT(/;"	d
PBRT_MLT_FINISHED_ESTIMATE_DIRECT_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_FINISHED_ESTIMATE_DIRECT_ENABLED(/;"	d
PBRT_MLT_FINISHED_GENERATE_PATH	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_FINISHED_GENERATE_PATH(/;"	d
PBRT_MLT_FINISHED_GENERATE_PATH	core/probes.h	/^#define PBRT_MLT_FINISHED_GENERATE_PATH(/;"	d
PBRT_MLT_FINISHED_GENERATE_PATH_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_FINISHED_GENERATE_PATH_ENABLED(/;"	d
PBRT_MLT_FINISHED_LBIDIR	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_FINISHED_LBIDIR(/;"	d
PBRT_MLT_FINISHED_LBIDIR	core/probes.h	/^#define PBRT_MLT_FINISHED_LBIDIR(/;"	d
PBRT_MLT_FINISHED_LBIDIR_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_FINISHED_LBIDIR_ENABLED(/;"	d
PBRT_MLT_FINISHED_LPATH	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_FINISHED_LPATH(/;"	d
PBRT_MLT_FINISHED_LPATH	core/probes.h	/^#define PBRT_MLT_FINISHED_LPATH(/;"	d
PBRT_MLT_FINISHED_LPATH_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_FINISHED_LPATH_ENABLED(/;"	d
PBRT_MLT_FINISHED_MLT_TASK	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_FINISHED_MLT_TASK(/;"	d
PBRT_MLT_FINISHED_MLT_TASK	core/probes.h	/^#define PBRT_MLT_FINISHED_MLT_TASK(/;"	d
PBRT_MLT_FINISHED_MLT_TASK_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_FINISHED_MLT_TASK_ENABLED(/;"	d
PBRT_MLT_FINISHED_MUTATION	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_FINISHED_MUTATION(/;"	d
PBRT_MLT_FINISHED_MUTATION	core/probes.h	/^#define PBRT_MLT_FINISHED_MUTATION(/;"	d
PBRT_MLT_FINISHED_MUTATION_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_FINISHED_MUTATION_ENABLED(/;"	d
PBRT_MLT_FINISHED_RENDERING	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_FINISHED_RENDERING(/;"	d
PBRT_MLT_FINISHED_RENDERING	core/probes.h	/^#define PBRT_MLT_FINISHED_RENDERING(/;"	d
PBRT_MLT_FINISHED_RENDERING_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_FINISHED_RENDERING_ENABLED(/;"	d
PBRT_MLT_FINISHED_SAMPLE_LIGHT_FOR_BIDIR	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_FINISHED_SAMPLE_LIGHT_FOR_BIDIR(/;"	d
PBRT_MLT_FINISHED_SAMPLE_LIGHT_FOR_BIDIR	core/probes.h	/^#define PBRT_MLT_FINISHED_SAMPLE_LIGHT_FOR_BIDIR(/;"	d
PBRT_MLT_FINISHED_SAMPLE_LIGHT_FOR_BIDIR_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_FINISHED_SAMPLE_LIGHT_FOR_BIDIR_ENABLED(/;"	d
PBRT_MLT_FINISHED_SAMPLE_SPLAT	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_FINISHED_SAMPLE_SPLAT(/;"	d
PBRT_MLT_FINISHED_SAMPLE_SPLAT	core/probes.h	/^#define PBRT_MLT_FINISHED_SAMPLE_SPLAT(/;"	d
PBRT_MLT_FINISHED_SAMPLE_SPLAT_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_FINISHED_SAMPLE_SPLAT_ENABLED(/;"	d
PBRT_MLT_FINISHED_TASK_INIT	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_FINISHED_TASK_INIT(/;"	d
PBRT_MLT_FINISHED_TASK_INIT	core/probes.h	/^#define PBRT_MLT_FINISHED_TASK_INIT(/;"	d
PBRT_MLT_FINISHED_TASK_INIT_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_FINISHED_TASK_INIT_ENABLED(/;"	d
PBRT_MLT_REJECTED_MUTATION	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_REJECTED_MUTATION(/;"	d
PBRT_MLT_REJECTED_MUTATION	core/probes.h	/^#define PBRT_MLT_REJECTED_MUTATION(/;"	d
PBRT_MLT_REJECTED_MUTATION_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_REJECTED_MUTATION_ENABLED(/;"	d
PBRT_MLT_STARTED_BOOTSTRAPPING	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_STARTED_BOOTSTRAPPING(/;"	d
PBRT_MLT_STARTED_BOOTSTRAPPING	core/probes.h	/^#define PBRT_MLT_STARTED_BOOTSTRAPPING(/;"	d
PBRT_MLT_STARTED_BOOTSTRAPPING_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_STARTED_BOOTSTRAPPING_ENABLED(/;"	d
PBRT_MLT_STARTED_DIRECTLIGHTING	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_STARTED_DIRECTLIGHTING(/;"	d
PBRT_MLT_STARTED_DIRECTLIGHTING	core/probes.h	/^#define PBRT_MLT_STARTED_DIRECTLIGHTING(/;"	d
PBRT_MLT_STARTED_DIRECTLIGHTING_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_STARTED_DIRECTLIGHTING_ENABLED(/;"	d
PBRT_MLT_STARTED_DISPLAY_UPDATE	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_STARTED_DISPLAY_UPDATE(/;"	d
PBRT_MLT_STARTED_DISPLAY_UPDATE	core/probes.h	/^#define PBRT_MLT_STARTED_DISPLAY_UPDATE(/;"	d
PBRT_MLT_STARTED_DISPLAY_UPDATE_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_STARTED_DISPLAY_UPDATE_ENABLED(/;"	d
PBRT_MLT_STARTED_ESTIMATE_DIRECT	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_STARTED_ESTIMATE_DIRECT(/;"	d
PBRT_MLT_STARTED_ESTIMATE_DIRECT	core/probes.h	/^#define PBRT_MLT_STARTED_ESTIMATE_DIRECT(/;"	d
PBRT_MLT_STARTED_ESTIMATE_DIRECT_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_STARTED_ESTIMATE_DIRECT_ENABLED(/;"	d
PBRT_MLT_STARTED_GENERATE_PATH	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_STARTED_GENERATE_PATH(/;"	d
PBRT_MLT_STARTED_GENERATE_PATH	core/probes.h	/^#define PBRT_MLT_STARTED_GENERATE_PATH(/;"	d
PBRT_MLT_STARTED_GENERATE_PATH_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_STARTED_GENERATE_PATH_ENABLED(/;"	d
PBRT_MLT_STARTED_LBIDIR	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_STARTED_LBIDIR(/;"	d
PBRT_MLT_STARTED_LBIDIR	core/probes.h	/^#define PBRT_MLT_STARTED_LBIDIR(/;"	d
PBRT_MLT_STARTED_LBIDIR_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_STARTED_LBIDIR_ENABLED(/;"	d
PBRT_MLT_STARTED_LPATH	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_STARTED_LPATH(/;"	d
PBRT_MLT_STARTED_LPATH	core/probes.h	/^#define PBRT_MLT_STARTED_LPATH(/;"	d
PBRT_MLT_STARTED_LPATH_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_STARTED_LPATH_ENABLED(/;"	d
PBRT_MLT_STARTED_MLT_TASK	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_STARTED_MLT_TASK(/;"	d
PBRT_MLT_STARTED_MLT_TASK	core/probes.h	/^#define PBRT_MLT_STARTED_MLT_TASK(/;"	d
PBRT_MLT_STARTED_MLT_TASK_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_STARTED_MLT_TASK_ENABLED(/;"	d
PBRT_MLT_STARTED_MUTATION	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_STARTED_MUTATION(/;"	d
PBRT_MLT_STARTED_MUTATION	core/probes.h	/^#define PBRT_MLT_STARTED_MUTATION(/;"	d
PBRT_MLT_STARTED_MUTATION_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_STARTED_MUTATION_ENABLED(/;"	d
PBRT_MLT_STARTED_RENDERING	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_STARTED_RENDERING(/;"	d
PBRT_MLT_STARTED_RENDERING	core/probes.h	/^#define PBRT_MLT_STARTED_RENDERING(/;"	d
PBRT_MLT_STARTED_RENDERING_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_STARTED_RENDERING_ENABLED(/;"	d
PBRT_MLT_STARTED_SAMPLE_LIGHT_FOR_BIDIR	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_STARTED_SAMPLE_LIGHT_FOR_BIDIR(/;"	d
PBRT_MLT_STARTED_SAMPLE_LIGHT_FOR_BIDIR	core/probes.h	/^#define PBRT_MLT_STARTED_SAMPLE_LIGHT_FOR_BIDIR(/;"	d
PBRT_MLT_STARTED_SAMPLE_LIGHT_FOR_BIDIR_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_STARTED_SAMPLE_LIGHT_FOR_BIDIR_ENABLED(/;"	d
PBRT_MLT_STARTED_SAMPLE_SPLAT	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_STARTED_SAMPLE_SPLAT(/;"	d
PBRT_MLT_STARTED_SAMPLE_SPLAT	core/probes.h	/^#define PBRT_MLT_STARTED_SAMPLE_SPLAT(/;"	d
PBRT_MLT_STARTED_SAMPLE_SPLAT_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_STARTED_SAMPLE_SPLAT_ENABLED(/;"	d
PBRT_MLT_STARTED_TASK_INIT	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_STARTED_TASK_INIT(/;"	d
PBRT_MLT_STARTED_TASK_INIT	core/probes.h	/^#define PBRT_MLT_STARTED_TASK_INIT(/;"	d
PBRT_MLT_STARTED_TASK_INIT_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_MLT_STARTED_TASK_INIT_ENABLED(/;"	d
PBRT_PHOTON_MAP_DEPOSITED_CAUSTIC_PHOTON	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_PHOTON_MAP_DEPOSITED_CAUSTIC_PHOTON(/;"	d
PBRT_PHOTON_MAP_DEPOSITED_CAUSTIC_PHOTON	core/probes.h	/^#define PBRT_PHOTON_MAP_DEPOSITED_CAUSTIC_PHOTON(/;"	d
PBRT_PHOTON_MAP_DEPOSITED_CAUSTIC_PHOTON_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_PHOTON_MAP_DEPOSITED_CAUSTIC_PHOTON_ENABLED(/;"	d
PBRT_PHOTON_MAP_DEPOSITED_DIRECT_PHOTON	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_PHOTON_MAP_DEPOSITED_DIRECT_PHOTON(/;"	d
PBRT_PHOTON_MAP_DEPOSITED_DIRECT_PHOTON	core/probes.h	/^#define PBRT_PHOTON_MAP_DEPOSITED_DIRECT_PHOTON(/;"	d
PBRT_PHOTON_MAP_DEPOSITED_DIRECT_PHOTON_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_PHOTON_MAP_DEPOSITED_DIRECT_PHOTON_ENABLED(/;"	d
PBRT_PHOTON_MAP_DEPOSITED_INDIRECT_PHOTON	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_PHOTON_MAP_DEPOSITED_INDIRECT_PHOTON(/;"	d
PBRT_PHOTON_MAP_DEPOSITED_INDIRECT_PHOTON	core/probes.h	/^#define PBRT_PHOTON_MAP_DEPOSITED_INDIRECT_PHOTON(/;"	d
PBRT_PHOTON_MAP_DEPOSITED_INDIRECT_PHOTON_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_PHOTON_MAP_DEPOSITED_INDIRECT_PHOTON_ENABLED(/;"	d
PBRT_PHOTON_MAP_FINISHED_GATHER_RAY	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_PHOTON_MAP_FINISHED_GATHER_RAY(/;"	d
PBRT_PHOTON_MAP_FINISHED_GATHER_RAY	core/probes.h	/^#define PBRT_PHOTON_MAP_FINISHED_GATHER_RAY(/;"	d
PBRT_PHOTON_MAP_FINISHED_GATHER_RAY_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_PHOTON_MAP_FINISHED_GATHER_RAY_ENABLED(/;"	d
PBRT_PHOTON_MAP_FINISHED_LOOKUP	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_PHOTON_MAP_FINISHED_LOOKUP(/;"	d
PBRT_PHOTON_MAP_FINISHED_LOOKUP	core/probes.h	/^#define PBRT_PHOTON_MAP_FINISHED_LOOKUP(/;"	d
PBRT_PHOTON_MAP_FINISHED_LOOKUP_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_PHOTON_MAP_FINISHED_LOOKUP_ENABLED(/;"	d
PBRT_PHOTON_MAP_FINISHED_RAY_PATH	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_PHOTON_MAP_FINISHED_RAY_PATH(/;"	d
PBRT_PHOTON_MAP_FINISHED_RAY_PATH	core/probes.h	/^#define PBRT_PHOTON_MAP_FINISHED_RAY_PATH(/;"	d
PBRT_PHOTON_MAP_FINISHED_RAY_PATH_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_PHOTON_MAP_FINISHED_RAY_PATH_ENABLED(/;"	d
PBRT_PHOTON_MAP_STARTED_GATHER_RAY	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_PHOTON_MAP_STARTED_GATHER_RAY(/;"	d
PBRT_PHOTON_MAP_STARTED_GATHER_RAY	core/probes.h	/^#define PBRT_PHOTON_MAP_STARTED_GATHER_RAY(/;"	d
PBRT_PHOTON_MAP_STARTED_GATHER_RAY_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_PHOTON_MAP_STARTED_GATHER_RAY_ENABLED(/;"	d
PBRT_PHOTON_MAP_STARTED_LOOKUP	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_PHOTON_MAP_STARTED_LOOKUP(/;"	d
PBRT_PHOTON_MAP_STARTED_LOOKUP	core/probes.h	/^#define PBRT_PHOTON_MAP_STARTED_LOOKUP(/;"	d
PBRT_PHOTON_MAP_STARTED_LOOKUP_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_PHOTON_MAP_STARTED_LOOKUP_ENABLED(/;"	d
PBRT_PHOTON_MAP_STARTED_RAY_PATH	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_PHOTON_MAP_STARTED_RAY_PATH(/;"	d
PBRT_PHOTON_MAP_STARTED_RAY_PATH	core/probes.h	/^#define PBRT_PHOTON_MAP_STARTED_RAY_PATH(/;"	d
PBRT_PHOTON_MAP_STARTED_RAY_PATH_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_PHOTON_MAP_STARTED_RAY_PATH_ENABLED(/;"	d
PBRT_POINTER_SIZE	core/pbrt.h	/^#define PBRT_POINTER_SIZE /;"	d
PBRT_RAY_TRIANGLE_INTERSECTIONP_HIT	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_RAY_TRIANGLE_INTERSECTIONP_HIT(/;"	d
PBRT_RAY_TRIANGLE_INTERSECTIONP_HIT	core/probes.cpp	/^void PBRT_RAY_TRIANGLE_INTERSECTIONP_HIT(const Ray *, float t) {$/;"	f
PBRT_RAY_TRIANGLE_INTERSECTIONP_HIT	core/probes.h	/^#define PBRT_RAY_TRIANGLE_INTERSECTIONP_HIT(/;"	d
PBRT_RAY_TRIANGLE_INTERSECTIONP_HIT_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_RAY_TRIANGLE_INTERSECTIONP_HIT_ENABLED(/;"	d
PBRT_RAY_TRIANGLE_INTERSECTIONP_TEST	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_RAY_TRIANGLE_INTERSECTIONP_TEST(/;"	d
PBRT_RAY_TRIANGLE_INTERSECTIONP_TEST	core/probes.cpp	/^void PBRT_RAY_TRIANGLE_INTERSECTIONP_TEST(const Ray *, const Triangle *) {$/;"	f
PBRT_RAY_TRIANGLE_INTERSECTIONP_TEST	core/probes.h	/^#define PBRT_RAY_TRIANGLE_INTERSECTIONP_TEST(/;"	d
PBRT_RAY_TRIANGLE_INTERSECTIONP_TEST_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_RAY_TRIANGLE_INTERSECTIONP_TEST_ENABLED(/;"	d
PBRT_RAY_TRIANGLE_INTERSECTION_HIT	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_RAY_TRIANGLE_INTERSECTION_HIT(/;"	d
PBRT_RAY_TRIANGLE_INTERSECTION_HIT	core/probes.cpp	/^void PBRT_RAY_TRIANGLE_INTERSECTION_HIT(const Ray *, float t) {$/;"	f
PBRT_RAY_TRIANGLE_INTERSECTION_HIT	core/probes.h	/^#define PBRT_RAY_TRIANGLE_INTERSECTION_HIT(/;"	d
PBRT_RAY_TRIANGLE_INTERSECTION_HIT_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_RAY_TRIANGLE_INTERSECTION_HIT_ENABLED(/;"	d
PBRT_RAY_TRIANGLE_INTERSECTION_TEST	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_RAY_TRIANGLE_INTERSECTION_TEST(/;"	d
PBRT_RAY_TRIANGLE_INTERSECTION_TEST	core/probes.cpp	/^void PBRT_RAY_TRIANGLE_INTERSECTION_TEST(const Ray *, const Triangle *) {$/;"	f
PBRT_RAY_TRIANGLE_INTERSECTION_TEST	core/probes.h	/^#define PBRT_RAY_TRIANGLE_INTERSECTION_TEST(/;"	d
PBRT_RAY_TRIANGLE_INTERSECTION_TEST_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_RAY_TRIANGLE_INTERSECTION_TEST_ENABLED(/;"	d
PBRT_RENDERERS_AGGREGATETEST_H	renderers/aggregatetest.h	/^#define PBRT_RENDERERS_AGGREGATETEST_H$/;"	d
PBRT_RENDERERS_CREATEPROBES_H	renderers/createprobes.h	/^#define PBRT_RENDERERS_CREATEPROBES_H$/;"	d
PBRT_RENDERERS_METROPOLIS_H	renderers/metropolis.h	/^#define PBRT_RENDERERS_METROPOLIS_H$/;"	d
PBRT_RENDERERS_SAMPLERRENDERER_H	renderers/samplerrenderer.h	/^#define PBRT_RENDERERS_SAMPLERRENDERER_H$/;"	d
PBRT_RENDERERS_SURFACEPOINTS_H	renderers/surfacepoints.h	/^#define PBRT_RENDERERS_SURFACEPOINTS_H$/;"	d
PBRT_RNG_FINISHED_RANDOM_FLOAT	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_RNG_FINISHED_RANDOM_FLOAT(/;"	d
PBRT_RNG_FINISHED_RANDOM_FLOAT	core/probes.h	/^#define PBRT_RNG_FINISHED_RANDOM_FLOAT(/;"	d
PBRT_RNG_FINISHED_RANDOM_FLOAT_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_RNG_FINISHED_RANDOM_FLOAT_ENABLED(/;"	d
PBRT_RNG_FINISHED_TABLEGEN	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_RNG_FINISHED_TABLEGEN(/;"	d
PBRT_RNG_FINISHED_TABLEGEN	core/probes.h	/^#define PBRT_RNG_FINISHED_TABLEGEN(/;"	d
PBRT_RNG_FINISHED_TABLEGEN_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_RNG_FINISHED_TABLEGEN_ENABLED(/;"	d
PBRT_RNG_STARTED_RANDOM_FLOAT	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_RNG_STARTED_RANDOM_FLOAT(/;"	d
PBRT_RNG_STARTED_RANDOM_FLOAT	core/probes.h	/^#define PBRT_RNG_STARTED_RANDOM_FLOAT(/;"	d
PBRT_RNG_STARTED_RANDOM_FLOAT_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_RNG_STARTED_RANDOM_FLOAT_ENABLED(/;"	d
PBRT_RNG_STARTED_TABLEGEN	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_RNG_STARTED_TABLEGEN(/;"	d
PBRT_RNG_STARTED_TABLEGEN	core/probes.h	/^#define PBRT_RNG_STARTED_TABLEGEN(/;"	d
PBRT_RNG_STARTED_TABLEGEN_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_RNG_STARTED_TABLEGEN_ENABLED(/;"	d
PBRT_SAMPLERS_ADAPTIVE_H	samplers/adaptive.h	/^#define PBRT_SAMPLERS_ADAPTIVE_H$/;"	d
PBRT_SAMPLERS_BESTCANDIDATE_H	samplers/bestcandidate.h	/^#define PBRT_SAMPLERS_BESTCANDIDATE_H$/;"	d
PBRT_SAMPLERS_HALTON_H	samplers/halton.h	/^#define PBRT_SAMPLERS_HALTON_H$/;"	d
PBRT_SAMPLERS_LOWDISCREPANCY_H	samplers/lowdiscrepancy.h	/^#define PBRT_SAMPLERS_LOWDISCREPANCY_H$/;"	d
PBRT_SAMPLERS_RANDOM_H	samplers/random.h	/^#define PBRT_SAMPLERS_RANDOM_H$/;"	d
PBRT_SAMPLERS_STRATIFIED_H	samplers/stratified.h	/^#define PBRT_SAMPLERS_STRATIFIED_H$/;"	d
PBRT_SAMPLE_OUTSIDE_IMAGE_EXTENT	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_SAMPLE_OUTSIDE_IMAGE_EXTENT(/;"	d
PBRT_SAMPLE_OUTSIDE_IMAGE_EXTENT	core/probes.h	/^#define PBRT_SAMPLE_OUTSIDE_IMAGE_EXTENT(/;"	d
PBRT_SAMPLE_OUTSIDE_IMAGE_EXTENT_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_SAMPLE_OUTSIDE_IMAGE_EXTENT_ENABLED(/;"	d
PBRT_SHAPES_CONE_H	shapes/cone.h	/^#define PBRT_SHAPES_CONE_H$/;"	d
PBRT_SHAPES_CYLINDER_H	shapes/cylinder.h	/^#define PBRT_SHAPES_CYLINDER_H$/;"	d
PBRT_SHAPES_DISK_H	shapes/disk.h	/^#define PBRT_SHAPES_DISK_H$/;"	d
PBRT_SHAPES_HEIGHTFIELD2_H	shapes/heightfield2.h	/^#define PBRT_SHAPES_HEIGHTFIELD2_H$/;"	d
PBRT_SHAPES_HEIGHTFIELD_H	shapes/heightfield.h	/^#define PBRT_SHAPES_HEIGHTFIELD_H$/;"	d
PBRT_SHAPES_HYPERBOLOID_H	shapes/hyperboloid.h	/^#define PBRT_SHAPES_HYPERBOLOID_H$/;"	d
PBRT_SHAPES_LOOPSUBDIV_H	shapes/loopsubdiv.h	/^#define PBRT_SHAPES_LOOPSUBDIV_H$/;"	d
PBRT_SHAPES_NURBS_H	shapes/nurbs.h	/^#define PBRT_SHAPES_NURBS_H$/;"	d
PBRT_SHAPES_PARABOLOID_H	shapes/paraboloid.h	/^#define PBRT_SHAPES_PARABOLOID_H$/;"	d
PBRT_SHAPES_SPHERE_H	shapes/sphere.h	/^#define PBRT_SHAPES_SPHERE_H$/;"	d
PBRT_SHAPES_TRIANGLEMESH_H	shapes/trianglemesh.h	/^#define PBRT_SHAPES_TRIANGLEMESH_H$/;"	d
PBRT_STABILITY	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define PBRT_STABILITY /;"	d
PBRT_STARTED_ADDING_IMAGE_SAMPLE	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_ADDING_IMAGE_SAMPLE(/;"	d
PBRT_STARTED_ADDING_IMAGE_SAMPLE	core/probes.h	/^#define PBRT_STARTED_ADDING_IMAGE_SAMPLE(/;"	d
PBRT_STARTED_ADDING_IMAGE_SAMPLE_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_ADDING_IMAGE_SAMPLE_ENABLED(/;"	d
PBRT_STARTED_BSDF_EVAL	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_BSDF_EVAL(/;"	d
PBRT_STARTED_BSDF_EVAL	core/probes.h	/^#define PBRT_STARTED_BSDF_EVAL(/;"	d
PBRT_STARTED_BSDF_EVAL_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_BSDF_EVAL_ENABLED(/;"	d
PBRT_STARTED_BSDF_PDF	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_BSDF_PDF(/;"	d
PBRT_STARTED_BSDF_PDF	core/probes.h	/^#define PBRT_STARTED_BSDF_PDF(/;"	d
PBRT_STARTED_BSDF_PDF_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_BSDF_PDF_ENABLED(/;"	d
PBRT_STARTED_BSDF_SAMPLE	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_BSDF_SAMPLE(/;"	d
PBRT_STARTED_BSDF_SAMPLE	core/probes.h	/^#define PBRT_STARTED_BSDF_SAMPLE(/;"	d
PBRT_STARTED_BSDF_SAMPLE_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_BSDF_SAMPLE_ENABLED(/;"	d
PBRT_STARTED_BSDF_SHADING	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_BSDF_SHADING(/;"	d
PBRT_STARTED_BSDF_SHADING	core/probes.h	/^#define PBRT_STARTED_BSDF_SHADING(/;"	d
PBRT_STARTED_BSDF_SHADING_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_BSDF_SHADING_ENABLED(/;"	d
PBRT_STARTED_BSSRDF_SHADING	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_BSSRDF_SHADING(/;"	d
PBRT_STARTED_BSSRDF_SHADING	core/probes.h	/^#define PBRT_STARTED_BSSRDF_SHADING(/;"	d
PBRT_STARTED_BSSRDF_SHADING_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_BSSRDF_SHADING_ENABLED(/;"	d
PBRT_STARTED_CAMERA_RAY_INTEGRATION	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_CAMERA_RAY_INTEGRATION(/;"	d
PBRT_STARTED_CAMERA_RAY_INTEGRATION	core/probes.h	/^#define PBRT_STARTED_CAMERA_RAY_INTEGRATION(/;"	d
PBRT_STARTED_CAMERA_RAY_INTEGRATION_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_CAMERA_RAY_INTEGRATION_ENABLED(/;"	d
PBRT_STARTED_EWA_TEXTURE_LOOKUP	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_EWA_TEXTURE_LOOKUP(/;"	d
PBRT_STARTED_EWA_TEXTURE_LOOKUP	core/probes.h	/^#define PBRT_STARTED_EWA_TEXTURE_LOOKUP(/;"	d
PBRT_STARTED_EWA_TEXTURE_LOOKUP_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_EWA_TEXTURE_LOOKUP_ENABLED(/;"	d
PBRT_STARTED_GENERATING_CAMERA_RAY	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_GENERATING_CAMERA_RAY(/;"	d
PBRT_STARTED_GENERATING_CAMERA_RAY	core/probes.cpp	/^void PBRT_STARTED_GENERATING_CAMERA_RAY(const CameraSample *) {$/;"	f
PBRT_STARTED_GENERATING_CAMERA_RAY	core/probes.h	/^#define PBRT_STARTED_GENERATING_CAMERA_RAY(/;"	d
PBRT_STARTED_GENERATING_CAMERA_RAY_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_GENERATING_CAMERA_RAY_ENABLED(/;"	d
PBRT_STARTED_PARSING	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_PARSING(/;"	d
PBRT_STARTED_PARSING	core/probes.h	/^#define PBRT_STARTED_PARSING(/;"	d
PBRT_STARTED_PARSING_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_PARSING_ENABLED(/;"	d
PBRT_STARTED_PREPROCESSING	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_PREPROCESSING(/;"	d
PBRT_STARTED_PREPROCESSING	core/probes.h	/^#define PBRT_STARTED_PREPROCESSING(/;"	d
PBRT_STARTED_PREPROCESSING_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_PREPROCESSING_ENABLED(/;"	d
PBRT_STARTED_RAY_INTERSECTION	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_RAY_INTERSECTION(/;"	d
PBRT_STARTED_RAY_INTERSECTION	core/probes.h	/^#define PBRT_STARTED_RAY_INTERSECTION(/;"	d
PBRT_STARTED_RAY_INTERSECTIONP	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_RAY_INTERSECTIONP(/;"	d
PBRT_STARTED_RAY_INTERSECTIONP	core/probes.h	/^#define PBRT_STARTED_RAY_INTERSECTIONP(/;"	d
PBRT_STARTED_RAY_INTERSECTIONP_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_RAY_INTERSECTIONP_ENABLED(/;"	d
PBRT_STARTED_RAY_INTERSECTION_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_RAY_INTERSECTION_ENABLED(/;"	d
PBRT_STARTED_RENDERING	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_RENDERING(/;"	d
PBRT_STARTED_RENDERING	core/probes.h	/^#define PBRT_STARTED_RENDERING(/;"	d
PBRT_STARTED_RENDERING_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_RENDERING_ENABLED(/;"	d
PBRT_STARTED_RENDERTASK	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_RENDERTASK(/;"	d
PBRT_STARTED_RENDERTASK	core/probes.h	/^#define PBRT_STARTED_RENDERTASK(/;"	d
PBRT_STARTED_RENDERTASK_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_RENDERTASK_ENABLED(/;"	d
PBRT_STARTED_SPECULAR_REFLECTION_RAY	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_SPECULAR_REFLECTION_RAY(/;"	d
PBRT_STARTED_SPECULAR_REFLECTION_RAY	core/probes.cpp	/^void PBRT_STARTED_SPECULAR_REFLECTION_RAY(const RayDifferential *) {$/;"	f
PBRT_STARTED_SPECULAR_REFLECTION_RAY	core/probes.h	/^#define PBRT_STARTED_SPECULAR_REFLECTION_RAY(/;"	d
PBRT_STARTED_SPECULAR_REFLECTION_RAY_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_SPECULAR_REFLECTION_RAY_ENABLED(/;"	d
PBRT_STARTED_SPECULAR_REFRACTION_RAY	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_SPECULAR_REFRACTION_RAY(/;"	d
PBRT_STARTED_SPECULAR_REFRACTION_RAY	core/probes.cpp	/^void PBRT_STARTED_SPECULAR_REFRACTION_RAY(const RayDifferential *) {$/;"	f
PBRT_STARTED_SPECULAR_REFRACTION_RAY	core/probes.h	/^#define PBRT_STARTED_SPECULAR_REFRACTION_RAY(/;"	d
PBRT_STARTED_SPECULAR_REFRACTION_RAY_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_SPECULAR_REFRACTION_RAY_ENABLED(/;"	d
PBRT_STARTED_TASK	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_TASK(/;"	d
PBRT_STARTED_TASK	core/probes.h	/^#define PBRT_STARTED_TASK(/;"	d
PBRT_STARTED_TASK_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_TASK_ENABLED(/;"	d
PBRT_STARTED_TRILINEAR_TEXTURE_LOOKUP	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_TRILINEAR_TEXTURE_LOOKUP(/;"	d
PBRT_STARTED_TRILINEAR_TEXTURE_LOOKUP	core/probes.h	/^#define PBRT_STARTED_TRILINEAR_TEXTURE_LOOKUP(/;"	d
PBRT_STARTED_TRILINEAR_TEXTURE_LOOKUP_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_STARTED_TRILINEAR_TEXTURE_LOOKUP_ENABLED(/;"	d
PBRT_SUBSURFACE_ADDED_INTERIOR_CONTRIBUTION	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_SUBSURFACE_ADDED_INTERIOR_CONTRIBUTION(/;"	d
PBRT_SUBSURFACE_ADDED_INTERIOR_CONTRIBUTION	core/probes.h	/^#define PBRT_SUBSURFACE_ADDED_INTERIOR_CONTRIBUTION(/;"	d
PBRT_SUBSURFACE_ADDED_INTERIOR_CONTRIBUTION_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_SUBSURFACE_ADDED_INTERIOR_CONTRIBUTION_ENABLED(/;"	d
PBRT_SUBSURFACE_ADDED_POINT_CONTRIBUTION	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_SUBSURFACE_ADDED_POINT_CONTRIBUTION(/;"	d
PBRT_SUBSURFACE_ADDED_POINT_CONTRIBUTION	core/probes.h	/^#define PBRT_SUBSURFACE_ADDED_POINT_CONTRIBUTION(/;"	d
PBRT_SUBSURFACE_ADDED_POINT_CONTRIBUTION_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_SUBSURFACE_ADDED_POINT_CONTRIBUTION_ENABLED(/;"	d
PBRT_SUBSURFACE_ADDED_POINT_TO_OCTREE	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_SUBSURFACE_ADDED_POINT_TO_OCTREE(/;"	d
PBRT_SUBSURFACE_ADDED_POINT_TO_OCTREE	core/probes.h	/^#define PBRT_SUBSURFACE_ADDED_POINT_TO_OCTREE(/;"	d
PBRT_SUBSURFACE_ADDED_POINT_TO_OCTREE_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_SUBSURFACE_ADDED_POINT_TO_OCTREE_ENABLED(/;"	d
PBRT_SUBSURFACE_COMPUTED_IRRADIANCE_AT_POINT	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_SUBSURFACE_COMPUTED_IRRADIANCE_AT_POINT(/;"	d
PBRT_SUBSURFACE_COMPUTED_IRRADIANCE_AT_POINT	core/probes.h	/^#define PBRT_SUBSURFACE_COMPUTED_IRRADIANCE_AT_POINT(/;"	d
PBRT_SUBSURFACE_COMPUTED_IRRADIANCE_AT_POINT_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_SUBSURFACE_COMPUTED_IRRADIANCE_AT_POINT_ENABLED(/;"	d
PBRT_SUBSURFACE_FINISHED_COMPUTING_IRRADIANCE_VALUES	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_SUBSURFACE_FINISHED_COMPUTING_IRRADIANCE_VALUES(/;"	d
PBRT_SUBSURFACE_FINISHED_COMPUTING_IRRADIANCE_VALUES	core/probes.h	/^#define PBRT_SUBSURFACE_FINISHED_COMPUTING_IRRADIANCE_VALUES(/;"	d
PBRT_SUBSURFACE_FINISHED_COMPUTING_IRRADIANCE_VALUES_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_SUBSURFACE_FINISHED_COMPUTING_IRRADIANCE_VALUES_ENABLED(/;"	d
PBRT_SUBSURFACE_FINISHED_OCTREE_LOOKUP	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_SUBSURFACE_FINISHED_OCTREE_LOOKUP(/;"	d
PBRT_SUBSURFACE_FINISHED_OCTREE_LOOKUP	core/probes.h	/^#define PBRT_SUBSURFACE_FINISHED_OCTREE_LOOKUP(/;"	d
PBRT_SUBSURFACE_FINISHED_OCTREE_LOOKUP_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_SUBSURFACE_FINISHED_OCTREE_LOOKUP_ENABLED(/;"	d
PBRT_SUBSURFACE_FINISHED_RAYS_FOR_POINTS	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_SUBSURFACE_FINISHED_RAYS_FOR_POINTS(/;"	d
PBRT_SUBSURFACE_FINISHED_RAYS_FOR_POINTS	core/probes.h	/^#define PBRT_SUBSURFACE_FINISHED_RAYS_FOR_POINTS(/;"	d
PBRT_SUBSURFACE_FINISHED_RAYS_FOR_POINTS_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_SUBSURFACE_FINISHED_RAYS_FOR_POINTS_ENABLED(/;"	d
PBRT_SUBSURFACE_STARTED_COMPUTING_IRRADIANCE_VALUES	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_SUBSURFACE_STARTED_COMPUTING_IRRADIANCE_VALUES(/;"	d
PBRT_SUBSURFACE_STARTED_COMPUTING_IRRADIANCE_VALUES	core/probes.h	/^#define PBRT_SUBSURFACE_STARTED_COMPUTING_IRRADIANCE_VALUES(/;"	d
PBRT_SUBSURFACE_STARTED_COMPUTING_IRRADIANCE_VALUES_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_SUBSURFACE_STARTED_COMPUTING_IRRADIANCE_VALUES_ENABLED(/;"	d
PBRT_SUBSURFACE_STARTED_OCTREE_LOOKUP	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_SUBSURFACE_STARTED_OCTREE_LOOKUP(/;"	d
PBRT_SUBSURFACE_STARTED_OCTREE_LOOKUP	core/probes.h	/^#define PBRT_SUBSURFACE_STARTED_OCTREE_LOOKUP(/;"	d
PBRT_SUBSURFACE_STARTED_OCTREE_LOOKUP_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_SUBSURFACE_STARTED_OCTREE_LOOKUP_ENABLED(/;"	d
PBRT_SUBSURFACE_STARTED_RAYS_FOR_POINTS	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_SUBSURFACE_STARTED_RAYS_FOR_POINTS(/;"	d
PBRT_SUBSURFACE_STARTED_RAYS_FOR_POINTS	core/probes.h	/^#define PBRT_SUBSURFACE_STARTED_RAYS_FOR_POINTS(/;"	d
PBRT_SUBSURFACE_STARTED_RAYS_FOR_POINTS_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_SUBSURFACE_STARTED_RAYS_FOR_POINTS_ENABLED(/;"	d
PBRT_SUPERSAMPLE_PIXEL_NO	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_SUPERSAMPLE_PIXEL_NO(/;"	d
PBRT_SUPERSAMPLE_PIXEL_NO	core/probes.h	/^#define PBRT_SUPERSAMPLE_PIXEL_NO(/;"	d
PBRT_SUPERSAMPLE_PIXEL_NO_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_SUPERSAMPLE_PIXEL_NO_ENABLED(/;"	d
PBRT_SUPERSAMPLE_PIXEL_YES	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_SUPERSAMPLE_PIXEL_YES(/;"	d
PBRT_SUPERSAMPLE_PIXEL_YES	core/probes.h	/^#define PBRT_SUPERSAMPLE_PIXEL_YES(/;"	d
PBRT_SUPERSAMPLE_PIXEL_YES_ENABLED	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	PBRT_SUPERSAMPLE_PIXEL_YES_ENABLED(/;"	d
PBRT_TEXTURES_BILERP_H	textures/bilerp.h	/^#define PBRT_TEXTURES_BILERP_H$/;"	d
PBRT_TEXTURES_CHECKERBOARD_H	textures/checkerboard.h	/^#define PBRT_TEXTURES_CHECKERBOARD_H$/;"	d
PBRT_TEXTURES_CONSTANT_H	textures/constant.h	/^#define PBRT_TEXTURES_CONSTANT_H$/;"	d
PBRT_TEXTURES_DOTS_H	textures/dots.h	/^#define PBRT_TEXTURES_DOTS_H$/;"	d
PBRT_TEXTURES_FBM_H	textures/fbm.h	/^#define PBRT_TEXTURES_FBM_H$/;"	d
PBRT_TEXTURES_IMAGEMAP_H	textures/imagemap.h	/^#define PBRT_TEXTURES_IMAGEMAP_H$/;"	d
PBRT_TEXTURES_MARBLE_H	textures/marble.h	/^#define PBRT_TEXTURES_MARBLE_H$/;"	d
PBRT_TEXTURES_MIX_H	textures/mix.h	/^#define PBRT_TEXTURES_MIX_H$/;"	d
PBRT_TEXTURES_SCALE_H	textures/scale.h	/^#define PBRT_TEXTURES_SCALE_H$/;"	d
PBRT_TEXTURES_UV_H	textures/uv.h	/^#define PBRT_TEXTURES_UV_H$/;"	d
PBRT_TEXTURES_WINDY_H	textures/windy.h	/^#define PBRT_TEXTURES_WINDY_H$/;"	d
PBRT_TEXTURES_WRINKLED_H	textures/wrinkled.h	/^#define PBRT_TEXTURES_WRINKLED_H$/;"	d
PBRT_TYPEDEFS	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define PBRT_TYPEDEFS /;"	d
PBRT_VERSION	core/pbrt.h	/^#define PBRT_VERSION /;"	d
PBRT_VOLUMES_EXPONENTIAL_H	volumes/exponential.h	/^#define PBRT_VOLUMES_EXPONENTIAL_H$/;"	d
PBRT_VOLUMES_HOMOGENEOUS_H	volumes/homogeneous.h	/^#define PBRT_VOLUMES_HOMOGENEOUS_H$/;"	d
PBRT_VOLUMES_VOLUMEGRID_H	volumes/volumegrid.h	/^#define PBRT_VOLUMES_VOLUMEGRID_H$/;"	d
PBRT_WIN32_UNISTD_H	3rdparty/unistd.h	/^#define PBRT_WIN32_UNISTD_H$/;"	d
PHOTOMETRIC_CIELAB	3rdparty/tiff-3.9.4/tiff.h	/^#define	    PHOTOMETRIC_CIELAB	/;"	d
PHOTOMETRIC_ICCLAB	3rdparty/tiff-3.9.4/tiff.h	/^#define	    PHOTOMETRIC_ICCLAB	/;"	d
PHOTOMETRIC_ITULAB	3rdparty/tiff-3.9.4/tiff.h	/^#define	    PHOTOMETRIC_ITULAB	/;"	d
PHOTOMETRIC_LOGL	3rdparty/tiff-3.9.4/tiff.h	/^#define     PHOTOMETRIC_LOGL	/;"	d
PHOTOMETRIC_LOGLUV	3rdparty/tiff-3.9.4/tiff.h	/^#define     PHOTOMETRIC_LOGLUV	/;"	d
PHOTOMETRIC_MASK	3rdparty/tiff-3.9.4/tiff.h	/^#define	    PHOTOMETRIC_MASK	/;"	d
PHOTOMETRIC_MINISBLACK	3rdparty/tiff-3.9.4/tiff.h	/^#define	    PHOTOMETRIC_MINISBLACK	/;"	d
PHOTOMETRIC_MINISWHITE	3rdparty/tiff-3.9.4/tiff.h	/^#define	    PHOTOMETRIC_MINISWHITE	/;"	d
PHOTOMETRIC_PALETTE	3rdparty/tiff-3.9.4/tiff.h	/^#define	    PHOTOMETRIC_PALETTE	/;"	d
PHOTOMETRIC_RGB	3rdparty/tiff-3.9.4/tiff.h	/^#define	    PHOTOMETRIC_RGB	/;"	d
PHOTOMETRIC_SEPARATED	3rdparty/tiff-3.9.4/tiff.h	/^#define	    PHOTOMETRIC_SEPARATED	/;"	d
PHOTOMETRIC_YCBCR	3rdparty/tiff-3.9.4/tiff.h	/^#define	    PHOTOMETRIC_YCBCR	/;"	d
PHOTOSHOP_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.h	/^#define PHOTOSHOP_SUPPORT$/;"	d
PHOTOSHOP_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.vc.h	/^#define PHOTOSHOP_SUPPORT$/;"	d
PHOTOSHOP_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.wince.h	/^#define PHOTOSHOP_SUPPORT$/;"	d
PIXARLOGDATAFMT_11BITLOG	3rdparty/tiff-3.9.4/tiff.h	/^#define	    PIXARLOGDATAFMT_11BITLOG	/;"	d
PIXARLOGDATAFMT_12BITPICIO	3rdparty/tiff-3.9.4/tiff.h	/^#define	    PIXARLOGDATAFMT_12BITPICIO	/;"	d
PIXARLOGDATAFMT_16BIT	3rdparty/tiff-3.9.4/tiff.h	/^#define	    PIXARLOGDATAFMT_16BIT	/;"	d
PIXARLOGDATAFMT_8BIT	3rdparty/tiff-3.9.4/tiff.h	/^#define	    PIXARLOGDATAFMT_8BIT	/;"	d
PIXARLOGDATAFMT_8BITABGR	3rdparty/tiff-3.9.4/tiff.h	/^#define	    PIXARLOGDATAFMT_8BITABGR	/;"	d
PIXARLOGDATAFMT_FLOAT	3rdparty/tiff-3.9.4/tiff.h	/^#define	    PIXARLOGDATAFMT_FLOAT	/;"	d
PIXARLOGDATAFMT_UNKNOWN	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^#define PIXARLOGDATAFMT_UNKNOWN	/;"	d	file:
PIXEL	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	PIXEL(/;"	d	file:
PIXEL	3rdparty/tiff-3.9.4/tif_fax3.c	/^#undef PIXEL$/;"	d	file:
PIXEL	core/targa.c	/^#define PIXEL(/;"	d	file:
PIXEL	core/targa.c	/^#undef PIXEL$/;"	d	file:
PIXELFILTER	core/pbrtparse.cpp	/^     PIXELFILTER = 285,$/;"	e	enum:yytokentype	file:
PIXELFILTER	core/pbrtparse.hh	/^     PIXELFILTER = 285,$/;"	e	enum:yytokentype
PIZ_COMPRESSION	3rdparty/openexr-1.7.0/ImfCompression.h	/^    PIZ_COMPRESSION = 4,	\/\/ piz-based wavelet compression$/;"	e	enum:Imf::Compression
PLANARCONFIG_CONTIG	3rdparty/tiff-3.9.4/tiff.h	/^#define	    PLANARCONFIG_CONTIG	/;"	d
PLANARCONFIG_SEPARATE	3rdparty/tiff-3.9.4/tiff.h	/^#define	    PLANARCONFIG_SEPARATE	/;"	d
PLSTATE_INIT	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^#define PLSTATE_INIT /;"	d	file:
PLY_ASCII	tools/ply.h	/^#define PLY_ASCII /;"	d
PLY_BINARY_BE	tools/ply.h	/^#define PLY_BINARY_BE /;"	d
PLY_BINARY_LE	tools/ply.h	/^#define PLY_BINARY_LE /;"	d
PLY_ERROR	tools/ply.h	/^#define PLY_ERROR /;"	d
PLY_LIST	tools/ply.h	/^#define  PLY_LIST /;"	d
PLY_OKAY	tools/ply.h	/^#define PLY_OKAY /;"	d
PLY_SCALAR	tools/ply.h	/^#define  PLY_SCALAR /;"	d
PLY_STRING	tools/ply.h	/^#define  PLY_STRING /;"	d
PREDICTOR_FLOATINGPOINT	3rdparty/tiff-3.9.4/tiff.h	/^#define     PREDICTOR_FLOATINGPOINT	/;"	d
PREDICTOR_HORIZONTAL	3rdparty/tiff-3.9.4/tiff.h	/^#define     PREDICTOR_HORIZONTAL	/;"	d
PREDICTOR_NONE	3rdparty/tiff-3.9.4/tiff.h	/^#define     PREDICTOR_NONE	/;"	d
PRESET_DICT	3rdparty/zlib-1.2.5/zutil.h	/^#define PRESET_DICT /;"	d
PREV	shapes/loopsubdiv.cpp	/^#define PREV(/;"	d	file:
PRINTF_FUNC	core/error.h	/^#define PRINTF_FUNC /;"	d
PRINTF_FUNC	core/error.h	/^#define PRINTF_FUNC$/;"	d
PULL	3rdparty/zlib-1.2.5/infback.c	/^#define PULL(/;"	d	file:
PULLBYTE	3rdparty/zlib-1.2.5/infback.c	/^#define PULLBYTE(/;"	d	file:
PULLBYTE	3rdparty/zlib-1.2.5/inflate.c	/^#define PULLBYTE(/;"	d	file:
PUP	3rdparty/zlib-1.2.5/inffast.c	/^#  define PUP(/;"	d	file:
PXR24_COMPRESSION	3rdparty/openexr-1.7.0/ImfCompression.h	/^    PXR24_COMPRESSION = 5,	\/\/ lossy 24-bit float compression$/;"	e	enum:Imf::Compression
PackBitsDecode	3rdparty/tiff-3.9.4/tif_packbits.c	/^PackBitsDecode(TIFF* tif, tidata_t op, tsize_t occ, tsample_t s)$/;"	f	file:
PackBitsEncode	3rdparty/tiff-3.9.4/tif_packbits.c	/^PackBitsEncode(TIFF* tif, tidata_t buf, tsize_t cc, tsample_t s)$/;"	f	file:
PackBitsEncodeChunk	3rdparty/tiff-3.9.4/tif_packbits.c	/^PackBitsEncodeChunk(TIFF* tif, tidata_t bp, tsize_t cc, tsample_t s)$/;"	f	file:
PackBitsPostEncode	3rdparty/tiff-3.9.4/tif_packbits.c	/^PackBitsPostEncode(TIFF* tif)$/;"	f	file:
PackBitsPreEncode	3rdparty/tiff-3.9.4/tif_packbits.c	/^PackBitsPreEncode(TIFF* tif, tsample_t s)$/;"	f	file:
PackedColor	3rdparty/ilmbase-1.0.2/ImathColor.h	/^typedef unsigned int		PackedColor;$/;"	t	namespace:Imath
Packing	3rdparty/openexr-1.7.0/ImfTimeCode.h	/^    enum Packing$/;"	g	class:Imf::TimeCode
Paraboloid	shapes/paraboloid.cpp	/^Paraboloid::Paraboloid(const Transform *o2w, const Transform *w2o, bool ro,$/;"	f	class:Paraboloid
Paraboloid	shapes/paraboloid.h	/^class Paraboloid : public Shape {$/;"	c
Param	3rdparty/tiff-3.9.4/tif_fax3.h	/^	uint32	Param;		\/* unsigned 32-bit run length in bits *\/$/;"	m	struct:__anon46
ParamArray	core/pbrtparse.cpp	/^    ParamArray() {$/;"	f	struct:ParamArray
ParamArray	core/pbrtparse.cpp	/^struct ParamArray {$/;"	s	file:
ParamListItem	core/pbrtparse.cpp	/^    ParamListItem(const char *t, ParamArray *array) {$/;"	f	struct:ParamListItem
ParamListItem	core/pbrtparse.cpp	/^struct ParamListItem {$/;"	s	file:
ParamSet	core/paramset.h	/^    ParamSet() { }$/;"	f	class:ParamSet
ParamSet	core/paramset.h	/^class ParamSet {$/;"	c
ParamSetItem	core/paramset.h	/^ParamSetItem<T>::ParamSetItem(const string &n, const T *v, int ni) {$/;"	f	class:ParamSetItem
ParamSetItem	core/paramset.h	/^template <typename T> struct ParamSetItem : public ReferenceCounted {$/;"	s
ParseFile	core/parser.cpp	/^bool ParseFile(const string &filename) {$/;"	f
ParseUnsupportedBumpModifier	tools/obj2pbrt.cpp	/^void ParseUnsupportedBumpModifier(const char *&token, std::stringstream &err) {$/;"	f	namespace:tinyobj
Pass	3rdparty/tiff-3.9.4/mkg3states.c	/^static struct proto Pass[] = {$/;"	v	typeref:struct:proto	file:
PathIntegrator	integrators/path.h	/^    PathIntegrator(int md) { maxDepth = md; }$/;"	f	class:PathIntegrator
PathIntegrator	integrators/path.h	/^class PathIntegrator : public SurfaceIntegrator {$/;"	c
PathL	renderers/metropolis.cpp	/^Spectrum MetropolisRenderer::PathL(const MLTSample &sample,$/;"	f	class:MetropolisRenderer
PathSample	renderers/metropolis.cpp	/^struct PathSample {$/;"	s	file:
PathVertex	renderers/metropolis.cpp	/^struct PathVertex {$/;"	s	file:
Pdf	core/light.cpp	/^float ShapeSet::Pdf(const Point &p) const {$/;"	f	class:ShapeSet
Pdf	core/light.cpp	/^float ShapeSet::Pdf(const Point &p, const Vector &wi) const {$/;"	f	class:ShapeSet
Pdf	core/montecarlo.h	/^    float Pdf(float u, float v) const {$/;"	f	struct:Distribution2D
Pdf	core/reflection.cpp	/^float Anisotropic::Pdf(const Vector &wo, const Vector &wi) const {$/;"	f	class:Anisotropic
Pdf	core/reflection.cpp	/^float BRDFToBTDF::Pdf(const Vector &wo,$/;"	f	class:BRDFToBTDF
Pdf	core/reflection.cpp	/^float BSDF::Pdf(const Vector &woW, const Vector &wiW,$/;"	f	class:BSDF
Pdf	core/reflection.cpp	/^float Blinn::Pdf(const Vector &wo, const Vector &wi) const {$/;"	f	class:Blinn
Pdf	core/reflection.cpp	/^float BxDF::Pdf(const Vector &wo, const Vector &wi) const {$/;"	f	class:BxDF
Pdf	core/reflection.cpp	/^float FresnelBlend::Pdf(const Vector &wo, const Vector &wi) const {$/;"	f	class:FresnelBlend
Pdf	core/reflection.cpp	/^float Microfacet::Pdf(const Vector &wo, const Vector &wi) const {$/;"	f	class:Microfacet
Pdf	core/reflection.h	/^    float Pdf(const Vector &wo, const Vector &wi) const {$/;"	f	class:SpecularReflection
Pdf	core/reflection.h	/^    float Pdf(const Vector &wo, const Vector &wi) const {$/;"	f	class:SpecularTransmission
Pdf	core/shape.cpp	/^float Shape::Pdf(const Point &p, const Vector &wi) const {$/;"	f	class:Shape
Pdf	core/shape.h	/^    virtual float Pdf(const Point &Pshape) const {$/;"	f	class:Shape
Pdf	lights/diffuse.cpp	/^float DiffuseAreaLight::Pdf(const Point &p, const Vector &wi) const {$/;"	f	class:DiffuseAreaLight
Pdf	lights/distant.cpp	/^float DistantLight::Pdf(const Point &, const Vector &) const {$/;"	f	class:DistantLight
Pdf	lights/goniometric.cpp	/^float GonioPhotometricLight::Pdf(const Point &, const Vector &) const {$/;"	f	class:GonioPhotometricLight
Pdf	lights/infinite.cpp	/^float InfiniteAreaLight::Pdf(const Point &, const Vector &w) const {$/;"	f	class:InfiniteAreaLight
Pdf	lights/point.cpp	/^float PointLight::Pdf(const Point &, const Vector &) const {$/;"	f	class:PointLight
Pdf	lights/projection.cpp	/^float ProjectionLight::Pdf(const Point &, const Vector &) const {$/;"	f	class:ProjectionLight
Pdf	lights/spot.cpp	/^float SpotLight::Pdf(const Point &, const Vector &) const {$/;"	f	class:SpotLight
Pdf	shapes/sphere.cpp	/^float Sphere::Pdf(const Point &p, const Vector &wi) const {$/;"	f	class:Sphere
PermutedHalton	core/montecarlo.cpp	/^PermutedHalton::PermutedHalton(uint32_t d, RNG &rng) {$/;"	f	class:PermutedHalton
PermutedHalton	core/montecarlo.h	/^class PermutedHalton {$/;"	c
PermutedRadicalInverse	core/montecarlo.h	/^inline double PermutedRadicalInverse(uint32_t n, uint32_t base,$/;"	f
Perspective	core/transform.cpp	/^Transform Perspective(float fov, float n, float f) {$/;"	f
PerspectiveCamera	cameras/perspective.cpp	/^PerspectiveCamera:: PerspectiveCamera(const AnimatedTransform &cam2world,$/;"	f	class:PerspectiveCamera
PerspectiveCamera	cameras/perspective.h	/^class PerspectiveCamera : public ProjectiveCamera {$/;"	c
PhaseHG	core/volume.cpp	/^float PhaseHG(const Vector &w, const Vector &wp, float g) {$/;"	f
PhaseIsotropic	core/volume.cpp	/^float PhaseIsotropic(const Vector &, const Vector &) {$/;"	f
PhaseMieHazy	core/volume.cpp	/^float PhaseMieHazy(const Vector &w, const Vector &wp) {$/;"	f
PhaseMieMurky	core/volume.cpp	/^float PhaseMieMurky(const Vector &w, const Vector &wp) {$/;"	f
PhaseRayleigh	core/volume.cpp	/^float PhaseRayleigh(const Vector &w, const Vector &wp) {$/;"	f
PhaseSchlick	core/volume.cpp	/^float PhaseSchlick(const Vector &w, const Vector &wp, float g) {$/;"	f
Photon	integrators/photonmap.cpp	/^    Photon() { }$/;"	f	struct:Photon
Photon	integrators/photonmap.cpp	/^    Photon(const Point &pp, const Spectrum &wt, const Vector &w)$/;"	f	struct:Photon
Photon	integrators/photonmap.cpp	/^struct Photon {$/;"	s	file:
PhotonIntegrator	integrators/photonmap.cpp	/^PhotonIntegrator::PhotonIntegrator(int ncaus, int nind,$/;"	f	class:PhotonIntegrator
PhotonIntegrator	integrators/photonmap.h	/^class PhotonIntegrator : public SurfaceIntegrator {$/;"	c
PhotonProcess	integrators/photonmap.cpp	/^PhotonProcess::PhotonProcess(uint32_t mp, ClosePhoton *buf) {$/;"	f	class:PhotonProcess
PhotonProcess	integrators/photonmap.cpp	/^struct PhotonProcess {$/;"	s	file:
PhotonShootingTask	integrators/photonmap.cpp	/^    PhotonShootingTask(int tn, float ti, Mutex &m, PhotonIntegrator *in,$/;"	f	class:PhotonShootingTask
PhotonShootingTask	integrators/photonmap.cpp	/^class PhotonShootingTask : public Task {$/;"	c	file:
PickContigCase	3rdparty/tiff-3.9.4/tif_getimage.c	/^PickContigCase(TIFFRGBAImage* img)$/;"	f	file:
PickSeparateCase	3rdparty/tiff-3.9.4/tif_getimage.c	/^PickSeparateCase(TIFFRGBAImage* img)$/;"	f	file:
PixarLogCleanup	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^PixarLogCleanup(TIFF* tif)$/;"	f	file:
PixarLogClose	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^PixarLogClose(TIFF* tif)$/;"	f	file:
PixarLogDecode	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^PixarLogDecode(TIFF* tif, tidata_t op, tsize_t occ, tsample_t s)$/;"	f	file:
PixarLogEncode	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^PixarLogEncode(TIFF* tif, tidata_t bp, tsize_t cc, tsample_t s)$/;"	f	file:
PixarLogGuessDataFmt	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^PixarLogGuessDataFmt(TIFFDirectory *td)$/;"	f	file:
PixarLogMakeTables	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^PixarLogMakeTables(PixarLogState *sp)$/;"	f	file:
PixarLogPostEncode	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^PixarLogPostEncode(TIFF* tif)$/;"	f	file:
PixarLogPreDecode	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^PixarLogPreDecode(TIFF* tif, tsample_t s)$/;"	f	file:
PixarLogPreEncode	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^PixarLogPreEncode(TIFF* tif, tsample_t s)$/;"	f	file:
PixarLogSetupDecode	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^PixarLogSetupDecode(TIFF* tif)$/;"	f	file:
PixarLogSetupEncode	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^PixarLogSetupEncode(TIFF* tif)$/;"	f	file:
PixarLogState	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^} PixarLogState;$/;"	t	typeref:struct:__anon57	file:
PixarLogVGetField	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^PixarLogVGetField(TIFF* tif, ttag_t tag, va_list ap)$/;"	f	file:
PixarLogVSetField	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^PixarLogVSetField(TIFF* tif, ttag_t tag, va_list ap)$/;"	f	file:
Pixel	film/image.h	/^        Pixel() {$/;"	f	struct:ImageFilm::Pixel
Pixel	film/image.h	/^    struct Pixel {$/;"	s	class:ImageFilm
PixelType	3rdparty/openexr-1.7.0/ImfPixelType.h	/^enum PixelType$/;"	g	namespace:Imf
PizCompressor	3rdparty/openexr-1.7.0/ImfPizCompressor.cpp	/^PizCompressor::PizCompressor$/;"	f	class:Imf::PizCompressor
PizCompressor	3rdparty/openexr-1.7.0/ImfPizCompressor.h	/^class PizCompressor: public Compressor$/;"	c	namespace:Imf
PlanarMapping2D	core/texture.h	/^    PlanarMapping2D(const Vector &vv1, const Vector &vv2,$/;"	f	class:PlanarMapping2D
PlanarMapping2D	core/texture.h	/^class PlanarMapping2D : public TextureMapping2D {$/;"	c
Plane3	3rdparty/ilmbase-1.0.2/ImathPlane.h	/^    Plane3() {}$/;"	f	class:Imath::Plane3
Plane3	3rdparty/ilmbase-1.0.2/ImathPlane.h	/^class Plane3$/;"	c	namespace:Imath
Plane3	3rdparty/ilmbase-1.0.2/ImathPlane.h	/^inline Plane3<T>::Plane3(const Vec3<T> &n, T d)$/;"	f	class:Imath::Plane3
Plane3	3rdparty/ilmbase-1.0.2/ImathPlane.h	/^inline Plane3<T>::Plane3(const Vec3<T> &p, const Vec3<T> &n)$/;"	f	class:Imath::Plane3
Plane3	3rdparty/ilmbase-1.0.2/ImathPlane.h	/^inline Plane3<T>::Plane3(const Vec3<T> &p0,$/;"	f	class:Imath::Plane3
Plane3d	3rdparty/ilmbase-1.0.2/ImathPlane.h	/^typedef Plane3<double> Plane3d;$/;"	t	namespace:Imath
Plane3f	3rdparty/ilmbase-1.0.2/ImathPlane.h	/^typedef Plane3<float> Plane3f;$/;"	t	namespace:Imath
PlasticMaterial	materials/plastic.h	/^    PlasticMaterial(Reference<Texture<Spectrum> > kd,$/;"	f	class:PlasticMaterial
PlasticMaterial	materials/plastic.h	/^class PlasticMaterial : public Material {$/;"	c
PlyElement	tools/ply.h	/^typedef struct PlyElement {     \/* description of an element *\/$/;"	s
PlyElement	tools/ply.h	/^} PlyElement;$/;"	t	typeref:struct:PlyElement
PlyFile	tools/ply.h	/^typedef struct PlyFile {        \/* description of PLY file *\/$/;"	s
PlyFile	tools/ply.h	/^} PlyFile;$/;"	t	typeref:struct:PlyFile
PlyOtherElems	tools/ply.h	/^typedef struct PlyOtherElems {  \/* "other" elements, not interpreted by user *\/$/;"	s
PlyOtherElems	tools/ply.h	/^} PlyOtherElems;$/;"	t	typeref:struct:PlyOtherElems
PlyOtherProp	tools/ply.h	/^typedef struct PlyOtherProp {   \/* describes other properties in an element *\/$/;"	s
PlyOtherProp	tools/ply.h	/^} PlyOtherProp;$/;"	t	typeref:struct:PlyOtherProp
PlyPropRules	tools/ply.h	/^typedef struct PlyPropRules {   \/* rules for combining "other" properties *\/$/;"	s
PlyPropRules	tools/ply.h	/^} PlyPropRules;$/;"	t	typeref:struct:PlyPropRules
PlyProperty	tools/ply.h	/^typedef struct PlyProperty {    \/* description of a property *\/$/;"	s
PlyProperty	tools/ply.h	/^} PlyProperty;$/;"	t	typeref:struct:PlyProperty
PlyRuleList	tools/ply.h	/^typedef struct PlyRuleList {$/;"	s
PlyRuleList	tools/ply.h	/^} PlyRuleList;$/;"	t	typeref:struct:PlyRuleList
Point	core/geometry.h	/^    Point() { x = y = z = 0.f; }$/;"	f	class:Point
Point	core/geometry.h	/^    Point(const Point &p) {$/;"	f	class:Point
Point	core/geometry.h	/^    Point(float xx, float yy, float zz)$/;"	f	class:Point
Point	core/geometry.h	/^class Point {$/;"	c
PointLight	lights/point.cpp	/^PointLight::PointLight(const Transform &light2world,$/;"	f	class:PointLight
PointLight	lights/point.h	/^class PointLight : public Light {$/;"	c
PoissonCheck	renderers/surfacepoints.cpp	/^    PoissonCheck(float md, const Point &pt)$/;"	f	struct:PoissonCheck
PoissonCheck	renderers/surfacepoints.cpp	/^struct PoissonCheck {$/;"	s	file:
Pos	3rdparty/zlib-1.2.5/deflate.h	/^typedef ush Pos;$/;"	t
Posf	3rdparty/zlib-1.2.5/deflate.h	/^typedef Pos FAR Posf;$/;"	t
Post	core/parallel.cpp	/^void Semaphore::Post(int count) {$/;"	f	class:Semaphore
Pow	core/spectrum.h	/^Pow(const CoefficientSpectrum<nSamples> &s, float e) {$/;"	f
Power	lights/diffuse.cpp	/^Spectrum DiffuseAreaLight::Power(const Scene *) const {$/;"	f	class:DiffuseAreaLight
Power	lights/distant.cpp	/^Spectrum DistantLight::Power(const Scene *scene) const {$/;"	f	class:DistantLight
Power	lights/goniometric.cpp	/^Spectrum GonioPhotometricLight::Power(const Scene *) const {$/;"	f	class:GonioPhotometricLight
Power	lights/infinite.cpp	/^Spectrum InfiniteAreaLight::Power(const Scene *scene) const {$/;"	f	class:InfiniteAreaLight
Power	lights/point.cpp	/^Spectrum PointLight::Power(const Scene *) const {$/;"	f	class:PointLight
Power	lights/projection.cpp	/^Spectrum ProjectionLight::Power(const Scene *) const {$/;"	f	class:ProjectionLight
Power	lights/spot.cpp	/^Spectrum SpotLight::Power(const Scene *) const {$/;"	f	class:SpotLight
PowerHeuristic	core/montecarlo.h	/^inline float PowerHeuristic(int nf, float fPdf, int ng, float gPdf) {$/;"	f
PredictorDecodeRow	3rdparty/tiff-3.9.4/tif_predict.c	/^PredictorDecodeRow(TIFF* tif, tidata_t op0, tsize_t occ0, tsample_t s)$/;"	f	file:
PredictorDecodeTile	3rdparty/tiff-3.9.4/tif_predict.c	/^PredictorDecodeTile(TIFF* tif, tidata_t op0, tsize_t occ0, tsample_t s)$/;"	f	file:
PredictorEncodeRow	3rdparty/tiff-3.9.4/tif_predict.c	/^PredictorEncodeRow(TIFF* tif, tidata_t bp, tsize_t cc, tsample_t s)$/;"	f	file:
PredictorEncodeTile	3rdparty/tiff-3.9.4/tif_predict.c	/^PredictorEncodeTile(TIFF* tif, tidata_t bp0, tsize_t cc0, tsample_t s)$/;"	f	file:
PredictorPrintDir	3rdparty/tiff-3.9.4/tif_predict.c	/^PredictorPrintDir(TIFF* tif, FILE* fd, long flags)$/;"	f	file:
PredictorSetup	3rdparty/tiff-3.9.4/tif_predict.c	/^PredictorSetup(TIFF* tif)$/;"	f	file:
PredictorSetupDecode	3rdparty/tiff-3.9.4/tif_predict.c	/^PredictorSetupDecode(TIFF* tif)$/;"	f	file:
PredictorSetupEncode	3rdparty/tiff-3.9.4/tif_predict.c	/^PredictorSetupEncode(TIFF* tif)$/;"	f	file:
PredictorState	3rdparty/tiff-3.9.4/tif_predict.c	/^#define	PredictorState(/;"	d	file:
PredictorVGetField	3rdparty/tiff-3.9.4/tif_predict.c	/^PredictorVGetField(TIFF* tif, ttag_t tag, va_list ap)$/;"	f	file:
PredictorVSetField	3rdparty/tiff-3.9.4/tif_predict.c	/^PredictorVSetField(TIFF* tif, ttag_t tag, va_list ap)$/;"	f	file:
Preprocess	core/integrator.h	/^    virtual void Preprocess(const Scene *scene, const Camera *camera,$/;"	f	class:Integrator
Preprocess	integrators/diffuseprt.cpp	/^void DiffusePRTIntegrator::Preprocess(const Scene *scene,$/;"	f	class:DiffusePRTIntegrator
Preprocess	integrators/dipolesubsurface.cpp	/^void DipoleSubsurfaceIntegrator::Preprocess(const Scene *scene,$/;"	f	class:DipoleSubsurfaceIntegrator
Preprocess	integrators/glossyprt.cpp	/^void GlossyPRTIntegrator::Preprocess(const Scene *scene,$/;"	f	class:GlossyPRTIntegrator
Preprocess	integrators/igi.cpp	/^void IGIIntegrator::Preprocess(const Scene *scene, const Camera *camera,$/;"	f	class:IGIIntegrator
Preprocess	integrators/irradiancecache.cpp	/^void IrradianceCacheIntegrator::Preprocess(const Scene *scene,$/;"	f	class:IrradianceCacheIntegrator
Preprocess	integrators/photonmap.cpp	/^void PhotonIntegrator::Preprocess(const Scene *scene,$/;"	f	class:PhotonIntegrator
PreviewImage	3rdparty/openexr-1.7.0/ImfPreviewImage.cpp	/^PreviewImage::PreviewImage (const PreviewImage &other):$/;"	f	class:Imf::PreviewImage
PreviewImage	3rdparty/openexr-1.7.0/ImfPreviewImage.cpp	/^PreviewImage::PreviewImage (unsigned int width,$/;"	f	class:Imf::PreviewImage
PreviewImage	3rdparty/openexr-1.7.0/ImfPreviewImage.h	/^class PreviewImage$/;"	c	namespace:Imf
PreviewImageAttribute	3rdparty/openexr-1.7.0/ImfPreviewImageAttribute.h	/^typedef TypedAttribute<PreviewImage> PreviewImageAttribute;$/;"	t	namespace:Imf
PreviewRgba	3rdparty/openexr-1.7.0/ImfPreviewImage.h	/^    PreviewRgba (unsigned char r = 0,$/;"	f	struct:Imf::PreviewRgba
PreviewRgba	3rdparty/openexr-1.7.0/ImfPreviewImage.h	/^struct PreviewRgba$/;"	s	namespace:Imf
Primitive	core/primitive.h	/^    Primitive() : primitiveId(nextprimitiveId++) { }$/;"	f	class:Primitive
Primitive	core/primitive.h	/^class Primitive : public ReferenceCounted {$/;"	c
Print	core/spectrum.h	/^    void Print(FILE *f) const {$/;"	f	class:CoefficientSpectrum
Print	core/transform.cpp	/^void Transform::Print(FILE *f) const {$/;"	f	class:Transform
Print	core/transform.h	/^    void Print(FILE *f) const {$/;"	f	struct:Matrix4x4
ProbesCleanup	core/probes.cpp	/^void ProbesCleanup() {$/;"	f
ProbesCleanup	core/probes.h	/^inline void ProbesCleanup() { }$/;"	f
ProbesPrint	core/probes.cpp	/^void ProbesPrint(FILE *dest) {$/;"	f
ProbesPrint	core/probes.h	/^inline void ProbesPrint(FILE *) { }$/;"	f
ProbesPrintVal	core/probes.cpp	/^static void ProbesPrintVal(FILE *f, const StatsCounterType &v) {$/;"	f	file:
ProbesPrintVal	core/probes.cpp	/^static void ProbesPrintVal(FILE *f, const StatsCounterType &v1,$/;"	f	file:
ProgressReporter	core/progressreporter.cpp	/^ProgressReporter::ProgressReporter(int tw, const string &title, int barLength)$/;"	f	class:ProgressReporter
ProgressReporter	core/progressreporter.h	/^class ProgressReporter {$/;"	c
Projection	lights/projection.cpp	/^Spectrum ProjectionLight::Projection(const Vector &w) const {$/;"	f	class:ProjectionLight
ProjectionLight	lights/projection.cpp	/^ProjectionLight::ProjectionLight(const Transform &light2world,$/;"	f	class:ProjectionLight
ProjectionLight	lights/projection.h	/^class ProjectionLight : public Light {$/;"	c
ProjectiveCamera	core/camera.cpp	/^ProjectiveCamera::ProjectiveCamera(const AnimatedTransform &cam2world,$/;"	f	class:ProjectiveCamera
ProjectiveCamera	core/camera.h	/^class ProjectiveCamera : public Camera {$/;"	c
PutNextCode	3rdparty/tiff-3.9.4/tif_lzw.c	/^#define	PutNextCode(/;"	d	file:
Pxr24Compressor	3rdparty/openexr-1.7.0/ImfPxr24Compressor.cpp	/^Pxr24Compressor::Pxr24Compressor (const Header &hdr,$/;"	f	class:Imf::Pxr24Compressor
Pxr24Compressor	3rdparty/openexr-1.7.0/ImfPxr24Compressor.h	/^class Pxr24Compressor: public Compressor$/;"	c	namespace:Imf
QUAD	shapes/hyperboloid.cpp	/^#define QUAD(/;"	d	file:
QUAD	shapes/hyperboloid.cpp	/^#undef QUAD$/;"	d	file:
Quadratic	core/pbrt.h	/^inline bool Quadratic(float A, float B, float C, float *t0, float *t1) {$/;"	f
Quat	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^Quat<T>::Quat (): r (1), v (0, 0, 0)$/;"	f	class:Imath::Quat
Quat	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^Quat<T>::Quat (T s, T i, T j, T k): r (s), v (i, j, k)$/;"	f	class:Imath::Quat
Quat	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^Quat<T>::Quat (T s, Vec3<T> d): r (s), v (d)$/;"	f	class:Imath::Quat
Quat	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^Quat<T>::Quat (const Quat<S> &q): r (q.r), v (q.v)$/;"	f	class:Imath::Quat
Quat	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^class Quat$/;"	c	namespace:Imath
Quatd	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^typedef Quat<double>	Quatd;$/;"	t	namespace:Imath
Quaternion	core/quaternion.cpp	/^Quaternion::Quaternion(const Transform &t) {$/;"	f	class:Quaternion
Quaternion	core/quaternion.h	/^    Quaternion() { v = Vector(0., 0., 0.); w = 1.f; }$/;"	f	struct:Quaternion
Quaternion	core/quaternion.h	/^struct Quaternion {$/;"	s
Quatf	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^typedef Quat<float>	Quatf;$/;"	t	namespace:Imath
R	core/reflection.h	/^    Spectrum R;$/;"	m	class:Lambertian
R	core/reflection.h	/^    Spectrum R;$/;"	m	class:Microfacet
R	core/reflection.h	/^    Spectrum R;$/;"	m	class:OrenNayar
R	core/reflection.h	/^    Spectrum R;$/;"	m	class:SpecularReflection
R	core/transform.h	/^    Quaternion R[2];$/;"	m	class:AnimatedTransform
RANDOM_RULE	tools/ply.h	/^#define RANDOM_RULE /;"	d
RANDOM_Y	3rdparty/openexr-1.7.0/ImfLineOrder.h	/^    RANDOM_Y = 2,       \/\/ only for tiled files; tiles are written$/;"	e	enum:Imf::LineOrder
RATIO	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^#define  RATIO	/;"	d	file:
RAW	core/targa.c	/^typedef enum { RAW, RLE } packet_type;$/;"	e	enum:__anon85	file:
RBRACK	core/pbrtparse.cpp	/^     RBRACK = 262,$/;"	e	enum:yytokentype	file:
RBRACK	core/pbrtparse.hh	/^     RBRACK = 262,$/;"	e	enum:yytokentype
READ	core/parallel.h	/^enum RWMutexLockType { READ, WRITE };$/;"	e	enum:RWMutexLockType
READ	core/targa.c	/^    #define READ(/;"	d	file:
READ	core/targa.c	/^    #undef READ$/;"	d	file:
READ16	core/targa.c	/^    #define READ16(/;"	d	file:
READ16	core/targa.c	/^    #undef READ16$/;"	d	file:
REJECT	core/pbrtlex.cpp	/^#define REJECT /;"	d	file:
REMAP	core/reflection.cpp	/^#define REMAP(/;"	d	file:
REMAP	core/reflection.cpp	/^#undef REMAP$/;"	d	file:
RENDERER	core/pbrtparse.cpp	/^     RENDERER = 286,$/;"	e	enum:yytokentype	file:
RENDERER	core/pbrtparse.hh	/^     RENDERER = 286,$/;"	e	enum:yytokentype
REPEAT	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^#define REPEAT(/;"	d	file:
REPEAT2	3rdparty/tiff-3.9.4/tif_getimage.c	/^#define	REPEAT2(/;"	d	file:
REPEAT4	3rdparty/tiff-3.9.4/tif_getimage.c	/^#define	REPEAT4(/;"	d	file:
REPEAT4	3rdparty/tiff-3.9.4/tif_predict.c	/^#define REPEAT4(/;"	d	file:
REPEAT8	3rdparty/tiff-3.9.4/tif_getimage.c	/^#define	REPEAT8(/;"	d	file:
REPLACE_EXC	3rdparty/ilmbase-1.0.2/IexMacros.h	/^#define REPLACE_EXC(/;"	d
REPZ_11_138	3rdparty/zlib-1.2.5/trees.c	/^#define REPZ_11_138 /;"	d	file:
REPZ_3_10	3rdparty/zlib-1.2.5/trees.c	/^#define REPZ_3_10 /;"	d	file:
REP_3_6	3rdparty/zlib-1.2.5/trees.c	/^#define REP_3_6 /;"	d	file:
RESTORE	3rdparty/zlib-1.2.5/infback.c	/^#define RESTORE(/;"	d	file:
RESTORE	3rdparty/zlib-1.2.5/inflate.c	/^#define RESTORE(/;"	d	file:
RESUNIT_CENTIMETER	3rdparty/tiff-3.9.4/tiff.h	/^#define	    RESUNIT_CENTIMETER	/;"	d
RESUNIT_INCH	3rdparty/tiff-3.9.4/tiff.h	/^#define	    RESUNIT_INCH	/;"	d
RESUNIT_NONE	3rdparty/tiff-3.9.4/tiff.h	/^#define	    RESUNIT_NONE	/;"	d
REV	3rdparty/zlib-1.2.5/crc32.c	/^#  define REV(/;"	d	file:
REVERSE	3rdparty/zlib-1.2.5/inflate.c	/^#define REVERSE(/;"	d	file:
REVERSEORIENTATION	core/pbrtparse.cpp	/^     REVERSEORIENTATION = 287,$/;"	e	enum:yytokentype	file:
REVERSEORIENTATION	core/pbrtparse.hh	/^     REVERSEORIENTATION = 287,$/;"	e	enum:yytokentype
RGB2SpectLambda	core/spectrum.cpp	/^const float RGB2SpectLambda[nRGB2SpectSamples] = {$/;"	v
RGBAtoYCA	3rdparty/openexr-1.7.0/ImfRgbaYca.cpp	/^RGBAtoYCA (const V3f &yw,$/;"	f	namespace:Imf::RgbaYca
RGBIllum2SpectBlue	core/spectrum.cpp	/^const float RGBIllum2SpectBlue[nRGB2SpectSamples] =  {$/;"	v
RGBIllum2SpectCyan	core/spectrum.cpp	/^const float RGBIllum2SpectCyan[nRGB2SpectSamples] =  {$/;"	v
RGBIllum2SpectGreen	core/spectrum.cpp	/^const float RGBIllum2SpectGreen[nRGB2SpectSamples] =  {$/;"	v
RGBIllum2SpectMagenta	core/spectrum.cpp	/^const float RGBIllum2SpectMagenta[nRGB2SpectSamples] =  {$/;"	v
RGBIllum2SpectRed	core/spectrum.cpp	/^const float RGBIllum2SpectRed[nRGB2SpectSamples] =  {$/;"	v
RGBIllum2SpectWhite	core/spectrum.cpp	/^const float RGBIllum2SpectWhite[nRGB2SpectSamples] =     {$/;"	v
RGBIllum2SpectYellow	core/spectrum.cpp	/^const float RGBIllum2SpectYellow[nRGB2SpectSamples] =  {$/;"	v
RGBRefl2SpectBlue	core/spectrum.cpp	/^const float RGBRefl2SpectBlue[nRGB2SpectSamples] =   {$/;"	v
RGBRefl2SpectCyan	core/spectrum.cpp	/^const float RGBRefl2SpectCyan[nRGB2SpectSamples] =   {$/;"	v
RGBRefl2SpectGreen	core/spectrum.cpp	/^const float RGBRefl2SpectGreen[nRGB2SpectSamples] =   {$/;"	v
RGBRefl2SpectMagenta	core/spectrum.cpp	/^const float RGBRefl2SpectMagenta[nRGB2SpectSamples] =  {$/;"	v
RGBRefl2SpectRed	core/spectrum.cpp	/^const float RGBRefl2SpectRed[nRGB2SpectSamples] =   {$/;"	v
RGBRefl2SpectWhite	core/spectrum.cpp	/^const float RGBRefl2SpectWhite[nRGB2SpectSamples] =       {$/;"	v
RGBRefl2SpectYellow	core/spectrum.cpp	/^const float RGBRefl2SpectYellow[nRGB2SpectSamples] =  {$/;"	v
RGBSpectrum	core/spectrum.h	/^    RGBSpectrum(const CoefficientSpectrum<3> &v)$/;"	f	class:RGBSpectrum
RGBSpectrum	core/spectrum.h	/^    RGBSpectrum(const RGBSpectrum &s, SpectrumType type = SPECTRUM_REFLECTANCE) {$/;"	f	class:RGBSpectrum
RGBSpectrum	core/spectrum.h	/^    RGBSpectrum(float v = 0.f) : CoefficientSpectrum<3>(v) { }$/;"	f	class:RGBSpectrum
RGBSpectrum	core/spectrum.h	/^class RGBSpectrum : public CoefficientSpectrum<3> {$/;"	c
RGBToXYZ	core/spectrum.h	/^inline void RGBToXYZ(const float rgb[3], float xyz[3]) {$/;"	f
RGBtoXYZ	3rdparty/openexr-1.7.0/ImfChromaticities.cpp	/^RGBtoXYZ (const Chromaticities chroma, float Y)$/;"	f	namespace:Imf
RINT	3rdparty/tiff-3.9.4/tif_color.c	/^#define RINT(/;"	d	file:
RINT	3rdparty/tiff-3.9.4/tif_color.c	/^#undef RINT$/;"	d	file:
RIPMAP_LEVELS	3rdparty/openexr-1.7.0/ImfTileDescription.h	/^    RIPMAP_LEVELS = 2,$/;"	e	enum:Imf::LevelMode
RLE	core/targa.c	/^typedef enum { RAW, RLE } packet_type;$/;"	e	enum:__anon85	file:
RLE_BIT	core/targa.c	/^    #define RLE_BIT /;"	d	file:
RLE_BIT	core/targa.c	/^    #undef RLE_BIT$/;"	d	file:
RLE_COMPRESSION	3rdparty/openexr-1.7.0/ImfCompression.h	/^    RLE_COMPRESSION = 1,	\/\/ run length encoding$/;"	e	enum:Imf::Compression
RNG	core/rng.h	/^    RNG(uint32_t seed = 5489UL) {$/;"	f	class:RNG
RNG	core/rng.h	/^class RNG {$/;"	c
ROOM	3rdparty/zlib-1.2.5/infback.c	/^#define ROOM(/;"	d	file:
ROTATE	core/pbrtparse.cpp	/^     ROTATE = 288,$/;"	e	enum:yytokentype	file:
ROTATE	core/pbrtparse.hh	/^     ROTATE = 288,$/;"	e	enum:yytokentype
ROUND_DOWN	3rdparty/openexr-1.7.0/ImfTileDescription.h	/^    ROUND_DOWN = 0,$/;"	e	enum:Imf::LevelRoundingMode
ROUND_UP	3rdparty/openexr-1.7.0/ImfTileDescription.h	/^    ROUND_UP = 1,$/;"	e	enum:Imf::LevelRoundingMode
RWMutex	core/parallel.cpp	/^RWMutex::RWMutex() {$/;"	f	class:RWMutex
RWMutex	core/parallel.h	/^class RWMutex {$/;"	c
RWMutexLock	core/parallel.cpp	/^RWMutexLock::RWMutexLock(RWMutex &m, RWMutexLockType t) : type(t), mutex(m) {$/;"	f	class:RWMutexLock
RWMutexLock	core/parallel.cpp	/^RWMutexLock::RWMutexLock(RWMutex &m, RWMutexLockType t)$/;"	f	class:RWMutexLock
RWMutexLock	core/parallel.h	/^struct RWMutexLock {$/;"	s
RWMutexLockType	core/parallel.h	/^enum RWMutexLockType { READ, WRITE };$/;"	g
RadiancePhoton	integrators/photonmap.cpp	/^    RadiancePhoton() { }$/;"	f	struct:RadiancePhoton
RadiancePhoton	integrators/photonmap.cpp	/^    RadiancePhoton(const Point &pp, const Normal &nn)$/;"	f	struct:RadiancePhoton
RadiancePhoton	integrators/photonmap.cpp	/^struct RadiancePhoton {$/;"	s	file:
RadiancePhotonProcess	integrators/photonmap.cpp	/^    RadiancePhotonProcess(const Normal &nn)$/;"	f	struct:RadiancePhotonProcess
RadiancePhotonProcess	integrators/photonmap.cpp	/^struct RadiancePhotonProcess {$/;"	s	file:
Radians	core/pbrt.h	/^inline float Radians(float deg) {$/;"	f
RadicalInverse	core/montecarlo.h	/^inline double RadicalInverse(int n, int base) {$/;"	f
Rand32	3rdparty/ilmbase-1.0.2/ImathRandom.h	/^Rand32::Rand32 (unsigned long int seed)$/;"	f	class:Imath::Rand32
Rand32	3rdparty/ilmbase-1.0.2/ImathRandom.h	/^class Rand32$/;"	c	namespace:Imath
Rand48	3rdparty/ilmbase-1.0.2/ImathRandom.h	/^Rand48::Rand48 (unsigned long int seed)$/;"	f	class:Imath::Rand48
Rand48	3rdparty/ilmbase-1.0.2/ImathRandom.h	/^class Rand48$/;"	c	namespace:Imath
RandomFloat	core/rng.cpp	/^float RNG::RandomFloat() const$/;"	f	class:RNG
RandomSampler	samplers/random.cpp	/^RandomSampler::RandomSampler(int xstart, int xend,$/;"	f	class:RandomSampler
RandomSampler	samplers/random.h	/^class RandomSampler : public Sampler {$/;"	c
RandomUInt	core/rng.cpp	/^uint32_t RNG::RandomUInt() const$/;"	f	class:RNG
RasterToCamera	core/camera.h	/^    Transform CameraToScreen, RasterToCamera;$/;"	m	class:ProjectiveCamera
RasterToScreen	core/camera.h	/^    Transform ScreenToRaster, RasterToScreen;$/;"	m	class:ProjectiveCamera
Rational	3rdparty/openexr-1.7.0/ImfRational.cpp	/^Rational::Rational (double x)$/;"	f	class:Imf::Rational
Rational	3rdparty/openexr-1.7.0/ImfRational.h	/^    Rational (): n (0), d (1) {}$/;"	f	class:Imf::Rational
Rational	3rdparty/openexr-1.7.0/ImfRational.h	/^    Rational (int n, int d): n (n), d (d) {}$/;"	f	class:Imf::Rational
Rational	3rdparty/openexr-1.7.0/ImfRational.h	/^class Rational$/;"	c	namespace:Imf
RationalAttribute	3rdparty/openexr-1.7.0/ImfRationalAttribute.h	/^typedef TypedAttribute<Rational> RationalAttribute;$/;"	t	namespace:Imf
Ray	core/geometry.h	/^    Ray() : mint(0.f), maxt(INFINITY), time(0.f), depth(0) { }$/;"	f	class:Ray
Ray	core/geometry.h	/^    Ray(const Point &origin, const Vector &direction, const Ray &parent,$/;"	f	class:Ray
Ray	core/geometry.h	/^    Ray(const Point &origin, const Vector &direction,$/;"	f	class:Ray
Ray	core/geometry.h	/^class Ray {$/;"	c
RayDifferential	core/geometry.h	/^    RayDifferential() { hasDifferentials = false; }$/;"	f	class:RayDifferential
RayDifferential	core/geometry.h	/^    RayDifferential(const Point &org, const Vector &dir, const Ray &parent,$/;"	f	class:RayDifferential
RayDifferential	core/geometry.h	/^    RayDifferential(const Point &org, const Vector &dir, float start,$/;"	f	class:RayDifferential
RayDifferential	core/geometry.h	/^    explicit RayDifferential(const Ray &ray) : Ray(ray) {$/;"	f	class:RayDifferential
RayDifferential	core/geometry.h	/^class RayDifferential : public Ray {$/;"	c
Rd	core/reflection.h	/^    Spectrum Rd, Rs;$/;"	m	class:FresnelBlend
RdIntegral	core/volume.cpp	/^static float RdIntegral(float alphap, float A) {$/;"	f	file:
RdToAlphap	core/volume.cpp	/^static float RdToAlphap(float reflectance, float A) {$/;"	f	file:
Read	core/spectrum.h	/^    bool Read(FILE *f) {$/;"	f	class:CoefficientSpectrum
ReadEXR	tools/exravg.cpp	/^static bool ReadEXR(const char *name, float *&rgba, int &xRes, int &yRes, bool &hasAlpha)$/;"	f	file:
ReadEXR	tools/exrdiff.cpp	/^static bool ReadEXR(const char *name, float *&rgba, int &xRes, int &yRes, bool &hasAlpha)$/;"	f	file:
ReadEXR	tools/exrtotiff.cpp	/^static bool ReadEXR(const char *name, float *&rgba, int &xRes, int &yRes, bool &hasAlpha)$/;"	f	file:
ReadFloatFile	core/floatfile.cpp	/^bool ReadFloatFile(const char *filename, vector<float> *values) {$/;"	f
ReadImage	core/imageio.cpp	/^RGBSpectrum *ReadImage(const string &name, int *width, int *height) {$/;"	f
ReadImageEXR	core/imageio.cpp	/^static RGBSpectrum *ReadImageEXR(const string &name, int *width, int *height) {$/;"	f	file:
ReadImagePFM	core/imageio.cpp	/^static RGBSpectrum *ReadImagePFM(const string &filename, int *xres, int *yres) {$/;"	f	file:
ReadImageTGA	core/imageio.cpp	/^static RGBSpectrum *ReadImageTGA(const string &name, int *width, int *height)$/;"	f	file:
ReadOK	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	ReadOK(/;"	d
ReadTIFF	tools/tifftoexr.cpp	/^static bool ReadTIFF(const char *name, float *&rgba, int &xRes, int &yRes,$/;"	f	file:
Redistribute2D	tools/samplepat.cpp	/^static void Redistribute2D(float samples[][2], SampleGrid &pixelGrid) {$/;"	f	file:
Reference	core/memory.h	/^    Reference(T *p = NULL) {$/;"	f	class:Reference
Reference	core/memory.h	/^    Reference(const Reference<T> &r) {$/;"	f	class:Reference
Reference	core/memory.h	/^template <typename T> class Reference {$/;"	c
ReferenceCounted	core/memory.h	/^    ReferenceCounted() { nReferences = 0; }$/;"	f	class:ReferenceCounted
ReferenceCounted	core/memory.h	/^class ReferenceCounted {$/;"	c
Refine	core/primitive.cpp	/^        Refine(vector<Reference<Primitive> > &refined)$/;"	f	class:GeometricPrimitive
Refine	core/primitive.cpp	/^void Primitive::Refine(vector<Reference<Primitive> > &refined) const {$/;"	f	class:Primitive
Refine	core/shape.cpp	/^void Shape::Refine(vector<Reference<Shape> > &refined) const {$/;"	f	class:Shape
Refine	shapes/heightfield.cpp	/^void Heightfield::Refine(vector<Reference<Shape> > &refined) const {$/;"	f	class:Heightfield
Refine	shapes/heightfield2.cpp	/^void Heightfield2::Refine(vector<Reference<Shape> > &refined) const {$/;"	f	class:Heightfield2
Refine	shapes/loopsubdiv.cpp	/^void LoopSubdiv::Refine(vector<Reference<Shape> > &refined) const {$/;"	f	class:LoopSubdiv
Refine	shapes/nurbs.cpp	/^void NURBS::Refine(vector<Reference<Shape> > &refined) const {$/;"	f	class:NURBS
Refine	shapes/trianglemesh.cpp	/^void TriangleMesh::Refine(vector<Reference<Shape> > &refined) const {$/;"	f	class:TriangleMesh
RegularHalfangleBRDF	core/reflection.h	/^    RegularHalfangleBRDF(const float *d, uint32_t nth, uint32_t ntd,$/;"	f	class:RegularHalfangleBRDF
RegularHalfangleBRDF	core/reflection.h	/^class RegularHalfangleBRDF : public BxDF {$/;"	c
RejectionSampleDisk	core/montecarlo.cpp	/^void RejectionSampleDisk(float *x, float *y, RNG &rng) {$/;"	f
ReleaseRead	core/parallel.cpp	/^RWMutex::ReleaseRead() {$/;"	f	class:RWMutex
ReleaseWrite	core/parallel.cpp	/^RWMutex::ReleaseWrite() {$/;"	f	class:RWMutex
Render	renderers/aggregatetest.cpp	/^void AggregateTest::Render(const Scene *scene) {$/;"	f	class:AggregateTest
Render	renderers/createprobes.cpp	/^void CreateRadianceProbes::Render(const Scene *scene) {$/;"	f	class:CreateRadianceProbes
Render	renderers/metropolis.cpp	/^void MetropolisRenderer::Render(const Scene *scene) {$/;"	f	class:MetropolisRenderer
Render	renderers/samplerrenderer.cpp	/^void SamplerRenderer::Render(const Scene *scene) {$/;"	f	class:SamplerRenderer
Render	renderers/surfacepoints.cpp	/^void SurfacePointsRenderer::Render(const Scene *scene) {$/;"	f	class:SurfacePointsRenderer
RenderOptions	core/api.cpp	/^RenderOptions::RenderOptions() {$/;"	f	class:RenderOptions
RenderOptions	core/api.cpp	/^struct RenderOptions {$/;"	s	file:
Renderer	core/renderer.h	/^class Renderer {$/;"	c
RendererName	core/api.cpp	/^    string RendererName;$/;"	m	struct:RenderOptions	file:
RendererParams	core/api.cpp	/^    ParamSet RendererParams;$/;"	m	struct:RenderOptions	file:
ReportResults	core/sampler.cpp	/^bool Sampler::ReportResults(Sample *samples, const RayDifferential *rays,$/;"	f	class:Sampler
ReportResults	samplers/adaptive.cpp	/^bool AdaptiveSampler::ReportResults(Sample *samples,$/;"	f	class:AdaptiveSampler
ReportUnused	core/paramset.cpp	/^void ParamSet::ReportUnused() const {$/;"	f	class:ParamSet
ReportUnused	core/paramset.h	/^    void ReportUnused() const {$/;"	f	class:TextureParams
RequestSamples	core/integrator.h	/^    virtual void RequestSamples(Sampler *sampler, Sample *sample,$/;"	f	class:Integrator
RequestSamples	integrators/diffuseprt.cpp	/^void DiffusePRTIntegrator::RequestSamples(Sampler *sampler, Sample *sample, const Scene *scene) {$/;"	f	class:DiffusePRTIntegrator
RequestSamples	integrators/dipolesubsurface.cpp	/^void DipoleSubsurfaceIntegrator::RequestSamples(Sampler *sampler, Sample *sample,$/;"	f	class:DipoleSubsurfaceIntegrator
RequestSamples	integrators/directlighting.cpp	/^void DirectLightingIntegrator::RequestSamples(Sampler *sampler,$/;"	f	class:DirectLightingIntegrator
RequestSamples	integrators/emission.cpp	/^void EmissionIntegrator::RequestSamples(Sampler *sampler, Sample *sample,$/;"	f	class:EmissionIntegrator
RequestSamples	integrators/glossyprt.cpp	/^void GlossyPRTIntegrator::RequestSamples(Sampler *sampler, Sample *sample, const Scene *scene) {$/;"	f	class:GlossyPRTIntegrator
RequestSamples	integrators/igi.cpp	/^void IGIIntegrator::RequestSamples(Sampler *sampler, Sample *sample,$/;"	f	class:IGIIntegrator
RequestSamples	integrators/irradiancecache.cpp	/^void IrradianceCacheIntegrator::RequestSamples(Sampler *sampler,$/;"	f	class:IrradianceCacheIntegrator
RequestSamples	integrators/path.cpp	/^void PathIntegrator::RequestSamples(Sampler *sampler, Sample *sample,$/;"	f	class:PathIntegrator
RequestSamples	integrators/photonmap.cpp	/^void PhotonIntegrator::RequestSamples(Sampler *sampler, Sample *sample,$/;"	f	class:PhotonIntegrator
RequestSamples	integrators/single.cpp	/^void SingleScatteringIntegrator::RequestSamples(Sampler *sampler, Sample *sample,$/;"	f	class:SingleScatteringIntegrator
RequestSamples	integrators/useprobes.cpp	/^void UseRadianceProbes::RequestSamples(Sampler *sampler, Sample *sample, const Scene *scene) {$/;"	f	class:UseRadianceProbes
ResampleWeight	core/mipmap.h	/^    struct ResampleWeight {$/;"	s	class:MIPMap
Reset	core/timer.cpp	/^void Timer::Reset()$/;"	f	class:Timer
ResetFieldBit	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	ResetFieldBit(/;"	d
ResolveFilename	core/fileutil.cpp	/^string ResolveFilename(const string &filename)$/;"	f
ReverseOrientation	core/shape.h	/^    const bool ReverseOrientation, TransformSwapsHandedness;$/;"	m	class:Shape
Rgba	3rdparty/openexr-1.7.0/ImfRgba.h	/^    Rgba () {}$/;"	f	struct:Imf::Rgba
Rgba	3rdparty/openexr-1.7.0/ImfRgba.h	/^    Rgba (half r, half g, half b, half a = 1.f): r (r), g (g), b (b), a (a) {}$/;"	f	struct:Imf::Rgba
Rgba	3rdparty/openexr-1.7.0/ImfRgba.h	/^struct Rgba$/;"	s	namespace:Imf
RgbaChannels	3rdparty/openexr-1.7.0/ImfRgba.h	/^enum RgbaChannels$/;"	g	namespace:Imf
RgbaInputFile	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaInputFile::RgbaInputFile (IStream &is, int numThreads):$/;"	f	class:Imf::RgbaInputFile
RgbaInputFile	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaInputFile::RgbaInputFile (IStream &is,$/;"	f	class:Imf::RgbaInputFile
RgbaInputFile	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaInputFile::RgbaInputFile (const char name[], int numThreads):$/;"	f	class:Imf::RgbaInputFile
RgbaInputFile	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaInputFile::RgbaInputFile (const char name[],$/;"	f	class:Imf::RgbaInputFile
RgbaInputFile	3rdparty/openexr-1.7.0/ImfRgbaFile.h	/^class RgbaInputFile$/;"	c	namespace:Imf
RgbaLut	3rdparty/openexr-1.7.0/ImfLut.h	/^RgbaLut::RgbaLut (Function f, RgbaChannels chn):$/;"	f	class:Imf::RgbaLut
RgbaLut	3rdparty/openexr-1.7.0/ImfLut.h	/^class RgbaLut$/;"	c	namespace:Imf
RgbaOutputFile	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaOutputFile::RgbaOutputFile (OStream &os,$/;"	f	class:Imf::RgbaOutputFile
RgbaOutputFile	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaOutputFile::RgbaOutputFile (const char name[],$/;"	f	class:Imf::RgbaOutputFile
RgbaOutputFile	3rdparty/openexr-1.7.0/ImfRgbaFile.h	/^class RgbaOutputFile$/;"	c	namespace:Imf
RgbaYca	3rdparty/openexr-1.7.0/ImfRgbaYca.cpp	/^namespace RgbaYca {$/;"	n	namespace:Imf	file:
RgbaYca	3rdparty/openexr-1.7.0/ImfRgbaYca.h	/^namespace RgbaYca {$/;"	n	namespace:Imf
RleCompressor	3rdparty/openexr-1.7.0/ImfRleCompressor.cpp	/^RleCompressor::RleCompressor (const Header &hdr, size_t maxScanLineSize):$/;"	f	class:Imf::RleCompressor
RleCompressor	3rdparty/openexr-1.7.0/ImfRleCompressor.h	/^class RleCompressor: public Compressor$/;"	c	namespace:Imf
Rotate	core/transform.cpp	/^Transform Rotate(float angle, const Vector &axis) {$/;"	f
RotateX	core/transform.cpp	/^Transform RotateX(float angle) {$/;"	f
RotateY	core/transform.cpp	/^Transform RotateY(float angle) {$/;"	f
RotateZ	core/transform.cpp	/^Transform RotateZ(float angle) {$/;"	f
Round2Int	core/pbrt.h	/^inline int Round2Int(float val) {$/;"	f
RoundSize	samplers/adaptive.h	/^    int RoundSize(int size) const {$/;"	f	class:AdaptiveSampler
RoundSize	samplers/bestcandidate.h	/^    int RoundSize(int size) const {$/;"	f	class:BestCandidateSampler
RoundSize	samplers/halton.h	/^    int RoundSize(int size) const { return size; }$/;"	f	class:HaltonSampler
RoundSize	samplers/lowdiscrepancy.h	/^    int RoundSize(int size) const { return RoundUpPow2(size); }$/;"	f	class:LDSampler
RoundSize	samplers/random.h	/^    int RoundSize(int sz) const { return sz; }$/;"	f	class:RandomSampler
RoundSize	samplers/stratified.h	/^    int RoundSize(int size) const { return size; }$/;"	f	class:StratifiedSampler
RoundUp	core/memory.h	/^    uint32_t RoundUp(uint32_t x) const {$/;"	f	class:BlockedArray
RoundUpPow2	core/pbrt.h	/^inline uint32_t RoundUpPow2(uint32_t v) {$/;"	f
Rs	core/reflection.h	/^    Spectrum Rd, Rs;$/;"	m	class:FresnelBlend
RuleName	tools/ply.c	/^typedef struct RuleName {$/;"	s	file:
RuleName	tools/ply.c	/^} RuleName;$/;"	t	typeref:struct:RuleName	file:
Run	integrators/irradiancecache.cpp	/^void IrradiancePrimeTask::Run() {$/;"	f	class:IrradiancePrimeTask
Run	integrators/photonmap.cpp	/^void ComputeRadianceTask::Run() {$/;"	f	class:ComputeRadianceTask
Run	integrators/photonmap.cpp	/^void PhotonShootingTask::Run() {$/;"	f	class:PhotonShootingTask
Run	renderers/createprobes.cpp	/^void CreateRadProbeTask::Run() {$/;"	f	class:CreateRadProbeTask
Run	renderers/metropolis.cpp	/^void MLTTask::Run() {$/;"	f	class:MLTTask
Run	renderers/samplerrenderer.cpp	/^void SamplerRendererTask::Run() {$/;"	f	class:SamplerRendererTask
Run	renderers/surfacepoints.cpp	/^void SurfacePointTask::Run() {$/;"	f	class:SurfacePointTask
S	core/transform.h	/^    Matrix4x4 S[2];$/;"	m	class:AnimatedTransform
SAME	core/targa.c	/^#define SAME(/;"	d	file:
SAME	core/targa.c	/^#undef SAME$/;"	d	file:
SAME_RULE	tools/ply.h	/^#define SAME_RULE /;"	d
SAMPLEFORMAT_COMPLEXIEEEFP	3rdparty/tiff-3.9.4/tiff.h	/^#define	    SAMPLEFORMAT_COMPLEXIEEEFP	/;"	d
SAMPLEFORMAT_COMPLEXINT	3rdparty/tiff-3.9.4/tiff.h	/^#define	    SAMPLEFORMAT_COMPLEXINT	/;"	d
SAMPLEFORMAT_IEEEFP	3rdparty/tiff-3.9.4/tiff.h	/^#define	    SAMPLEFORMAT_IEEEFP	/;"	d
SAMPLEFORMAT_INT	3rdparty/tiff-3.9.4/tiff.h	/^#define	    SAMPLEFORMAT_INT	/;"	d
SAMPLEFORMAT_UINT	3rdparty/tiff-3.9.4/tiff.h	/^#define	    SAMPLEFORMAT_UINT	/;"	d
SAMPLEFORMAT_VOID	3rdparty/tiff-3.9.4/tiff.h	/^#define	    SAMPLEFORMAT_VOID	/;"	d
SAMPLER	core/pbrtparse.cpp	/^     SAMPLER = 289,$/;"	e	enum:yytokentype	file:
SAMPLER	core/pbrtparse.hh	/^     SAMPLER = 289,$/;"	e	enum:yytokentype
SAMPLE_ALL_UNIFORM	integrators/directlighting.h	/^enum LightStrategy { SAMPLE_ALL_UNIFORM, SAMPLE_ONE_UNIFORM };$/;"	e	enum:LightStrategy
SAMPLE_DEPTH	integrators/path.h	/^#define SAMPLE_DEPTH /;"	d
SAMPLE_ONE_UNIFORM	integrators/directlighting.h	/^enum LightStrategy { SAMPLE_ALL_UNIFORM, SAMPLE_ONE_UNIFORM };$/;"	e	enum:LightStrategy
SAMPLE_TABLE_SIZE	samplers/bestcandidate.h	/^#define SAMPLE_TABLE_SIZE /;"	d
SAMPLE_TABLE_SIZE	tools/samplepat.cpp	/^#define SAMPLE_TABLE_SIZE /;"	d	file:
SANE_DEPTH	core/targa.c	/^#define SANE_DEPTH(/;"	d	file:
SCALE	core/pbrtparse.cpp	/^     SCALE = 290,$/;"	e	enum:yytokentype	file:
SCALE	core/pbrtparse.hh	/^     SCALE = 290,$/;"	e	enum:yytokentype
SCALE12	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^#define SCALE12 /;"	d	file:
SDEdge	shapes/loopsubdiv.cpp	/^    SDEdge(SDVertex *v0 = NULL, SDVertex *v1 = NULL) {$/;"	f	struct:SDEdge
SDEdge	shapes/loopsubdiv.cpp	/^struct SDEdge {$/;"	s	file:
SDFace	shapes/loopsubdiv.cpp	/^    SDFace() {$/;"	f	struct:SDFace
SDFace	shapes/loopsubdiv.cpp	/^struct SDFace {$/;"	s	file:
SDVertex	shapes/loopsubdiv.cpp	/^    SDVertex(Point pt = Point(0,0,0))$/;"	f	struct:SDVertex
SDVertex	shapes/loopsubdiv.cpp	/^struct SDVertex {$/;"	s	file:
SEEK_CUR	3rdparty/zlib-1.2.5/zconf.h	/^#  define SEEK_CUR /;"	d
SEEK_END	3rdparty/zlib-1.2.5/zconf.h	/^#  define SEEK_END /;"	d
SEEK_SET	3rdparty/zlib-1.2.5/zconf.h	/^#  define SEEK_SET /;"	d
SEG_AVG	core/spectrum.cpp	/^#define SEG_AVG(/;"	d	file:
SEG_AVG	core/spectrum.cpp	/^#undef SEG_AVG$/;"	d	file:
SEPARATOR	3rdparty/zlib-1.2.5/trees.c	/^#  define SEPARATOR(/;"	d	file:
SETJMP	3rdparty/tiff-3.9.4/tif_jpeg.c	/^#define SETJMP(/;"	d	file:
SETJMP	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^#define SETJMP(/;"	d	file:
SETPIXEL	3rdparty/tiff-3.9.4/tif_next.c	/^#define SETPIXEL(/;"	d	file:
SETPIXEL	3rdparty/tiff-3.9.4/tif_thunder.c	/^#define	SETPIXEL(/;"	d	file:
SETVALUE	3rdparty/tiff-3.9.4/tif_fax3.h	/^#define SETVALUE(/;"	d
SET_BINARY_MODE	3rdparty/zlib-1.2.5/minigzip.c	/^#  define SET_BINARY_MODE(/;"	d	file:
SGILOGDATAFMT_16BIT	3rdparty/tiff-3.9.4/tiff.h	/^#define     SGILOGDATAFMT_16BIT	/;"	d
SGILOGDATAFMT_8BIT	3rdparty/tiff-3.9.4/tiff.h	/^#define     SGILOGDATAFMT_8BIT	/;"	d
SGILOGDATAFMT_FLOAT	3rdparty/tiff-3.9.4/tiff.h	/^#define     SGILOGDATAFMT_FLOAT	/;"	d
SGILOGDATAFMT_RAW	3rdparty/tiff-3.9.4/tiff.h	/^#define     SGILOGDATAFMT_RAW	/;"	d
SGILOGDATAFMT_UNKNOWN	3rdparty/tiff-3.9.4/tif_luv.c	/^#define SGILOGDATAFMT_UNKNOWN	/;"	d	file:
SGILOGENCODE_NODITHER	3rdparty/tiff-3.9.4/tiff.h	/^#define     SGILOGENCODE_NODITHER	/;"	d
SGILOGENCODE_RANDITHER	3rdparty/tiff-3.9.4/tiff.h	/^#define     SGILOGENCODE_RANDITHER	/;"	d
SHAPE	core/pbrtparse.cpp	/^     SHAPE = 291,$/;"	e	enum:yytokentype	file:
SHAPE	core/pbrtparse.hh	/^     SHAPE = 291,$/;"	e	enum:yytokentype
SHComputeBSDFMatrix	core/sh.cpp	/^void SHComputeBSDFMatrix(const Spectrum &Kd, const Spectrum &Ks,$/;"	f
SHComputeDiffuseTransfer	core/sh.cpp	/^void SHComputeDiffuseTransfer(const Point &p, const Normal &n,$/;"	f
SHComputeTransferMatrix	core/sh.cpp	/^void SHComputeTransferMatrix(const Point &p, float rayEpsilon,$/;"	f
SHConvolveCosTheta	core/sh.cpp	/^void SHConvolveCosTheta(int lmax, const Spectrum *c_in,$/;"	f
SHConvolvePhong	core/sh.cpp	/^void SHConvolvePhong(int lmax, float n, const Spectrum *c_in,$/;"	f
SHEvaluate	core/sh.cpp	/^void SHEvaluate(const Vector &w, int lmax, float *out) {$/;"	f
SHIFT	3rdparty/tiff-3.9.4/tif_color.c	/^#define	SHIFT	/;"	d	file:
SHIFT	3rdparty/tiff-3.9.4/tif_color.c	/^#undef	SHIFT$/;"	d	file:
SHIndex	core/sh.h	/^inline int SHIndex(int l, int m) {$/;"	f
SHMatrixVectorMultiply	core/sh.cpp	/^void SHMatrixVectorMultiply(const Spectrum *M, const Spectrum *v,$/;"	f
SHORTEST_LONG_RUN	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^const int SHORTEST_LONG_RUN  = 2 + LONG_ZEROCODE_RUN - SHORT_ZEROCODE_RUN;$/;"	m	namespace:Imf::__anon20	file:
SHORT_ZEROCODE_RUN	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^const int SHORT_ZEROCODE_RUN = 59;$/;"	m	namespace:Imf::__anon20	file:
SHProject	core/light.cpp	/^void Light::SHProject(const Point &p, float pEpsilon, int lmax,$/;"	f	class:Light
SHProject	lights/infinite.cpp	/^void InfiniteAreaLight::SHProject(const Point &p, float pEpsilon,$/;"	f	class:InfiniteAreaLight
SHProject	lights/point.cpp	/^void PointLight::SHProject(const Point &p, float pEpsilon, int lmax,$/;"	f	class:PointLight
SHProjectCube	core/sh.h	/^void SHProjectCube(Func func, const Point &p, int res, int lmax,$/;"	f
SHProjectIncidentDirectRadiance	core/sh.cpp	/^void SHProjectIncidentDirectRadiance(const Point &p, float pEpsilon,$/;"	f
SHProjectIncidentIndirectRadiance	core/sh.cpp	/^void SHProjectIncidentIndirectRadiance(const Point &p, float pEpsilon,$/;"	f
SHReduceRinging	core/sh.cpp	/^void SHReduceRinging(Spectrum *c, int lmax, float lambda) {$/;"	f
SHRotate	core/sh.cpp	/^void SHRotate(const Spectrum *c_in, Spectrum *c_out, const Matrix4x4 &m,$/;"	f
SHRotateXMinus	core/shrots.cpp	/^void SHRotateXMinus(const Spectrum *c_in, Spectrum *c_out, int lmax) {$/;"	f
SHRotateXPlus	core/shrots.cpp	/^void SHRotateXPlus(const Spectrum *c_in, Spectrum *c_out, int lmax) {$/;"	f
SHRotateZ	core/sh.cpp	/^void SHRotateZ(const Spectrum *c_in, Spectrum *c_out, float alpha,$/;"	f
SHTerms	core/sh.h	/^inline int SHTerms(int lmax) {$/;"	f
SHWriteImage	core/sh.cpp	/^void SHWriteImage(const char *filename, const Spectrum *c, int lmax, int yres) {$/;"	f
SIGNAL	core/parallel.h	/^    enum { SIGNAL = 0, BROADCAST=1, NUM_EVENTS=2 };$/;"	e	enum:ConditionVariable::__anon83
SIZE	3rdparty/openexr-1.7.0/ImfName.h	/^    static const int	SIZE = 256;$/;"	m	class:Imf::Name
SIZEOF_INT	3rdparty/tiff-3.9.4/tif_config.h	/^#define SIZEOF_INT /;"	d
SIZEOF_INT	3rdparty/tiff-3.9.4/tif_config.vc.h	/^#define SIZEOF_INT /;"	d
SIZEOF_INT	3rdparty/tiff-3.9.4/tif_config.wince.h	/^#define SIZEOF_INT /;"	d
SIZEOF_INT	3rdparty/tiff-3.9.4/tiffconf.h	/^#define SIZEOF_INT /;"	d
SIZEOF_INT	3rdparty/tiff-3.9.4/tiffconf.vc.h	/^#define SIZEOF_INT /;"	d
SIZEOF_INT	3rdparty/tiff-3.9.4/tiffconf.wince.h	/^#define SIZEOF_INT /;"	d
SIZEOF_LONG	3rdparty/tiff-3.9.4/tif_config.h	/^#define SIZEOF_LONG /;"	d
SIZEOF_LONG	3rdparty/tiff-3.9.4/tif_config.vc.h	/^#define SIZEOF_LONG /;"	d
SIZEOF_LONG	3rdparty/tiff-3.9.4/tif_config.wince.h	/^#define SIZEOF_LONG /;"	d
SIZEOF_LONG	3rdparty/tiff-3.9.4/tiffconf.h	/^#define SIZEOF_LONG /;"	d
SIZEOF_LONG	3rdparty/tiff-3.9.4/tiffconf.vc.h	/^#define SIZEOF_LONG /;"	d
SIZEOF_LONG	3rdparty/tiff-3.9.4/tiffconf.wince.h	/^#define SIZEOF_LONG /;"	d
SIZE_OF_JPEGTABLES	3rdparty/tiff-3.9.4/tif_jpeg.c	/^#define SIZE_OF_JPEGTABLES /;"	d	file:
SIZE_OF_JPEGTABLES	3rdparty/tiff-3.9.4/tif_jpeg.c	/^#undef SIZE_OF_JPEGTABLES$/;"	d	file:
SKEW	3rdparty/tiff-3.9.4/tif_getimage.c	/^#define	SKEW(/;"	d	file:
SKEW4	3rdparty/tiff-3.9.4/tif_getimage.c	/^#define	SKEW4(/;"	d	file:
SKIP	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define SKIP /;"	d	file:
SMALLEST	3rdparty/zlib-1.2.5/trees.c	/^#define SMALLEST /;"	d	file:
SMALL_MEDIUM	3rdparty/zlib-1.2.5/zconf.h	/^#    define SMALL_MEDIUM$/;"	d
SPECTRUM_ILLUMINANT	core/spectrum.h	/^enum SpectrumType { SPECTRUM_REFLECTANCE, SPECTRUM_ILLUMINANT };$/;"	e	enum:SpectrumType
SPECTRUM_REFLECTANCE	core/spectrum.h	/^enum SpectrumType { SPECTRUM_REFLECTANCE, SPECTRUM_ILLUMINANT };$/;"	e	enum:SpectrumType
SPLIT_EQUAL_COUNTS	accelerators/bvh.h	/^    enum SplitMethod { SPLIT_MIDDLE, SPLIT_EQUAL_COUNTS, SPLIT_SAH };$/;"	e	enum:BVHAccel::SplitMethod
SPLIT_MIDDLE	accelerators/bvh.h	/^    enum SplitMethod { SPLIT_MIDDLE, SPLIT_EQUAL_COUNTS, SPLIT_SAH };$/;"	e	enum:BVHAccel::SplitMethod
SPLIT_SAH	accelerators/bvh.h	/^    enum SplitMethod { SPLIT_MIDDLE, SPLIT_EQUAL_COUNTS, SPLIT_SAH };$/;"	e	enum:BVHAccel::SplitMethod
SQR	shapes/hyperboloid.cpp	/^#define SQR(/;"	d	file:
SQR	shapes/hyperboloid.cpp	/^#undef SQR$/;"	d	file:
SQRT_SAMPLE_TABLE_SIZE	samplers/bestcandidate.h	/^#define SQRT_SAMPLE_TABLE_SIZE /;"	d
SQRT_SAMPLE_TABLE_SIZE	tools/samplepat.cpp	/^#define SQRT_SAMPLE_TABLE_SIZE /;"	d	file:
START	accelerators/kdtreeaccel.cpp	/^    enum { START, END } type;$/;"	e	enum:BoundEdge::__anon81	file:
STARTTIME	core/pbrtparse.cpp	/^     STARTTIME = 292,$/;"	e	enum:yytokentype	file:
STARTTIME	core/pbrtparse.hh	/^     STARTTIME = 292,$/;"	e	enum:yytokentype
START_TRANSFORM_BITS	core/api.cpp	/^#define START_TRANSFORM_BITS /;"	d	file:
STATE_OPTIONS_BLOCK	core/api.cpp	/^#define STATE_OPTIONS_BLOCK /;"	d	file:
STATE_UNINITIALIZED	core/api.cpp	/^#define STATE_UNINITIALIZED /;"	d	file:
STATE_WORLD_BLOCK	core/api.cpp	/^#define STATE_WORLD_BLOCK /;"	d	file:
STATIC_TREES	3rdparty/zlib-1.2.5/zutil.h	/^#define STATIC_TREES /;"	d
STB_IMAGE_WRITE_IMPLEMENTATION	core/imageio.cpp	/^#define STB_IMAGE_WRITE_IMPLEMENTATION$/;"	d	file:
STDC	3rdparty/zlib-1.2.5/zconf.h	/^#    define STDC$/;"	d
STDC	3rdparty/zlib-1.2.5/zconf.h	/^#  define STDC$/;"	d
STDC99	3rdparty/zlib-1.2.5/zconf.h	/^#      define STDC99$/;"	d
STORED	3rdparty/zlib-1.2.5/inflate.h	/^        STORED,     \/* i: waiting for stored size (length and complement) *\/$/;"	e	enum:__anon75
STORED_BLOCK	3rdparty/zlib-1.2.5/zutil.h	/^#define STORED_BLOCK /;"	d
STORE_PROP	tools/ply.c	/^#define STORE_PROP /;"	d	file:
STR	core/pbrtlex.cpp	/^#define STR /;"	d	file:
STRING	core/pbrtparse.cpp	/^     STRING = 258,$/;"	e	enum:yytokentype	file:
STRING	core/pbrtparse.hh	/^     STRING = 258,$/;"	e	enum:yytokentype
STRIPCHOP_DEFAULT	3rdparty/tiff-3.9.4/tiffconf.h	/^#define STRIPCHOP_DEFAULT /;"	d
STRIPCHOP_DEFAULT	3rdparty/tiff-3.9.4/tiffconf.vc.h	/^#define STRIPCHOP_DEFAULT /;"	d
STRIPCHOP_DEFAULT	3rdparty/tiff-3.9.4/tiffconf.wince.h	/^#define STRIPCHOP_DEFAULT /;"	d
STRIPINCR	3rdparty/tiff-3.9.4/tif_write.c	/^#define	STRIPINCR	/;"	d	file:
STRIP_SIZE_DEFAULT	3rdparty/tiff-3.9.4/tiffiop.h	/^# define STRIP_SIZE_DEFAULT /;"	d
SUBIFD_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.h	/^#define SUBIFD_SUPPORT /;"	d
SUBIFD_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.vc.h	/^#define SUBIFD_SUPPORT /;"	d
SUBIFD_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.wince.h	/^#define SUBIFD_SUPPORT /;"	d
SUFFIX_LEN	3rdparty/zlib-1.2.5/minigzip.c	/^#define SUFFIX_LEN /;"	d	file:
SURFACEINTEGRATOR	core/pbrtparse.cpp	/^     SURFACEINTEGRATOR = 293,$/;"	e	enum:yytokentype	file:
SURFACEINTEGRATOR	core/pbrtparse.hh	/^     SURFACEINTEGRATOR = 293,$/;"	e	enum:yytokentype
SWAP	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	SWAP(/;"	d	file:
SWAP	3rdparty/tiff-3.9.4/tif_fax3.c	/^#undef	SWAP$/;"	d	file:
SWAP	3rdparty/tiff-3.9.4/tif_fax3.c	/^#undef SWAP$/;"	d	file:
SYNC	3rdparty/zlib-1.2.5/inflate.h	/^    SYNC        \/* looking for synchronization bytes to restart inflate() *\/$/;"	e	enum:__anon75
SYNC_EOL	3rdparty/tiff-3.9.4/tif_fax3.h	/^#define	SYNC_EOL(/;"	d
SYS16BIT	3rdparty/zlib-1.2.5/zconf.h	/^#      define SYS16BIT$/;"	d
S_EOL	3rdparty/tiff-3.9.4/tif_fax3.h	/^#define S_EOL	/;"	d
S_Ext	3rdparty/tiff-3.9.4/tif_fax3.h	/^#define S_Ext	/;"	d
S_Horiz	3rdparty/tiff-3.9.4/tif_fax3.h	/^#define S_Horiz	/;"	d
S_MakeUp	3rdparty/tiff-3.9.4/tif_fax3.h	/^#define S_MakeUp	/;"	d
S_MakeUpB	3rdparty/tiff-3.9.4/tif_fax3.h	/^#define S_MakeUpB	/;"	d
S_MakeUpW	3rdparty/tiff-3.9.4/tif_fax3.h	/^#define S_MakeUpW	/;"	d
S_Null	3rdparty/tiff-3.9.4/tif_fax3.h	/^#define S_Null	/;"	d
S_Pass	3rdparty/tiff-3.9.4/tif_fax3.h	/^#define S_Pass	/;"	d
S_TermB	3rdparty/tiff-3.9.4/tif_fax3.h	/^#define S_TermB	/;"	d
S_TermW	3rdparty/tiff-3.9.4/tif_fax3.h	/^#define S_TermW	/;"	d
S_V0	3rdparty/tiff-3.9.4/tif_fax3.h	/^#define S_V0	/;"	d
S_VL	3rdparty/tiff-3.9.4/tif_fax3.h	/^#define S_VL	/;"	d
S_VR	3rdparty/tiff-3.9.4/tif_fax3.h	/^#define S_VR	/;"	d
SameHemisphere	core/reflection.h	/^inline bool SameHemisphere(const Vector &w, const Vector &wp) {$/;"	f
Sample	core/light.cpp	/^Point ShapeSet::Sample(const LightSample &ls, Normal *Ns) const {$/;"	f	class:ShapeSet
Sample	core/light.cpp	/^Point ShapeSet::Sample(const Point &p, const LightSample &ls,$/;"	f	class:ShapeSet
Sample	core/montecarlo.h	/^    void Sample(uint32_t n, float *out) const {$/;"	f	class:PermutedHalton
Sample	core/sampler.cpp	/^Sample::Sample(Sampler *sampler, SurfaceIntegrator *surf,$/;"	f	class:Sample
Sample	core/sampler.h	/^    Sample() { oneD = twoD = NULL; }$/;"	f	struct:Sample
Sample	core/sampler.h	/^struct Sample : public CameraSample {$/;"	s
Sample	core/shape.h	/^    virtual Point Sample(const Point &P, float u1, float u2,$/;"	f	class:Shape
Sample	core/shape.h	/^    virtual Point Sample(float u1, float u2, Normal *Ns) const {$/;"	f	class:Shape
Sample	shapes/cylinder.cpp	/^Point Cylinder::Sample(float u1, float u2, Normal *Ns) const {$/;"	f	class:Cylinder
Sample	shapes/disk.cpp	/^Point Disk::Sample(float u1, float u2, Normal *Ns) const {$/;"	f	class:Disk
Sample	shapes/sphere.cpp	/^Point Sphere::Sample(const Point &p, float u1, float u2,$/;"	f	class:Sphere
Sample	shapes/sphere.cpp	/^Point Sphere::Sample(float u1, float u2, Normal *ns) const {$/;"	f	class:Sphere
Sample	shapes/trianglemesh.cpp	/^Point Triangle::Sample(float u1, float u2, Normal *Ns) const {$/;"	f	class:Triangle
Sample02	core/montecarlo.h	/^inline void Sample02(uint32_t n, const uint32_t scramble[2],$/;"	f
SampleContinuous	core/montecarlo.h	/^    float SampleContinuous(float u, float *pdf, int *off = NULL) const {$/;"	f	struct:Distribution1D
SampleContinuous	core/montecarlo.h	/^    void SampleContinuous(float u0, float u1, float uv[2],$/;"	f	struct:Distribution2D
SampleDiscrete	core/montecarlo.h	/^    int SampleDiscrete(float u, float *pdf) const {$/;"	f	struct:Distribution1D
SampleGrid	tools/samplepat.cpp	/^typedef vector<int> SampleGrid[BC_GRID_SIZE][BC_GRID_SIZE];$/;"	t	file:
SampleHG	core/montecarlo.cpp	/^Vector SampleHG(const Vector &w, float g, float u1, float u2) {$/;"	f
Sample_L	lights/diffuse.cpp	/^Spectrum DiffuseAreaLight::Sample_L(const Point &p, float pEpsilon,$/;"	f	class:DiffuseAreaLight
Sample_L	lights/diffuse.cpp	/^Spectrum DiffuseAreaLight::Sample_L(const Scene *scene,$/;"	f	class:DiffuseAreaLight
Sample_L	lights/distant.cpp	/^Spectrum DistantLight::Sample_L(const Point &p, float pEpsilon,$/;"	f	class:DistantLight
Sample_L	lights/distant.cpp	/^Spectrum DistantLight::Sample_L(const Scene *scene,$/;"	f	class:DistantLight
Sample_L	lights/goniometric.cpp	/^Spectrum GonioPhotometricLight::Sample_L(const Point &p, float pEpsilon,$/;"	f	class:GonioPhotometricLight
Sample_L	lights/goniometric.cpp	/^Spectrum GonioPhotometricLight::Sample_L(const Scene *scene, const LightSample &ls,$/;"	f	class:GonioPhotometricLight
Sample_L	lights/infinite.cpp	/^Spectrum InfiniteAreaLight::Sample_L(const Point &p, float pEpsilon,$/;"	f	class:InfiniteAreaLight
Sample_L	lights/infinite.cpp	/^Spectrum InfiniteAreaLight::Sample_L(const Scene *scene,$/;"	f	class:InfiniteAreaLight
Sample_L	lights/point.cpp	/^Spectrum PointLight::Sample_L(const Point &p, float pEpsilon,$/;"	f	class:PointLight
Sample_L	lights/point.cpp	/^Spectrum PointLight::Sample_L(const Scene *scene, const LightSample &ls,$/;"	f	class:PointLight
Sample_L	lights/projection.cpp	/^Spectrum ProjectionLight::Sample_L(const Point &p, float pEpsilon,$/;"	f	class:ProjectionLight
Sample_L	lights/projection.cpp	/^Spectrum ProjectionLight::Sample_L(const Scene *scene, const LightSample &ls,$/;"	f	class:ProjectionLight
Sample_L	lights/spot.cpp	/^Spectrum SpotLight::Sample_L(const Point &p, float pEpsilon,$/;"	f	class:SpotLight
Sample_L	lights/spot.cpp	/^Spectrum SpotLight::Sample_L(const Scene *scene, const LightSample &ls,$/;"	f	class:SpotLight
Sample_f	core/reflection.cpp	/^Spectrum BRDFToBTDF::Sample_f(const Vector &wo, Vector *wi,$/;"	f	class:BRDFToBTDF
Sample_f	core/reflection.cpp	/^Spectrum BSDF::Sample_f(const Vector &woW, Vector *wiW,$/;"	f	class:BSDF
Sample_f	core/reflection.cpp	/^Spectrum BxDF::Sample_f(const Vector &wo, Vector *wi,$/;"	f	class:BxDF
Sample_f	core/reflection.cpp	/^Spectrum FresnelBlend::Sample_f(const Vector &wo, Vector *wi,$/;"	f	class:FresnelBlend
Sample_f	core/reflection.cpp	/^Spectrum Microfacet::Sample_f(const Vector &wo, Vector *wi,$/;"	f	class:Microfacet
Sample_f	core/reflection.cpp	/^Spectrum ScaledBxDF::Sample_f(const Vector &wo, Vector *wi,$/;"	f	class:ScaledBxDF
Sample_f	core/reflection.cpp	/^Spectrum SpecularReflection::Sample_f(const Vector &wo,$/;"	f	class:SpecularReflection
Sample_f	core/reflection.cpp	/^Spectrum SpecularTransmission::Sample_f(const Vector &wo,$/;"	f	class:SpecularTransmission
Sample_f	core/reflection.cpp	/^void Anisotropic::Sample_f(const Vector &wo, Vector *wi,$/;"	f	class:Anisotropic
Sample_f	core/reflection.cpp	/^void Blinn::Sample_f(const Vector &wo, Vector *wi, float u1, float u2,$/;"	f	class:Blinn
SampledSpectrum	core/spectrum.cpp	/^SampledSpectrum::SampledSpectrum(const RGBSpectrum &r, SpectrumType t) {$/;"	f	class:SampledSpectrum
SampledSpectrum	core/spectrum.h	/^    SampledSpectrum(const CoefficientSpectrum<nSpectralSamples> &v)$/;"	f	class:SampledSpectrum
SampledSpectrum	core/spectrum.h	/^    SampledSpectrum(float v = 0.f) {$/;"	f	class:SampledSpectrum
SampledSpectrum	core/spectrum.h	/^class SampledSpectrum : public CoefficientSpectrum<nSpectralSamples> {$/;"	c
Sampler	core/sampler.cpp	/^Sampler::Sampler(int xstart, int xend, int ystart, int yend, int spp,$/;"	f	class:Sampler
Sampler	core/sampler.h	/^class Sampler {$/;"	c
SamplerName	core/api.cpp	/^    string SamplerName;$/;"	m	struct:RenderOptions	file:
SamplerParams	core/api.cpp	/^    ParamSet SamplerParams;$/;"	m	struct:RenderOptions	file:
SamplerRenderer	renderers/samplerrenderer.cpp	/^SamplerRenderer::SamplerRenderer(Sampler *s, Camera *c,$/;"	f	class:SamplerRenderer
SamplerRenderer	renderers/samplerrenderer.h	/^class SamplerRenderer : public Renderer {$/;"	c
SamplerRendererTask	renderers/samplerrenderer.h	/^    SamplerRendererTask(const Scene *sc, Renderer *ren, Camera *c,$/;"	f	class:SamplerRendererTask
SamplerRendererTask	renderers/samplerrenderer.h	/^class SamplerRendererTask : public Task {$/;"	c
Scale	core/transform.cpp	/^Transform Scale(float x, float y, float z) {$/;"	f
Scale	lights/goniometric.h	/^    Spectrum Scale(const Vector &w) const {$/;"	f	class:GonioPhotometricLight
ScaleDifferentials	core/geometry.h	/^    void ScaleDifferentials(float s) {$/;"	f	class:RayDifferential
ScaleTexture	textures/scale.h	/^    ScaleTexture(Reference<Texture<T1> > t1, Reference<Texture<T2> > t2)$/;"	f	class:ScaleTexture
ScaleTexture	textures/scale.h	/^class ScaleTexture : public Texture<T2> {$/;"	c
ScaledBxDF	core/reflection.h	/^    ScaledBxDF(BxDF *b, const Spectrum &sc)$/;"	f	class:ScaledBxDF
ScaledBxDF	core/reflection.h	/^class ScaledBxDF : public BxDF {$/;"	c
ScanLineInputFile	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^ScanLineInputFile::ScanLineInputFile$/;"	f	class:Imf::ScanLineInputFile
ScanLineInputFile	3rdparty/openexr-1.7.0/ImfScanLineInputFile.h	/^class ScanLineInputFile$/;"	c	namespace:Imf
Scene	core/scene.cpp	/^Scene::Scene(Primitive *accel, const vector<Light *> &lts,$/;"	f	class:Scene
Scene	core/scene.h	/^class Scene {$/;"	c
SchlickFresnel	core/reflection.h	/^    Spectrum SchlickFresnel(float costheta) const {$/;"	f	class:FresnelBlend
ScreenToRaster	core/camera.h	/^    Transform ScreenToRaster, RasterToScreen;$/;"	m	class:ProjectiveCamera
Seed	core/rng.cpp	/^void RNG::Seed(uint32_t seed) const {$/;"	f	class:RNG
SeekOK	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	SeekOK(/;"	d
Semaphore	3rdparty/ilmbase-1.0.2/IlmThreadSemaphore.cpp	/^Semaphore::Semaphore (unsigned int value) {}$/;"	f	class:IlmThread::Semaphore
Semaphore	3rdparty/ilmbase-1.0.2/IlmThreadSemaphore.h	/^class Semaphore$/;"	c	namespace:IlmThread
Semaphore	3rdparty/ilmbase-1.0.2/IlmThreadSemaphorePosix.cpp	/^Semaphore::Semaphore (unsigned int value)$/;"	f	class:IlmThread::Semaphore
Semaphore	3rdparty/ilmbase-1.0.2/IlmThreadSemaphorePosixCompat.cpp	/^Semaphore::Semaphore (unsigned int value)$/;"	f	class:IlmThread::Semaphore
Semaphore	3rdparty/ilmbase-1.0.2/IlmThreadSemaphoreWin32.cpp	/^Semaphore::Semaphore (unsigned int value)$/;"	f	class:IlmThread::Semaphore
Semaphore	core/parallel.cpp	/^Semaphore::Semaphore() {$/;"	f	class:Semaphore
Semaphore	core/parallel.h	/^class Semaphore {$/;"	c
SetRay	core/light.h	/^    void SetRay(const Point &p, float eps, const Vector &w, float time) {$/;"	f	struct:VisibilityTester
SetSearchDirectory	core/fileutil.cpp	/^void SetSearchDirectory(const string &dirname) {$/;"	f
SetSegment	core/light.h	/^    void SetSegment(const Point &p1, float eps1,$/;"	f	struct:VisibilityTester
Severe	core/error.cpp	/^void Severe(const char *format, ...) {$/;"	f
Shape	core/shape.cpp	/^Shape::Shape(const Transform *o2w, const Transform *w2o, bool ro)$/;"	f	class:Shape
Shape	core/shape.h	/^class Shape : public ReferenceCounted {$/;"	c
ShapeSet	core/light.cpp	/^ShapeSet::ShapeSet(const Reference<Shape> &s) {$/;"	f	class:ShapeSet
ShapeSet	core/light.h	/^class ShapeSet {$/;"	c
Shear3d	3rdparty/ilmbase-1.0.2/ImathShear.h	/^typedef Vec3   <double> Shear3d;$/;"	t	namespace:Imath
Shear3f	3rdparty/ilmbase-1.0.2/ImathShear.h	/^typedef Vec3   <float>  Shear3f;$/;"	t	namespace:Imath
Shear6	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::Shear6 ()$/;"	f	class:Imath::Shear6
Shear6	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::Shear6 (T XY, T XZ, T YZ)$/;"	f	class:Imath::Shear6
Shear6	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::Shear6 (T XY, T XZ, T YZ, T YX, T ZX, T ZY)$/;"	f	class:Imath::Shear6
Shear6	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::Shear6 (const Shear6 &h)$/;"	f	class:Imath::Shear6
Shear6	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::Shear6 (const Shear6<S> &h)$/;"	f	class:Imath::Shear6
Shear6	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::Shear6 (const Vec3<S> &v)$/;"	f	class:Imath::Shear6
Shear6	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::Shear6 (const Vec3<T> &v)$/;"	f	class:Imath::Shear6
Shear6	3rdparty/ilmbase-1.0.2/ImathShear.h	/^template <class T> class Shear6$/;"	c	namespace:Imath
Shear6d	3rdparty/ilmbase-1.0.2/ImathShear.h	/^typedef Shear6 <double> Shear6d;$/;"	t	namespace:Imath
Shear6f	3rdparty/ilmbase-1.0.2/ImathShear.h	/^typedef Shear6 <float>  Shear6f;$/;"	t	namespace:Imath
ShinyMetalMaterial	materials/shinymetal.h	/^    ShinyMetalMaterial(const Reference<Texture<Spectrum> > &ks, $/;"	f	class:ShinyMetalMaterial
ShinyMetalMaterial	materials/shinymetal.h	/^class ShinyMetalMaterial : public Material {$/;"	c
Shuffle	core/montecarlo.h	/^void Shuffle(T *samp, uint32_t count, uint32_t dims, RNG &rng) {$/;"	f
Signal	core/parallel.cpp	/^void ConditionVariable::Signal() {$/;"	f	class:ConditionVariable
SinPhi	core/reflection.h	/^inline float SinPhi(const Vector &w) {$/;"	f
SinTheta	core/reflection.h	/^inline float SinTheta(const Vector &w) {$/;"	f
SinTheta2	core/reflection.h	/^inline float SinTheta2(const Vector &w) {$/;"	f
Sinc1D	filters/sinc.h	/^    float Sinc1D(float x) const {$/;"	f	class:LanczosSincFilter
SingleScatteringIntegrator	integrators/single.h	/^    SingleScatteringIntegrator(float ss) { stepSize = ss; }$/;"	f	class:SingleScatteringIntegrator
SingleScatteringIntegrator	integrators/single.h	/^class SingleScatteringIntegrator : public VolumeIntegrator {$/;"	c
Slerp	core/quaternion.cpp	/^Quaternion Slerp(float t, const Quaternion &q1,$/;"	f
Slice	3rdparty/openexr-1.7.0/ImfFrameBuffer.cpp	/^Slice::Slice (PixelType t,$/;"	f	class:Imf::Slice
Slice	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^struct Slice$/;"	s	namespace:Imf
SliceMap	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^    typedef std::map <Name, Slice> SliceMap;$/;"	t	class:Imf::FrameBuffer
SmallStep	renderers/metropolis.cpp	/^static void SmallStep(RNG &rng, MLTSample *sample, int maxDepth,$/;"	f	file:
SmoothStep	core/texture.cpp	/^inline float SmoothStep(float min, float max, float value) {$/;"	f
Sobol2	core/montecarlo.h	/^inline float Sobol2(uint32_t n, uint32_t scramble) {$/;"	f
SolveLinearSystem2x2	core/transform.cpp	/^bool SolveLinearSystem2x2(const float A[2][2],$/;"	f
SortSpectrumSamples	core/spectrum.cpp	/^void SortSpectrumSamples(float *lambda, float *vals, int n) {$/;"	f
Spectrum	core/pbrt.h	/^typedef RGBSpectrum Spectrum;$/;"	t
SpectrumSamplesSorted	core/spectrum.cpp	/^bool SpectrumSamplesSorted(const float *lambda, const float *vals, int n) {$/;"	f
SpectrumType	core/spectrum.h	/^enum SpectrumType { SPECTRUM_REFLECTANCE, SPECTRUM_ILLUMINANT };$/;"	g
SpecularReflect	core/integrator.cpp	/^Spectrum SpecularReflect(const RayDifferential &ray, BSDF *bsdf,$/;"	f
SpecularReflection	core/reflection.h	/^    SpecularReflection(const Spectrum &r, Fresnel *f)$/;"	f	class:SpecularReflection
SpecularReflection	core/reflection.h	/^class SpecularReflection : public BxDF {$/;"	c
SpecularTransmission	core/reflection.h	/^    SpecularTransmission(const Spectrum &t, float ei, float et)$/;"	f	class:SpecularTransmission
SpecularTransmission	core/reflection.h	/^class SpecularTransmission : public BxDF {$/;"	c
SpecularTransmit	core/integrator.cpp	/^Spectrum SpecularTransmit(const RayDifferential &ray, BSDF *bsdf,$/;"	f
Sphere	shapes/sphere.cpp	/^Sphere::Sphere(const Transform *o2w, const Transform *w2o, bool ro,$/;"	f	class:Sphere
Sphere	shapes/sphere.h	/^class Sphere : public Shape {$/;"	c
Sphere3	3rdparty/ilmbase-1.0.2/ImathSphere.h	/^    Sphere3() : center(0,0,0), radius(0) {}$/;"	f	class:Imath::Sphere3
Sphere3	3rdparty/ilmbase-1.0.2/ImathSphere.h	/^    Sphere3(const Vec3<T> &c, T r) : center(c), radius(r) {}$/;"	f	class:Imath::Sphere3
Sphere3	3rdparty/ilmbase-1.0.2/ImathSphere.h	/^class Sphere3$/;"	c	namespace:Imath
Sphere3d	3rdparty/ilmbase-1.0.2/ImathSphere.h	/^typedef Sphere3<double> Sphere3d;$/;"	t	namespace:Imath
Sphere3f	3rdparty/ilmbase-1.0.2/ImathSphere.h	/^typedef Sphere3<float> Sphere3f;$/;"	t	namespace:Imath
SphericalDirection	core/geometry.h	/^inline Vector SphericalDirection(float sintheta, float costheta,$/;"	f
SphericalDirection	core/geometry.h	/^inline Vector SphericalDirection(float sintheta,$/;"	f
SphericalMapping2D	core/texture.h	/^    SphericalMapping2D(const Transform &toSph)$/;"	f	class:SphericalMapping2D
SphericalMapping2D	core/texture.h	/^class SphericalMapping2D : public TextureMapping2D {$/;"	c
SphericalPhi	core/geometry.h	/^inline float SphericalPhi(const Vector &v) {$/;"	f
SphericalTheta	core/geometry.h	/^inline float SphericalTheta(const Vector &v) {$/;"	f
Splat	film/image.cpp	/^void ImageFilm::Splat(const CameraSample &sample, const Spectrum &L) {$/;"	f	class:ImageFilm
SplitAxis	accelerators/kdtreeaccel.cpp	/^    uint32_t SplitAxis() const { return flags & 3; }$/;"	f	struct:KdAccelNode
SplitMethod	accelerators/bvh.h	/^    enum SplitMethod { SPLIT_MIDDLE, SPLIT_EQUAL_COUNTS, SPLIT_SAH };$/;"	g	class:BVHAccel
SplitPos	accelerators/kdtreeaccel.cpp	/^    float SplitPos() const { return split; }$/;"	f	struct:KdAccelNode
SpotLight	lights/spot.cpp	/^SpotLight::SpotLight(const Transform &light2world,$/;"	f	class:SpotLight
SpotLight	lights/spot.h	/^class SpotLight : public Light {$/;"	c
Sqrt	core/spectrum.h	/^    friend CoefficientSpectrum Sqrt(const CoefficientSpectrum &s) {$/;"	f	class:CoefficientSpectrum
StackTracer	3rdparty/ilmbase-1.0.2/IexBaseExc.h	/^typedef std::string (* StackTracer) ();$/;"	t	class:Iex::std
Start	3rdparty/ilmbase-1.0.2/IlmThreadPosix.cpp	/^    typedef void * (* Start) (void *);$/;"	t	file:
Start	core/timer.cpp	/^void Timer::Start()$/;"	f	class:Timer
StartType	tools/ply.h	/^#define StartType /;"	d
StatTracker	core/probes.cpp	/^StatTracker::StatTracker(const string &cat, const string &n,$/;"	f	class:StatTracker
StatTracker	core/probes.cpp	/^struct StatTracker {$/;"	s	file:
State	3rdparty/tiff-3.9.4/tif_fax3.h	/^	unsigned char State;	\/* see above *\/$/;"	m	struct:__anon46
StateNames	3rdparty/tiff-3.9.4/tif_fax3.h	/^static const char* StateNames[] = {$/;"	v
StaticAssertionFailed	3rdparty/openexr-1.7.0/ImfCheckedArithmetic.h	/^template <> struct StaticAssertionFailed <true> {};$/;"	s	namespace:Imf
StatsCounter	core/probes.cpp	/^StatsCounter::StatsCounter(const string &category, const string &name) {$/;"	f	class:StatsCounter
StatsCounter	core/probes.cpp	/^class StatsCounter {$/;"	c	file:
StatsCounterType	core/probes.cpp	/^typedef AtomicInt64 StatsCounterType;$/;"	t	file:
StatsPercentage	core/probes.cpp	/^StatsPercentage::StatsPercentage(const string &category, const string &name) {$/;"	f	class:StatsPercentage
StatsPercentage	core/probes.cpp	/^class StatsPercentage {$/;"	c	file:
StatsRatio	core/probes.cpp	/^StatsRatio::StatsRatio(const string &category, const string &name) {$/;"	f	class:StatsRatio
StatsRatio	core/probes.cpp	/^class StatsRatio {$/;"	c	file:
StdIFStream	3rdparty/openexr-1.7.0/ImfStdIO.cpp	/^StdIFStream::StdIFStream (const char fileName[]):$/;"	f	class:Imf::StdIFStream
StdIFStream	3rdparty/openexr-1.7.0/ImfStdIO.cpp	/^StdIFStream::StdIFStream (ifstream &is, const char fileName[]):$/;"	f	class:Imf::StdIFStream
StdIFStream	3rdparty/openexr-1.7.0/ImfStdIO.h	/^class StdIFStream: public IStream$/;"	c	namespace:Imf
StdOFStream	3rdparty/openexr-1.7.0/ImfStdIO.cpp	/^StdOFStream::StdOFStream (const char fileName[]):$/;"	f	class:Imf::StdOFStream
StdOFStream	3rdparty/openexr-1.7.0/ImfStdIO.cpp	/^StdOFStream::StdOFStream (ofstream &os, const char fileName[]):$/;"	f	class:Imf::StdOFStream
StdOFStream	3rdparty/openexr-1.7.0/ImfStdIO.h	/^class StdOFStream: public OStream$/;"	c	namespace:Imf
StdOSStream	3rdparty/openexr-1.7.0/ImfStdIO.cpp	/^StdOSStream::StdOSStream (): OStream ("(string)")$/;"	f	class:Imf::StdOSStream
StdOSStream	3rdparty/openexr-1.7.0/ImfStdIO.h	/^class StdOSStream: public OStream$/;"	c	namespace:Imf
Stop	core/timer.cpp	/^void Timer::Stop()$/;"	f	class:Timer
StratifiedSample1D	core/montecarlo.cpp	/^void StratifiedSample1D(float *samp, int nSamples, RNG &rng,$/;"	f
StratifiedSample2D	core/montecarlo.cpp	/^void StratifiedSample2D(float *samp, int nx, int ny, RNG &rng,$/;"	f
StratifiedSampler	samplers/stratified.cpp	/^StratifiedSampler::StratifiedSampler(int xstart, int xend,$/;"	f	class:StratifiedSampler
StratifiedSampler	samplers/stratified.h	/^class StratifiedSampler : public Sampler {$/;"	c
StreamIO	3rdparty/openexr-1.7.0/ImfIO.h	/^struct StreamIO$/;"	s	namespace:Imf
StringAttribute	3rdparty/openexr-1.7.0/ImfStringAttribute.h	/^typedef TypedAttribute<std::string> StringAttribute;$/;"	t	namespace:Imf
StringVector	3rdparty/openexr-1.7.0/ImfStringVectorAttribute.h	/^typedef std::vector<std::string> StringVector;$/;"	t	namespace:Imf
StringVectorAttribute	3rdparty/openexr-1.7.0/ImfStringVectorAttribute.h	/^typedef TypedAttribute<StringVector> StringVectorAttribute;$/;"	t	namespace:Imf
SubstrateMaterial	materials/substrate.h	/^    SubstrateMaterial(Reference<Texture<Spectrum> > kd, Reference<Texture<Spectrum> > ks,$/;"	f	class:SubstrateMaterial
SubstrateMaterial	materials/substrate.h	/^class SubstrateMaterial : public Material {$/;"	c
SubsurfaceFromDiffuse	core/volume.cpp	/^void SubsurfaceFromDiffuse(const Spectrum &Kd, float meanPathLength,$/;"	f
SubsurfaceMaterial	materials/subsurface.h	/^    SubsurfaceMaterial(float sc, Reference<Texture<Spectrum> > kr,$/;"	f	class:SubsurfaceMaterial
SubsurfaceMaterial	materials/subsurface.h	/^class SubsurfaceMaterial : public Material {$/;"	c
SubsurfaceOctreeNode	integrators/dipolesubsurface.cpp	/^    SubsurfaceOctreeNode() {$/;"	f	struct:SubsurfaceOctreeNode
SubsurfaceOctreeNode	integrators/dipolesubsurface.cpp	/^struct SubsurfaceOctreeNode {$/;"	s	file:
Successful	integrators/irradiancecache.cpp	/^    bool Successful() {$/;"	f	struct:IrradProcess
SurfIntegratorName	core/api.cpp	/^    string SurfIntegratorName, VolIntegratorName;$/;"	m	struct:RenderOptions	file:
SurfIntegratorParams	core/api.cpp	/^    ParamSet SurfIntegratorParams, VolIntegratorParams;$/;"	m	struct:RenderOptions	file:
SurfaceArea	core/geometry.h	/^    float SurfaceArea() const {$/;"	f	class:BBox
SurfaceIntegrator	core/integrator.h	/^class SurfaceIntegrator : public Integrator {$/;"	c
SurfacePoint	renderers/surfacepoints.h	/^    SurfacePoint() { }$/;"	f	struct:SurfacePoint
SurfacePoint	renderers/surfacepoints.h	/^    SurfacePoint(const Point &pp, const Normal &nn, float a, float eps)$/;"	f	struct:SurfacePoint
SurfacePoint	renderers/surfacepoints.h	/^struct SurfacePoint {$/;"	s
SurfacePointTask	renderers/surfacepoints.cpp	/^    SurfacePointTask(const Scene *sc, const Point &org, float ti, int tn,$/;"	f	class:SurfacePointTask
SurfacePointTask	renderers/surfacepoints.cpp	/^class SurfacePointTask : public Task {$/;"	c	file:
SurfacePointsRenderer	renderers/surfacepoints.h	/^    SurfacePointsRenderer(float md, const Point &pc, float t,$/;"	f	class:SurfacePointsRenderer
SurfacePointsRenderer	renderers/surfacepoints.h	/^class SurfacePointsRenderer : public Renderer {$/;"	c
SwapsHandedness	core/transform.cpp	/^bool Transform::SwapsHandedness() const {$/;"	f	class:Transform
T	core/reflection.h	/^    Spectrum T;$/;"	m	class:SpecularTransmission
T	core/transform.h	/^    Vector T[2];$/;"	m	class:AnimatedTransform
TABLE	3rdparty/zlib-1.2.5/inflate.h	/^        TABLE,      \/* i: waiting for dynamic block table lengths *\/$/;"	e	enum:__anon75
TBLS	3rdparty/zlib-1.2.5/crc32.c	/^#  define TBLS /;"	d	file:
TESTFILE	3rdparty/zlib-1.2.5/example.c	/^#  define TESTFILE /;"	d	file:
TEXTURE	core/pbrtparse.cpp	/^     TEXTURE = 294,$/;"	e	enum:yytokentype	file:
TEXTURE	core/pbrtparse.hh	/^     TEXTURE = 294,$/;"	e	enum:yytokentype
TEXTURE_BLACK	core/mipmap.h	/^    TEXTURE_BLACK,$/;"	e	enum:__anon82
TEXTURE_CLAMP	core/mipmap.h	/^    TEXTURE_CLAMP$/;"	e	enum:__anon82
TEXTURE_REPEAT	core/mipmap.h	/^    TEXTURE_REPEAT,$/;"	e	enum:__anon82
TGAERR_CMAP_DEPTH	core/targa.h	/^    TGAERR_CMAP_DEPTH,$/;"	e	enum:__anon87
TGAERR_CMAP_LENGTH	core/targa.h	/^    TGAERR_CMAP_LENGTH,$/;"	e	enum:__anon87
TGAERR_CMAP_MISSING	core/targa.h	/^    TGAERR_CMAP_MISSING,$/;"	e	enum:__anon87
TGAERR_CMAP_PRESENT	core/targa.h	/^    TGAERR_CMAP_PRESENT,$/;"	e	enum:__anon87
TGAERR_CMAP_TYPE	core/targa.h	/^    TGAERR_CMAP_TYPE,$/;"	e	enum:__anon87
TGAERR_EOF	core/targa.h	/^    TGAERR_EOF,$/;"	e	enum:__anon87
TGAERR_FOPEN	core/targa.h	/^    TGAERR_FOPEN,$/;"	e	enum:__anon87
TGAERR_IMG_TYPE	core/targa.h	/^    TGAERR_IMG_TYPE,$/;"	e	enum:__anon87
TGAERR_INDEX_RANGE	core/targa.h	/^    TGAERR_INDEX_RANGE,$/;"	e	enum:__anon87
TGAERR_MONO	core/targa.h	/^    TGAERR_MONO$/;"	e	enum:__anon87
TGAERR_NOT_CMAP	core/targa.h	/^    TGAERR_NOT_CMAP,$/;"	e	enum:__anon87
TGAERR_NO_IMG	core/targa.h	/^    TGAERR_NO_IMG,$/;"	e	enum:__anon87
TGAERR_NO_MEM	core/targa.h	/^    TGAERR_NO_MEM,$/;"	e	enum:__anon87
TGAERR_PIXEL_DEPTH	core/targa.h	/^    TGAERR_PIXEL_DEPTH,$/;"	e	enum:__anon87
TGAERR_RLE	core/targa.h	/^    TGAERR_RLE,$/;"	e	enum:__anon87
TGAERR_WRITE	core/targa.h	/^    TGAERR_WRITE,$/;"	e	enum:__anon87
TGAERR_ZERO_SIZE	core/targa.h	/^    TGAERR_ZERO_SIZE,$/;"	e	enum:__anon87
TGA_ATTRIB_BITS	core/targa.h	/^    #define TGA_ATTRIB_BITS /;"	d
TGA_COLOR_MAP_ABSENT	core/targa.h	/^    #define TGA_COLOR_MAP_ABSENT /;"	d
TGA_COLOR_MAP_PRESENT	core/targa.h	/^    #define TGA_COLOR_MAP_PRESENT /;"	d
TGA_IMAGE_TYPE_BGR	core/targa.h	/^    #define TGA_IMAGE_TYPE_BGR /;"	d
TGA_IMAGE_TYPE_BGR_RLE	core/targa.h	/^    #define TGA_IMAGE_TYPE_BGR_RLE /;"	d
TGA_IMAGE_TYPE_COLORMAP	core/targa.h	/^    #define TGA_IMAGE_TYPE_COLORMAP /;"	d
TGA_IMAGE_TYPE_COLORMAP_RLE	core/targa.h	/^    #define TGA_IMAGE_TYPE_COLORMAP_RLE /;"	d
TGA_IMAGE_TYPE_MONO	core/targa.h	/^    #define TGA_IMAGE_TYPE_MONO /;"	d
TGA_IMAGE_TYPE_MONO_RLE	core/targa.h	/^    #define TGA_IMAGE_TYPE_MONO_RLE /;"	d
TGA_IMAGE_TYPE_NONE	core/targa.h	/^    #define TGA_IMAGE_TYPE_NONE /;"	d
TGA_KEEP_MACROS	core/targa.c	/^#define TGA_KEEP_MACROS /;"	d	file:
TGA_NOERR	core/targa.h	/^    TGA_NOERR,$/;"	e	enum:__anon87
TGA_R_TO_L_BIT	core/targa.h	/^    #define TGA_R_TO_L_BIT /;"	d
TGA_T_TO_B_BIT	core/targa.h	/^    #define TGA_T_TO_B_BIT /;"	d
TGA_UNUSED_BITS	core/targa.h	/^    #define TGA_UNUSED_BITS /;"	d
THRESHHOLD_BILEVEL	3rdparty/tiff-3.9.4/tiff.h	/^#define	    THRESHHOLD_BILEVEL	/;"	d
THRESHHOLD_ERRORDIFFUSE	3rdparty/tiff-3.9.4/tiff.h	/^#define	    THRESHHOLD_ERRORDIFFUSE	/;"	d
THRESHHOLD_HALFTONE	3rdparty/tiff-3.9.4/tiff.h	/^#define	    THRESHHOLD_HALFTONE	/;"	d
THROW	3rdparty/ilmbase-1.0.2/IexMacros.h	/^#define THROW(/;"	d
THROW_ERRNO	3rdparty/ilmbase-1.0.2/IexMacros.h	/^#define THROW_ERRNO(/;"	d
THUNDER_2BITDELTAS	3rdparty/tiff-3.9.4/tif_thunder.c	/^#define	THUNDER_2BITDELTAS	/;"	d	file:
THUNDER_3BITDELTAS	3rdparty/tiff-3.9.4/tif_thunder.c	/^#define	THUNDER_3BITDELTAS	/;"	d	file:
THUNDER_CODE	3rdparty/tiff-3.9.4/tif_thunder.c	/^#define	THUNDER_CODE	/;"	d	file:
THUNDER_DATA	3rdparty/tiff-3.9.4/tif_thunder.c	/^#define	THUNDER_DATA	/;"	d	file:
THUNDER_RAW	3rdparty/tiff-3.9.4/tif_thunder.c	/^#define	THUNDER_RAW	/;"	d	file:
THUNDER_RUN	3rdparty/tiff-3.9.4/tif_thunder.c	/^#define	THUNDER_RUN	/;"	d	file:
THUNDER_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.h	/^#define THUNDER_SUPPORT /;"	d
THUNDER_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.vc.h	/^#define THUNDER_SUPPORT /;"	d
THUNDER_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.wince.h	/^#define THUNDER_SUPPORT /;"	d
TIFF	3rdparty/tiff-3.9.4/tiffio.h	/^typedef	struct tiff TIFF;$/;"	t	typeref:struct:tiff
TIFFAccessTagMethods	3rdparty/tiff-3.9.4/tif_extension.c	/^TIFFTagMethods *TIFFAccessTagMethods( TIFF *tif )$/;"	f
TIFFAdvanceDirectory	3rdparty/tiff-3.9.4/tif_dir.c	/^TIFFAdvanceDirectory(TIFF* tif, uint32* nextdir, toff_t* off)$/;"	f	file:
TIFFAppendToStrip	3rdparty/tiff-3.9.4/tif_write.c	/^TIFFAppendToStrip(TIFF* tif, tstrip_t strip, tidata_t data, tsize_t cc)$/;"	f	file:
TIFFArrayCount	3rdparty/tiff-3.9.4/tiffiop.h	/^#define TIFFArrayCount(/;"	d
TIFFBitRevTable	3rdparty/tiff-3.9.4/tif_swab.c	/^static const unsigned char TIFFBitRevTable[256] = {$/;"	v	file:
TIFFBoolMethod	3rdparty/tiff-3.9.4/tiffiop.h	/^typedef	int (*TIFFBoolMethod)(TIFF*);$/;"	t
TIFFCIELabToRGB	3rdparty/tiff-3.9.4/tiffio.h	/^} TIFFCIELabToRGB;$/;"	t	typeref:struct:__anon65
TIFFCIELabToRGBInit	3rdparty/tiff-3.9.4/tif_color.c	/^TIFFCIELabToRGBInit(TIFFCIELabToRGB* cielab,$/;"	f
TIFFCIELabToXYZ	3rdparty/tiff-3.9.4/tif_color.c	/^TIFFCIELabToXYZ(TIFFCIELabToRGB *cielab, uint32 l, int32 a, int32 b,$/;"	f
TIFFCheckDirOffset	3rdparty/tiff-3.9.4/tif_dirread.c	/^TIFFCheckDirOffset(TIFF* tif, toff_t diroff)$/;"	f	file:
TIFFCheckRead	3rdparty/tiff-3.9.4/tif_read.c	/^TIFFCheckRead(TIFF* tif, int tiles)$/;"	f	file:
TIFFCheckTile	3rdparty/tiff-3.9.4/tif_tile.c	/^TIFFCheckTile(TIFF* tif, uint32 x, uint32 y, uint32 z, tsample_t s)$/;"	f
TIFFCheckpointDirectory	3rdparty/tiff-3.9.4/tif_dirwrite.c	/^TIFFCheckpointDirectory(TIFF* tif)$/;"	f
TIFFCleanup	3rdparty/tiff-3.9.4/tif_close.c	/^TIFFCleanup(TIFF* tif)$/;"	f
TIFFClientInfoLink	3rdparty/tiff-3.9.4/tiffiop.h	/^} TIFFClientInfoLink;$/;"	t	typeref:struct:client_info
TIFFClientOpen	3rdparty/tiff-3.9.4/tif_open.c	/^TIFFClientOpen($/;"	f
TIFFClientdata	3rdparty/tiff-3.9.4/tif_open.c	/^TIFFClientdata(TIFF* tif)$/;"	f
TIFFClose	3rdparty/tiff-3.9.4/tif_close.c	/^TIFFClose(TIFF* tif)$/;"	f
TIFFCloseFile	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	TIFFCloseFile(/;"	d
TIFFCloseProc	3rdparty/tiff-3.9.4/tiffio.h	/^typedef	int (*TIFFCloseProc)(thandle_t);$/;"	t
TIFFClrFieldBit	3rdparty/tiff-3.9.4/tif_dir.h	/^#define TIFFClrFieldBit(/;"	d
TIFFCodeMethod	3rdparty/tiff-3.9.4/tiffiop.h	/^typedef	int (*TIFFCodeMethod)(TIFF*, tidata_t, tsize_t, tsample_t);$/;"	t
TIFFCodec	3rdparty/tiff-3.9.4/tiffio.h	/^} TIFFCodec;$/;"	t	typeref:struct:__anon67
TIFFComputeStrip	3rdparty/tiff-3.9.4/tif_strip.c	/^TIFFComputeStrip(TIFF* tif, uint32 row, tsample_t sample)$/;"	f
TIFFComputeTile	3rdparty/tiff-3.9.4/tif_tile.c	/^TIFFComputeTile(TIFF* tif, uint32 x, uint32 y, uint32 z, tsample_t s)$/;"	f
TIFFCreateDirectory	3rdparty/tiff-3.9.4/tif_dir.c	/^TIFFCreateDirectory(TIFF* tif)$/;"	f
TIFFCurrentDirOffset	3rdparty/tiff-3.9.4/tif_dir.c	/^TIFFCurrentDirOffset(TIFF* tif)$/;"	f
TIFFCurrentDirectory	3rdparty/tiff-3.9.4/tif_open.c	/^TIFFCurrentDirectory(TIFF* tif)$/;"	f
TIFFCurrentRow	3rdparty/tiff-3.9.4/tif_open.c	/^TIFFCurrentRow(TIFF* tif)$/;"	f
TIFFCurrentStrip	3rdparty/tiff-3.9.4/tif_open.c	/^TIFFCurrentStrip(TIFF* tif)$/;"	f
TIFFCurrentTile	3rdparty/tiff-3.9.4/tif_open.c	/^TIFFCurrentTile(TIFF* tif)$/;"	f
TIFFCvtIEEEDoubleToNative	3rdparty/tiff-3.9.4/tif_dirread.c	/^# define	TIFFCvtIEEEDoubleToNative(/;"	d	file:
TIFFCvtIEEEFloatToNative	3rdparty/tiff-3.9.4/tif_dirread.c	/^# define	TIFFCvtIEEEFloatToNative(/;"	d	file:
TIFFCvtNativeToIEEEDouble	3rdparty/tiff-3.9.4/tif_dirwrite.c	/^# define	TIFFCvtNativeToIEEEDouble(/;"	d	file:
TIFFCvtNativeToIEEEFloat	3rdparty/tiff-3.9.4/tif_dirwrite.c	/^# define	TIFFCvtNativeToIEEEFloat(/;"	d	file:
TIFFDataType	3rdparty/tiff-3.9.4/tiff.h	/^} TIFFDataType;$/;"	t	typeref:enum:__anon62
TIFFDataWidth	3rdparty/tiff-3.9.4/tif_dirinfo.c	/^TIFFDataWidth(TIFFDataType type)$/;"	f
TIFFDefaultDirectory	3rdparty/tiff-3.9.4/tif_dir.c	/^TIFFDefaultDirectory(TIFF* tif)$/;"	f
TIFFDefaultRefBlackWhite	3rdparty/tiff-3.9.4/tif_aux.c	/^TIFFDefaultRefBlackWhite(TIFFDirectory* td)$/;"	f	file:
TIFFDefaultStripSize	3rdparty/tiff-3.9.4/tif_strip.c	/^TIFFDefaultStripSize(TIFF* tif, uint32 request)$/;"	f
TIFFDefaultTileSize	3rdparty/tiff-3.9.4/tif_tile.c	/^TIFFDefaultTileSize(TIFF* tif, uint32* tw, uint32* th)$/;"	f
TIFFDefaultTransferFunction	3rdparty/tiff-3.9.4/tif_aux.c	/^TIFFDefaultTransferFunction(TIFFDirectory* td)$/;"	f	file:
TIFFDirEntry	3rdparty/tiff-3.9.4/tiff.h	/^} TIFFDirEntry;$/;"	t	typeref:struct:__anon61
TIFFDirectory	3rdparty/tiff-3.9.4/tif_dir.h	/^} TIFFDirectory;$/;"	t	typeref:struct:__anon42
TIFFDisplay	3rdparty/tiff-3.9.4/tiffio.h	/^} TIFFDisplay;$/;"	t	typeref:struct:__anon63
TIFFError	3rdparty/tiff-3.9.4/tif_error.c	/^TIFFError(const char* module, const char* fmt, ...)$/;"	f
TIFFErrorExt	3rdparty/tiff-3.9.4/tif_error.c	/^TIFFErrorExt(thandle_t fd, const char* module, const char* fmt, ...)$/;"	f
TIFFErrorHandler	3rdparty/tiff-3.9.4/tiffio.h	/^typedef	void (*TIFFErrorHandler)(const char*, const char*, va_list);$/;"	t
TIFFErrorHandlerExt	3rdparty/tiff-3.9.4/tiffio.h	/^typedef	void (*TIFFErrorHandlerExt)(thandle_t, const char*, const char*, va_list);$/;"	t
TIFFExtendProc	3rdparty/tiff-3.9.4/tiffio.h	/^typedef	void (*TIFFExtendProc)(TIFF*); $/;"	t
TIFFExtractData	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	TIFFExtractData(/;"	d
TIFFFaxBlackCodes	3rdparty/tiff-3.9.4/t4.h	/^const tableentry TIFFFaxBlackCodes[] = {$/;"	v
TIFFFaxBlackTable	3rdparty/tiff-3.9.4/tif_fax3sm.c	/^ const TIFFFaxTabEnt TIFFFaxBlackTable[8192] = {$/;"	v
TIFFFaxFillFunc	3rdparty/tiff-3.9.4/tif_fax3.h	/^typedef	void (*TIFFFaxFillFunc)(unsigned char*, uint32*, uint32*, uint32);$/;"	t
TIFFFaxMainTable	3rdparty/tiff-3.9.4/tif_fax3sm.c	/^ const TIFFFaxTabEnt TIFFFaxMainTable[128] = {$/;"	v
TIFFFaxTabEnt	3rdparty/tiff-3.9.4/tif_fax3.h	/^} TIFFFaxTabEnt;$/;"	t	typeref:struct:__anon46
TIFFFaxWhiteCodes	3rdparty/tiff-3.9.4/t4.h	/^const tableentry TIFFFaxWhiteCodes[] = {$/;"	v
TIFFFaxWhiteTable	3rdparty/tiff-3.9.4/tif_fax3sm.c	/^ const TIFFFaxTabEnt TIFFFaxWhiteTable[4096] = {$/;"	v
TIFFFdOpen	3rdparty/tiff-3.9.4/tif_acorn.c	/^TIFFFdOpen(int fd, const char* name, const char* mode)$/;"	f
TIFFFdOpen	3rdparty/tiff-3.9.4/tif_apple.c	/^TIFFFdOpen(int fd, const char* name, const char* mode)$/;"	f
TIFFFdOpen	3rdparty/tiff-3.9.4/tif_atari.c	/^TIFFFdOpen(int fd, const char* name, const char* mode)$/;"	f
TIFFFdOpen	3rdparty/tiff-3.9.4/tif_msdos.c	/^TIFFFdOpen(int fd, const char* name, const char* mode)$/;"	f
TIFFFdOpen	3rdparty/tiff-3.9.4/tif_unix.c	/^TIFFFdOpen(int fd, const char* name, const char* mode)$/;"	f
TIFFFdOpen	3rdparty/tiff-3.9.4/tif_win3.c	/^TIFFFdOpen(int fd, const char* name, const char* mode)$/;"	f
TIFFFdOpen	3rdparty/tiff-3.9.4/tif_win32.c	/^TIFFFdOpen(int ifd, const char* name, const char* mode)$/;"	f
TIFFFetchAnyArray	3rdparty/tiff-3.9.4/tif_dirread.c	/^TIFFFetchAnyArray(TIFF* tif, TIFFDirEntry* dir, double* v)$/;"	f	file:
TIFFFetchByteArray	3rdparty/tiff-3.9.4/tif_dirread.c	/^TIFFFetchByteArray(TIFF* tif, TIFFDirEntry* dir, uint8* v)$/;"	f	file:
TIFFFetchData	3rdparty/tiff-3.9.4/tif_dirread.c	/^TIFFFetchData(TIFF* tif, TIFFDirEntry* dir, char* cp)$/;"	f	file:
TIFFFetchDirectory	3rdparty/tiff-3.9.4/tif_dirread.c	/^TIFFFetchDirectory(TIFF* tif, toff_t diroff, TIFFDirEntry **pdir,$/;"	f	file:
TIFFFetchDoubleArray	3rdparty/tiff-3.9.4/tif_dirread.c	/^TIFFFetchDoubleArray(TIFF* tif, TIFFDirEntry* dir, double* v)$/;"	f	file:
TIFFFetchFloat	3rdparty/tiff-3.9.4/tif_dirread.c	/^TIFFFetchFloat(TIFF* tif, TIFFDirEntry* dir)$/;"	f	file:
TIFFFetchFloatArray	3rdparty/tiff-3.9.4/tif_dirread.c	/^TIFFFetchFloatArray(TIFF* tif, TIFFDirEntry* dir, float* v)$/;"	f	file:
TIFFFetchLongArray	3rdparty/tiff-3.9.4/tif_dirread.c	/^TIFFFetchLongArray(TIFF* tif, TIFFDirEntry* dir, uint32* v)$/;"	f	file:
TIFFFetchNormalTag	3rdparty/tiff-3.9.4/tif_dirread.c	/^TIFFFetchNormalTag(TIFF* tif, TIFFDirEntry* dp)$/;"	f	file:
TIFFFetchPerSampleAnys	3rdparty/tiff-3.9.4/tif_dirread.c	/^TIFFFetchPerSampleAnys(TIFF* tif, TIFFDirEntry* dir, double* pl)$/;"	f	file:
TIFFFetchPerSampleLongs	3rdparty/tiff-3.9.4/tif_dirread.c	/^TIFFFetchPerSampleLongs(TIFF* tif, TIFFDirEntry* dir, uint32* pl)$/;"	f	file:
TIFFFetchPerSampleShorts	3rdparty/tiff-3.9.4/tif_dirread.c	/^TIFFFetchPerSampleShorts(TIFF* tif, TIFFDirEntry* dir, uint16* pl)$/;"	f	file:
TIFFFetchRational	3rdparty/tiff-3.9.4/tif_dirread.c	/^TIFFFetchRational(TIFF* tif, TIFFDirEntry* dir)$/;"	f	file:
TIFFFetchRationalArray	3rdparty/tiff-3.9.4/tif_dirread.c	/^TIFFFetchRationalArray(TIFF* tif, TIFFDirEntry* dir, float* v)$/;"	f	file:
TIFFFetchRefBlackWhite	3rdparty/tiff-3.9.4/tif_dirread.c	/^TIFFFetchRefBlackWhite(TIFF* tif, TIFFDirEntry* dir)$/;"	f	file:
TIFFFetchShortArray	3rdparty/tiff-3.9.4/tif_dirread.c	/^TIFFFetchShortArray(TIFF* tif, TIFFDirEntry* dir, uint16* v)$/;"	f	file:
TIFFFetchShortPair	3rdparty/tiff-3.9.4/tif_dirread.c	/^TIFFFetchShortPair(TIFF* tif, TIFFDirEntry* dir)$/;"	f	file:
TIFFFetchString	3rdparty/tiff-3.9.4/tif_dirread.c	/^TIFFFetchString(TIFF* tif, TIFFDirEntry* dir, char* cp)$/;"	f	file:
TIFFFetchStripThing	3rdparty/tiff-3.9.4/tif_dirread.c	/^TIFFFetchStripThing(TIFF* tif, TIFFDirEntry* dir, long nstrips, uint32** lpp)$/;"	f	file:
TIFFFetchSubjectDistance	3rdparty/tiff-3.9.4/tif_dirread.c	/^TIFFFetchSubjectDistance(TIFF* tif, TIFFDirEntry* dir)$/;"	f	file:
TIFFFieldInfo	3rdparty/tiff-3.9.4/tiffio.h	/^} TIFFFieldInfo;$/;"	t	typeref:struct:__anon68
TIFFFieldSet	3rdparty/tiff-3.9.4/tif_dir.h	/^#define TIFFFieldSet(/;"	d
TIFFFileName	3rdparty/tiff-3.9.4/tif_open.c	/^TIFFFileName(TIFF* tif)$/;"	f
TIFFFileno	3rdparty/tiff-3.9.4/tif_open.c	/^TIFFFileno(TIFF* tif)$/;"	f
TIFFFillStrip	3rdparty/tiff-3.9.4/tif_read.c	/^TIFFFillStrip(TIFF* tif, tstrip_t strip)$/;"	f
TIFFFillTile	3rdparty/tiff-3.9.4/tif_read.c	/^TIFFFillTile(TIFF* tif, ttile_t tile)$/;"	f
TIFFFindCODEC	3rdparty/tiff-3.9.4/tif_compress.c	/^TIFFFindCODEC(uint16 scheme)$/;"	f
TIFFFlush	3rdparty/tiff-3.9.4/tif_flush.c	/^TIFFFlush(TIFF* tif)$/;"	f
TIFFFlushData	3rdparty/tiff-3.9.4/tif_flush.c	/^TIFFFlushData(TIFF* tif)$/;"	f
TIFFFlushData1	3rdparty/tiff-3.9.4/tif_write.c	/^TIFFFlushData1(TIFF* tif)$/;"	f
TIFFFreeDirectory	3rdparty/tiff-3.9.4/tif_dir.c	/^TIFFFreeDirectory(TIFF* tif)$/;"	f
TIFFGetA	3rdparty/tiff-3.9.4/tiffio.h	/^#define	TIFFGetA(/;"	d
TIFFGetB	3rdparty/tiff-3.9.4/tiffio.h	/^#define	TIFFGetB(/;"	d
TIFFGetBitRevTable	3rdparty/tiff-3.9.4/tif_swab.c	/^TIFFGetBitRevTable(int reversed)$/;"	f
TIFFGetClientInfo	3rdparty/tiff-3.9.4/tif_extension.c	/^void *TIFFGetClientInfo( TIFF *tif, const char *name )$/;"	f
TIFFGetCloseProc	3rdparty/tiff-3.9.4/tif_open.c	/^TIFFGetCloseProc(TIFF* tif)$/;"	f
TIFFGetConfiguredCODECs	3rdparty/tiff-3.9.4/tif_compress.c	/^TIFFGetConfiguredCODECs()$/;"	f
TIFFGetField	3rdparty/tiff-3.9.4/tif_dir.c	/^TIFFGetField(TIFF* tif, ttag_t tag, ...)$/;"	f
TIFFGetFieldDefaulted	3rdparty/tiff-3.9.4/tif_aux.c	/^TIFFGetFieldDefaulted(TIFF* tif, ttag_t tag, ...)$/;"	f
TIFFGetFileSize	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	TIFFGetFileSize(/;"	d
TIFFGetG	3rdparty/tiff-3.9.4/tiffio.h	/^#define	TIFFGetG(/;"	d
TIFFGetMapFileProc	3rdparty/tiff-3.9.4/tif_open.c	/^TIFFGetMapFileProc(TIFF* tif)$/;"	f
TIFFGetMode	3rdparty/tiff-3.9.4/tif_open.c	/^TIFFGetMode(TIFF* tif)$/;"	f
TIFFGetR	3rdparty/tiff-3.9.4/tiffio.h	/^#define	TIFFGetR(/;"	d
TIFFGetReadProc	3rdparty/tiff-3.9.4/tif_open.c	/^TIFFGetReadProc(TIFF* tif)$/;"	f
TIFFGetSeekProc	3rdparty/tiff-3.9.4/tif_open.c	/^TIFFGetSeekProc(TIFF* tif)$/;"	f
TIFFGetSizeProc	3rdparty/tiff-3.9.4/tif_open.c	/^TIFFGetSizeProc(TIFF* tif)$/;"	f
TIFFGetTagListCount	3rdparty/tiff-3.9.4/tif_extension.c	/^int TIFFGetTagListCount( TIFF *tif )$/;"	f
TIFFGetTagListEntry	3rdparty/tiff-3.9.4/tif_extension.c	/^ttag_t TIFFGetTagListEntry( TIFF *tif, int tag_index )$/;"	f
TIFFGetUnmapFileProc	3rdparty/tiff-3.9.4/tif_open.c	/^TIFFGetUnmapFileProc(TIFF* tif)$/;"	f
TIFFGetVersion	3rdparty/tiff-3.9.4/tif_version.c	/^TIFFGetVersion(void)$/;"	f
TIFFGetWriteProc	3rdparty/tiff-3.9.4/tif_open.c	/^TIFFGetWriteProc(TIFF* tif)$/;"	f
TIFFGrowStrips	3rdparty/tiff-3.9.4/tif_write.c	/^TIFFGrowStrips(TIFF* tif, int delta, const char* module)$/;"	f	file:
TIFFHeader	3rdparty/tiff-3.9.4/tiff.h	/^} TIFFHeader;$/;"	t	typeref:struct:__anon60
TIFFIgnoreSense	3rdparty/tiff-3.9.4/tiff.h	/^enum TIFFIgnoreSense \/* IGNORE tag table *\/$/;"	g
TIFFInitCCITTFax3	3rdparty/tiff-3.9.4/tif_codec.c	/^#define	TIFFInitCCITTFax3	/;"	d	file:
TIFFInitCCITTFax3	3rdparty/tiff-3.9.4/tif_fax3.c	/^TIFFInitCCITTFax3(TIFF* tif, int scheme)$/;"	f
TIFFInitCCITTFax4	3rdparty/tiff-3.9.4/tif_codec.c	/^#define	TIFFInitCCITTFax4	/;"	d	file:
TIFFInitCCITTFax4	3rdparty/tiff-3.9.4/tif_fax3.c	/^TIFFInitCCITTFax4(TIFF* tif, int scheme)$/;"	f
TIFFInitCCITTRLE	3rdparty/tiff-3.9.4/tif_codec.c	/^#define	TIFFInitCCITTRLE	/;"	d	file:
TIFFInitCCITTRLE	3rdparty/tiff-3.9.4/tif_fax3.c	/^TIFFInitCCITTRLE(TIFF* tif, int scheme)$/;"	f
TIFFInitCCITTRLEW	3rdparty/tiff-3.9.4/tif_codec.c	/^#define	TIFFInitCCITTRLEW	/;"	d	file:
TIFFInitCCITTRLEW	3rdparty/tiff-3.9.4/tif_fax3.c	/^TIFFInitCCITTRLEW(TIFF* tif, int scheme)$/;"	f
TIFFInitDumpMode	3rdparty/tiff-3.9.4/tif_dumpmode.c	/^TIFFInitDumpMode(TIFF* tif, int scheme)$/;"	f
TIFFInitJBIG	3rdparty/tiff-3.9.4/tif_codec.c	/^#define	TIFFInitJBIG	/;"	d	file:
TIFFInitJBIG	3rdparty/tiff-3.9.4/tif_jbig.c	/^int TIFFInitJBIG(TIFF* tif, int scheme)$/;"	f
TIFFInitJPEG	3rdparty/tiff-3.9.4/tif_codec.c	/^#define	TIFFInitJPEG	/;"	d	file:
TIFFInitJPEG	3rdparty/tiff-3.9.4/tif_jpeg.c	/^TIFFInitJPEG(TIFF* tif, int scheme)$/;"	f
TIFFInitLZW	3rdparty/tiff-3.9.4/tif_codec.c	/^#define	TIFFInitLZW	/;"	d	file:
TIFFInitLZW	3rdparty/tiff-3.9.4/tif_lzw.c	/^TIFFInitLZW(TIFF* tif, int scheme)$/;"	f
TIFFInitMethod	3rdparty/tiff-3.9.4/tiffio.h	/^typedef	int (*TIFFInitMethod)(TIFF*, int);$/;"	t
TIFFInitNeXT	3rdparty/tiff-3.9.4/tif_codec.c	/^#define	TIFFInitNeXT	/;"	d	file:
TIFFInitNeXT	3rdparty/tiff-3.9.4/tif_next.c	/^TIFFInitNeXT(TIFF* tif, int scheme)$/;"	f
TIFFInitOJPEG	3rdparty/tiff-3.9.4/tif_codec.c	/^#define	TIFFInitOJPEG	/;"	d	file:
TIFFInitOJPEG	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^TIFFInitOJPEG(TIFF* tif, int scheme)$/;"	f
TIFFInitOrder	3rdparty/tiff-3.9.4/tif_open.c	/^TIFFInitOrder(TIFF* tif, int magic)$/;"	f	file:
TIFFInitPackBits	3rdparty/tiff-3.9.4/tif_codec.c	/^#define	TIFFInitPackBits	/;"	d	file:
TIFFInitPackBits	3rdparty/tiff-3.9.4/tif_packbits.c	/^TIFFInitPackBits(TIFF* tif, int scheme)$/;"	f
TIFFInitPixarLog	3rdparty/tiff-3.9.4/tif_codec.c	/^#define	TIFFInitPixarLog	/;"	d	file:
TIFFInitPixarLog	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^TIFFInitPixarLog(TIFF* tif, int scheme)$/;"	f
TIFFInitSGILog	3rdparty/tiff-3.9.4/tif_codec.c	/^#define TIFFInitSGILog	/;"	d	file:
TIFFInitSGILog	3rdparty/tiff-3.9.4/tif_luv.c	/^TIFFInitSGILog(TIFF* tif, int scheme)$/;"	f
TIFFInitThunderScan	3rdparty/tiff-3.9.4/tif_codec.c	/^#define	TIFFInitThunderScan	/;"	d	file:
TIFFInitThunderScan	3rdparty/tiff-3.9.4/tif_thunder.c	/^TIFFInitThunderScan(TIFF* tif, int scheme)$/;"	f
TIFFInitZIP	3rdparty/tiff-3.9.4/tif_codec.c	/^#define	TIFFInitZIP	/;"	d	file:
TIFFInitZIP	3rdparty/tiff-3.9.4/tif_zip.c	/^TIFFInitZIP(TIFF* tif, int scheme)$/;"	f
TIFFInsertData	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	TIFFInsertData(/;"	d
TIFFIsBigEndian	3rdparty/tiff-3.9.4/tif_open.c	/^TIFFIsBigEndian(TIFF* tif)$/;"	f
TIFFIsByteSwapped	3rdparty/tiff-3.9.4/tif_open.c	/^TIFFIsByteSwapped(TIFF* tif)$/;"	f
TIFFIsCODECConfigured	3rdparty/tiff-3.9.4/tif_codec.c	/^TIFFIsCODECConfigured(uint16 scheme)$/;"	f
TIFFIsMSB2LSB	3rdparty/tiff-3.9.4/tif_open.c	/^TIFFIsMSB2LSB(TIFF* tif)$/;"	f
TIFFIsTiled	3rdparty/tiff-3.9.4/tif_open.c	/^TIFFIsTiled(TIFF* tif)$/;"	f
TIFFIsUpSampled	3rdparty/tiff-3.9.4/tif_open.c	/^TIFFIsUpSampled(TIFF* tif)$/;"	f
TIFFLIB_VERSION	3rdparty/tiff-3.9.4/tiffvers.h	/^#define TIFFLIB_VERSION /;"	d
TIFFLIB_VERSION_STR	3rdparty/tiff-3.9.4/tiffvers.h	/^#define TIFFLIB_VERSION_STR /;"	d
TIFFLastDirectory	3rdparty/tiff-3.9.4/tif_dir.c	/^TIFFLastDirectory(TIFF* tif)$/;"	f
TIFFLinkDirectory	3rdparty/tiff-3.9.4/tif_dirwrite.c	/^TIFFLinkDirectory(TIFF* tif)$/;"	f	file:
TIFFMapFileContents	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	TIFFMapFileContents(/;"	d
TIFFMapFileProc	3rdparty/tiff-3.9.4/tiffio.h	/^typedef	int (*TIFFMapFileProc)(thandle_t, tdata_t*, toff_t*);$/;"	t
TIFFMergeFieldInfo	3rdparty/tiff-3.9.4/tif_dirinfo.c	/^TIFFMergeFieldInfo(TIFF* tif, const TIFFFieldInfo info[], int n)$/;"	f
TIFFNewScanlineSize	3rdparty/tiff-3.9.4/tif_strip.c	/^TIFFNewScanlineSize(TIFF* tif)$/;"	f
TIFFNoBitRevTable	3rdparty/tiff-3.9.4/tif_swab.c	/^static const unsigned char TIFFNoBitRevTable[256] = {$/;"	v	file:
TIFFNoDecode	3rdparty/tiff-3.9.4/tif_compress.c	/^TIFFNoDecode(TIFF* tif, const char* method)$/;"	f	file:
TIFFNoEncode	3rdparty/tiff-3.9.4/tif_compress.c	/^TIFFNoEncode(TIFF* tif, const char* method)$/;"	f	file:
TIFFNumberOfDirectories	3rdparty/tiff-3.9.4/tif_dir.c	/^TIFFNumberOfDirectories(TIFF* tif)$/;"	f
TIFFNumberOfStrips	3rdparty/tiff-3.9.4/tif_strip.c	/^TIFFNumberOfStrips(TIFF* tif)$/;"	f
TIFFNumberOfTiles	3rdparty/tiff-3.9.4/tif_tile.c	/^TIFFNumberOfTiles(TIFF* tif)$/;"	f
TIFFOldScanlineSize	3rdparty/tiff-3.9.4/tif_strip.c	/^TIFFOldScanlineSize(TIFF* tif)$/;"	f
TIFFOpen	3rdparty/tiff-3.9.4/tif_acorn.c	/^TIFFOpen(const char* name, const char* mode)$/;"	f
TIFFOpen	3rdparty/tiff-3.9.4/tif_apple.c	/^TIFFOpen(const char* name, const char* mode)$/;"	f
TIFFOpen	3rdparty/tiff-3.9.4/tif_atari.c	/^TIFFOpen(const char* name, const char* mode)$/;"	f
TIFFOpen	3rdparty/tiff-3.9.4/tif_msdos.c	/^TIFFOpen(const char* name, const char* mode)$/;"	f
TIFFOpen	3rdparty/tiff-3.9.4/tif_unix.c	/^TIFFOpen(const char* name, const char* mode)$/;"	f
TIFFOpen	3rdparty/tiff-3.9.4/tif_win3.c	/^TIFFOpen(const char* name, const char* mode)$/;"	f
TIFFOpen	3rdparty/tiff-3.9.4/tif_win32.c	/^TIFFOpen(const char* name, const char* mode)$/;"	f
TIFFOpenW	3rdparty/tiff-3.9.4/tif_unix.c	/^TIFFOpenW(const wchar_t* name, const char* mode)$/;"	f
TIFFOpenW	3rdparty/tiff-3.9.4/tif_win32.c	/^TIFFOpenW(const wchar_t* name, const char* mode)$/;"	f
TIFFPRINT_COLORMAP	3rdparty/tiff-3.9.4/tiffio.h	/^#define	TIFFPRINT_COLORMAP	/;"	d
TIFFPRINT_CURVES	3rdparty/tiff-3.9.4/tiffio.h	/^#define	TIFFPRINT_CURVES	/;"	d
TIFFPRINT_JPEGACTABLES	3rdparty/tiff-3.9.4/tiffio.h	/^#define	TIFFPRINT_JPEGACTABLES	/;"	d
TIFFPRINT_JPEGDCTABLES	3rdparty/tiff-3.9.4/tiffio.h	/^#define	TIFFPRINT_JPEGDCTABLES	/;"	d
TIFFPRINT_JPEGQTABLES	3rdparty/tiff-3.9.4/tiffio.h	/^#define	TIFFPRINT_JPEGQTABLES	/;"	d
TIFFPRINT_NONE	3rdparty/tiff-3.9.4/tiffio.h	/^#define	TIFFPRINT_NONE	/;"	d
TIFFPRINT_STRIPS	3rdparty/tiff-3.9.4/tiffio.h	/^#define	TIFFPRINT_STRIPS	/;"	d
TIFFPostMethod	3rdparty/tiff-3.9.4/tiffiop.h	/^typedef	void (*TIFFPostMethod)(TIFF*, tidata_t, tsize_t);$/;"	t
TIFFPreMethod	3rdparty/tiff-3.9.4/tiffiop.h	/^typedef	int (*TIFFPreMethod)(TIFF*, tsample_t);$/;"	t
TIFFPredictorCleanup	3rdparty/tiff-3.9.4/tif_predict.c	/^TIFFPredictorCleanup(TIFF* tif)$/;"	f
TIFFPredictorInit	3rdparty/tiff-3.9.4/tif_predict.c	/^TIFFPredictorInit(TIFF* tif)$/;"	f
TIFFPredictorState	3rdparty/tiff-3.9.4/tif_predict.h	/^} TIFFPredictorState;$/;"	t	typeref:struct:__anon58
TIFFPrintDirectory	3rdparty/tiff-3.9.4/tif_print.c	/^TIFFPrintDirectory(TIFF* tif, FILE* fd, long flags)$/;"	f
TIFFPrintMethod	3rdparty/tiff-3.9.4/tiffio.h	/^typedef	void (*TIFFPrintMethod)(TIFF*, FILE*, long);$/;"	t
TIFFRGBAImage	3rdparty/tiff-3.9.4/tiffio.h	/^typedef struct _TIFFRGBAImage TIFFRGBAImage;$/;"	t	typeref:struct:_TIFFRGBAImage
TIFFRGBAImageBegin	3rdparty/tiff-3.9.4/tif_getimage.c	/^TIFFRGBAImageBegin(TIFFRGBAImage* img, TIFF* tif, int stop, char emsg[1024])$/;"	f
TIFFRGBAImageEnd	3rdparty/tiff-3.9.4/tif_getimage.c	/^TIFFRGBAImageEnd(TIFFRGBAImage* img)$/;"	f
TIFFRGBAImageGet	3rdparty/tiff-3.9.4/tif_getimage.c	/^TIFFRGBAImageGet(TIFFRGBAImage* img, uint32* raster, uint32 w, uint32 h)$/;"	f
TIFFRGBAImageOK	3rdparty/tiff-3.9.4/tif_getimage.c	/^TIFFRGBAImageOK(TIFF* tif, char emsg[1024])$/;"	f
TIFFRGBValue	3rdparty/tiff-3.9.4/tiffio.h	/^typedef	unsigned char TIFFRGBValue;		\/* 8-bit samples *\/$/;"	t
TIFFRasterScanlineSize	3rdparty/tiff-3.9.4/tif_strip.c	/^TIFFRasterScanlineSize(TIFF* tif)$/;"	f
TIFFRawStripSize	3rdparty/tiff-3.9.4/tif_strip.c	/^TIFFRawStripSize(TIFF* tif, tstrip_t strip)$/;"	f
TIFFReadBufferSetup	3rdparty/tiff-3.9.4/tif_read.c	/^TIFFReadBufferSetup(TIFF* tif, tdata_t bp, tsize_t size)$/;"	f
TIFFReadCustomDirectory	3rdparty/tiff-3.9.4/tif_dirread.c	/^TIFFReadCustomDirectory(TIFF* tif, toff_t diroff,$/;"	f
TIFFReadDirectory	3rdparty/tiff-3.9.4/tif_dirread.c	/^TIFFReadDirectory(TIFF* tif)$/;"	f
TIFFReadDirectoryFind	3rdparty/tiff-3.9.4/tif_dirread.c	/^TIFFReadDirectoryFind(TIFFDirEntry* dir, uint16 dircount, uint16 tagid)$/;"	f	file:
TIFFReadEXIFDirectory	3rdparty/tiff-3.9.4/tif_dirread.c	/^TIFFReadEXIFDirectory(TIFF* tif, toff_t diroff)$/;"	f
TIFFReadEncodedStrip	3rdparty/tiff-3.9.4/tif_read.c	/^TIFFReadEncodedStrip(TIFF* tif, tstrip_t strip, tdata_t buf, tsize_t size)$/;"	f
TIFFReadEncodedTile	3rdparty/tiff-3.9.4/tif_read.c	/^TIFFReadEncodedTile(TIFF* tif, ttile_t tile, tdata_t buf, tsize_t size)$/;"	f
TIFFReadFile	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	TIFFReadFile(/;"	d
TIFFReadRGBAImage	3rdparty/tiff-3.9.4/tif_getimage.c	/^TIFFReadRGBAImage(TIFF* tif,$/;"	f
TIFFReadRGBAImageOriented	3rdparty/tiff-3.9.4/tif_getimage.c	/^TIFFReadRGBAImageOriented(TIFF* tif,$/;"	f
TIFFReadRGBAStrip	3rdparty/tiff-3.9.4/tif_getimage.c	/^TIFFReadRGBAStrip(TIFF* tif, uint32 row, uint32 * raster )$/;"	f
TIFFReadRGBATile	3rdparty/tiff-3.9.4/tif_getimage.c	/^TIFFReadRGBATile(TIFF* tif, uint32 col, uint32 row, uint32 * raster)$/;"	f
TIFFReadRawStrip	3rdparty/tiff-3.9.4/tif_read.c	/^TIFFReadRawStrip(TIFF* tif, tstrip_t strip, tdata_t buf, tsize_t size)$/;"	f
TIFFReadRawStrip1	3rdparty/tiff-3.9.4/tif_read.c	/^TIFFReadRawStrip1(TIFF* tif,$/;"	f	file:
TIFFReadRawTile	3rdparty/tiff-3.9.4/tif_read.c	/^TIFFReadRawTile(TIFF* tif, ttile_t tile, tdata_t buf, tsize_t size)$/;"	f
TIFFReadRawTile1	3rdparty/tiff-3.9.4/tif_read.c	/^TIFFReadRawTile1(TIFF* tif,$/;"	f	file:
TIFFReadScanline	3rdparty/tiff-3.9.4/tif_read.c	/^TIFFReadScanline(TIFF* tif, tdata_t buf, uint32 row, tsample_t sample)$/;"	f
TIFFReadTile	3rdparty/tiff-3.9.4/tif_read.c	/^TIFFReadTile(TIFF* tif,$/;"	f
TIFFReadWriteProc	3rdparty/tiff-3.9.4/tiffio.h	/^typedef	tsize_t (*TIFFReadWriteProc)(thandle_t, tdata_t, tsize_t);$/;"	t
TIFFReassignTagToIgnore	3rdparty/tiff-3.9.4/tif_dir.c	/^TIFFReassignTagToIgnore (enum TIFFIgnoreSense task, int TIFFtagID)$/;"	f
TIFFRegisterCODEC	3rdparty/tiff-3.9.4/tif_compress.c	/^TIFFRegisterCODEC(uint16 scheme, const char* name, TIFFInitMethod init)$/;"	f
TIFFReverseBits	3rdparty/tiff-3.9.4/tif_swab.c	/^TIFFReverseBits(register unsigned char* cp, register unsigned long n)$/;"	f
TIFFRewriteDirectory	3rdparty/tiff-3.9.4/tif_dirwrite.c	/^TIFFRewriteDirectory( TIFF *tif )$/;"	f
TIFFSafeMultiply	3rdparty/tiff-3.9.4/tiffiop.h	/^#define TIFFSafeMultiply(/;"	d
TIFFScanlineSize	3rdparty/tiff-3.9.4/tif_strip.c	/^TIFFScanlineSize(TIFF* tif)$/;"	f
TIFFSeek	3rdparty/tiff-3.9.4/tif_read.c	/^TIFFSeek(TIFF* tif, uint32 row, tsample_t sample)$/;"	f	file:
TIFFSeekFile	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	TIFFSeekFile(/;"	d
TIFFSeekMethod	3rdparty/tiff-3.9.4/tiffiop.h	/^typedef	int (*TIFFSeekMethod)(TIFF*, uint32);$/;"	t
TIFFSeekProc	3rdparty/tiff-3.9.4/tiffio.h	/^typedef	toff_t (*TIFFSeekProc)(thandle_t, toff_t, int);$/;"	t
TIFFSetClientInfo	3rdparty/tiff-3.9.4/tif_extension.c	/^void TIFFSetClientInfo( TIFF *tif, void *data, const char *name )$/;"	f
TIFFSetClientdata	3rdparty/tiff-3.9.4/tif_open.c	/^TIFFSetClientdata(TIFF* tif, thandle_t newvalue)$/;"	f
TIFFSetCompressionScheme	3rdparty/tiff-3.9.4/tif_compress.c	/^TIFFSetCompressionScheme(TIFF* tif, int scheme)$/;"	f
TIFFSetDirectory	3rdparty/tiff-3.9.4/tif_dir.c	/^TIFFSetDirectory(TIFF* tif, tdir_t dirn)$/;"	f
TIFFSetErrorHandler	3rdparty/tiff-3.9.4/tif_error.c	/^TIFFSetErrorHandler(TIFFErrorHandler handler)$/;"	f
TIFFSetErrorHandlerExt	3rdparty/tiff-3.9.4/tif_error.c	/^TIFFSetErrorHandlerExt(TIFFErrorHandlerExt handler)$/;"	f
TIFFSetField	3rdparty/tiff-3.9.4/tif_dir.c	/^TIFFSetField(TIFF* tif, ttag_t tag, ...)$/;"	f
TIFFSetFieldBit	3rdparty/tiff-3.9.4/tif_dir.h	/^#define TIFFSetFieldBit(/;"	d
TIFFSetFileName	3rdparty/tiff-3.9.4/tif_open.c	/^TIFFSetFileName(TIFF* tif, const char *name)$/;"	f
TIFFSetFileno	3rdparty/tiff-3.9.4/tif_open.c	/^TIFFSetFileno(TIFF* tif, int fd)$/;"	f
TIFFSetMode	3rdparty/tiff-3.9.4/tif_open.c	/^TIFFSetMode(TIFF* tif, int mode)$/;"	f
TIFFSetSubDirectory	3rdparty/tiff-3.9.4/tif_dir.c	/^TIFFSetSubDirectory(TIFF* tif, uint32 diroff)$/;"	f
TIFFSetTagExtender	3rdparty/tiff-3.9.4/tif_dir.c	/^TIFFSetTagExtender(TIFFExtendProc extender)$/;"	f
TIFFSetWarningHandler	3rdparty/tiff-3.9.4/tif_warning.c	/^TIFFSetWarningHandler(TIFFErrorHandler handler)$/;"	f
TIFFSetWarningHandlerExt	3rdparty/tiff-3.9.4/tif_warning.c	/^TIFFSetWarningHandlerExt(TIFFErrorHandlerExt handler)$/;"	f
TIFFSetWriteOffset	3rdparty/tiff-3.9.4/tif_write.c	/^TIFFSetWriteOffset(TIFF* tif, toff_t off)$/;"	f
TIFFSetupShort	3rdparty/tiff-3.9.4/tif_dirwrite.c	/^TIFFSetupShort(TIFF* tif, ttag_t tag, TIFFDirEntry* dir, uint16 v)$/;"	f	file:
TIFFSetupShortLong	3rdparty/tiff-3.9.4/tif_dirwrite.c	/^TIFFSetupShortLong(TIFF* tif, ttag_t tag, TIFFDirEntry* dir, uint32 v)$/;"	f	file:
TIFFSetupShortPair	3rdparty/tiff-3.9.4/tif_dirwrite.c	/^TIFFSetupShortPair(TIFF* tif, ttag_t tag, TIFFDirEntry* dir)$/;"	f	file:
TIFFSetupStrips	3rdparty/tiff-3.9.4/tif_write.c	/^TIFFSetupStrips(TIFF* tif)$/;"	f
TIFFSizeProc	3rdparty/tiff-3.9.4/tiffio.h	/^typedef	toff_t (*TIFFSizeProc)(thandle_t);$/;"	t
TIFFStartStrip	3rdparty/tiff-3.9.4/tif_read.c	/^TIFFStartStrip(TIFF* tif, tstrip_t strip)$/;"	f	file:
TIFFStartTile	3rdparty/tiff-3.9.4/tif_read.c	/^TIFFStartTile(TIFF* tif, ttile_t tile)$/;"	f	file:
TIFFStreamOpen	3rdparty/tiff-3.9.4/tif_stream.cxx	/^TIFFStreamOpen(const char* name, istream *is)$/;"	f
TIFFStreamOpen	3rdparty/tiff-3.9.4/tif_stream.cxx	/^TIFFStreamOpen(const char* name, ostream *os)$/;"	f
TIFFStripMethod	3rdparty/tiff-3.9.4/tiffiop.h	/^typedef	uint32 (*TIFFStripMethod)(TIFF*, uint32);$/;"	t
TIFFStripSize	3rdparty/tiff-3.9.4/tif_strip.c	/^TIFFStripSize(TIFF* tif)$/;"	f
TIFFSwabArrayOfDouble	3rdparty/tiff-3.9.4/tif_swab.c	/^TIFFSwabArrayOfDouble(double* dp, register unsigned long n)$/;"	f
TIFFSwabArrayOfLong	3rdparty/tiff-3.9.4/tif_swab.c	/^TIFFSwabArrayOfLong(register uint32* lp, register unsigned long n)$/;"	f
TIFFSwabArrayOfShort	3rdparty/tiff-3.9.4/tif_swab.c	/^TIFFSwabArrayOfShort(uint16* wp, register unsigned long n)$/;"	f
TIFFSwabArrayOfTriples	3rdparty/tiff-3.9.4/tif_swab.c	/^TIFFSwabArrayOfTriples(uint8* tp, unsigned long n)$/;"	f
TIFFSwabDouble	3rdparty/tiff-3.9.4/tif_swab.c	/^TIFFSwabDouble(double *dp)$/;"	f
TIFFSwabLong	3rdparty/tiff-3.9.4/tif_swab.c	/^TIFFSwabLong(uint32* lp)$/;"	f
TIFFSwabShort	3rdparty/tiff-3.9.4/tif_swab.c	/^TIFFSwabShort(uint16* wp)$/;"	f
TIFFTAG_ACTIVEAREA	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_ACTIVEAREA	/;"	d
TIFFTAG_ANALOGBALANCE	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_ANALOGBALANCE	/;"	d
TIFFTAG_ANTIALIASSTRENGTH	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_ANTIALIASSTRENGTH	/;"	d
TIFFTAG_ARTIST	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_ARTIST	/;"	d
TIFFTAG_ASSHOTICCPROFILE	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_ASSHOTICCPROFILE	/;"	d
TIFFTAG_ASSHOTNEUTRAL	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_ASSHOTNEUTRAL	/;"	d
TIFFTAG_ASSHOTPREPROFILEMATRIX	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_ASSHOTPREPROFILEMATRIX	/;"	d
TIFFTAG_ASSHOTWHITEXY	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_ASSHOTWHITEXY	/;"	d
TIFFTAG_BADFAXLINES	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_BADFAXLINES	/;"	d
TIFFTAG_BASELINEEXPOSURE	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_BASELINEEXPOSURE	/;"	d
TIFFTAG_BASELINENOISE	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_BASELINENOISE	/;"	d
TIFFTAG_BASELINESHARPNESS	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_BASELINESHARPNESS	/;"	d
TIFFTAG_BAYERGREENSPLIT	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_BAYERGREENSPLIT	/;"	d
TIFFTAG_BESTQUALITYSCALE	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_BESTQUALITYSCALE	/;"	d
TIFFTAG_BITSPERSAMPLE	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_BITSPERSAMPLE	/;"	d
TIFFTAG_BLACKLEVEL	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_BLACKLEVEL	/;"	d
TIFFTAG_BLACKLEVELDELTAH	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_BLACKLEVELDELTAH	/;"	d
TIFFTAG_BLACKLEVELDELTAV	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_BLACKLEVELDELTAV	/;"	d
TIFFTAG_BLACKLEVELREPEATDIM	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_BLACKLEVELREPEATDIM	/;"	d
TIFFTAG_CALIBRATIONILLUMINANT1	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_CALIBRATIONILLUMINANT1	/;"	d
TIFFTAG_CALIBRATIONILLUMINANT2	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_CALIBRATIONILLUMINANT2	/;"	d
TIFFTAG_CAMERACALIBRATION1	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_CAMERACALIBRATION1	/;"	d
TIFFTAG_CAMERACALIBRATION2	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_CAMERACALIBRATION2	/;"	d
TIFFTAG_CAMERASERIALNUMBER	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_CAMERASERIALNUMBER	/;"	d
TIFFTAG_CELLLENGTH	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_CELLLENGTH	/;"	d
TIFFTAG_CELLWIDTH	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_CELLWIDTH	/;"	d
TIFFTAG_CFALAYOUT	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_CFALAYOUT	/;"	d
TIFFTAG_CFAPLANECOLOR	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_CFAPLANECOLOR	/;"	d
TIFFTAG_CHROMABLURRADIUS	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_CHROMABLURRADIUS	/;"	d
TIFFTAG_CLEANFAXDATA	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_CLEANFAXDATA	/;"	d
TIFFTAG_CLIPPATH	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_CLIPPATH	/;"	d
TIFFTAG_COLORMAP	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_COLORMAP	/;"	d
TIFFTAG_COLORMATRIX1	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_COLORMATRIX1	/;"	d
TIFFTAG_COLORMATRIX2	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_COLORMATRIX2	/;"	d
TIFFTAG_COLORRESPONSEUNIT	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_COLORRESPONSEUNIT	/;"	d
TIFFTAG_COMPRESSION	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_COMPRESSION	/;"	d
TIFFTAG_CONSECUTIVEBADFAXLINES	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_CONSECUTIVEBADFAXLINES	/;"	d
TIFFTAG_COPYRIGHT	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_COPYRIGHT	/;"	d
TIFFTAG_CURRENTICCPROFILE	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_CURRENTICCPROFILE	/;"	d
TIFFTAG_CURRENTPREPROFILEMATRIX	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_CURRENTPREPROFILEMATRIX	/;"	d
TIFFTAG_DATATYPE	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_DATATYPE	/;"	d
TIFFTAG_DATETIME	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_DATETIME	/;"	d
TIFFTAG_DCSBALANCEARRAY	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_DCSBALANCEARRAY /;"	d
TIFFTAG_DCSCALIBRATIONFD	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_DCSCALIBRATIONFD /;"	d
TIFFTAG_DCSCLIPRECTANGLE	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_DCSCLIPRECTANGLE	/;"	d
TIFFTAG_DCSCORRECTMATRIX	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_DCSCORRECTMATRIX /;"	d
TIFFTAG_DCSGAMMA	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_DCSGAMMA /;"	d
TIFFTAG_DCSHUESHIFTVALUES	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_DCSHUESHIFTVALUES /;"	d
TIFFTAG_DCSIMAGERTYPE	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_DCSIMAGERTYPE /;"	d
TIFFTAG_DCSINTERPMODE	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_DCSINTERPMODE /;"	d
TIFFTAG_DCSTOESHOULDERPTS	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_DCSTOESHOULDERPTS /;"	d
TIFFTAG_DEFAULTCROPORIGIN	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_DEFAULTCROPORIGIN	/;"	d
TIFFTAG_DEFAULTCROPSIZE	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_DEFAULTCROPSIZE	/;"	d
TIFFTAG_DEFAULTSCALE	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_DEFAULTSCALE	/;"	d
TIFFTAG_DNGBACKWARDVERSION	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_DNGBACKWARDVERSION	/;"	d
TIFFTAG_DNGPRIVATEDATA	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_DNGPRIVATEDATA	/;"	d
TIFFTAG_DNGVERSION	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_DNGVERSION	/;"	d
TIFFTAG_DOCUMENTNAME	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_DOCUMENTNAME	/;"	d
TIFFTAG_DOTRANGE	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_DOTRANGE	/;"	d
TIFFTAG_EXIFIFD	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_EXIFIFD	/;"	d
TIFFTAG_EXTRASAMPLES	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_EXTRASAMPLES	/;"	d
TIFFTAG_FAXDCS	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_FAXDCS	/;"	d
TIFFTAG_FAXFILLFUNC	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_FAXFILLFUNC	/;"	d
TIFFTAG_FAXMODE	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_FAXMODE	/;"	d
TIFFTAG_FAXRECVPARAMS	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_FAXRECVPARAMS	/;"	d
TIFFTAG_FAXRECVTIME	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_FAXRECVTIME	/;"	d
TIFFTAG_FAXSUBADDRESS	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_FAXSUBADDRESS	/;"	d
TIFFTAG_FEDEX_EDR	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_FEDEX_EDR	/;"	d
TIFFTAG_FILLORDER	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_FILLORDER	/;"	d
TIFFTAG_FRAMECOUNT	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_FRAMECOUNT /;"	d
TIFFTAG_FREEBYTECOUNTS	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_FREEBYTECOUNTS	/;"	d
TIFFTAG_FREEOFFSETS	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_FREEOFFSETS	/;"	d
TIFFTAG_GPSIFD	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_GPSIFD	/;"	d
TIFFTAG_GRAYRESPONSECURVE	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_GRAYRESPONSECURVE	/;"	d
TIFFTAG_GRAYRESPONSEUNIT	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_GRAYRESPONSEUNIT	/;"	d
TIFFTAG_GROUP3OPTIONS	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_GROUP3OPTIONS	/;"	d
TIFFTAG_GROUP4OPTIONS	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_GROUP4OPTIONS	/;"	d
TIFFTAG_HALFTONEHINTS	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_HALFTONEHINTS	/;"	d
TIFFTAG_HOSTCOMPUTER	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_HOSTCOMPUTER	/;"	d
TIFFTAG_ICCPROFILE	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_ICCPROFILE	/;"	d
TIFFTAG_IMAGEDEPTH	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_IMAGEDEPTH	/;"	d
TIFFTAG_IMAGEDESCRIPTION	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_IMAGEDESCRIPTION	/;"	d
TIFFTAG_IMAGELENGTH	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_IMAGELENGTH	/;"	d
TIFFTAG_IMAGEWIDTH	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_IMAGEWIDTH	/;"	d
TIFFTAG_INDEXED	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_INDEXED	/;"	d
TIFFTAG_INKNAMES	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_INKNAMES	/;"	d
TIFFTAG_INKSET	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_INKSET	/;"	d
TIFFTAG_INTEROPERABILITYIFD	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_INTEROPERABILITYIFD	/;"	d
TIFFTAG_IT8BITSPEREXTENDEDRUNLENGTH	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_IT8BITSPEREXTENDEDRUNLENGTH /;"	d
TIFFTAG_IT8BITSPERRUNLENGTH	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_IT8BITSPERRUNLENGTH	/;"	d
TIFFTAG_IT8BKGCOLORINDICATOR	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_IT8BKGCOLORINDICATOR	/;"	d
TIFFTAG_IT8BKGCOLORVALUE	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_IT8BKGCOLORVALUE	/;"	d
TIFFTAG_IT8CMYKEQUIVALENT	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_IT8CMYKEQUIVALENT	/;"	d
TIFFTAG_IT8COLORCHARACTERIZATION	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_IT8COLORCHARACTERIZATION /;"	d
TIFFTAG_IT8COLORSEQUENCE	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_IT8COLORSEQUENCE	/;"	d
TIFFTAG_IT8COLORTABLE	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_IT8COLORTABLE	/;"	d
TIFFTAG_IT8HCUSAGE	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_IT8HCUSAGE	/;"	d
TIFFTAG_IT8HEADER	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_IT8HEADER	/;"	d
TIFFTAG_IT8IMAGECOLORINDICATOR	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_IT8IMAGECOLORINDICATOR	/;"	d
TIFFTAG_IT8IMAGECOLORVALUE	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_IT8IMAGECOLORVALUE	/;"	d
TIFFTAG_IT8PIXELINTENSITYRANGE	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_IT8PIXELINTENSITYRANGE	/;"	d
TIFFTAG_IT8RASTERPADDING	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_IT8RASTERPADDING	/;"	d
TIFFTAG_IT8SITE	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_IT8SITE	/;"	d
TIFFTAG_IT8TRANSPARENCYINDICATOR	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_IT8TRANSPARENCYINDICATOR /;"	d
TIFFTAG_IT8TRAPINDICATOR	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_IT8TRAPINDICATOR	/;"	d
TIFFTAG_JBIGOPTIONS	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_JBIGOPTIONS	/;"	d
TIFFTAG_JPEGACTABLES	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_JPEGACTABLES	/;"	d
TIFFTAG_JPEGCOLORMODE	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_JPEGCOLORMODE	/;"	d
TIFFTAG_JPEGDCTABLES	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_JPEGDCTABLES	/;"	d
TIFFTAG_JPEGIFBYTECOUNT	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_JPEGIFBYTECOUNT	/;"	d
TIFFTAG_JPEGIFOFFSET	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_JPEGIFOFFSET	/;"	d
TIFFTAG_JPEGLOSSLESSPREDICTORS	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_JPEGLOSSLESSPREDICTORS	/;"	d
TIFFTAG_JPEGPOINTTRANSFORM	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_JPEGPOINTTRANSFORM	/;"	d
TIFFTAG_JPEGPROC	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_JPEGPROC	/;"	d
TIFFTAG_JPEGQTABLES	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_JPEGQTABLES	/;"	d
TIFFTAG_JPEGQUALITY	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_JPEGQUALITY	/;"	d
TIFFTAG_JPEGRESTARTINTERVAL	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_JPEGRESTARTINTERVAL	/;"	d
TIFFTAG_JPEGTABLES	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_JPEGTABLES	/;"	d
TIFFTAG_JPEGTABLESMODE	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_JPEGTABLESMODE	/;"	d
TIFFTAG_LENSINFO	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_LENSINFO	/;"	d
TIFFTAG_LINEARIZATIONTABLE	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_LINEARIZATIONTABLE	/;"	d
TIFFTAG_LINEARRESPONSELIMIT	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_LINEARRESPONSELIMIT	/;"	d
TIFFTAG_LOCALIZEDCAMERAMODEL	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_LOCALIZEDCAMERAMODEL	/;"	d
TIFFTAG_MAKE	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_MAKE	/;"	d
TIFFTAG_MAKERNOTESAFETY	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_MAKERNOTESAFETY	/;"	d
TIFFTAG_MASKEDAREAS	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_MASKEDAREAS	/;"	d
TIFFTAG_MATTEING	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_MATTEING	/;"	d
TIFFTAG_MAXSAMPLEVALUE	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_MAXSAMPLEVALUE	/;"	d
TIFFTAG_MINSAMPLEVALUE	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_MINSAMPLEVALUE	/;"	d
TIFFTAG_MODEL	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_MODEL	/;"	d
TIFFTAG_NUMBEROFINKS	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_NUMBEROFINKS	/;"	d
TIFFTAG_OPIIMAGEID	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_OPIIMAGEID	/;"	d
TIFFTAG_OPIPROXY	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_OPIPROXY	/;"	d
TIFFTAG_ORIENTATION	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_ORIENTATION	/;"	d
TIFFTAG_ORIGINALRAWFILEDATA	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_ORIGINALRAWFILEDATA	/;"	d
TIFFTAG_ORIGINALRAWFILENAME	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_ORIGINALRAWFILENAME	/;"	d
TIFFTAG_OSUBFILETYPE	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_OSUBFILETYPE	/;"	d
TIFFTAG_PAGENAME	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_PAGENAME	/;"	d
TIFFTAG_PAGENUMBER	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_PAGENUMBER	/;"	d
TIFFTAG_PHOTOMETRIC	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_PHOTOMETRIC	/;"	d
TIFFTAG_PHOTOSHOP	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_PHOTOSHOP	/;"	d
TIFFTAG_PIXARLOGDATAFMT	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_PIXARLOGDATAFMT	/;"	d
TIFFTAG_PIXARLOGQUALITY	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_PIXARLOGQUALITY	/;"	d
TIFFTAG_PIXAR_FOVCOT	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_PIXAR_FOVCOT	/;"	d
TIFFTAG_PIXAR_IMAGEFULLLENGTH	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_PIXAR_IMAGEFULLLENGTH /;"	d
TIFFTAG_PIXAR_IMAGEFULLWIDTH	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_PIXAR_IMAGEFULLWIDTH /;"	d
TIFFTAG_PIXAR_MATRIX_WORLDTOCAMERA	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_PIXAR_MATRIX_WORLDTOCAMERA /;"	d
TIFFTAG_PIXAR_MATRIX_WORLDTOSCREEN	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_PIXAR_MATRIX_WORLDTOSCREEN /;"	d
TIFFTAG_PIXAR_TEXTUREFORMAT	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_PIXAR_TEXTUREFORMAT	/;"	d
TIFFTAG_PIXAR_WRAPMODES	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_PIXAR_WRAPMODES	/;"	d
TIFFTAG_PLANARCONFIG	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_PLANARCONFIG	/;"	d
TIFFTAG_PREDICTOR	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_PREDICTOR	/;"	d
TIFFTAG_PRIMARYCHROMATICITIES	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_PRIMARYCHROMATICITIES	/;"	d
TIFFTAG_RAWDATAUNIQUEID	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_RAWDATAUNIQUEID	/;"	d
TIFFTAG_REDUCTIONMATRIX1	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_REDUCTIONMATRIX1	/;"	d
TIFFTAG_REDUCTIONMATRIX2	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_REDUCTIONMATRIX2	/;"	d
TIFFTAG_REFERENCEBLACKWHITE	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_REFERENCEBLACKWHITE	/;"	d
TIFFTAG_REFPTS	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_REFPTS	/;"	d
TIFFTAG_REGIONAFFINE	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_REGIONAFFINE	/;"	d
TIFFTAG_REGIONTACKPOINT	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_REGIONTACKPOINT	/;"	d
TIFFTAG_REGIONWARPCORNERS	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_REGIONWARPCORNERS	/;"	d
TIFFTAG_RESOLUTIONUNIT	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_RESOLUTIONUNIT	/;"	d
TIFFTAG_RICHTIFFIPTC	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_RICHTIFFIPTC	/;"	d
TIFFTAG_ROWSPERSTRIP	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_ROWSPERSTRIP	/;"	d
TIFFTAG_SAMPLEFORMAT	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_SAMPLEFORMAT	/;"	d
TIFFTAG_SAMPLESPERPIXEL	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_SAMPLESPERPIXEL	/;"	d
TIFFTAG_SGILOGDATAFMT	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_SGILOGDATAFMT	/;"	d
TIFFTAG_SGILOGENCODE	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_SGILOGENCODE	/;"	d
TIFFTAG_SHADOWSCALE	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_SHADOWSCALE	/;"	d
TIFFTAG_SMAXSAMPLEVALUE	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_SMAXSAMPLEVALUE	/;"	d
TIFFTAG_SMINSAMPLEVALUE	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_SMINSAMPLEVALUE	/;"	d
TIFFTAG_SOFTWARE	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_SOFTWARE	/;"	d
TIFFTAG_STONITS	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_STONITS	/;"	d
TIFFTAG_STRIPBYTECOUNTS	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_STRIPBYTECOUNTS	/;"	d
TIFFTAG_STRIPOFFSETS	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_STRIPOFFSETS	/;"	d
TIFFTAG_SUBFILETYPE	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_SUBFILETYPE	/;"	d
TIFFTAG_SUBIFD	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_SUBIFD	/;"	d
TIFFTAG_T4OPTIONS	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_T4OPTIONS	/;"	d
TIFFTAG_T6OPTIONS	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_T6OPTIONS /;"	d
TIFFTAG_TARGETPRINTER	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_TARGETPRINTER	/;"	d
TIFFTAG_THRESHHOLDING	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_THRESHHOLDING	/;"	d
TIFFTAG_TILEBYTECOUNTS	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_TILEBYTECOUNTS	/;"	d
TIFFTAG_TILEDEPTH	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_TILEDEPTH	/;"	d
TIFFTAG_TILELENGTH	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_TILELENGTH	/;"	d
TIFFTAG_TILEOFFSETS	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_TILEOFFSETS	/;"	d
TIFFTAG_TILEWIDTH	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_TILEWIDTH	/;"	d
TIFFTAG_TRANSFERFUNCTION	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_TRANSFERFUNCTION	/;"	d
TIFFTAG_UNIQUECAMERAMODEL	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_UNIQUECAMERAMODEL	/;"	d
TIFFTAG_WHITELEVEL	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_WHITELEVEL	/;"	d
TIFFTAG_WHITEPOINT	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_WHITEPOINT	/;"	d
TIFFTAG_WRITERSERIALNUMBER	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFFTAG_WRITERSERIALNUMBER /;"	d
TIFFTAG_XCLIPPATHUNITS	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_XCLIPPATHUNITS	/;"	d
TIFFTAG_XMLPACKET	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_XMLPACKET	/;"	d
TIFFTAG_XPOSITION	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_XPOSITION	/;"	d
TIFFTAG_XRESOLUTION	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_XRESOLUTION	/;"	d
TIFFTAG_YCBCRCOEFFICIENTS	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_YCBCRCOEFFICIENTS	/;"	d
TIFFTAG_YCBCRPOSITIONING	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_YCBCRPOSITIONING	/;"	d
TIFFTAG_YCBCRSUBSAMPLING	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_YCBCRSUBSAMPLING	/;"	d
TIFFTAG_YCLIPPATHUNITS	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_YCLIPPATHUNITS	/;"	d
TIFFTAG_YPOSITION	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_YPOSITION	/;"	d
TIFFTAG_YRESOLUTION	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_YRESOLUTION	/;"	d
TIFFTAG_ZIPQUALITY	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFFTAG_ZIPQUALITY	/;"	d
TIFFTagMethods	3rdparty/tiff-3.9.4/tiffio.h	/^} TIFFTagMethods;$/;"	t	typeref:struct:__anon69
TIFFTagValue	3rdparty/tiff-3.9.4/tiffio.h	/^} TIFFTagValue;$/;"	t	typeref:struct:_TIFFTagValue
TIFFTileMethod	3rdparty/tiff-3.9.4/tiffiop.h	/^typedef	void (*TIFFTileMethod)(TIFF*, uint32*, uint32*);$/;"	t
TIFFTileRowSize	3rdparty/tiff-3.9.4/tif_tile.c	/^TIFFTileRowSize(TIFF* tif)$/;"	f
TIFFTileSize	3rdparty/tiff-3.9.4/tif_tile.c	/^TIFFTileSize(TIFF* tif)$/;"	f
TIFFUnRegisterCODEC	3rdparty/tiff-3.9.4/tif_compress.c	/^TIFFUnRegisterCODEC(TIFFCodec* c)$/;"	f
TIFFUnlinkDirectory	3rdparty/tiff-3.9.4/tif_dir.c	/^TIFFUnlinkDirectory(TIFF* tif, tdir_t dirn)$/;"	f
TIFFUnmapFileContents	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	TIFFUnmapFileContents(/;"	d
TIFFUnmapFileProc	3rdparty/tiff-3.9.4/tiffio.h	/^typedef	void (*TIFFUnmapFileProc)(thandle_t, tdata_t, toff_t);$/;"	t
TIFFVGetField	3rdparty/tiff-3.9.4/tif_dir.c	/^TIFFVGetField(TIFF* tif, ttag_t tag, va_list ap)$/;"	f
TIFFVGetFieldDefaulted	3rdparty/tiff-3.9.4/tif_aux.c	/^TIFFVGetFieldDefaulted(TIFF* tif, ttag_t tag, va_list ap)$/;"	f
TIFFVGetMethod	3rdparty/tiff-3.9.4/tiffio.h	/^typedef	int (*TIFFVGetMethod)(TIFF*, ttag_t, va_list);$/;"	t
TIFFVSetField	3rdparty/tiff-3.9.4/tif_dir.c	/^TIFFVSetField(TIFF* tif, ttag_t tag, va_list ap)$/;"	f
TIFFVSetMethod	3rdparty/tiff-3.9.4/tiffio.h	/^typedef	int (*TIFFVSetMethod)(TIFF*, ttag_t, va_list);$/;"	t
TIFFVStripSize	3rdparty/tiff-3.9.4/tif_strip.c	/^TIFFVStripSize(TIFF* tif, uint32 nrows)$/;"	f
TIFFVTileSize	3rdparty/tiff-3.9.4/tif_tile.c	/^TIFFVTileSize(TIFF* tif, uint32 nrows)$/;"	f
TIFFVersion	3rdparty/tiff-3.9.4/tif_version.c	/^static const char TIFFVersion[] = TIFFLIB_VERSION_STR;$/;"	v	file:
TIFFVoidMethod	3rdparty/tiff-3.9.4/tiffiop.h	/^typedef	void (*TIFFVoidMethod)(TIFF*);$/;"	t
TIFFWarning	3rdparty/tiff-3.9.4/tif_warning.c	/^TIFFWarning(const char* module, const char* fmt, ...)$/;"	f
TIFFWarningExt	3rdparty/tiff-3.9.4/tif_warning.c	/^TIFFWarningExt(thandle_t fd, const char* module, const char* fmt, ...)$/;"	f
TIFFWriteAnyArray	3rdparty/tiff-3.9.4/tif_dirwrite.c	/^TIFFWriteAnyArray(TIFF* tif,$/;"	f	file:
TIFFWriteBufferSetup	3rdparty/tiff-3.9.4/tif_write.c	/^TIFFWriteBufferSetup(TIFF* tif, tdata_t bp, tsize_t size)$/;"	f
TIFFWriteByteArray	3rdparty/tiff-3.9.4/tif_dirwrite.c	/^TIFFWriteByteArray(TIFF* tif, TIFFDirEntry* dir, char* cp)$/;"	f	file:
TIFFWriteCheck	3rdparty/tiff-3.9.4/tif_write.c	/^TIFFWriteCheck(TIFF* tif, int tiles, const char* module)$/;"	f
TIFFWriteCustomDirectory	3rdparty/tiff-3.9.4/tif_dirwrite.c	/^TIFFWriteCustomDirectory(TIFF* tif, toff_t *pdiroff)$/;"	f
TIFFWriteData	3rdparty/tiff-3.9.4/tif_dirwrite.c	/^TIFFWriteData(TIFF* tif, TIFFDirEntry* dir, char* cp)$/;"	f	file:
TIFFWriteDirectory	3rdparty/tiff-3.9.4/tif_dirwrite.c	/^TIFFWriteDirectory(TIFF* tif)$/;"	f
TIFFWriteDoubleArray	3rdparty/tiff-3.9.4/tif_dirwrite.c	/^TIFFWriteDoubleArray(TIFF* tif, TIFFDirEntry* dir, double* v)$/;"	f	file:
TIFFWriteEncodedStrip	3rdparty/tiff-3.9.4/tif_write.c	/^TIFFWriteEncodedStrip(TIFF* tif, tstrip_t strip, tdata_t data, tsize_t cc)$/;"	f
TIFFWriteEncodedTile	3rdparty/tiff-3.9.4/tif_write.c	/^TIFFWriteEncodedTile(TIFF* tif, ttile_t tile, tdata_t data, tsize_t cc)$/;"	f
TIFFWriteFile	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	TIFFWriteFile(/;"	d
TIFFWriteFloatArray	3rdparty/tiff-3.9.4/tif_dirwrite.c	/^TIFFWriteFloatArray(TIFF* tif, TIFFDirEntry* dir, float* v)$/;"	f	file:
TIFFWriteInkNames	3rdparty/tiff-3.9.4/tif_dirwrite.c	/^TIFFWriteInkNames(TIFF* tif, TIFFDirEntry* dir)$/;"	f	file:
TIFFWriteLongArray	3rdparty/tiff-3.9.4/tif_dirwrite.c	/^TIFFWriteLongArray(TIFF* tif, TIFFDirEntry* dir, uint32* v)$/;"	f	file:
TIFFWriteNormalTag	3rdparty/tiff-3.9.4/tif_dirwrite.c	/^TIFFWriteNormalTag(TIFF* tif, TIFFDirEntry* dir, const TIFFFieldInfo* fip)$/;"	f	file:
TIFFWritePerSampleAnys	3rdparty/tiff-3.9.4/tif_dirwrite.c	/^TIFFWritePerSampleAnys(TIFF* tif,$/;"	f	file:
TIFFWritePerSampleShorts	3rdparty/tiff-3.9.4/tif_dirwrite.c	/^TIFFWritePerSampleShorts(TIFF* tif, ttag_t tag, TIFFDirEntry* dir)$/;"	f	file:
TIFFWriteRational	3rdparty/tiff-3.9.4/tif_dirwrite.c	/^#define	TIFFWriteRational(/;"	d	file:
TIFFWriteRationalArray	3rdparty/tiff-3.9.4/tif_dirwrite.c	/^TIFFWriteRationalArray(TIFF* tif, TIFFDirEntry* dir, float* v)$/;"	f	file:
TIFFWriteRawStrip	3rdparty/tiff-3.9.4/tif_write.c	/^TIFFWriteRawStrip(TIFF* tif, tstrip_t strip, tdata_t data, tsize_t cc)$/;"	f
TIFFWriteRawTile	3rdparty/tiff-3.9.4/tif_write.c	/^TIFFWriteRawTile(TIFF* tif, ttile_t tile, tdata_t data, tsize_t cc)$/;"	f
TIFFWriteScanline	3rdparty/tiff-3.9.4/tif_write.c	/^TIFFWriteScanline(TIFF* tif, tdata_t buf, uint32 row, tsample_t sample)$/;"	f
TIFFWriteShortArray	3rdparty/tiff-3.9.4/tif_dirwrite.c	/^TIFFWriteShortArray(TIFF* tif, TIFFDirEntry* dir, uint16* v)$/;"	f	file:
TIFFWriteShortTable	3rdparty/tiff-3.9.4/tif_dirwrite.c	/^TIFFWriteShortTable(TIFF* tif,$/;"	f	file:
TIFFWriteTile	3rdparty/tiff-3.9.4/tif_write.c	/^TIFFWriteTile(TIFF* tif,$/;"	f
TIFFWriteTransferFunction	3rdparty/tiff-3.9.4/tif_dirwrite.c	/^TIFFWriteTransferFunction(TIFF* tif, TIFFDirEntry* dir)$/;"	f	file:
TIFFXYZToRGB	3rdparty/tiff-3.9.4/tif_color.c	/^TIFFXYZToRGB(TIFFCIELabToRGB *cielab, float X, float Y, float Z,$/;"	f
TIFFYCbCrToRGB	3rdparty/tiff-3.9.4/tiffio.h	/^} TIFFYCbCrToRGB;$/;"	t	typeref:struct:__anon64
TIFFYCbCrToRGBInit	3rdparty/tiff-3.9.4/tif_color.c	/^TIFFYCbCrToRGBInit(TIFFYCbCrToRGB* ycbcr, float *luma, float *refBlackWhite)$/;"	f
TIFFYCbCrtoRGB	3rdparty/tiff-3.9.4/tif_color.c	/^TIFFYCbCrtoRGB(TIFFYCbCrToRGB *ycbcr, uint32 Y, int32 Cb, int32 Cr,$/;"	f
TIFF_ANY	3rdparty/tiff-3.9.4/tiffio.h	/^#define	TIFF_ANY	/;"	d
TIFF_ASCII	3rdparty/tiff-3.9.4/tiff.h	/^	TIFF_ASCII	= 2,	\/* 8-bit bytes w\/ last byte null *\/$/;"	e	enum:__anon62
TIFF_BEENWRITING	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	TIFF_BEENWRITING	/;"	d
TIFF_BIGENDIAN	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFF_BIGENDIAN	/;"	d
TIFF_BIGTIFF_VERSION	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFF_BIGTIFF_VERSION /;"	d
TIFF_BUFFERSETUP	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	TIFF_BUFFERSETUP	/;"	d
TIFF_BYTE	3rdparty/tiff-3.9.4/tiff.h	/^	TIFF_BYTE	= 1,	\/* 8-bit unsigned integer *\/$/;"	e	enum:__anon62
TIFF_CODERSETUP	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	TIFF_CODERSETUP	/;"	d
TIFF_DIROFFSET_SIZE	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFF_DIROFFSET_SIZE	/;"	d
TIFF_DIRTYDIRECT	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	TIFF_DIRTYDIRECT	/;"	d
TIFF_DIRTYHEADER	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	TIFF_DIRTYHEADER	/;"	d
TIFF_DOUBLE	3rdparty/tiff-3.9.4/tiff.h	/^	TIFF_DOUBLE	= 12,	\/* !64-bit IEEE floating point *\/$/;"	e	enum:__anon62
TIFF_FILLORDER	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	TIFF_FILLORDER	/;"	d
TIFF_FLOAT	3rdparty/tiff-3.9.4/tiff.h	/^	TIFF_FLOAT	= 11,	\/* !32-bit IEEE floating point *\/$/;"	e	enum:__anon62
TIFF_HEADERONLY	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	TIFF_HEADERONLY	/;"	d
TIFF_IFD	3rdparty/tiff-3.9.4/tiff.h	/^	TIFF_IFD	= 13	\/* %32-bit unsigned integer (offset) *\/$/;"	e	enum:__anon62
TIFF_INCLUDES	Makefile	/^TIFF_INCLUDES=-I\/usr\/local\/include -I\/opt\/local\/include$/;"	m
TIFF_INCUSTOMIFD	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	TIFF_INCUSTOMIFD	/;"	d
TIFF_INSUBIFD	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	TIFF_INSUBIFD	/;"	d
TIFF_INT64_FORMAT	3rdparty/tiff-3.9.4/tiffconf.h	/^#define TIFF_INT64_FORMAT /;"	d
TIFF_INT64_FORMAT	3rdparty/tiff-3.9.4/tiffconf.vc.h	/^#define TIFF_INT64_FORMAT /;"	d
TIFF_INT64_FORMAT	3rdparty/tiff-3.9.4/tiffconf.wince.h	/^#define TIFF_INT64_FORMAT /;"	d
TIFF_INT64_T	3rdparty/tiff-3.9.4/tif_config.h	/^#define TIFF_INT64_T /;"	d
TIFF_INT64_T	3rdparty/tiff-3.9.4/tif_config.vc.h	/^#define TIFF_INT64_T /;"	d
TIFF_INT64_T	3rdparty/tiff-3.9.4/tiffconf.h	/^#define TIFF_INT64_T /;"	d
TIFF_INT64_T	3rdparty/tiff-3.9.4/tiffconf.vc.h	/^#define TIFF_INT64_T /;"	d
TIFF_INT64_T	3rdparty/tiff-3.9.4/tiffconf.wince.h	/^#define TIFF_INT64_T /;"	d
TIFF_ISTILED	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	TIFF_ISTILED	/;"	d
TIFF_LIBDIR	Makefile	/^TIFF_LIBDIR=-L\/usr\/local\/lib -L\/opt\/local\/lib$/;"	m
TIFF_LITTLEENDIAN	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFF_LITTLEENDIAN	/;"	d
TIFF_LONG	3rdparty/tiff-3.9.4/tiff.h	/^	TIFF_LONG	= 4,	\/* 32-bit unsigned integer *\/$/;"	e	enum:__anon62
TIFF_MAGIC_SIZE	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFF_MAGIC_SIZE	/;"	d
TIFF_MAPPED	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	TIFF_MAPPED	/;"	d
TIFF_MYBUFFER	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	TIFF_MYBUFFER	/;"	d
TIFF_NOBITREV	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	TIFF_NOBITREV	/;"	d
TIFF_NOREADRAW	3rdparty/tiff-3.9.4/tiffiop.h	/^#define TIFF_NOREADRAW	/;"	d
TIFF_NOTYPE	3rdparty/tiff-3.9.4/tiff.h	/^	TIFF_NOTYPE	= 0,	\/* placeholder *\/$/;"	e	enum:__anon62
TIFF_POSTENCODE	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	TIFF_POSTENCODE	/;"	d
TIFF_RATIONAL	3rdparty/tiff-3.9.4/tiff.h	/^	TIFF_RATIONAL	= 5,	\/* 64-bit unsigned fraction *\/$/;"	e	enum:__anon62
TIFF_SBYTE	3rdparty/tiff-3.9.4/tiff.h	/^	TIFF_SBYTE	= 6,	\/* !8-bit signed integer *\/$/;"	e	enum:__anon62
TIFF_SHORT	3rdparty/tiff-3.9.4/tiff.h	/^	TIFF_SHORT	= 3,	\/* 16-bit unsigned integer *\/$/;"	e	enum:__anon62
TIFF_SLONG	3rdparty/tiff-3.9.4/tiff.h	/^	TIFF_SLONG	= 9,	\/* !32-bit signed integer *\/$/;"	e	enum:__anon62
TIFF_SPP	3rdparty/tiff-3.9.4/tiffio.h	/^#define	TIFF_SPP	/;"	d
TIFF_SRATIONAL	3rdparty/tiff-3.9.4/tiff.h	/^	TIFF_SRATIONAL	= 10,	\/* !64-bit signed fraction *\/$/;"	e	enum:__anon62
TIFF_SSHORT	3rdparty/tiff-3.9.4/tiff.h	/^	TIFF_SSHORT	= 8,	\/* !16-bit signed integer *\/$/;"	e	enum:__anon62
TIFF_STRIPCHOP	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	TIFF_STRIPCHOP	/;"	d
TIFF_SWAB	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	TIFF_SWAB	/;"	d
TIFF_UINT64_FORMAT	3rdparty/tiff-3.9.4/tiffconf.h	/^#define TIFF_UINT64_FORMAT /;"	d
TIFF_UINT64_FORMAT	3rdparty/tiff-3.9.4/tiffconf.vc.h	/^#define TIFF_UINT64_FORMAT /;"	d
TIFF_UINT64_FORMAT	3rdparty/tiff-3.9.4/tiffconf.wince.h	/^#define TIFF_UINT64_FORMAT /;"	d
TIFF_UINT64_T	3rdparty/tiff-3.9.4/tif_config.h	/^#define TIFF_UINT64_T /;"	d
TIFF_UINT64_T	3rdparty/tiff-3.9.4/tif_config.vc.h	/^#define TIFF_UINT64_T /;"	d
TIFF_UINT64_T	3rdparty/tiff-3.9.4/tiffconf.h	/^#define TIFF_UINT64_T /;"	d
TIFF_UINT64_T	3rdparty/tiff-3.9.4/tiffconf.vc.h	/^#define TIFF_UINT64_T /;"	d
TIFF_UINT64_T	3rdparty/tiff-3.9.4/tiffconf.wince.h	/^#define TIFF_UINT64_T /;"	d
TIFF_UNDEFINED	3rdparty/tiff-3.9.4/tiff.h	/^	TIFF_UNDEFINED	= 7,	\/* !8-bit untyped data *\/$/;"	e	enum:__anon62
TIFF_UPSAMPLED	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	TIFF_UPSAMPLED	/;"	d
TIFF_VARIABLE	3rdparty/tiff-3.9.4/tiffio.h	/^#define	TIFF_VARIABLE	/;"	d
TIFF_VARIABLE2	3rdparty/tiff-3.9.4/tiffio.h	/^#define	TIFF_VARIABLE2	/;"	d
TIFF_VERSION	3rdparty/tiff-3.9.4/tiff.h	/^#define	TIFF_VERSION	/;"	d
TIFF_VERSION_SIZE	3rdparty/tiff-3.9.4/tiff.h	/^#define TIFF_VERSION_SIZE	/;"	d
TIFFhowmany	3rdparty/tiff-3.9.4/tiffiop.h	/^#define TIFFhowmany(/;"	d
TIFFhowmany8	3rdparty/tiff-3.9.4/tiffiop.h	/^#define TIFFhowmany8(/;"	d
TIFFjpeg_abort	3rdparty/tiff-3.9.4/tif_jpeg.c	/^TIFFjpeg_abort(JPEGState* sp)$/;"	f	file:
TIFFjpeg_alloc_sarray	3rdparty/tiff-3.9.4/tif_jpeg.c	/^TIFFjpeg_alloc_sarray(JPEGState* sp, int pool_id,$/;"	f	file:
TIFFjpeg_create_compress	3rdparty/tiff-3.9.4/tif_jpeg.c	/^TIFFjpeg_create_compress(JPEGState* sp)$/;"	f	file:
TIFFjpeg_create_decompress	3rdparty/tiff-3.9.4/tif_jpeg.c	/^TIFFjpeg_create_decompress(JPEGState* sp)$/;"	f	file:
TIFFjpeg_data_dest	3rdparty/tiff-3.9.4/tif_jpeg.c	/^TIFFjpeg_data_dest(JPEGState* sp, TIFF* tif)$/;"	f	file:
TIFFjpeg_data_src	3rdparty/tiff-3.9.4/tif_jpeg.c	/^TIFFjpeg_data_src(JPEGState* sp, TIFF* tif)$/;"	f	file:
TIFFjpeg_destroy	3rdparty/tiff-3.9.4/tif_jpeg.c	/^TIFFjpeg_destroy(JPEGState* sp)$/;"	f	file:
TIFFjpeg_error_exit	3rdparty/tiff-3.9.4/tif_jpeg.c	/^TIFFjpeg_error_exit(j_common_ptr cinfo)$/;"	f	file:
TIFFjpeg_finish_compress	3rdparty/tiff-3.9.4/tif_jpeg.c	/^TIFFjpeg_finish_compress(JPEGState* sp)$/;"	f	file:
TIFFjpeg_finish_decompress	3rdparty/tiff-3.9.4/tif_jpeg.c	/^TIFFjpeg_finish_decompress(JPEGState* sp)$/;"	f	file:
TIFFjpeg_output_message	3rdparty/tiff-3.9.4/tif_jpeg.c	/^TIFFjpeg_output_message(j_common_ptr cinfo)$/;"	f	file:
TIFFjpeg_read_header	3rdparty/tiff-3.9.4/tif_jpeg.c	/^TIFFjpeg_read_header(JPEGState* sp, boolean require_image)$/;"	f	file:
TIFFjpeg_read_raw_data	3rdparty/tiff-3.9.4/tif_jpeg.c	/^TIFFjpeg_read_raw_data(JPEGState* sp, JSAMPIMAGE data, int max_lines)$/;"	f	file:
TIFFjpeg_read_scanlines	3rdparty/tiff-3.9.4/tif_jpeg.c	/^TIFFjpeg_read_scanlines(JPEGState* sp, JSAMPARRAY scanlines, int max_lines)$/;"	f	file:
TIFFjpeg_set_colorspace	3rdparty/tiff-3.9.4/tif_jpeg.c	/^TIFFjpeg_set_colorspace(JPEGState* sp, J_COLOR_SPACE colorspace)$/;"	f	file:
TIFFjpeg_set_defaults	3rdparty/tiff-3.9.4/tif_jpeg.c	/^TIFFjpeg_set_defaults(JPEGState* sp)$/;"	f	file:
TIFFjpeg_set_quality	3rdparty/tiff-3.9.4/tif_jpeg.c	/^TIFFjpeg_set_quality(JPEGState* sp, int quality, boolean force_baseline)$/;"	f	file:
TIFFjpeg_start_compress	3rdparty/tiff-3.9.4/tif_jpeg.c	/^TIFFjpeg_start_compress(JPEGState* sp, boolean write_all_tables)$/;"	f	file:
TIFFjpeg_start_decompress	3rdparty/tiff-3.9.4/tif_jpeg.c	/^TIFFjpeg_start_decompress(JPEGState* sp)$/;"	f	file:
TIFFjpeg_suppress_tables	3rdparty/tiff-3.9.4/tif_jpeg.c	/^TIFFjpeg_suppress_tables(JPEGState* sp, boolean suppress)$/;"	f	file:
TIFFjpeg_tables_dest	3rdparty/tiff-3.9.4/tif_jpeg.c	/^TIFFjpeg_tables_dest(JPEGState* sp, TIFF* tif)$/;"	f	file:
TIFFjpeg_tables_src	3rdparty/tiff-3.9.4/tif_jpeg.c	/^TIFFjpeg_tables_src(JPEGState* sp, TIFF* tif)$/;"	f	file:
TIFFjpeg_write_raw_data	3rdparty/tiff-3.9.4/tif_jpeg.c	/^TIFFjpeg_write_raw_data(JPEGState* sp, JSAMPIMAGE data, int num_lines)$/;"	f	file:
TIFFjpeg_write_scanlines	3rdparty/tiff-3.9.4/tif_jpeg.c	/^TIFFjpeg_write_scanlines(JPEGState* sp, JSAMPARRAY scanlines, int num_lines)$/;"	f	file:
TIFFjpeg_write_tables	3rdparty/tiff-3.9.4/tif_jpeg.c	/^TIFFjpeg_write_tables(JPEGState* sp)$/;"	f	file:
TIFFmax	3rdparty/tiff-3.9.4/tiffiop.h	/^#define TIFFmax(/;"	d
TIFFmin	3rdparty/tiff-3.9.4/tiffiop.h	/^#define TIFFmin(/;"	d
TIFFroundup	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	TIFFroundup(/;"	d
TILED_FLAG	3rdparty/openexr-1.7.0/ImfVersion.h	/^const int TILED_FLAG		= 0x00000200;   \/\/ File is tiled$/;"	m	namespace:Imf
TIME	3rdparty/zlib-1.2.5/inflate.h	/^    TIME,       \/* i: waiting for modification time (gzip) *\/$/;"	e	enum:__anon75
TIS_EMPTY	3rdparty/tiff-3.9.4/tiff.h	/^	TIS_EMPTY$/;"	e	enum:TIFFIgnoreSense
TIS_EXTRACT	3rdparty/tiff-3.9.4/tiff.h	/^	TIS_EXTRACT,$/;"	e	enum:TIFFIgnoreSense
TIS_STORE	3rdparty/tiff-3.9.4/tiff.h	/^	TIS_STORE,$/;"	e	enum:TIFFIgnoreSense
TInSliceInfo	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TInSliceInfo::TInSliceInfo (PixelType tifb,$/;"	f	class:Imf::__anon34::TInSliceInfo
TInSliceInfo	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^struct TInSliceInfo$/;"	s	namespace:Imf::__anon34	file:
TOOLS	Makefile	/^TOOLS = bin\/bsdftest bin\/exravg bin\/exrdiff bin\/obj2pbrt$/;"	m
TOO_FAR	3rdparty/zlib-1.2.5/deflate.c	/^#  define TOO_FAR /;"	d	file:
TO_BYTE	core/imageio.cpp	/^#define TO_BYTE(/;"	d	file:
TO_BYTE	core/imageio.cpp	/^#undef TO_BYTE$/;"	d	file:
TOutSliceInfo	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TOutSliceInfo::TOutSliceInfo (PixelType t,$/;"	f	class:Imf::__anon37::TOutSliceInfo
TOutSliceInfo	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^struct TOutSliceInfo$/;"	s	namespace:Imf::__anon37	file:
TRANSFORM	core/pbrtparse.cpp	/^     TRANSFORM = 298,$/;"	e	enum:yytokentype	file:
TRANSFORM	core/pbrtparse.hh	/^     TRANSFORM = 298,$/;"	e	enum:yytokentype
TRANSFORMBEGIN	core/pbrtparse.cpp	/^     TRANSFORMBEGIN = 295,$/;"	e	enum:yytokentype	file:
TRANSFORMBEGIN	core/pbrtparse.hh	/^     TRANSFORMBEGIN = 295,$/;"	e	enum:yytokentype
TRANSFORMEND	core/pbrtparse.cpp	/^     TRANSFORMEND = 296,$/;"	e	enum:yytokentype	file:
TRANSFORMEND	core/pbrtparse.hh	/^     TRANSFORMEND = 296,$/;"	e	enum:yytokentype
TRANSFORMTIMES	core/pbrtparse.cpp	/^     TRANSFORMTIMES = 297,$/;"	e	enum:yytokentype	file:
TRANSFORMTIMES	core/pbrtparse.hh	/^     TRANSFORMTIMES = 297,$/;"	e	enum:yytokentype
TRANSLATE	core/pbrtparse.cpp	/^     TRANSLATE = 299,$/;"	e	enum:yytokentype	file:
TRANSLATE	core/pbrtparse.hh	/^     TRANSLATE = 299,$/;"	e	enum:yytokentype
TRUE	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define TRUE /;"	d	file:
TRUE	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	TRUE	/;"	d
TRY_DECODING_TYPE	core/pbrtparse.cpp	/^#define TRY_DECODING_TYPE(/;"	d	file:
TRY_FREE	3rdparty/zlib-1.2.5/zutil.h	/^#define TRY_FREE(/;"	d
TSIZE	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^#define  TSIZE	/;"	d	file:
TSIZEP1	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^#define  TSIZEP1 /;"	d	file:
TV50_PACKING	3rdparty/openexr-1.7.0/ImfTimeCode.h	/^	TV50_PACKING,		\/\/ packing for 50-field television$/;"	e	enum:Imf::TimeCode::Packing
TV60_PACKING	3rdparty/openexr-1.7.0/ImfTimeCode.h	/^	TV60_PACKING,		\/\/ packing for 60-field television$/;"	e	enum:Imf::TimeCode::Packing
TYPE	3rdparty/zlib-1.2.5/inflate.h	/^        TYPE,       \/* i: waiting for type bits, including last-flag bit *\/$/;"	e	enum:__anon75
TYPEDO	3rdparty/zlib-1.2.5/inflate.h	/^        TYPEDO,     \/* i: same, but skip check to exit inflate on new block *\/$/;"	e	enum:__anon75
Task	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^Task::Task (TaskGroup* g): _group(g)$/;"	f	class:IlmThread::Task
Task	3rdparty/ilmbase-1.0.2/IlmThreadPool.h	/^class Task$/;"	c	namespace:IlmThread
Task	core/parallel.h	/^class Task {$/;"	c
TaskGroup	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^TaskGroup::TaskGroup ():$/;"	f	class:IlmThread::TaskGroup
TaskGroup	3rdparty/ilmbase-1.0.2/IlmThreadPool.h	/^class TaskGroup$/;"	c	namespace:IlmThread
TasksCleanup	core/parallel.cpp	/^void TasksCleanup() {$/;"	f
TasksInit	core/parallel.cpp	/^void TasksInit() {$/;"	f
TermB	3rdparty/tiff-3.9.4/mkg3states.c	/^static struct proto TermB[] = {$/;"	v	typeref:struct:proto	file:
TermW	3rdparty/tiff-3.9.4/mkg3states.c	/^static struct proto TermW[] = {$/;"	v	typeref:struct:proto	file:
TerminalWidth	core/progressreporter.cpp	/^int TerminalWidth() {$/;"	f
TexInfo	textures/imagemap.h	/^    TexInfo(const string &f, bool dt, float ma, ImageWrap wm, float sc, float ga)$/;"	f	struct:TexInfo
TexInfo	textures/imagemap.h	/^struct TexInfo {$/;"	s
Texel	core/mipmap.h	/^const T &MIPMap<T>::Texel(uint32_t level, int s, int t) const {$/;"	f	class:MIPMap
Texture	core/texture.h	/^template <typename T> class Texture : public ReferenceCounted {$/;"	c
TextureMapping2D	core/texture.h	/^class TextureMapping2D {$/;"	c
TextureMapping3D	core/texture.h	/^class TextureMapping3D {$/;"	c
TextureParams	core/paramset.h	/^    TextureParams(const ParamSet &geomp, const ParamSet &matp,$/;"	f	class:TextureParams
TextureParams	core/paramset.h	/^class TextureParams {$/;"	c
Thread	3rdparty/ilmbase-1.0.2/IlmThread.cpp	/^Thread::Thread ()$/;"	f	class:IlmThread::Thread
Thread	3rdparty/ilmbase-1.0.2/IlmThread.h	/^class ILMTHREAD_EXPORT Thread$/;"	c	namespace:IlmThread
Thread	3rdparty/ilmbase-1.0.2/IlmThreadPosix.cpp	/^Thread::Thread ()$/;"	f	class:IlmThread::Thread
Thread	3rdparty/ilmbase-1.0.2/IlmThreadWin32.cpp	/^Thread::Thread ()$/;"	f	class:IlmThread::Thread
ThreadPool	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^ThreadPool::ThreadPool (unsigned nthreads):$/;"	f	class:IlmThread::ThreadPool
ThreadPool	3rdparty/ilmbase-1.0.2/IlmThreadPool.h	/^class ThreadPool  $/;"	c	namespace:IlmThread
ThunderDecode	3rdparty/tiff-3.9.4/tif_thunder.c	/^ThunderDecode(TIFF* tif, tidata_t op, tsize_t maxpixels)$/;"	f	file:
ThunderDecodeRow	3rdparty/tiff-3.9.4/tif_thunder.c	/^ThunderDecodeRow(TIFF* tif, tidata_t buf, tsize_t occ, tsample_t s)$/;"	f	file:
TileBuffer	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TileBuffer::TileBuffer (Compressor *comp):$/;"	f	class:Imf::__anon34::TileBuffer
TileBuffer	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^struct TileBuffer$/;"	s	namespace:Imf::__anon34	file:
TileBuffer	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TileBuffer::TileBuffer (Compressor *comp):$/;"	f	class:Imf::__anon37::TileBuffer
TileBuffer	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^struct TileBuffer$/;"	s	namespace:Imf::__anon37	file:
TileBufferTask	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TileBufferTask::TileBufferTask$/;"	f	class:Imf::__anon35::TileBufferTask
TileBufferTask	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^class TileBufferTask : public Task$/;"	c	namespace:Imf::__anon35	file:
TileBufferTask	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TileBufferTask::TileBufferTask$/;"	f	class:Imf::__anon38::TileBufferTask
TileBufferTask	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^class TileBufferTask: public Task$/;"	c	namespace:Imf::__anon38	file:
TileCoord	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    TileCoord (int xTile = 0, int yTile = 0,$/;"	f	struct:Imf::__anon37::TileCoord
TileCoord	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^struct TileCoord$/;"	s	namespace:Imf::__anon37	file:
TileDescription	3rdparty/openexr-1.7.0/ImfTileDescription.h	/^    TileDescription (unsigned int xs = 32,$/;"	f	class:Imf::TileDescription
TileDescription	3rdparty/openexr-1.7.0/ImfTileDescription.h	/^class TileDescription$/;"	c	namespace:Imf
TileDescriptionAttribute	3rdparty/openexr-1.7.0/ImfTileDescriptionAttribute.h	/^typedef TypedAttribute<TileDescription> TileDescriptionAttribute;$/;"	t	namespace:Imf
TileMap	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^typedef map <TileCoord, BufferedTile *> TileMap;$/;"	t	namespace:Imf::__anon37	file:
TileOffsets	3rdparty/openexr-1.7.0/ImfTileOffsets.cpp	/^TileOffsets::TileOffsets (LevelMode mode,$/;"	f	class:Imf::TileOffsets
TileOffsets	3rdparty/openexr-1.7.0/ImfTileOffsets.h	/^class TileOffsets$/;"	c	namespace:Imf
TiledInputFile	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::TiledInputFile (IStream &is, int numThreads):$/;"	f	class:Imf::TiledInputFile
TiledInputFile	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::TiledInputFile (const char fileName[], int numThreads):$/;"	f	class:Imf::TiledInputFile
TiledInputFile	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::TiledInputFile$/;"	f	class:Imf::TiledInputFile
TiledInputFile	3rdparty/openexr-1.7.0/ImfTiledInputFile.h	/^class TiledInputFile$/;"	c	namespace:Imf
TiledOutputFile	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::TiledOutputFile$/;"	f	class:Imf::TiledOutputFile
TiledOutputFile	3rdparty/openexr-1.7.0/ImfTiledOutputFile.h	/^class TiledOutputFile$/;"	c	namespace:Imf
TiledRgbaInputFile	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::TiledRgbaInputFile (IStream &is, int numThreads):$/;"	f	class:Imf::TiledRgbaInputFile
TiledRgbaInputFile	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::TiledRgbaInputFile (IStream &is,$/;"	f	class:Imf::TiledRgbaInputFile
TiledRgbaInputFile	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::TiledRgbaInputFile (const char name[], int numThreads):$/;"	f	class:Imf::TiledRgbaInputFile
TiledRgbaInputFile	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::TiledRgbaInputFile (const char name[],$/;"	f	class:Imf::TiledRgbaInputFile
TiledRgbaInputFile	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.h	/^class TiledRgbaInputFile$/;"	c	namespace:Imf
TiledRgbaOutputFile	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::TiledRgbaOutputFile$/;"	f	class:Imf::TiledRgbaOutputFile
TiledRgbaOutputFile	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.h	/^class TiledRgbaOutputFile$/;"	c	namespace:Imf
Time	core/timer.cpp	/^double Timer::Time()$/;"	f	class:Timer
TimeCode	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^TimeCode::TimeCode ()$/;"	f	class:Imf::TimeCode
TimeCode	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^TimeCode::TimeCode (const TimeCode &other)$/;"	f	class:Imf::TimeCode
TimeCode	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^TimeCode::TimeCode$/;"	f	class:Imf::TimeCode
TimeCode	3rdparty/openexr-1.7.0/ImfTimeCode.h	/^class TimeCode$/;"	c	namespace:Imf
TimeCodeAttribute	3rdparty/openexr-1.7.0/ImfTimeCodeAttribute.h	/^typedef TypedAttribute<TimeCode> TimeCodeAttribute;$/;"	t	namespace:Imf
Timer	core/timer.cpp	/^Timer::Timer()$/;"	f	class:Timer
Timer	core/timer.h	/^class Timer {$/;"	c
ToLinear16	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^	uint16 *ToLinear16;$/;"	m	struct:__anon57	file:
ToLinear8	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^	unsigned char *ToLinear8;$/;"	m	struct:__anon57	file:
ToLinearF	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^	float *ToLinearF;$/;"	m	struct:__anon57	file:
ToRGB	core/spectrum.h	/^    void ToRGB(float *rgb) const {$/;"	f	class:RGBSpectrum
ToRGB	core/spectrum.h	/^    void ToRGB(float rgb[3]) const {$/;"	f	class:SampledSpectrum
ToRGBSpectrum	core/spectrum.cpp	/^RGBSpectrum SampledSpectrum::ToRGBSpectrum() const {$/;"	f	class:SampledSpectrum
ToRGBSpectrum	core/spectrum.h	/^    const RGBSpectrum &ToRGBSpectrum() const {$/;"	f	class:RGBSpectrum
ToString	core/paramset.cpp	/^string ParamSet::ToString() const {$/;"	f	class:ParamSet
ToTransform	core/quaternion.cpp	/^Transform Quaternion::ToTransform() const {$/;"	f	class:Quaternion
ToXYZ	core/spectrum.h	/^    void ToXYZ(float xyz[3]) const {$/;"	f	class:RGBSpectrum
ToXYZ	core/spectrum.h	/^    void ToXYZ(float xyz[3]) const {$/;"	f	class:SampledSpectrum
ToYa	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::ToYa::ToYa (TiledOutputFile &outputFile,$/;"	f	class:Imf::TiledRgbaOutputFile::ToYa
ToYa	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^class TiledRgbaOutputFile::ToYa: public Mutex$/;"	c	class:Imf::TiledRgbaOutputFile	file:
ToYca	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaOutputFile::ToYca::ToYca (OutputFile &outputFile,$/;"	f	class:Imf::RgbaOutputFile::ToYca
ToYca	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^class RgbaOutputFile::ToYca: public Mutex$/;"	c	class:Imf::RgbaOutputFile	file:
Trace	3rdparty/zlib-1.2.5/zutil.h	/^#  define Trace(/;"	d
Tracec	3rdparty/zlib-1.2.5/zutil.h	/^#  define Tracec(/;"	d
Tracecv	3rdparty/zlib-1.2.5/zutil.h	/^#  define Tracecv(/;"	d
Tracev	3rdparty/zlib-1.2.5/zutil.h	/^#  define Tracev(/;"	d
Tracevv	3rdparty/zlib-1.2.5/zutil.h	/^#  define Tracevv(/;"	d
TrackerMap	core/probes.cpp	/^typedef map<std::pair<string, string>, StatTracker *> TrackerMap;$/;"	t	file:
Transform	core/transform.h	/^    Transform() { }$/;"	f	class:Transform
Transform	core/transform.h	/^    Transform(const Matrix4x4 &mat)$/;"	f	class:Transform
Transform	core/transform.h	/^    Transform(const Matrix4x4 &mat, const Matrix4x4 &minv)$/;"	f	class:Transform
Transform	core/transform.h	/^    Transform(const float mat[4][4]) {$/;"	f	class:Transform
Transform	core/transform.h	/^class Transform {$/;"	c
TransformCache	core/api.cpp	/^class TransformCache {$/;"	c	file:
TransformSet	core/api.cpp	/^struct TransformSet {$/;"	s	file:
TransformSwapsHandedness	core/shape.h	/^    const bool ReverseOrientation, TransformSwapsHandedness;$/;"	m	class:Shape
TransformedPrimitive	core/primitive.h	/^    TransformedPrimitive(Reference<Primitive> &prim,$/;"	f	class:TransformedPrimitive
TransformedPrimitive	core/primitive.h	/^class TransformedPrimitive : public Primitive {$/;"	c
Translate	core/transform.cpp	/^Transform Translate(const Vector &delta) {$/;"	f
TranslucentMaterial	materials/translucent.h	/^    TranslucentMaterial(Reference<Texture<Spectrum> > kd, Reference<Texture<Spectrum> > ks,$/;"	f	class:TranslucentMaterial
TranslucentMaterial	materials/translucent.h	/^class TranslucentMaterial : public Material {$/;"	c
Transmittance	core/light.cpp	/^Spectrum VisibilityTester::Transmittance(const Scene *scene,$/;"	f	class:VisibilityTester
Transmittance	integrators/emission.cpp	/^Spectrum EmissionIntegrator::Transmittance(const Scene *scene,$/;"	f	class:EmissionIntegrator
Transmittance	integrators/single.cpp	/^Spectrum SingleScatteringIntegrator::Transmittance(const Scene *scene,$/;"	f	class:SingleScatteringIntegrator
Transmittance	renderers/aggregatetest.cpp	/^Spectrum AggregateTest::Transmittance(const Scene *scene,$/;"	f	class:AggregateTest
Transmittance	renderers/createprobes.cpp	/^Spectrum CreateRadianceProbes::Transmittance(const Scene *scene,$/;"	f	class:CreateRadianceProbes
Transmittance	renderers/metropolis.cpp	/^Spectrum MetropolisRenderer::Transmittance(const Scene *scene, const RayDifferential &ray,$/;"	f	class:MetropolisRenderer
Transmittance	renderers/samplerrenderer.cpp	/^Spectrum SamplerRenderer::Transmittance(const Scene *scene,$/;"	f	class:SamplerRenderer
Transmittance	renderers/surfacepoints.cpp	/^Spectrum SurfacePointsRenderer::Transmittance(const Scene *scene, const RayDifferential &ray,$/;"	f	class:SurfacePointsRenderer
Transpose	core/transform.cpp	/^Matrix4x4 Transpose(const Matrix4x4 &m) {$/;"	f
Transpose	core/transform.h	/^    friend Transform Transpose(const Transform &t) {$/;"	f	class:Transform
Triangle	shapes/trianglemesh.h	/^    Triangle(const Transform *o2w, const Transform *w2o, bool ro,$/;"	f	class:Triangle
Triangle	shapes/trianglemesh.h	/^class Triangle : public Shape {$/;"	c
TriangleFilter	filters/triangle.h	/^    TriangleFilter(float xw, float yw) : Filter(xw, yw) { }$/;"	f	class:TriangleFilter
TriangleFilter	filters/triangle.h	/^class TriangleFilter : public Filter {$/;"	c
TriangleMesh	shapes/trianglemesh.cpp	/^TriangleMesh::TriangleMesh(const Transform *o2w, const Transform *w2o,$/;"	f	class:TriangleMesh
TriangleMesh	shapes/trianglemesh.h	/^class TriangleMesh : public Shape {$/;"	c
TryWait	core/parallel.cpp	/^bool Semaphore::TryWait() {$/;"	f	class:Semaphore
Ttag	3rdparty/tiff-3.9.4/tif_fax3.c	/^typedef enum { G3_1D, G3_2D } Ttag;$/;"	t	typeref:enum:__anon44	file:
Turbulence	core/texture.cpp	/^float Turbulence(const Point &P, const Vector &dpdx, const Vector &dpdy,$/;"	f
TypeMap	3rdparty/openexr-1.7.0/ImfAttribute.cpp	/^typedef std::map <const char *, Constructor, NameCompare> TypeMap;$/;"	t	namespace:Imf::__anon14	file:
TypedAttribute	3rdparty/openexr-1.7.0/ImfAttribute.h	/^    IMF_EXPIMP_TEMPLATE template class Imf::TypedAttribute<double>;$/;"	m	class:Imf	typeref:class:Imf::
TypedAttribute	3rdparty/openexr-1.7.0/ImfAttribute.h	/^    IMF_EXPIMP_TEMPLATE template class Imf::TypedAttribute<float>;$/;"	m	class:Imf	typeref:class:Imf::Imf
TypedAttribute	3rdparty/openexr-1.7.0/ImfAttribute.h	/^TypedAttribute<T>::TypedAttribute ():$/;"	f	class:Imf::TypedAttribute
TypedAttribute	3rdparty/openexr-1.7.0/ImfAttribute.h	/^TypedAttribute<T>::TypedAttribute (const T &value):$/;"	f	class:Imf::TypedAttribute
TypedAttribute	3rdparty/openexr-1.7.0/ImfAttribute.h	/^TypedAttribute<T>::TypedAttribute (const TypedAttribute<T> &other):$/;"	f	class:Imf::TypedAttribute
TypedAttribute	3rdparty/openexr-1.7.0/ImfAttribute.h	/^class TypedAttribute: public Attribute$/;"	c	namespace:Imf
UINT	3rdparty/openexr-1.7.0/ImfPixelType.h	/^    UINT  = 0,		\/\/ unsigned int (32 bit)$/;"	e	enum:Imf::PixelType
UINT16_MAX	core/pbrtlex.cpp	/^#define UINT16_MAX /;"	d	file:
UINT32_MAX	core/pbrtlex.cpp	/^#define UINT32_MAX /;"	d	file:
UINT8_MAX	core/pbrtlex.cpp	/^#define UINT8_MAX /;"	d	file:
UNALIGNED_OK	3rdparty/zlib-1.2.5/zconf.h	/^#  define UNALIGNED_OK$/;"	d
UNCACHE_STATE	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	UNCACHE_STATE(/;"	d	file:
UNINITIALIZED	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^enum Uninitialized {UNINITIALIZED};$/;"	e	enum:Imath::Uninitialized
UNMAP_DEPTH	core/targa.c	/^#define UNMAP_DEPTH(/;"	d	file:
UNROLL2	3rdparty/tiff-3.9.4/tif_getimage.c	/^#define	UNROLL2(/;"	d	file:
UNROLL4	3rdparty/tiff-3.9.4/tif_getimage.c	/^#define	UNROLL4(/;"	d	file:
UNROLL8	3rdparty/tiff-3.9.4/tif_getimage.c	/^#define	UNROLL8(/;"	d	file:
UPDATE	3rdparty/zlib-1.2.5/inflate.c	/^#  define UPDATE(/;"	d	file:
UPDATE_HASH	3rdparty/zlib-1.2.5/deflate.c	/^#define UPDATE_HASH(/;"	d	file:
UPPER_MASK	core/rng.cpp	/^#define UPPER_MASK /;"	d	file:
USHORT_RANGE	3rdparty/openexr-1.7.0/ImfPizCompressor.cpp	/^const int USHORT_RANGE = (1 << 16);$/;"	m	namespace:Imf::__anon25	file:
UVMapping2D	core/texture.cpp	/^UVMapping2D::UVMapping2D(float ssu, float ssv, float ddu, float ddv)$/;"	f	class:UVMapping2D
UVMapping2D	core/texture.h	/^class UVMapping2D : public TextureMapping2D {$/;"	c
UVSCALE	3rdparty/tiff-3.9.4/tif_luv.c	/^#define UVSCALE	/;"	d	file:
UVSCALE	3rdparty/tiff-3.9.4/tiffio.h	/^#define UVSCALE	/;"	d
UVTexture	textures/uv.h	/^    UVTexture(TextureMapping2D *m) {$/;"	f	class:UVTexture
UVTexture	textures/uv.h	/^class UVTexture : public Texture<Spectrum> {$/;"	c
UV_NDIVS	3rdparty/tiff-3.9.4/uvcode.h	/^#define UV_NDIVS	/;"	d
UV_NVS	3rdparty/tiff-3.9.4/uvcode.h	/^#define UV_NVS	/;"	d
UV_SQSIZ	3rdparty/tiff-3.9.4/uvcode.h	/^#define UV_SQSIZ	/;"	d
UV_VSTART	3rdparty/tiff-3.9.4/uvcode.h	/^#define UV_VSTART	/;"	d
U_NEU	3rdparty/tiff-3.9.4/tif_luv.c	/^#define U_NEU	/;"	d	file:
U_NEU	3rdparty/tiff-3.9.4/tiffio.h	/^#define U_NEU	/;"	d
UberMaterial	materials/uber.h	/^    UberMaterial(Reference<Texture<Spectrum> > kd,$/;"	f	class:UberMaterial
UberMaterial	materials/uber.h	/^class UberMaterial : public Material {$/;"	c
Uint16	tools/ply.h	/^#define Uint16 /;"	d
Uint32	tools/ply.h	/^#define Uint32 /;"	d
Uint8	tools/ply.h	/^#define Uint8 /;"	d
UniformConePdf	core/montecarlo.cpp	/^float UniformConePdf(float cosThetaMax) {$/;"	f
UniformHemispherePdf	core/montecarlo.cpp	/^float UniformHemispherePdf() {$/;"	f
UniformSampleAllLights	core/integrator.cpp	/^Spectrum UniformSampleAllLights(const Scene *scene,$/;"	f
UniformSampleCone	core/montecarlo.cpp	/^Vector UniformSampleCone(float u1, float u2, float costhetamax) {$/;"	f
UniformSampleCone	core/montecarlo.cpp	/^Vector UniformSampleCone(float u1, float u2, float costhetamax,$/;"	f
UniformSampleDisk	core/montecarlo.cpp	/^void UniformSampleDisk(float u1, float u2, float *x, float *y) {$/;"	f
UniformSampleHemisphere	core/montecarlo.cpp	/^Vector UniformSampleHemisphere(float u1, float u2) {$/;"	f
UniformSampleOneLight	core/integrator.cpp	/^Spectrum UniformSampleOneLight(const Scene *scene,$/;"	f
UniformSampleSphere	core/montecarlo.cpp	/^Vector UniformSampleSphere(float u1, float u2) {$/;"	f
UniformSampleTriangle	core/montecarlo.cpp	/^void UniformSampleTriangle(float u1, float u2, float *u, float *v) {$/;"	f
UniformSpherePdf	core/montecarlo.cpp	/^float UniformSpherePdf() {$/;"	f
Uninitialized	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^enum Uninitialized {UNINITIALIZED};$/;"	g	namespace:Imath
Union	core/geometry.cpp	/^BBox Union(const BBox &b, const BBox &b2) {$/;"	f
Union	core/geometry.cpp	/^BBox Union(const BBox &b, const Point &p) {$/;"	f
Unlock	core/parallel.cpp	/^void ConditionVariable::Unlock() {$/;"	f	class:ConditionVariable
Unoccluded	core/light.cpp	/^bool VisibilityTester::Unoccluded(const Scene *scene) const {$/;"	f	class:VisibilityTester
Update	core/progressreporter.cpp	/^void ProgressReporter::Update(int num) {$/;"	f	class:ProgressReporter
UpdateDisplay	core/film.cpp	/^void Film::UpdateDisplay(int x0, int y0, int x1, int y1,$/;"	f	class:Film
UpdateDisplay	film/image.cpp	/^void ImageFilm::UpdateDisplay(int x0, int y0, int x1, int y1,$/;"	f	class:ImageFilm
UpgradeToWrite	core/parallel.cpp	/^void RWMutexLock::UpgradeToWrite() {$/;"	f	class:RWMutexLock
UseRadianceProbes	integrators/useprobes.cpp	/^UseRadianceProbes::UseRadianceProbes(const string &filename) {$/;"	f	class:UseRadianceProbes
UseRadianceProbes	integrators/useprobes.h	/^class UseRadianceProbes : public SurfaceIntegrator {$/;"	c
V0	3rdparty/tiff-3.9.4/mkg3states.c	/^static struct proto V0[]  = {$/;"	v	typeref:struct:proto	file:
V2d	3rdparty/ilmbase-1.0.2/ImathVec.h	/^typedef Vec2 <double> V2d;$/;"	t	namespace:Imath
V2dAttribute	3rdparty/openexr-1.7.0/ImfVecAttribute.h	/^typedef TypedAttribute<Imath::V2d> V2dAttribute;$/;"	t	namespace:Imf
V2f	3rdparty/ilmbase-1.0.2/ImathVec.h	/^typedef Vec2 <float>  V2f;$/;"	t	namespace:Imath
V2fAttribute	3rdparty/openexr-1.7.0/ImfVecAttribute.h	/^typedef TypedAttribute<Imath::V2f> V2fAttribute;$/;"	t	namespace:Imf
V2i	3rdparty/ilmbase-1.0.2/ImathVec.h	/^typedef Vec2 <int>    V2i;$/;"	t	namespace:Imath
V2iAttribute	3rdparty/openexr-1.7.0/ImfVecAttribute.h	/^typedef TypedAttribute<Imath::V2i> V2iAttribute;$/;"	t	namespace:Imf
V2s	3rdparty/ilmbase-1.0.2/ImathVec.h	/^typedef Vec2 <short>  V2s;$/;"	t	namespace:Imath
V3d	3rdparty/ilmbase-1.0.2/ImathVec.h	/^typedef Vec3 <double> V3d;$/;"	t	namespace:Imath
V3dAttribute	3rdparty/openexr-1.7.0/ImfVecAttribute.h	/^typedef TypedAttribute<Imath::V3d> V3dAttribute;$/;"	t	namespace:Imf
V3f	3rdparty/ilmbase-1.0.2/ImathVec.h	/^typedef Vec3 <float>  V3f;$/;"	t	namespace:Imath
V3fAttribute	3rdparty/openexr-1.7.0/ImfVecAttribute.h	/^typedef TypedAttribute<Imath::V3f> V3fAttribute;$/;"	t	namespace:Imf
V3i	3rdparty/ilmbase-1.0.2/ImathVec.h	/^typedef Vec3 <int>    V3i;$/;"	t	namespace:Imath
V3iAttribute	3rdparty/openexr-1.7.0/ImfVecAttribute.h	/^typedef TypedAttribute<Imath::V3i> V3iAttribute;$/;"	t	namespace:Imf
V3s	3rdparty/ilmbase-1.0.2/ImathVec.h	/^typedef Vec3 <short>  V3s;$/;"	t	namespace:Imath
V4d	3rdparty/ilmbase-1.0.2/ImathVec.h	/^typedef Vec4 <double> V4d;$/;"	t	namespace:Imath
V4f	3rdparty/ilmbase-1.0.2/ImathVec.h	/^typedef Vec4 <float>  V4f;$/;"	t	namespace:Imath
V4i	3rdparty/ilmbase-1.0.2/ImathVec.h	/^typedef Vec4 <int>    V4i;$/;"	t	namespace:Imath
V4s	3rdparty/ilmbase-1.0.2/ImathVec.h	/^typedef Vec4 <short>  V4s;$/;"	t	namespace:Imath
VC_EXTRALEAN	3rdparty/tiff-3.9.4/tif_jpeg.c	/^#define VC_EXTRALEAN$/;"	d	file:
VC_EXTRALEAN	3rdparty/tiff-3.9.4/tiffio.h	/^# define VC_EXTRALEAN$/;"	d
VERIFY_INITIALIZED	core/api.cpp	/^#define VERIFY_INITIALIZED(/;"	d	file:
VERIFY_OPTIONS	core/api.cpp	/^#define VERIFY_OPTIONS(/;"	d	file:
VERIFY_WORLD	core/api.cpp	/^#define VERIFY_WORLD(/;"	d	file:
VERSION_FLAGS_FIELD	3rdparty/openexr-1.7.0/ImfVersion.h	/^const int VERSION_FLAGS_FIELD	= 0xffffff00;$/;"	m	namespace:Imf
VERSION_NUMBER_FIELD	3rdparty/openexr-1.7.0/ImfVersion.h	/^const int VERSION_NUMBER_FIELD	= 0x000000ff;$/;"	m	namespace:Imf
VERT	shapes/heightfield.cpp	/^#define VERT(/;"	d	file:
VERT	shapes/heightfield.cpp	/^#undef VERT$/;"	d	file:
VERT	shapes/heightfield2.cpp	/^#define VERT(/;"	d	file:
VERT	shapes/heightfield2.cpp	/^#undef VERT$/;"	d	file:
VL	3rdparty/tiff-3.9.4/mkg3states.c	/^static struct proto VL[]  = {$/;"	v	typeref:struct:proto	file:
VN	shapes/nurbs.cpp	/^    #define VN(/;"	d	file:
VN	shapes/nurbs.cpp	/^    #undef VN$/;"	d	file:
VOLUME	core/pbrtparse.cpp	/^     VOLUME = 300,$/;"	e	enum:yytokentype	file:
VOLUME	core/pbrtparse.hh	/^     VOLUME = 300,$/;"	e	enum:yytokentype
VOLUMEINTEGRATOR	core/pbrtparse.cpp	/^     VOLUMEINTEGRATOR = 301,$/;"	e	enum:yytokentype	file:
VOLUMEINTEGRATOR	core/pbrtparse.hh	/^     VOLUMEINTEGRATOR = 301,$/;"	e	enum:yytokentype
VR	3rdparty/tiff-3.9.4/mkg3states.c	/^static struct proto VR[]  = {$/;"	v	typeref:struct:proto	file:
V_NEU	3rdparty/tiff-3.9.4/tif_luv.c	/^#define V_NEU	/;"	d	file:
V_NEU	3rdparty/tiff-3.9.4/tiffio.h	/^#define V_NEU	/;"	d
VanDerCorput	core/montecarlo.h	/^inline float VanDerCorput(uint32_t n, uint32_t scramble) {$/;"	f
Vec2	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::Vec2 ()$/;"	f	class:Imath::Vec2
Vec2	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::Vec2 (T a)$/;"	f	class:Imath::Vec2
Vec2	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::Vec2 (T a, T b)$/;"	f	class:Imath::Vec2
Vec2	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::Vec2 (const Vec2 &v)$/;"	f	class:Imath::Vec2
Vec2	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::Vec2 (const Vec2<S> &v)$/;"	f	class:Imath::Vec2
Vec2	3rdparty/ilmbase-1.0.2/ImathVec.h	/^template <class T> class Vec2$/;"	c	namespace:Imath
Vec3	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::Vec3 ()$/;"	f	class:Imath::Vec3
Vec3	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::Vec3 (T a)$/;"	f	class:Imath::Vec3
Vec3	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::Vec3 (T a, T b, T c)$/;"	f	class:Imath::Vec3
Vec3	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::Vec3 (const Vec3 &v)$/;"	f	class:Imath::Vec3
Vec3	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::Vec3 (const Vec3<S> &v)$/;"	f	class:Imath::Vec3
Vec3	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::Vec3 (const Vec4<S> &v)$/;"	f	class:Imath::Vec3
Vec3	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::Vec3 (const Vec4<S> &v, InfException)$/;"	f	class:Imath::Vec3
Vec3	3rdparty/ilmbase-1.0.2/ImathVec.h	/^template <class T> class Vec3$/;"	c	namespace:Imath
Vec4	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::Vec4 ()$/;"	f	class:Imath::Vec4
Vec4	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::Vec4 (T a)$/;"	f	class:Imath::Vec4
Vec4	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::Vec4 (T a, T b, T c, T d)$/;"	f	class:Imath::Vec4
Vec4	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::Vec4 (const Vec3<S> &v)$/;"	f	class:Imath::Vec4
Vec4	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::Vec4 (const Vec4 &v)$/;"	f	class:Imath::Vec4
Vec4	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::Vec4 (const Vec4<S> &v)$/;"	f	class:Imath::Vec4
Vec4	3rdparty/ilmbase-1.0.2/ImathVec.h	/^template <class T> class Vec4$/;"	c	namespace:Imath
Vector	core/geometry.h	/^    Vector() { x = y = z = 0.f; }$/;"	f	class:Vector
Vector	core/geometry.h	/^    Vector(const Vector &v) {$/;"	f	class:Vector
Vector	core/geometry.h	/^    Vector(float xx, float yy, float zz)$/;"	f	class:Vector
Vector	core/geometry.h	/^class Vector {$/;"	c
Vector	core/geometry.h	/^inline Vector::Vector(const Normal &n)$/;"	f	class:Vector
Vector	core/geometry.h	/^inline Vector::Vector(const Point &p)$/;"	f	class:Vector
VerifyArrayLength	core/pbrtparse.cpp	/^static bool VerifyArrayLength(ParamArray *arr, int required,$/;"	f	file:
Vertex	tools/ply2pbrt.c	/^typedef struct Vertex {$/;"	s	file:
Vertex	tools/ply2pbrt.c	/^} Vertex;$/;"	t	typeref:struct:Vertex	file:
VirtualLight	integrators/igi.h	/^    VirtualLight() { }$/;"	f	struct:VirtualLight
VirtualLight	integrators/igi.h	/^    VirtualLight(const Point &pp, const Normal &nn, const Spectrum &c,$/;"	f	struct:VirtualLight
VirtualLight	integrators/igi.h	/^struct VirtualLight {$/;"	s
VisibilityTester	core/light.h	/^struct VisibilityTester {$/;"	s
VolIntegratorName	core/api.cpp	/^    string SurfIntegratorName, VolIntegratorName;$/;"	m	struct:RenderOptions	file:
VolIntegratorParams	core/api.cpp	/^    ParamSet SurfIntegratorParams, VolIntegratorParams;$/;"	m	struct:RenderOptions	file:
Volume	core/geometry.h	/^    float Volume() const {$/;"	f	class:BBox
VolumeGridDensity	volumes/volumegrid.h	/^    VolumeGridDensity(const Spectrum &sa, const Spectrum &ss, float gg,$/;"	f	class:VolumeGridDensity
VolumeGridDensity	volumes/volumegrid.h	/^class VolumeGridDensity : public DensityRegion {$/;"	c
VolumeIntegrator	core/volume.h	/^class VolumeIntegrator : public Integrator {$/;"	c
VolumeRegion	core/volume.h	/^class VolumeRegion {$/;"	c
Voxel	accelerators/grid.h	/^    Voxel() { }$/;"	f	struct:Voxel
Voxel	accelerators/grid.h	/^    Voxel(Reference<Primitive> op) {$/;"	f	struct:Voxel
Voxel	accelerators/grid.h	/^struct Voxel {$/;"	s
W2B	3rdparty/tiff-3.9.4/tif_getimage.c	/^#define W2B(/;"	d	file:
WARN	Makefile	/^WARN=-Wall$/;"	m
WARN_IF_ANIMATED_TRANSFORM	core/api.cpp	/^#define WARN_IF_ANIMATED_TRANSFORM(/;"	d	file:
WEIGHT_LUT_SIZE	core/mipmap.h	/^#define WEIGHT_LUT_SIZE /;"	d
WHITE	3rdparty/tiff-3.9.4/tif_next.c	/^#define WHITE /;"	d	file:
WIN32	3rdparty/zlib-1.2.5/zconf.h	/^#    define WIN32$/;"	d
WIN32_LEAN_AND_MEAN	3rdparty/tiff-3.9.4/tif_jpeg.c	/^#define WIN32_LEAN_AND_MEAN$/;"	d	file:
WINDOWS	3rdparty/zlib-1.2.5/zconf.h	/^#  define WINDOWS$/;"	d
WIN_INIT	3rdparty/zlib-1.2.5/deflate.h	/^#define WIN_INIT /;"	d
WORLDBEGIN	core/pbrtparse.cpp	/^     WORLDBEGIN = 302,$/;"	e	enum:yytokentype	file:
WORLDBEGIN	core/pbrtparse.hh	/^     WORLDBEGIN = 302,$/;"	e	enum:yytokentype
WORLDEND	core/pbrtparse.cpp	/^     WORLDEND = 303,$/;"	e	enum:yytokentype	file:
WORLDEND	core/pbrtparse.hh	/^     WORLDEND = 303,$/;"	e	enum:yytokentype
WRAP	samplers/bestcandidate.cpp	/^#define WRAP(/;"	d	file:
WRITE	core/parallel.h	/^enum RWMutexLockType { READ, WRITE };$/;"	e	enum:RWMutexLockType
WRITE	core/targa.c	/^    #define WRITE(/;"	d	file:
WRITE	core/targa.c	/^    #undef WRITE$/;"	d	file:
WRITE16	core/targa.c	/^    #define WRITE16(/;"	d	file:
WRITE16	core/targa.c	/^    #undef WRITE16$/;"	d	file:
WRITECHECKSTRIPS	3rdparty/tiff-3.9.4/tif_write.c	/^#define	WRITECHECKSTRIPS(/;"	d	file:
WRITECHECKTILES	3rdparty/tiff-3.9.4/tif_write.c	/^#define	WRITECHECKTILES(/;"	d	file:
WRITE_A	3rdparty/openexr-1.7.0/ImfRgba.h	/^    WRITE_A	= 0x08,		\/\/ Alpha$/;"	e	enum:Imf::RgbaChannels
WRITE_B	3rdparty/openexr-1.7.0/ImfRgba.h	/^    WRITE_B	= 0x04,		\/\/ Blue$/;"	e	enum:Imf::RgbaChannels
WRITE_C	3rdparty/openexr-1.7.0/ImfRgba.h	/^    WRITE_C	= 0x20,		\/\/ Chroma (two subsampled channels, RY and BY,$/;"	e	enum:Imf::RgbaChannels
WRITE_G	3rdparty/openexr-1.7.0/ImfRgba.h	/^    WRITE_G	= 0x02,		\/\/ Green$/;"	e	enum:Imf::RgbaChannels
WRITE_R	3rdparty/openexr-1.7.0/ImfRgba.h	/^    WRITE_R	= 0x01,		\/\/ Red$/;"	e	enum:Imf::RgbaChannels
WRITE_RGB	3rdparty/openexr-1.7.0/ImfRgba.h	/^    WRITE_RGB	= 0x07,		\/\/ Red, green, blue$/;"	e	enum:Imf::RgbaChannels
WRITE_RGBA	3rdparty/openexr-1.7.0/ImfRgba.h	/^    WRITE_RGBA	= 0x0f,		\/\/ Red, green, blue, alpha$/;"	e	enum:Imf::RgbaChannels
WRITE_Y	3rdparty/openexr-1.7.0/ImfRgba.h	/^    WRITE_Y	= 0x10,		\/\/ Luminance, for black-and-white images,$/;"	e	enum:Imf::RgbaChannels
WRITE_YA	3rdparty/openexr-1.7.0/ImfRgba.h	/^    WRITE_YA	= 0x18,		\/\/ Luminance, alpha$/;"	e	enum:Imf::RgbaChannels
WRITE_YC	3rdparty/openexr-1.7.0/ImfRgba.h	/^    WRITE_YC	= 0x30,		\/\/ Luminance, chroma$/;"	e	enum:Imf::RgbaChannels
WRITE_YCA	3rdparty/openexr-1.7.0/ImfRgba.h	/^    WRITE_YCA	= 0x38		\/\/ Luminance, chroma, alpha$/;"	e	enum:Imf::RgbaChannels
Wait	core/parallel.cpp	/^void ConditionVariable::Wait() {$/;"	f	class:ConditionVariable
Wait	core/parallel.cpp	/^void Semaphore::Wait() {$/;"	f	class:Semaphore
WaitForAllTasks	core/parallel.cpp	/^void WaitForAllTasks() {$/;"	f
Warning	core/error.cpp	/^void Warning(const char *format, ...) {$/;"	f
WhiteTable	3rdparty/tiff-3.9.4/mkg3states.c	/^TIFFFaxTabEnt WhiteTable[4096];$/;"	v
WhittedIntegrator	integrators/whitted.h	/^    WhittedIntegrator(int md) {$/;"	f	class:WhittedIntegrator
WhittedIntegrator	integrators/whitted.h	/^class WhittedIntegrator : public SurfaceIntegrator {$/;"	c
Width	3rdparty/tiff-3.9.4/tif_fax3.h	/^	unsigned char Width;	\/* width of code in bits *\/$/;"	m	struct:__anon46
Width	core/mipmap.h	/^    uint32_t Width() const { return width; }$/;"	f	class:MIPMap
Win32ErrorHandler	3rdparty/tiff-3.9.4/tif_win32.c	/^Win32ErrorHandler(const char* module, const char* fmt, va_list ap)$/;"	f	file:
Win32WarningHandler	3rdparty/tiff-3.9.4/tif_win32.c	/^Win32WarningHandler(const char* module, const char* fmt, va_list ap)$/;"	f	file:
WindyTexture	textures/windy.h	/^    WindyTexture(TextureMapping3D *map) : mapping(map) { }$/;"	f	class:WindyTexture
WindyTexture	textures/windy.h	/^template <typename T> class WindyTexture : public Texture<T> {$/;"	c
WorkerThread	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^WorkerThread::WorkerThread (ThreadPool::Data* data):$/;"	f	class:IlmThread::WorkerThread
WorkerThread	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^class WorkerThread: public Thread$/;"	c	namespace:IlmThread::__anon2	file:
WorldBound	accelerators/bvh.cpp	/^BBox BVHAccel::WorldBound() const {$/;"	f	class:BVHAccel
WorldBound	accelerators/grid.cpp	/^BBox GridAccel::WorldBound() const {$/;"	f	class:GridAccel
WorldBound	accelerators/kdtreeaccel.h	/^    BBox WorldBound() const { return bounds; }$/;"	f	class:KdTreeAccel
WorldBound	core/primitive.cpp	/^BBox GeometricPrimitive::WorldBound() const {$/;"	f	class:GeometricPrimitive
WorldBound	core/primitive.h	/^    BBox WorldBound() const {$/;"	f	class:TransformedPrimitive
WorldBound	core/scene.cpp	/^const BBox &Scene::WorldBound() const {$/;"	f	class:Scene
WorldBound	core/shape.cpp	/^BBox Shape::WorldBound() const {$/;"	f	class:Shape
WorldBound	core/volume.cpp	/^BBox AggregateVolume::WorldBound() const {$/;"	f	class:AggregateVolume
WorldBound	shapes/loopsubdiv.cpp	/^BBox LoopSubdiv::WorldBound() const {$/;"	f	class:LoopSubdiv
WorldBound	shapes/nurbs.cpp	/^BBox NURBS::WorldBound() const {$/;"	f	class:NURBS
WorldBound	shapes/trianglemesh.cpp	/^BBox Triangle::WorldBound() const {$/;"	f	class:Triangle
WorldBound	shapes/trianglemesh.cpp	/^BBox TriangleMesh::WorldBound() const {$/;"	f	class:TriangleMesh
WorldBound	volumes/exponential.h	/^    BBox WorldBound() const { return Inverse(WorldToVolume)(extent); }$/;"	f	class:ExponentialDensity
WorldBound	volumes/homogeneous.h	/^    BBox WorldBound() const {$/;"	f	class:HomogeneousVolumeDensity
WorldBound	volumes/volumegrid.h	/^    BBox WorldBound() const { return Inverse(WorldToVolume)(extent); }$/;"	f	class:VolumeGridDensity
WorldToLight	core/light.h	/^    const Transform LightToWorld, WorldToLight;$/;"	m	class:Light
WorldToLocal	core/reflection.h	/^    Vector WorldToLocal(const Vector &v) const {$/;"	f	class:BSDF
WorldToObject	core/intersection.h	/^    Transform WorldToObject, ObjectToWorld;$/;"	m	struct:Intersection
WorldToObject	core/shape.h	/^    const Transform *ObjectToWorld, *WorldToObject;$/;"	m	class:Shape
WorldToPrimitive	core/primitive.h	/^    const AnimatedTransform WorldToPrimitive;$/;"	m	class:TransformedPrimitive
WorldToTexture	core/texture.h	/^    Transform WorldToTexture;$/;"	m	class:CylindricalMapping2D
WorldToTexture	core/texture.h	/^    Transform WorldToTexture;$/;"	m	class:IdentityMapping3D
WorldToTexture	core/texture.h	/^    Transform WorldToTexture;$/;"	m	class:SphericalMapping2D
WorldToVolume	core/volume.h	/^    Transform WorldToVolume;$/;"	m	class:DensityRegion
WorldToVolume	volumes/homogeneous.h	/^    Transform WorldToVolume;$/;"	m	class:HomogeneousVolumeDensity
Wrapped1DDist	tools/samplepat.cpp	/^inline float Wrapped1DDist(float a, float b) {$/;"	f
WrinkledTexture	textures/wrinkled.h	/^    WrinkledTexture(int oct, float roughness, TextureMapping3D *map) {$/;"	f	class:WrinkledTexture
WrinkledTexture	textures/wrinkled.h	/^template <typename T> class WrinkledTexture : public Texture<T> {$/;"	c
Write	core/spectrum.h	/^    bool Write(FILE *f) const {$/;"	f	class:CoefficientSpectrum
WriteEXR	tools/exrdiff.cpp	/^static void WriteEXR(const char *name, float *pixels, int xRes, int yRes) {$/;"	f	file:
WriteEXR	tools/tifftoexr.cpp	/^void WriteEXR(const char *name, float *frgba, int xRes, int yRes, bool hasAlpha) $/;"	f
WriteImage	core/imageio.cpp	/^void WriteImage(const string &name, float *pixels, float *alpha, int xRes,$/;"	f
WriteImage	film/image.cpp	/^void ImageFilm::WriteImage(float splatScale) {$/;"	f	class:ImageFilm
WriteImageEXR	core/imageio.cpp	/^static void WriteImageEXR(const string &name, float *pixels,$/;"	f	file:
WriteImagePFM	core/imageio.cpp	/^static bool WriteImagePFM(const string &filename, const float *rgb,$/;"	f	file:
WriteImageTGA	core/imageio.cpp	/^void WriteImageTGA(const string &name, float *pixels,$/;"	f
WriteOK	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	WriteOK(/;"	d
WriteRationalPair	3rdparty/tiff-3.9.4/tif_dirwrite.c	/^#define	WriteRationalPair(/;"	d	file:
WriteRationalPair	3rdparty/tiff-3.9.4/tif_dirwrite.c	/^#undef WriteRationalPair$/;"	d	file:
WriteTIFF	tools/exrtotiff.cpp	/^void WriteTIFF(const char *name, float *rgba, int XRes, int YRes, bool hasAlpha) $/;"	f
WriteTable	3rdparty/tiff-3.9.4/mkg3states.c	/^WriteTable(FILE* fd, const TIFFFaxTabEnt* T, int Size, const char* name)$/;"	f
X	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^    enum Axis { X = 0, Y = 1, Z = 2 };$/;"	e	enum:Imath::Euler::Axis
X	core/spectrum.cpp	/^SampledSpectrum SampledSpectrum::X;$/;"	m	class:SampledSpectrum	file:
X	core/spectrum.h	/^    static SampledSpectrum X, Y, Z;$/;"	m	class:SampledSpectrum
X0	3rdparty/tiff-3.9.4/tiffio.h	/^	float	X0, Y0, Z0;			\/* Reference white point *\/$/;"	m	struct:__anon65
XDR	3rdparty/openexr-1.7.0/ImfCompressor.h	/^	XDR		\/\/ Xdr format$/;"	e	enum:Imf::Compressor::Format
XMD_H	3rdparty/tiff-3.9.4/tif_jpeg.c	/^# define XMD_H /;"	d	file:
XYX	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^	XYX	= 0x0111,$/;"	e	enum:Imath::Euler::Order
XYXr	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^	XYXr	= 0x2010,$/;"	e	enum:Imath::Euler::Order
XYZ	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^	XYZ	= 0x0101,	\/\/ "usual" orderings$/;"	e	enum:Imath::Euler::Order
XYZLayout	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^    enum InputLayout { XYZLayout, IJKLayout };$/;"	e	enum:Imath::Euler::InputLayout
XYZToRGB	core/spectrum.h	/^inline void XYZToRGB(const float xyz[3], float rgb[3]) {$/;"	f
XYZr	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^	XYZr	= 0x2000,	\/\/ relative orderings -- not common$/;"	e	enum:Imath::Euler::Order
XYZtoRGB	3rdparty/openexr-1.7.0/ImfChromaticities.cpp	/^XYZtoRGB (const Chromaticities chroma, float Y)$/;"	f	namespace:Imf
XYZtoRGB24	3rdparty/tiff-3.9.4/tif_luv.c	/^XYZtoRGB24(float xyz[3], uint8 rgb[3])$/;"	f	file:
XZX	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^	XZX	= 0x0011,	\/\/ first axis repeated$/;"	e	enum:Imath::Euler::Order
XZXr	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^	XZXr	= 0x2110,	\/\/ relative first axis repeated $/;"	e	enum:Imath::Euler::Order
XZY	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^	XZY	= 0x0001,$/;"	e	enum:Imath::Euler::Order
XZYr	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^	XZYr	= 0x2100,$/;"	e	enum:Imath::Euler::Order
Xdr	3rdparty/openexr-1.7.0/ImfXdr.h	/^namespace Xdr {$/;"	n	namespace:Imf
Y	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^    enum Axis { X = 0, Y = 1, Z = 2 };$/;"	e	enum:Imath::Euler::Axis
Y	core/spectrum.cpp	/^SampledSpectrum SampledSpectrum::Y;$/;"	m	class:SampledSpectrum	file:
Y	core/spectrum.h	/^    static SampledSpectrum X, Y, Z;$/;"	m	class:SampledSpectrum
Y0	3rdparty/tiff-3.9.4/tiffio.h	/^	float	X0, Y0, Z0;			\/* Reference white point *\/$/;"	m	struct:__anon65
YACC	Makefile	/^YACC=bison -d -v -t$/;"	m
YCAtoRGBA	3rdparty/openexr-1.7.0/ImfRgbaYca.cpp	/^YCAtoRGBA (const Imath::V3f &yw,$/;"	f	namespace:Imf::RgbaYca
YCBCRPOSITION_CENTERED	3rdparty/tiff-3.9.4/tiff.h	/^#define	    YCBCRPOSITION_CENTERED	/;"	d
YCBCRPOSITION_COSITED	3rdparty/tiff-3.9.4/tiff.h	/^#define	    YCBCRPOSITION_COSITED	/;"	d
YCBCR_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.h	/^#define YCBCR_SUPPORT$/;"	d
YCBCR_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.vc.h	/^#define YCBCR_SUPPORT$/;"	d
YCBCR_SUPPORT	3rdparty/tiff-3.9.4/tiffconf.wince.h	/^#define YCBCR_SUPPORT$/;"	d
YCbCrtoRGB	3rdparty/tiff-3.9.4/tif_getimage.c	/^#define	YCbCrtoRGB(/;"	d	file:
YCbCrtoRGB	3rdparty/tiff-3.9.4/tif_getimage.c	/^#undef YCbCrtoRGB$/;"	d	file:
YXY	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^	YXY	= 0x1011,$/;"	e	enum:Imath::Euler::Order
YXYr	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^	YXYr	= 0x1110,$/;"	e	enum:Imath::Euler::Order
YXZ	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^	YXZ	= 0x1001,$/;"	e	enum:Imath::Euler::Order
YXZr	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^	YXZr	= 0x1100,$/;"	e	enum:Imath::Euler::Order
YYABORT	core/pbrtparse.cpp	/^#define YYABORT	/;"	d	file:
YYACCEPT	core/pbrtparse.cpp	/^#define YYACCEPT	/;"	d	file:
YYBACKUP	core/pbrtparse.cpp	/^#define YYBACKUP(/;"	d	file:
YYBISON	core/pbrtparse.cpp	/^#define YYBISON /;"	d	file:
YYBISON_VERSION	core/pbrtparse.cpp	/^#define YYBISON_VERSION /;"	d	file:
YYCASE_	core/pbrtparse.cpp	/^# define YYCASE_(/;"	d	file:
YYCASE_	core/pbrtparse.cpp	/^# undef YYCASE_$/;"	d	file:
YYCOPY	core/pbrtparse.cpp	/^#   define YYCOPY(/;"	d	file:
YYCOPY_NEEDED	core/pbrtparse.cpp	/^# define YYCOPY_NEEDED /;"	d	file:
YYDEBUG	core/pbrtparse.cpp	/^# define YYDEBUG /;"	d	file:
YYDPRINTF	core/pbrtparse.cpp	/^# define YYDPRINTF(/;"	d	file:
YYEMPTY	core/pbrtparse.cpp	/^#define YYEMPTY	/;"	d	file:
YYEOF	core/pbrtparse.cpp	/^#define YYEOF	/;"	d	file:
YYERRCODE	core/pbrtparse.cpp	/^#define YYERRCODE	/;"	d	file:
YYERROR	core/pbrtparse.cpp	/^#define YYERROR	/;"	d	file:
YYERROR_VERBOSE	core/pbrtparse.cpp	/^# define YYERROR_VERBOSE /;"	d	file:
YYERROR_VERBOSE	core/pbrtparse.cpp	/^# undef YYERROR_VERBOSE$/;"	d	file:
YYFAIL	core/pbrtparse.cpp	/^#define YYFAIL	/;"	d	file:
YYFINAL	core/pbrtparse.cpp	/^#define YYFINAL /;"	d	file:
YYFPRINTF	core/pbrtparse.cpp	/^#  define YYFPRINTF /;"	d	file:
YYFREE	core/pbrtparse.cpp	/^#   define YYFREE /;"	d	file:
YYID	core/pbrtparse.cpp	/^# define YYID(/;"	d	file:
YYID	core/pbrtparse.cpp	/^YYID (int yyi)$/;"	f	file:
YYINITDEPTH	core/pbrtparse.cpp	/^# define YYINITDEPTH /;"	d	file:
YYLAST	core/pbrtparse.cpp	/^#define YYLAST /;"	d	file:
YYLEX	core/pbrtparse.cpp	/^# define YYLEX /;"	d	file:
YYLLOC_DEFAULT	core/pbrtparse.cpp	/^# define YYLLOC_DEFAULT(/;"	d	file:
YYLSP_NEEDED	core/pbrtparse.cpp	/^#define YYLSP_NEEDED /;"	d	file:
YYMALLOC	core/pbrtparse.cpp	/^#   define YYMALLOC /;"	d	file:
YYMAXDEPTH	core/pbrtparse.cpp	/^# define YYMAXDEPTH /;"	d	file:
YYMAXDEPTH	core/pbrtparse.cpp	/^#define YYMAXDEPTH /;"	d	file:
YYMAXUTOK	core/pbrtparse.cpp	/^#define YYMAXUTOK /;"	d	file:
YYNNTS	core/pbrtparse.cpp	/^#define YYNNTS /;"	d	file:
YYNRULES	core/pbrtparse.cpp	/^#define YYNRULES /;"	d	file:
YYNSTATES	core/pbrtparse.cpp	/^#define YYNSTATES /;"	d	file:
YYNTOKENS	core/pbrtparse.cpp	/^#define YYNTOKENS /;"	d	file:
YYPACT_NINF	core/pbrtparse.cpp	/^#define YYPACT_NINF /;"	d	file:
YYPOPSTACK	core/pbrtparse.cpp	/^#define YYPOPSTACK(/;"	d	file:
YYPRINT	core/pbrtparse.cpp	/^#define YYPRINT(/;"	d	file:
YYPULL	core/pbrtparse.cpp	/^#define YYPULL /;"	d	file:
YYPURE	core/pbrtparse.cpp	/^#define YYPURE /;"	d	file:
YYPUSH	core/pbrtparse.cpp	/^#define YYPUSH /;"	d	file:
YYRECOVERING	core/pbrtparse.cpp	/^#define YYRECOVERING(/;"	d	file:
YYRHSLOC	core/pbrtparse.cpp	/^#define YYRHSLOC(/;"	d	file:
YYSIZE_MAXIMUM	core/pbrtparse.cpp	/^#define YYSIZE_MAXIMUM /;"	d	file:
YYSIZE_T	core/pbrtparse.cpp	/^#  define YYSIZE_T /;"	d	file:
YYSKELETON_NAME	core/pbrtparse.cpp	/^#define YYSKELETON_NAME /;"	d	file:
YYSTACK_ALLOC	core/pbrtparse.cpp	/^#    define YYSTACK_ALLOC /;"	d	file:
YYSTACK_ALLOC	core/pbrtparse.cpp	/^#  define YYSTACK_ALLOC /;"	d	file:
YYSTACK_ALLOC_MAXIMUM	core/pbrtparse.cpp	/^#   define YYSTACK_ALLOC_MAXIMUM /;"	d	file:
YYSTACK_BYTES	core/pbrtparse.cpp	/^# define YYSTACK_BYTES(/;"	d	file:
YYSTACK_FREE	core/pbrtparse.cpp	/^#  define YYSTACK_FREE /;"	d	file:
YYSTACK_FREE	core/pbrtparse.cpp	/^#  define YYSTACK_FREE(/;"	d	file:
YYSTACK_GAP_MAXIMUM	core/pbrtparse.cpp	/^# define YYSTACK_GAP_MAXIMUM /;"	d	file:
YYSTACK_RELOCATE	core/pbrtparse.cpp	/^# define YYSTACK_RELOCATE(/;"	d	file:
YYSTATE	core/pbrtlex.cpp	/^#define YYSTATE /;"	d	file:
YYSTYPE	core/pbrtparse.cpp	/^typedef union YYSTYPE$/;"	u	file:
YYSTYPE	core/pbrtparse.cpp	/^} YYSTYPE;$/;"	t	typeref:union:YYSTYPE	file:
YYSTYPE	core/pbrtparse.hh	/^typedef union YYSTYPE$/;"	u
YYSTYPE	core/pbrtparse.hh	/^} YYSTYPE;$/;"	t	typeref:union:YYSTYPE
YYSTYPE_IS_DECLARED	core/pbrtparse.cpp	/^# define YYSTYPE_IS_DECLARED /;"	d	file:
YYSTYPE_IS_DECLARED	core/pbrtparse.hh	/^# define YYSTYPE_IS_DECLARED /;"	d
YYSTYPE_IS_TRIVIAL	core/pbrtparse.cpp	/^# define YYSTYPE_IS_TRIVIAL /;"	d	file:
YYSTYPE_IS_TRIVIAL	core/pbrtparse.hh	/^# define YYSTYPE_IS_TRIVIAL /;"	d
YYTABLES_NAME	core/pbrtlex.cpp	/^#define YYTABLES_NAME /;"	d	file:
YYTABLE_NINF	core/pbrtparse.cpp	/^#define YYTABLE_NINF /;"	d	file:
YYTERROR	core/pbrtparse.cpp	/^#define YYTERROR	/;"	d	file:
YYTOKENTYPE	core/pbrtparse.cpp	/^# define YYTOKENTYPE$/;"	d	file:
YYTOKENTYPE	core/pbrtparse.hh	/^# define YYTOKENTYPE$/;"	d
YYTOKEN_TABLE	core/pbrtparse.cpp	/^# define YYTOKEN_TABLE /;"	d	file:
YYTRANSLATE	core/pbrtparse.cpp	/^#define YYTRANSLATE(/;"	d	file:
YYUNDEFTOK	core/pbrtparse.cpp	/^#define YYUNDEFTOK /;"	d	file:
YYUSE	core/pbrtparse.cpp	/^# define YYUSE(/;"	d	file:
YY_	core/pbrtparse.cpp	/^#   define YY_(/;"	d	file:
YY_	core/pbrtparse.cpp	/^#  define YY_(/;"	d	file:
YY_AT_BOL	core/pbrtlex.cpp	/^#define YY_AT_BOL(/;"	d	file:
YY_BREAK	core/pbrtlex.cpp	/^#define YY_BREAK /;"	d	file:
YY_BUFFER_EOF_PENDING	core/pbrtlex.cpp	/^#define YY_BUFFER_EOF_PENDING /;"	d	file:
YY_BUFFER_NEW	core/pbrtlex.cpp	/^#define YY_BUFFER_NEW /;"	d	file:
YY_BUFFER_NORMAL	core/pbrtlex.cpp	/^#define YY_BUFFER_NORMAL /;"	d	file:
YY_BUFFER_STATE	core/pbrtlex.cpp	/^typedef struct yy_buffer_state *YY_BUFFER_STATE;$/;"	t	typeref:struct:yy_buffer_state	file:
YY_BUF_SIZE	core/pbrtlex.cpp	/^#define YY_BUF_SIZE /;"	d	file:
YY_CHAR	core/pbrtlex.cpp	/^typedef unsigned char YY_CHAR;$/;"	t	file:
YY_CURRENT_BUFFER	core/pbrtlex.cpp	/^#define YY_CURRENT_BUFFER /;"	d	file:
YY_CURRENT_BUFFER_LVALUE	core/pbrtlex.cpp	/^#define YY_CURRENT_BUFFER_LVALUE /;"	d	file:
YY_DECL	core/pbrtlex.cpp	/^#define YY_DECL /;"	d	file:
YY_DECL_IS_OURS	core/pbrtlex.cpp	/^#define YY_DECL_IS_OURS /;"	d	file:
YY_DO_BEFORE_ACTION	core/pbrtlex.cpp	/^#define YY_DO_BEFORE_ACTION /;"	d	file:
YY_END_OF_BUFFER	core/pbrtlex.cpp	/^#define YY_END_OF_BUFFER /;"	d	file:
YY_END_OF_BUFFER_CHAR	core/pbrtlex.cpp	/^#define YY_END_OF_BUFFER_CHAR /;"	d	file:
YY_EXIT_FAILURE	core/pbrtlex.cpp	/^#define YY_EXIT_FAILURE /;"	d	file:
YY_EXTRA_TYPE	core/pbrtlex.cpp	/^#define YY_EXTRA_TYPE /;"	d	file:
YY_FATAL_ERROR	core/pbrtlex.cpp	/^#define YY_FATAL_ERROR(/;"	d	file:
YY_FLEX_MAJOR_VERSION	core/pbrtlex.cpp	/^#define YY_FLEX_MAJOR_VERSION /;"	d	file:
YY_FLEX_MINOR_VERSION	core/pbrtlex.cpp	/^#define YY_FLEX_MINOR_VERSION /;"	d	file:
YY_FLEX_SUBMINOR_VERSION	core/pbrtlex.cpp	/^#define YY_FLEX_SUBMINOR_VERSION /;"	d	file:
YY_FLUSH_BUFFER	core/pbrtlex.cpp	/^#define YY_FLUSH_BUFFER /;"	d	file:
YY_INPUT	core/pbrtlex.cpp	/^#define YY_INPUT(/;"	d	file:
YY_INT_ALIGNED	core/pbrtlex.cpp	/^#define  YY_INT_ALIGNED /;"	d	file:
YY_LESS_LINENO	core/pbrtlex.cpp	/^    #define YY_LESS_LINENO(/;"	d	file:
YY_LOCATION_PRINT	core/pbrtparse.cpp	/^# define YY_LOCATION_PRINT(/;"	d	file:
YY_MAIN	core/pbrtlex.cpp	/^#define YY_MAIN /;"	d	file:
YY_MORE_ADJ	core/pbrtlex.cpp	/^#define YY_MORE_ADJ /;"	d	file:
YY_NEVER_INTERACTIVE	core/pbrtlex.cpp	/^#define YY_NEVER_INTERACTIVE /;"	d	file:
YY_NEW_FILE	core/pbrtlex.cpp	/^#define YY_NEW_FILE /;"	d	file:
YY_NULL	core/pbrtlex.cpp	/^#define YY_NULL /;"	d	file:
YY_NUM_RULES	core/pbrtlex.cpp	/^#define YY_NUM_RULES /;"	d	file:
YY_READ_BUF_SIZE	core/pbrtlex.cpp	/^#define YY_READ_BUF_SIZE /;"	d	file:
YY_REDUCE_PRINT	core/pbrtparse.cpp	/^# define YY_REDUCE_PRINT(/;"	d	file:
YY_RESTORE_YY_MORE_OFFSET	core/pbrtlex.cpp	/^#define YY_RESTORE_YY_MORE_OFFSET$/;"	d	file:
YY_RULE_SETUP	core/pbrtlex.cpp	/^#define YY_RULE_SETUP /;"	d	file:
YY_SC_TO_UI	core/pbrtlex.cpp	/^#define YY_SC_TO_UI(/;"	d	file:
YY_STACK_PRINT	core/pbrtparse.cpp	/^# define YY_STACK_PRINT(/;"	d	file:
YY_START	core/pbrtlex.cpp	/^#define YY_START /;"	d	file:
YY_START_STACK_INCR	core/pbrtlex.cpp	/^#define YY_START_STACK_INCR /;"	d	file:
YY_STATE_BUF_SIZE	core/pbrtlex.cpp	/^#define YY_STATE_BUF_SIZE /;"	d	file:
YY_STATE_EOF	core/pbrtlex.cpp	/^#define YY_STATE_EOF(/;"	d	file:
YY_STRUCT_YY_BUFFER_STATE	core/pbrtlex.cpp	/^#define YY_STRUCT_YY_BUFFER_STATE$/;"	d	file:
YY_SYMBOL_PRINT	core/pbrtparse.cpp	/^# define YY_SYMBOL_PRINT(/;"	d	file:
YY_TYPEDEF_YY_BUFFER_STATE	core/pbrtlex.cpp	/^#define YY_TYPEDEF_YY_BUFFER_STATE$/;"	d	file:
YY_TYPEDEF_YY_SIZE_T	core/pbrtlex.cpp	/^#define YY_TYPEDEF_YY_SIZE_T$/;"	d	file:
YY_USER_ACTION	core/pbrtlex.cpp	/^#define YY_USER_ACTION$/;"	d	file:
YY_USE_CONST	core/pbrtlex.cpp	/^#define YY_USE_CONST$/;"	d	file:
YZX	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^	YZX	= 0x1101,$/;"	e	enum:Imath::Euler::Order
YZXr	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^	YZXr	= 0x1000,$/;"	e	enum:Imath::Euler::Order
YZY	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^	YZY	= 0x1111,$/;"	e	enum:Imath::Euler::Order
YZYr	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^	YZYr	= 0x1010,$/;"	e	enum:Imath::Euler::Order
Y_tab	3rdparty/tiff-3.9.4/tiffio.h	/^        int32*  Y_tab;$/;"	m	struct:__anon64
Yb2b	3rdparty/tiff-3.9.4/tiffio.h	/^	float	Yb2b[CIELABTORGB_TABLE_RANGE + 1];  \/* Conversion of Yb to b *\/$/;"	m	struct:__anon65
Yg2g	3rdparty/tiff-3.9.4/tiffio.h	/^	float	Yg2g[CIELABTORGB_TABLE_RANGE + 1];  \/* Conversion of Yg to g *\/$/;"	m	struct:__anon65
Yr2r	3rdparty/tiff-3.9.4/tiffio.h	/^	float	Yr2r[CIELABTORGB_TABLE_RANGE + 1];  \/* Conversion of Yr to r *\/$/;"	m	struct:__anon65
Z	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^    enum Axis { X = 0, Y = 1, Z = 2 };$/;"	e	enum:Imath::Euler::Axis
Z	core/spectrum.cpp	/^SampledSpectrum SampledSpectrum::Z;$/;"	m	class:SampledSpectrum	file:
Z	core/spectrum.h	/^    static SampledSpectrum X, Y, Z;$/;"	m	class:SampledSpectrum
Z0	3rdparty/tiff-3.9.4/tiffio.h	/^	float	X0, Y0, Z0;			\/* Reference white point *\/$/;"	m	struct:__anon65
ZALLOC	3rdparty/zlib-1.2.5/zutil.h	/^#define ZALLOC(/;"	d
ZCONF_H	3rdparty/zlib-1.2.5/zconf.h	/^#define ZCONF_H$/;"	d
ZERO	3rdparty/tiff-3.9.4/tif_fax3.c	/^# define ZERO(/;"	d	file:
ZERO	3rdparty/tiff-3.9.4/tif_fax3.c	/^#undef	ZERO$/;"	d	file:
ZEXPORT	3rdparty/zlib-1.2.5/zconf.h	/^#      define ZEXPORT /;"	d
ZEXPORT	3rdparty/zlib-1.2.5/zconf.h	/^#    define ZEXPORT /;"	d
ZEXPORT	3rdparty/zlib-1.2.5/zconf.h	/^#  define ZEXPORT$/;"	d
ZEXPORTVA	3rdparty/zlib-1.2.5/zconf.h	/^#      define ZEXPORTVA /;"	d
ZEXPORTVA	3rdparty/zlib-1.2.5/zconf.h	/^#  define ZEXPORTVA$/;"	d
ZEXTERN	3rdparty/zlib-1.2.5/zconf.h	/^#        define ZEXTERN /;"	d
ZEXTERN	3rdparty/zlib-1.2.5/zconf.h	/^#  define ZEXTERN /;"	d
ZFREE	3rdparty/zlib-1.2.5/zutil.h	/^#define ZFREE(/;"	d
ZIPCleanup	3rdparty/tiff-3.9.4/tif_zip.c	/^ZIPCleanup(TIFF* tif)$/;"	f	file:
ZIPDecode	3rdparty/tiff-3.9.4/tif_zip.c	/^ZIPDecode(TIFF* tif, tidata_t op, tsize_t occ, tsample_t s)$/;"	f	file:
ZIPEncode	3rdparty/tiff-3.9.4/tif_zip.c	/^ZIPEncode(TIFF* tif, tidata_t bp, tsize_t cc, tsample_t s)$/;"	f	file:
ZIPPostEncode	3rdparty/tiff-3.9.4/tif_zip.c	/^ZIPPostEncode(TIFF* tif)$/;"	f	file:
ZIPPreDecode	3rdparty/tiff-3.9.4/tif_zip.c	/^ZIPPreDecode(TIFF* tif, tsample_t s)$/;"	f	file:
ZIPPreEncode	3rdparty/tiff-3.9.4/tif_zip.c	/^ZIPPreEncode(TIFF* tif, tsample_t s)$/;"	f	file:
ZIPS_COMPRESSION	3rdparty/openexr-1.7.0/ImfCompression.h	/^    ZIPS_COMPRESSION = 2,	\/\/ zlib compression, one scan line at a time$/;"	e	enum:Imf::Compression
ZIPSetupDecode	3rdparty/tiff-3.9.4/tif_zip.c	/^ZIPSetupDecode(TIFF* tif)$/;"	f	file:
ZIPSetupEncode	3rdparty/tiff-3.9.4/tif_zip.c	/^ZIPSetupEncode(TIFF* tif)$/;"	f	file:
ZIPState	3rdparty/tiff-3.9.4/tif_zip.c	/^} ZIPState;$/;"	t	typeref:struct:__anon59	file:
ZIPVGetField	3rdparty/tiff-3.9.4/tif_zip.c	/^ZIPVGetField(TIFF* tif, ttag_t tag, va_list ap)$/;"	f	file:
ZIPVSetField	3rdparty/tiff-3.9.4/tif_zip.c	/^ZIPVSetField(TIFF* tif, ttag_t tag, va_list ap)$/;"	f	file:
ZIP_COMPRESSION	3rdparty/openexr-1.7.0/ImfCompression.h	/^    ZIP_COMPRESSION = 3,	\/\/ zlib compression, in blocks of 16 scan lines$/;"	e	enum:Imf::Compression
ZLIB_H	3rdparty/zlib-1.2.5/zlib.h	/^#define ZLIB_H$/;"	d
ZLIB_INTERNAL	3rdparty/zlib-1.2.5/compress.c	/^#define ZLIB_INTERNAL$/;"	d	file:
ZLIB_INTERNAL	3rdparty/zlib-1.2.5/gzguts.h	/^#  define ZLIB_INTERNAL /;"	d
ZLIB_INTERNAL	3rdparty/zlib-1.2.5/gzguts.h	/^#  define ZLIB_INTERNAL$/;"	d
ZLIB_INTERNAL	3rdparty/zlib-1.2.5/uncompr.c	/^#define ZLIB_INTERNAL$/;"	d	file:
ZLIB_INTERNAL	3rdparty/zlib-1.2.5/zutil.h	/^#  define ZLIB_INTERNAL /;"	d
ZLIB_INTERNAL	3rdparty/zlib-1.2.5/zutil.h	/^#  define ZLIB_INTERNAL$/;"	d
ZLIB_VERNUM	3rdparty/zlib-1.2.5/zlib.h	/^#define ZLIB_VERNUM /;"	d
ZLIB_VERSION	3rdparty/zlib-1.2.5/zlib.h	/^#define ZLIB_VERSION /;"	d
ZLIB_VER_MAJOR	3rdparty/zlib-1.2.5/zlib.h	/^#define ZLIB_VER_MAJOR /;"	d
ZLIB_VER_MINOR	3rdparty/zlib-1.2.5/zlib.h	/^#define ZLIB_VER_MINOR /;"	d
ZLIB_VER_REVISION	3rdparty/zlib-1.2.5/zlib.h	/^#define ZLIB_VER_REVISION /;"	d
ZLIB_VER_SUBREVISION	3rdparty/zlib-1.2.5/zlib.h	/^#define ZLIB_VER_SUBREVISION /;"	d
ZLIB_WINAPI	3rdparty/openexr-1.7.0/ImfPxr24Compressor.cpp	/^#define ZLIB_WINAPI /;"	d	file:
ZLIB_WINAPI	3rdparty/openexr-1.7.0/ImfZipCompressor.cpp	/^#define ZLIB_WINAPI$/;"	d	file:
ZSTATE_INIT_DECODE	3rdparty/tiff-3.9.4/tif_zip.c	/^#define ZSTATE_INIT_DECODE /;"	d	file:
ZSTATE_INIT_ENCODE	3rdparty/tiff-3.9.4/tif_zip.c	/^#define ZSTATE_INIT_ENCODE /;"	d	file:
ZState	3rdparty/tiff-3.9.4/tif_zip.c	/^#define	ZState(/;"	d	file:
ZToDepth	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^T Frustum<T>::ZToDepth(long zval,long zmin,long zmax) const$/;"	f	class:Imath::Frustum
ZUTIL_H	3rdparty/zlib-1.2.5/zutil.h	/^#define ZUTIL_H$/;"	d
ZXY	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^	ZXY	= 0x2101,$/;"	e	enum:Imath::Euler::Order
ZXYr	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^	ZXYr	= 0x0000,$/;"	e	enum:Imath::Euler::Order
ZXZ	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^	ZXZ	= 0x2111,$/;"	e	enum:Imath::Euler::Order
ZXZr	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^	ZXZr	= 0x0010,$/;"	e	enum:Imath::Euler::Order
ZYX	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^	ZYX	= 0x2001,$/;"	e	enum:Imath::Euler::Order
ZYXr	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^	ZYXr	= 0x0100,$/;"	e	enum:Imath::Euler::Order
ZYZ	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^	ZYZ	= 0x2011,$/;"	e	enum:Imath::Euler::Order
ZYZr	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^	ZYZr	= 0x0110,$/;"	e	enum:Imath::Euler::Order
Z_ASCII	3rdparty/zlib-1.2.5/zlib.h	/^#define Z_ASCII /;"	d
Z_BEST_COMPRESSION	3rdparty/zlib-1.2.5/zlib.h	/^#define Z_BEST_COMPRESSION /;"	d
Z_BEST_SPEED	3rdparty/zlib-1.2.5/zlib.h	/^#define Z_BEST_SPEED /;"	d
Z_BINARY	3rdparty/zlib-1.2.5/zlib.h	/^#define Z_BINARY /;"	d
Z_BLOCK	3rdparty/zlib-1.2.5/zlib.h	/^#define Z_BLOCK /;"	d
Z_BUF_ERROR	3rdparty/zlib-1.2.5/zlib.h	/^#define Z_BUF_ERROR /;"	d
Z_DATA_ERROR	3rdparty/zlib-1.2.5/zlib.h	/^#define Z_DATA_ERROR /;"	d
Z_DEFAULT_COMPRESSION	3rdparty/zlib-1.2.5/zlib.h	/^#define Z_DEFAULT_COMPRESSION /;"	d
Z_DEFAULT_STRATEGY	3rdparty/zlib-1.2.5/zlib.h	/^#define Z_DEFAULT_STRATEGY /;"	d
Z_DEFLATED	3rdparty/zlib-1.2.5/zlib.h	/^#define Z_DEFLATED /;"	d
Z_ERRNO	3rdparty/zlib-1.2.5/zlib.h	/^#define Z_ERRNO /;"	d
Z_FILTERED	3rdparty/zlib-1.2.5/zlib.h	/^#define Z_FILTERED /;"	d
Z_FINISH	3rdparty/zlib-1.2.5/zlib.h	/^#define Z_FINISH /;"	d
Z_FIXED	3rdparty/zlib-1.2.5/zlib.h	/^#define Z_FIXED /;"	d
Z_FULL_FLUSH	3rdparty/zlib-1.2.5/zlib.h	/^#define Z_FULL_FLUSH /;"	d
Z_HAVE_UNISTD_H	3rdparty/zlib-1.2.5/zconf.h	/^#  define Z_HAVE_UNISTD_H$/;"	d
Z_HUFFMAN_ONLY	3rdparty/zlib-1.2.5/zlib.h	/^#define Z_HUFFMAN_ONLY /;"	d
Z_MEM_ERROR	3rdparty/zlib-1.2.5/zlib.h	/^#define Z_MEM_ERROR /;"	d
Z_NEED_DICT	3rdparty/zlib-1.2.5/zlib.h	/^#define Z_NEED_DICT /;"	d
Z_NO_COMPRESSION	3rdparty/zlib-1.2.5/zlib.h	/^#define Z_NO_COMPRESSION /;"	d
Z_NO_FLUSH	3rdparty/zlib-1.2.5/zlib.h	/^#define Z_NO_FLUSH /;"	d
Z_NULL	3rdparty/zlib-1.2.5/zlib.h	/^#define Z_NULL /;"	d
Z_OK	3rdparty/zlib-1.2.5/zlib.h	/^#define Z_OK /;"	d
Z_PARTIAL_FLUSH	3rdparty/zlib-1.2.5/zlib.h	/^#define Z_PARTIAL_FLUSH /;"	d
Z_RLE	3rdparty/zlib-1.2.5/zlib.h	/^#define Z_RLE /;"	d
Z_STREAM_END	3rdparty/zlib-1.2.5/zlib.h	/^#define Z_STREAM_END /;"	d
Z_STREAM_ERROR	3rdparty/zlib-1.2.5/zlib.h	/^#define Z_STREAM_ERROR /;"	d
Z_SYNC_FLUSH	3rdparty/zlib-1.2.5/zlib.h	/^#define Z_SYNC_FLUSH /;"	d
Z_TEXT	3rdparty/zlib-1.2.5/zlib.h	/^#define Z_TEXT /;"	d
Z_TREES	3rdparty/zlib-1.2.5/zlib.h	/^#define Z_TREES /;"	d
Z_UNKNOWN	3rdparty/zlib-1.2.5/zlib.h	/^#define Z_UNKNOWN /;"	d
Z_VERSION_ERROR	3rdparty/zlib-1.2.5/zlib.h	/^#define Z_VERSION_ERROR /;"	d
ZipCompressor	3rdparty/openexr-1.7.0/ImfZipCompressor.cpp	/^ZipCompressor::ZipCompressor$/;"	f	class:Imf::ZipCompressor
ZipCompressor	3rdparty/openexr-1.7.0/ImfZipCompressor.h	/^class ZipCompressor: public Compressor$/;"	c	namespace:Imf
_DTRACE_H	DerivedData/pbrt/Build/Intermediates/pbrt.build/Debug/pbrt.build/DerivedSources/dtrace.h	/^#define	_DTRACE_H$/;"	d
_FAX3_	3rdparty/tiff-3.9.4/tif_fax3.h	/^#define	_FAX3_$/;"	d
_FILE_OFFSET_BITS	3rdparty/zlib-1.2.5/gzguts.h	/^#    undef _FILE_OFFSET_BITS$/;"	d
_FlushBits	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	_FlushBits(/;"	d	file:
_GNU_SOURCE	core/pbrt.h	/^#define _GNU_SOURCE /;"	d
_HALF_FUNCTION_H_	3rdparty/ilmbase-1.0.2/halfFunction.h	/^#define _HALF_FUNCTION_H_$/;"	d
_HALF_H_	3rdparty/ilmbase-1.0.2/half.h	/^#define _HALF_H_$/;"	d
_LARGEFILE64_SOURCE	3rdparty/zlib-1.2.5/zconf.h	/^#  undef _LARGEFILE64_SOURCE$/;"	d
_LARGEFILE_SOURCE	3rdparty/zlib-1.2.5/gzguts.h	/^#    define _LARGEFILE_SOURCE /;"	d
_PTRDIFF_T_DEFINED	3rdparty/zlib-1.2.5/zutil.h	/^#      define _PTRDIFF_T_DEFINED$/;"	d
_PutBits	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	_PutBits(/;"	d	file:
_ReadWriteBarrier	core/parallel.h	/^		#define _ReadWriteBarrier(/;"	d
_T4_	3rdparty/tiff-3.9.4/t4.h	/^#define	_T4_$/;"	d
_TARGA_H_	core/targa.h	/^#define _TARGA_H_$/;"	d
_TIFFBuiltinCODECS	3rdparty/tiff-3.9.4/tif_codec.c	/^const TIFFCodec _TIFFBuiltinCODECS[] = {$/;"	v
_TIFFCONF_	3rdparty/tiff-3.9.4/tiffconf.h	/^#define _TIFFCONF_$/;"	d
_TIFFCONF_	3rdparty/tiff-3.9.4/tiffconf.vc.h	/^#define _TIFFCONF_$/;"	d
_TIFFCONF_	3rdparty/tiff-3.9.4/tiffconf.wince.h	/^#define _TIFFCONF_$/;"	d
_TIFFCheckMalloc	3rdparty/tiff-3.9.4/tif_aux.c	/^_TIFFCheckMalloc(TIFF* tif, size_t nmemb, size_t elem_size, const char* what)$/;"	f
_TIFFCheckRealloc	3rdparty/tiff-3.9.4/tif_aux.c	/^_TIFFCheckRealloc(TIFF* tif, tdata_t buffer,$/;"	f
_TIFFCreateAnonFieldInfo	3rdparty/tiff-3.9.4/tif_dirinfo.c	/^_TIFFCreateAnonFieldInfo(TIFF *tif, ttag_t tag, TIFFDataType field_type)$/;"	f
_TIFFDIR_	3rdparty/tiff-3.9.4/tif_dir.h	/^#define	_TIFFDIR_$/;"	d
_TIFFDataSize	3rdparty/tiff-3.9.4/tif_dirinfo.c	/^_TIFFDataSize(TIFFDataType type)$/;"	f
_TIFFDefaultStripSize	3rdparty/tiff-3.9.4/tif_strip.c	/^_TIFFDefaultStripSize(TIFF* tif, uint32 s)$/;"	f
_TIFFDefaultTileSize	3rdparty/tiff-3.9.4/tif_tile.c	/^_TIFFDefaultTileSize(TIFF* tif, uint32* tw, uint32* th)$/;"	f
_TIFFFax3fillruns	3rdparty/tiff-3.9.4/tif_fax3.c	/^_TIFFFax3fillruns(unsigned char* buf, uint32* runs, uint32* erun, uint32 lastx)$/;"	f
_TIFFFieldWithName	3rdparty/tiff-3.9.4/tif_dir.h	/^#define _TIFFFieldWithName	/;"	d
_TIFFFieldWithName	3rdparty/tiff-3.9.4/tif_dirinfo.c	/^_TIFFFieldWithName(TIFF* tif, const char *field_name)$/;"	f
_TIFFFieldWithTag	3rdparty/tiff-3.9.4/tif_dir.h	/^#define _TIFFFieldWithTag	/;"	d
_TIFFFieldWithTag	3rdparty/tiff-3.9.4/tif_dirinfo.c	/^_TIFFFieldWithTag(TIFF* tif, ttag_t tag)$/;"	f
_TIFFFindFieldInfo	3rdparty/tiff-3.9.4/tif_dir.h	/^#define _TIFFFindFieldInfo	/;"	d
_TIFFFindFieldInfo	3rdparty/tiff-3.9.4/tif_dirinfo.c	/^_TIFFFindFieldInfo(TIFF* tif, ttag_t tag, TIFFDataType dt)$/;"	f
_TIFFFindFieldInfoByName	3rdparty/tiff-3.9.4/tif_dir.h	/^#define _TIFFFindFieldInfoByName /;"	d
_TIFFFindFieldInfoByName	3rdparty/tiff-3.9.4/tif_dirinfo.c	/^_TIFFFindFieldInfoByName(TIFF* tif, const char *field_name, TIFFDataType dt)$/;"	f
_TIFFFindOrRegisterFieldInfo	3rdparty/tiff-3.9.4/tif_dirinfo.c	/^_TIFFFindOrRegisterFieldInfo( TIFF *tif, ttag_t tag, TIFFDataType dt )$/;"	f
_TIFFGetExifFieldInfo	3rdparty/tiff-3.9.4/tif_dirinfo.c	/^_TIFFGetExifFieldInfo(size_t *size)$/;"	f
_TIFFGetFieldInfo	3rdparty/tiff-3.9.4/tif_dirinfo.c	/^_TIFFGetFieldInfo(size_t *size)$/;"	f
_TIFFIOP_	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	_TIFFIOP_$/;"	d
_TIFFIO_	3rdparty/tiff-3.9.4/tiffio.h	/^#define	_TIFFIO_$/;"	d
_TIFFIO_HXX_	3rdparty/tiff-3.9.4/tiffio.hxx	/^#define	_TIFFIO_HXX_$/;"	d
_TIFFMergeFieldInfo	3rdparty/tiff-3.9.4/tif_dirinfo.c	/^_TIFFMergeFieldInfo(TIFF* tif, const TIFFFieldInfo info[], int n)$/;"	f
_TIFFNoPostDecode	3rdparty/tiff-3.9.4/tif_read.c	/^_TIFFNoPostDecode(TIFF* tif, tidata_t buf, tsize_t cc)$/;"	f
_TIFFNoPreCode	3rdparty/tiff-3.9.4/tif_compress.c	/^_TIFFNoPreCode(TIFF* tif, tsample_t s)$/;"	f
_TIFFNoRowDecode	3rdparty/tiff-3.9.4/tif_compress.c	/^_TIFFNoRowDecode(TIFF* tif, tidata_t pp, tsize_t cc, tsample_t s)$/;"	f
_TIFFNoRowEncode	3rdparty/tiff-3.9.4/tif_compress.c	/^_TIFFNoRowEncode(TIFF* tif, tidata_t pp, tsize_t cc, tsample_t s)$/;"	f
_TIFFNoSeek	3rdparty/tiff-3.9.4/tif_compress.c	/^_TIFFNoSeek(TIFF* tif, uint32 off)$/;"	f
_TIFFNoStripDecode	3rdparty/tiff-3.9.4/tif_compress.c	/^_TIFFNoStripDecode(TIFF* tif, tidata_t pp, tsize_t cc, tsample_t s)$/;"	f
_TIFFNoStripEncode	3rdparty/tiff-3.9.4/tif_compress.c	/^_TIFFNoStripEncode(TIFF* tif, tidata_t pp, tsize_t cc, tsample_t s)$/;"	f
_TIFFNoTileDecode	3rdparty/tiff-3.9.4/tif_compress.c	/^_TIFFNoTileDecode(TIFF* tif, tidata_t pp, tsize_t cc, tsample_t s)$/;"	f
_TIFFNoTileEncode	3rdparty/tiff-3.9.4/tif_compress.c	/^_TIFFNoTileEncode(TIFF* tif, tidata_t pp, tsize_t cc, tsample_t s)$/;"	f
_TIFFPREDICT_	3rdparty/tiff-3.9.4/tif_predict.h	/^#define	_TIFFPREDICT_$/;"	d
_TIFFPrettyPrintField	3rdparty/tiff-3.9.4/tif_print.c	/^_TIFFPrettyPrintField(TIFF* tif, FILE* fd, ttag_t tag,$/;"	f	file:
_TIFFPrintField	3rdparty/tiff-3.9.4/tif_print.c	/^_TIFFPrintField(FILE* fd, const TIFFFieldInfo *fip,$/;"	f	file:
_TIFFPrintFieldInfo	3rdparty/tiff-3.9.4/tif_dirinfo.c	/^_TIFFPrintFieldInfo(TIFF* tif, FILE* fd)$/;"	f
_TIFFRGBAImage	3rdparty/tiff-3.9.4/tiffio.h	/^struct _TIFFRGBAImage {$/;"	s
_TIFFSampleToTagType	3rdparty/tiff-3.9.4/tif_dirinfo.c	/^_TIFFSampleToTagType(TIFF* tif)$/;"	f
_TIFFSetDefaultCompressionState	3rdparty/tiff-3.9.4/tif_compress.c	/^_TIFFSetDefaultCompressionState(TIFF* tif)$/;"	f
_TIFFSetupFieldInfo	3rdparty/tiff-3.9.4/tif_dirinfo.c	/^_TIFFSetupFieldInfo(TIFF* tif, const TIFFFieldInfo info[], size_t n)$/;"	f
_TIFFSwab16BitData	3rdparty/tiff-3.9.4/tif_read.c	/^_TIFFSwab16BitData(TIFF* tif, tidata_t buf, tsize_t cc)$/;"	f
_TIFFSwab24BitData	3rdparty/tiff-3.9.4/tif_read.c	/^_TIFFSwab24BitData(TIFF* tif, tidata_t buf, tsize_t cc)$/;"	f
_TIFFSwab32BitData	3rdparty/tiff-3.9.4/tif_read.c	/^_TIFFSwab32BitData(TIFF* tif, tidata_t buf, tsize_t cc)$/;"	f
_TIFFSwab64BitData	3rdparty/tiff-3.9.4/tif_read.c	/^_TIFFSwab64BitData(TIFF* tif, tidata_t buf, tsize_t cc)$/;"	f
_TIFFTagValue	3rdparty/tiff-3.9.4/tiffio.h	/^typedef struct _TIFFTagValue {$/;"	s
_TIFFVGetField	3rdparty/tiff-3.9.4/tif_dir.c	/^_TIFFVGetField(TIFF* tif, ttag_t tag, va_list ap)$/;"	f	file:
_TIFFVSetField	3rdparty/tiff-3.9.4/tif_dir.c	/^_TIFFVSetField(TIFF* tif, ttag_t tag, va_list ap)$/;"	f	file:
_TIFFWriteCustomDirectory	3rdparty/tiff-3.9.4/tif_dirwrite.c	/^_TIFFWriteCustomDirectory(TIFF* tif, toff_t *pdiroff)$/;"	f	file:
_TIFFWriteDirectory	3rdparty/tiff-3.9.4/tif_dirwrite.c	/^_TIFFWriteDirectory(TIFF* tif, int done)$/;"	f	file:
_TIFF_	3rdparty/tiff-3.9.4/tiff.h	/^#define	_TIFF_$/;"	d
_TIFFerrorHandler	3rdparty/tiff-3.9.4/tif_acorn.c	/^TIFFErrorHandler _TIFFerrorHandler = acornErrorHandler;$/;"	v
_TIFFerrorHandler	3rdparty/tiff-3.9.4/tif_apple.c	/^TIFFErrorHandler _TIFFerrorHandler = appleErrorHandler;$/;"	v
_TIFFerrorHandler	3rdparty/tiff-3.9.4/tif_atari.c	/^TIFFErrorHandler _TIFFerrorHandler = atariErrorHandler;$/;"	v
_TIFFerrorHandler	3rdparty/tiff-3.9.4/tif_msdos.c	/^TIFFErrorHandler _TIFFerrorHandler = msdosErrorHandler;$/;"	v
_TIFFerrorHandler	3rdparty/tiff-3.9.4/tif_unix.c	/^TIFFErrorHandler _TIFFerrorHandler = unixErrorHandler;$/;"	v
_TIFFerrorHandler	3rdparty/tiff-3.9.4/tif_win3.c	/^TIFFErrorHandler _TIFFerrorHandler = win3ErrorHandler;$/;"	v
_TIFFerrorHandler	3rdparty/tiff-3.9.4/tif_win32.c	/^TIFFErrorHandler _TIFFerrorHandler = Win32ErrorHandler;$/;"	v
_TIFFerrorHandlerExt	3rdparty/tiff-3.9.4/tif_error.c	/^TIFFErrorHandlerExt _TIFFerrorHandlerExt = NULL;$/;"	v
_TIFFextender	3rdparty/tiff-3.9.4/tif_dir.c	/^static TIFFExtendProc _TIFFextender = (TIFFExtendProc) NULL;$/;"	v	file:
_TIFFfree	3rdparty/tiff-3.9.4/tif_acorn.c	/^_TIFFfree(tdata_t p)$/;"	f
_TIFFfree	3rdparty/tiff-3.9.4/tif_apple.c	/^_TIFFfree(tdata_t p)$/;"	f
_TIFFfree	3rdparty/tiff-3.9.4/tif_atari.c	/^_TIFFfree(tdata_t p)$/;"	f
_TIFFfree	3rdparty/tiff-3.9.4/tif_msdos.c	/^_TIFFfree(tdata_t p)$/;"	f
_TIFFfree	3rdparty/tiff-3.9.4/tif_unix.c	/^_TIFFfree(tdata_t p)$/;"	f
_TIFFfree	3rdparty/tiff-3.9.4/tif_win3.c	/^_TIFFfree(tdata_t p)$/;"	f
_TIFFfree	3rdparty/tiff-3.9.4/tif_win32.c	/^_TIFFfree(tdata_t p)$/;"	f
_TIFFgetMode	3rdparty/tiff-3.9.4/tif_open.c	/^_TIFFgetMode(const char* mode, const char* module)$/;"	f
_TIFFmalloc	3rdparty/tiff-3.9.4/tif_acorn.c	/^_TIFFmalloc(tsize_t s)$/;"	f
_TIFFmalloc	3rdparty/tiff-3.9.4/tif_apple.c	/^_TIFFmalloc(tsize_t s)$/;"	f
_TIFFmalloc	3rdparty/tiff-3.9.4/tif_atari.c	/^_TIFFmalloc(tsize_t s)$/;"	f
_TIFFmalloc	3rdparty/tiff-3.9.4/tif_msdos.c	/^_TIFFmalloc(tsize_t s)$/;"	f
_TIFFmalloc	3rdparty/tiff-3.9.4/tif_unix.c	/^_TIFFmalloc(tsize_t s)$/;"	f
_TIFFmalloc	3rdparty/tiff-3.9.4/tif_win3.c	/^_TIFFmalloc(tsize_t s)$/;"	f
_TIFFmalloc	3rdparty/tiff-3.9.4/tif_win32.c	/^_TIFFmalloc(tsize_t s)$/;"	f
_TIFFmemcmp	3rdparty/tiff-3.9.4/tif_acorn.c	/^_TIFFmemcmp(const tdata_t p1, const tdata_t p2, tsize_t c)$/;"	f
_TIFFmemcmp	3rdparty/tiff-3.9.4/tif_apple.c	/^_TIFFmemcmp(const tdata_t p1, const tdata_t p2, tsize_t c)$/;"	f
_TIFFmemcmp	3rdparty/tiff-3.9.4/tif_atari.c	/^_TIFFmemcmp(const tdata_t p1, const tdata_t p2, tsize_t c)$/;"	f
_TIFFmemcmp	3rdparty/tiff-3.9.4/tif_msdos.c	/^_TIFFmemcmp(const tdata_t p1, const tdata_t p2, tsize_t c)$/;"	f
_TIFFmemcmp	3rdparty/tiff-3.9.4/tif_unix.c	/^_TIFFmemcmp(const tdata_t p1, const tdata_t p2, tsize_t c)$/;"	f
_TIFFmemcmp	3rdparty/tiff-3.9.4/tif_win3.c	/^_TIFFmemcmp(const tdata_t d, const tdata_t s, tsize_t c)$/;"	f
_TIFFmemcmp	3rdparty/tiff-3.9.4/tif_win32.c	/^_TIFFmemcmp(const tdata_t p1, const tdata_t p2, tsize_t c)$/;"	f
_TIFFmemcpy	3rdparty/tiff-3.9.4/tif_acorn.c	/^_TIFFmemcpy(tdata_t d, const tdata_t s, tsize_t c)$/;"	f
_TIFFmemcpy	3rdparty/tiff-3.9.4/tif_apple.c	/^_TIFFmemcpy(tdata_t d, const tdata_t s, tsize_t c)$/;"	f
_TIFFmemcpy	3rdparty/tiff-3.9.4/tif_atari.c	/^_TIFFmemcpy(tdata_t d, const tdata_t s, size_t c)$/;"	f
_TIFFmemcpy	3rdparty/tiff-3.9.4/tif_msdos.c	/^_TIFFmemcpy(tdata_t d, const tdata_t s, tsize_t c)$/;"	f
_TIFFmemcpy	3rdparty/tiff-3.9.4/tif_unix.c	/^_TIFFmemcpy(tdata_t d, const tdata_t s, tsize_t c)$/;"	f
_TIFFmemcpy	3rdparty/tiff-3.9.4/tif_win3.c	/^_TIFFmemcpy(tdata_t d, const tdata_t s, tsize_t c)$/;"	f
_TIFFmemcpy	3rdparty/tiff-3.9.4/tif_win32.c	/^_TIFFmemcpy(void* d, const tdata_t s, tsize_t c)$/;"	f
_TIFFmemset	3rdparty/tiff-3.9.4/tif_acorn.c	/^_TIFFmemset(tdata_t p, int v, tsize_t c)$/;"	f
_TIFFmemset	3rdparty/tiff-3.9.4/tif_apple.c	/^_TIFFmemset(tdata_t p, int v, tsize_t c)$/;"	f
_TIFFmemset	3rdparty/tiff-3.9.4/tif_atari.c	/^_TIFFmemset(tdata_t p, int v, size_t c)$/;"	f
_TIFFmemset	3rdparty/tiff-3.9.4/tif_msdos.c	/^_TIFFmemset(tdata_t p, int v, tsize_t c)$/;"	f
_TIFFmemset	3rdparty/tiff-3.9.4/tif_unix.c	/^_TIFFmemset(tdata_t p, int v, tsize_t c)$/;"	f
_TIFFmemset	3rdparty/tiff-3.9.4/tif_win3.c	/^_TIFFmemset(tdata_t p, int v, tsize_t c)$/;"	f
_TIFFmemset	3rdparty/tiff-3.9.4/tif_win32.c	/^_TIFFmemset(void* p, int v, tsize_t c)$/;"	f
_TIFFprintAscii	3rdparty/tiff-3.9.4/tif_print.c	/^_TIFFprintAscii(FILE* fd, const char* cp)$/;"	f
_TIFFprintAsciiTag	3rdparty/tiff-3.9.4/tif_print.c	/^_TIFFprintAsciiTag(FILE* fd, const char* name, const char* value)$/;"	f
_TIFFrealloc	3rdparty/tiff-3.9.4/tif_acorn.c	/^_TIFFrealloc(tdata_t p, tsize_t s)$/;"	f
_TIFFrealloc	3rdparty/tiff-3.9.4/tif_apple.c	/^_TIFFrealloc(tdata_t p, tsize_t s)$/;"	f
_TIFFrealloc	3rdparty/tiff-3.9.4/tif_atari.c	/^_TIFFrealloc(tdata_t p, tsize_t s)$/;"	f
_TIFFrealloc	3rdparty/tiff-3.9.4/tif_msdos.c	/^_TIFFrealloc(tdata_t p, tsize_t s)$/;"	f
_TIFFrealloc	3rdparty/tiff-3.9.4/tif_unix.c	/^_TIFFrealloc(tdata_t p, tsize_t s)$/;"	f
_TIFFrealloc	3rdparty/tiff-3.9.4/tif_win3.c	/^_TIFFrealloc(tdata_t p, tsize_t s)$/;"	f
_TIFFrealloc	3rdparty/tiff-3.9.4/tif_win32.c	/^_TIFFrealloc(tdata_t p, tsize_t s)$/;"	f
_TIFFsetByteArray	3rdparty/tiff-3.9.4/tif_dir.c	/^void _TIFFsetByteArray(void** vpp, void* vp, uint32 n)$/;"	f
_TIFFsetDoubleArray	3rdparty/tiff-3.9.4/tif_dir.c	/^void _TIFFsetDoubleArray(double** dpp, double* dp, uint32 n)$/;"	f
_TIFFsetFloatArray	3rdparty/tiff-3.9.4/tif_dir.c	/^void _TIFFsetFloatArray(float** fpp, float* fp, uint32 n)$/;"	f
_TIFFsetLongArray	3rdparty/tiff-3.9.4/tif_dir.c	/^void _TIFFsetLongArray(uint32** lpp, uint32* lp, uint32 n)$/;"	f
_TIFFsetNString	3rdparty/tiff-3.9.4/tif_dir.c	/^void _TIFFsetNString(char** cpp, char* cp, uint32 n)$/;"	f
_TIFFsetShortArray	3rdparty/tiff-3.9.4/tif_dir.c	/^void _TIFFsetShortArray(uint16** wpp, uint16* wp, uint32 n)$/;"	f
_TIFFsetString	3rdparty/tiff-3.9.4/tif_dir.c	/^void _TIFFsetString(char** cpp, char* cp)$/;"	f
_TIFFtrue	3rdparty/tiff-3.9.4/tif_compress.c	/^static int _TIFFtrue(TIFF* tif) { (void) tif; return (1); }$/;"	f	file:
_TIFFvoid	3rdparty/tiff-3.9.4/tif_compress.c	/^static void _TIFFvoid(TIFF* tif) { (void) tif; }$/;"	f	file:
_TIFFwarningHandler	3rdparty/tiff-3.9.4/tif_acorn.c	/^TIFFErrorHandler _TIFFwarningHandler = acornWarningHandler;$/;"	v
_TIFFwarningHandler	3rdparty/tiff-3.9.4/tif_apple.c	/^TIFFErrorHandler _TIFFwarningHandler = appleWarningHandler;$/;"	v
_TIFFwarningHandler	3rdparty/tiff-3.9.4/tif_atari.c	/^TIFFErrorHandler _TIFFwarningHandler = atariWarningHandler;$/;"	v
_TIFFwarningHandler	3rdparty/tiff-3.9.4/tif_msdos.c	/^TIFFErrorHandler _TIFFwarningHandler = msdosWarningHandler;$/;"	v
_TIFFwarningHandler	3rdparty/tiff-3.9.4/tif_unix.c	/^TIFFErrorHandler _TIFFwarningHandler = unixWarningHandler;$/;"	v
_TIFFwarningHandler	3rdparty/tiff-3.9.4/tif_win3.c	/^TIFFErrorHandler _TIFFwarningHandler = win3WarningHandler;$/;"	v
_TIFFwarningHandler	3rdparty/tiff-3.9.4/tif_win32.c	/^TIFFErrorHandler _TIFFwarningHandler = Win32WarningHandler;$/;"	v
_TIFFwarningHandlerExt	3rdparty/tiff-3.9.4/tif_warning.c	/^TIFFErrorHandlerExt _TIFFwarningHandlerExt = NULL;$/;"	v
_TINY_OBJ_LOADER_H	tools/obj2pbrt.cpp	/^#define _TINY_OBJ_LOADER_H$/;"	d	file:
__PLY_H__	tools/ply.h	/^#define __PLY_H__$/;"	d
__STDC_LIMIT_MACROS	core/pbrtlex.cpp	/^#define __STDC_LIMIT_MACROS /;"	d	file:
__WIN32__	3rdparty/tiff-3.9.4/tiffio.h	/^#define __WIN32__$/;"	d
__attribute__	3rdparty/tiff-3.9.4/tiffio.h	/^#  define __attribute__(/;"	d
_bottom	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^    T			_bottom;$/;"	m	class:Imath::Frustum
_buf	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    Rgba *		_buf[N];$/;"	m	class:Imf::RgbaOutputFile::ToYca	file:
_buf	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^     Array2D <Rgba>	_buf;$/;"	m	class:Imf::TiledRgbaInputFile::FromYa	file:
_buf	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^     Array2D <Rgba>	_buf;$/;"	m	class:Imf::TiledRgbaOutputFile::ToYa	file:
_buf1	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    Rgba *		_buf1[N + 2];$/;"	m	class:Imf::RgbaInputFile::FromYca	file:
_buf2	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    Rgba *		_buf2[3];$/;"	m	class:Imf::RgbaInputFile::FromYca	file:
_bufBase	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    Rgba *		_bufBase;$/;"	m	class:Imf::RgbaInputFile::FromYca	file:
_bufBase	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    Rgba *		_bufBase;$/;"	m	class:Imf::RgbaOutputFile::ToYca	file:
_channelData	3rdparty/openexr-1.7.0/ImfB44Compressor.h	/^    ChannelData *	_channelData;$/;"	m	class:Imf::B44Compressor
_channelData	3rdparty/openexr-1.7.0/ImfPizCompressor.h	/^    ChannelData *	_channelData;$/;"	m	class:Imf::PizCompressor
_channelNamePrefix	3rdparty/openexr-1.7.0/ImfRgbaFile.h	/^    std::string			_channelNamePrefix;$/;"	m	class:Imf::RgbaInputFile
_channelNamePrefix	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.h	/^    std::string		_channelNamePrefix;$/;"	m	class:Imf::TiledRgbaInputFile
_channels	3rdparty/openexr-1.7.0/ImfB44Compressor.h	/^    const ChannelList &	_channels;$/;"	m	class:Imf::B44Compressor
_channels	3rdparty/openexr-1.7.0/ImfPizCompressor.h	/^    const ChannelList &	_channels;$/;"	m	class:Imf::PizCompressor
_channels	3rdparty/openexr-1.7.0/ImfPxr24Compressor.h	/^    const ChannelList &	_channels;$/;"	m	class:Imf::Pxr24Compressor
_chn	3rdparty/openexr-1.7.0/ImfLut.h	/^    RgbaChannels	_chn;$/;"	m	class:Imf::RgbaLut
_codec	3rdparty/tiff-3.9.4/tif_compress.c	/^typedef struct _codec {$/;"	s	file:
_count	3rdparty/openexr-1.7.0/ImfKeyCode.h	/^    int		_count;$/;"	m	class:Imf::KeyCode
_currentScanLine	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    int			_currentScanLine;$/;"	m	class:Imf::RgbaInputFile::FromYca	file:
_currentScanLine	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    int			_currentScanLine;$/;"	m	class:Imf::RgbaOutputFile::ToYca	file:
_data	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^    ThreadPool::Data *	_data;$/;"	m	class:IlmThread::__anon2::WorkerThread	file:
_data	3rdparty/ilmbase-1.0.2/IlmThreadPool.h	/^    Data *		_data;$/;"	m	class:IlmThread::ThreadPool
_data	3rdparty/ilmbase-1.0.2/IlmThreadPool.h	/^    Data* const		_data;$/;"	m	class:IlmThread::TaskGroup
_data	3rdparty/openexr-1.7.0/ImfAcesFile.h	/^    Data *			_data;$/;"	m	class:Imf::AcesInputFile
_data	3rdparty/openexr-1.7.0/ImfAcesFile.h	/^    Data *			_data;$/;"	m	class:Imf::AcesOutputFile
_data	3rdparty/openexr-1.7.0/ImfArray.h	/^    T *		_data;$/;"	m	class:Imf::Array2D
_data	3rdparty/openexr-1.7.0/ImfArray.h	/^    T * _data;$/;"	m	class:Imf::Array
_data	3rdparty/openexr-1.7.0/ImfAutoArray.h	/^	T *_data;$/;"	m	class:Imf::AutoArray
_data	3rdparty/openexr-1.7.0/ImfInputFile.h	/^    Data *		_data;$/;"	m	class:Imf::InputFile
_data	3rdparty/openexr-1.7.0/ImfOpaqueAttribute.h	/^    Array<char>			_data;$/;"	m	class:Imf::OpaqueAttribute
_data	3rdparty/openexr-1.7.0/ImfOutputFile.h	/^    Data *		_data;$/;"	m	class:Imf::OutputFile
_data	3rdparty/openexr-1.7.0/ImfScanLineInputFile.h	/^    Data *		_data;$/;"	m	class:Imf::ScanLineInputFile
_data	3rdparty/openexr-1.7.0/ImfTiledInputFile.h	/^    Data *		_data;$/;"	m	class:Imf::TiledInputFile
_data	3rdparty/openexr-1.7.0/ImfTiledOutputFile.h	/^    Data *		_data;$/;"	m	class:Imf::TiledOutputFile
_dataSize	3rdparty/openexr-1.7.0/ImfOpaqueAttribute.h	/^    long			_dataSize;$/;"	m	class:Imf::OpaqueAttribute
_deleteStream	3rdparty/openexr-1.7.0/ImfStdIO.h	/^    bool		_deleteStream;$/;"	m	class:Imf::StdIFStream
_deleteStream	3rdparty/openexr-1.7.0/ImfStdIO.h	/^    bool		_deleteStream;$/;"	m	class:Imf::StdOFStream
_dist_code	3rdparty/zlib-1.2.5/trees.c	/^uch _dist_code[DIST_CODE_LEN];$/;"	v
_dist_code	3rdparty/zlib-1.2.5/trees.h	/^const uch ZLIB_INTERNAL _dist_code[DIST_CODE_LEN] = {$/;"	v
_dist_code	3rdparty/zlib-1.2.5/zconf.h	/^#  define _dist_code /;"	d
_eLut	3rdparty/ilmbase-1.0.2/half.h	/^    static HALF_EXPORT_CONST unsigned short _eLut[1 << 9];$/;"	m	class:half
_far	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^    T			_far;$/;"	m	class:Imath::Frustum
_fbBase	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    Rgba *		_fbBase;$/;"	m	class:Imf::RgbaInputFile::FromYca	file:
_fbBase	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    const Rgba *	_fbBase;$/;"	m	class:Imf::RgbaOutputFile::ToYca	file:
_fbBase	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^     Rgba *		_fbBase;$/;"	m	class:Imf::TiledRgbaInputFile::FromYa	file:
_fbBase	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^     const Rgba *	_fbBase;$/;"	m	class:Imf::TiledRgbaOutputFile::ToYa	file:
_fbXStride	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    size_t		_fbXStride;$/;"	m	class:Imf::RgbaInputFile::FromYca	file:
_fbXStride	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    size_t		_fbXStride;$/;"	m	class:Imf::RgbaOutputFile::ToYca	file:
_fbXStride	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^     size_t		_fbXStride;$/;"	m	class:Imf::TiledRgbaInputFile::FromYa	file:
_fbXStride	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^     size_t		_fbXStride;$/;"	m	class:Imf::TiledRgbaOutputFile::ToYa	file:
_fbYStride	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    size_t		_fbYStride;$/;"	m	class:Imf::RgbaInputFile::FromYca	file:
_fbYStride	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    size_t		_fbYStride;$/;"	m	class:Imf::RgbaOutputFile::ToYca	file:
_fbYStride	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^     size_t		_fbYStride;$/;"	m	class:Imf::TiledRgbaInputFile::FromYa	file:
_fbYStride	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^     size_t		_fbYStride;$/;"	m	class:Imf::TiledRgbaOutputFile::ToYa	file:
_fileName	3rdparty/openexr-1.7.0/ImfIO.h	/^    std::string		_fileName;$/;"	m	class:Imf::IStream
_fileName	3rdparty/openexr-1.7.0/ImfIO.h	/^    std::string		_fileName;$/;"	m	class:Imf::OStream
_filmMfcCode	3rdparty/openexr-1.7.0/ImfKeyCode.h	/^    int		_filmMfcCode;$/;"	m	class:Imf::KeyCode
_filmType	3rdparty/openexr-1.7.0/ImfKeyCode.h	/^    int		_filmType;$/;"	m	class:Imf::KeyCode
_format	3rdparty/openexr-1.7.0/ImfB44Compressor.h	/^    Format		_format;$/;"	m	class:Imf::B44Compressor
_format	3rdparty/openexr-1.7.0/ImfPizCompressor.h	/^    Format		_format;$/;"	m	class:Imf::PizCompressor
_fromYa	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.h	/^    FromYa *		_fromYa;$/;"	m	class:Imf::TiledRgbaInputFile
_fromYca	3rdparty/openexr-1.7.0/ImfRgbaFile.h	/^    FromYca *			_fromYca;$/;"	m	class:Imf::RgbaInputFile
_group	3rdparty/ilmbase-1.0.2/IlmThreadPool.h	/^    TaskGroup *		_group;$/;"	m	class:IlmThread::Task
_h	3rdparty/ilmbase-1.0.2/half.h	/^    unsigned short	_h;$/;"	m	class:half
_halloc	3rdparty/zlib-1.2.5/zutil.c	/^#  define _halloc /;"	d	file:
_header	3rdparty/openexr-1.7.0/ImfCompressor.h	/^    const Header &	_header;$/;"	m	class:Imf::Compressor
_height	3rdparty/openexr-1.7.0/ImfPreviewImage.h	/^    unsigned int	_height;$/;"	m	class:Imf::PreviewImage
_height	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    int			_height;$/;"	m	class:Imf::RgbaInputFile::FromYca	file:
_height	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    int			_height;$/;"	m	class:Imf::RgbaOutputFile::ToYca	file:
_hfree	3rdparty/zlib-1.2.5/zutil.c	/^#  define _hfree /;"	d	file:
_i	3rdparty/openexr-1.7.0/ImfChannelList.h	/^    ChannelList::ChannelMap::const_iterator _i;$/;"	m	class:Imf::ChannelList::ConstIterator
_i	3rdparty/openexr-1.7.0/ImfChannelList.h	/^    ChannelList::ChannelMap::iterator _i;$/;"	m	class:Imf::ChannelList::Iterator
_i	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^    FrameBuffer::SliceMap::const_iterator _i;$/;"	m	class:Imf::FrameBuffer::ConstIterator
_i	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^    FrameBuffer::SliceMap::iterator _i;$/;"	m	class:Imf::FrameBuffer::Iterator
_i	3rdparty/openexr-1.7.0/ImfHeader.h	/^    Header::AttributeMap::const_iterator _i;$/;"	m	class:Imf::Header::ConstIterator
_i	3rdparty/openexr-1.7.0/ImfHeader.h	/^    Header::AttributeMap::iterator _i;$/;"	m	class:Imf::Header::Iterator
_ifd	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    ScanLineInputFile::Data *	_ifd;$/;"	m	class:Imf::__anon32::LineBufferTask	file:
_ifd	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    TiledInputFile::Data *	_ifd;$/;"	m	class:Imf::__anon35::TileBufferTask	file:
_initialAxis	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^    Axis		_initialAxis	 ;	\/\/ First axis of rotation$/;"	m	class:Imath::Euler
_inputFile	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    InputFile &		_inputFile;$/;"	m	class:Imf::RgbaInputFile::FromYca	file:
_inputFile	3rdparty/openexr-1.7.0/ImfRgbaFile.h	/^    InputFile *			_inputFile;$/;"	m	class:Imf::RgbaInputFile
_inputFile	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^     TiledInputFile &	_inputFile;$/;"	m	class:Imf::TiledRgbaInputFile::FromYa	file:
_inputFile	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.h	/^    TiledInputFile *	_inputFile;$/;"	m	class:Imf::TiledRgbaInputFile
_is	3rdparty/openexr-1.7.0/ImfStdIO.h	/^    std::ifstream *	_is;$/;"	m	class:Imf::StdIFStream
_left	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^    T			_left;$/;"	m	class:Imath::Frustum
_length_code	3rdparty/zlib-1.2.5/trees.c	/^uch _length_code[MAX_MATCH-MIN_MATCH+1];$/;"	v
_length_code	3rdparty/zlib-1.2.5/trees.h	/^const uch ZLIB_INTERNAL _length_code[MAX_MATCH-MIN_MATCH+1]= {$/;"	v
_length_code	3rdparty/zlib-1.2.5/zconf.h	/^#  define _length_code /;"	d
_lineBuffer	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    LineBuffer *	_lineBuffer;$/;"	m	class:Imf::__anon24::LineBufferTask	file:
_lineBuffer	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    LineBuffer *		_lineBuffer;$/;"	m	class:Imf::__anon32::LineBufferTask	file:
_lineOrder	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    LineOrder		_lineOrder;$/;"	m	class:Imf::RgbaInputFile::FromYca	file:
_lineOrder	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    LineOrder		_lineOrder;$/;"	m	class:Imf::RgbaOutputFile::ToYca	file:
_linesConverted	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    int			_linesConverted;$/;"	m	class:Imf::RgbaOutputFile::ToYca	file:
_locked	3rdparty/ilmbase-1.0.2/IlmThreadMutex.h	/^    bool		_locked;$/;"	m	class:IlmThread::Lock
_logLuvNop	3rdparty/tiff-3.9.4/tif_luv.c	/^_logLuvNop(LogLuvState* sp, tidata_t op, int n)$/;"	f	file:
_lut	3rdparty/ilmbase-1.0.2/halfFunction.h	/^    T		_lut[1 << 16];$/;"	m	class:halfFunction
_lut	3rdparty/openexr-1.7.0/ImfLut.h	/^    halfFunction <half>	_lut;$/;"	m	class:Imf::HalfLut
_lut	3rdparty/openexr-1.7.0/ImfLut.h	/^    halfFunction <half>	_lut;$/;"	m	class:Imf::RgbaLut
_map	3rdparty/openexr-1.7.0/ImfChannelList.h	/^    ChannelMap			_map;$/;"	m	class:Imf::ChannelList
_map	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^    SliceMap			_map;$/;"	m	class:Imf::FrameBuffer
_map	3rdparty/openexr-1.7.0/ImfHeader.h	/^    AttributeMap		_map;$/;"	m	class:Imf::Header
_maxScanLineSize	3rdparty/openexr-1.7.0/ImfB44Compressor.h	/^    int			_maxScanLineSize;$/;"	m	class:Imf::B44Compressor
_maxScanLineSize	3rdparty/openexr-1.7.0/ImfPizCompressor.h	/^    int			_maxScanLineSize;$/;"	m	class:Imf::PizCompressor
_maxScanLineSize	3rdparty/openexr-1.7.0/ImfPxr24Compressor.h	/^    int			_maxScanLineSize;$/;"	m	class:Imf::Pxr24Compressor
_maxScanLineSize	3rdparty/openexr-1.7.0/ImfRleCompressor.h	/^    int		_maxScanLineSize;$/;"	m	class:Imf::RleCompressor
_maxScanLineSize	3rdparty/openexr-1.7.0/ImfZipCompressor.h	/^    int		_maxScanLineSize;$/;"	m	class:Imf::ZipCompressor
_maxX	3rdparty/openexr-1.7.0/ImfB44Compressor.h	/^    int			_maxX;$/;"	m	class:Imf::B44Compressor
_maxX	3rdparty/openexr-1.7.0/ImfPizCompressor.h	/^    int			_maxX;$/;"	m	class:Imf::PizCompressor
_maxX	3rdparty/openexr-1.7.0/ImfPxr24Compressor.h	/^    int			_maxX;$/;"	m	class:Imf::Pxr24Compressor
_maxY	3rdparty/openexr-1.7.0/ImfB44Compressor.h	/^    int			_maxY;$/;"	m	class:Imf::B44Compressor
_maxY	3rdparty/openexr-1.7.0/ImfPizCompressor.h	/^    int			_maxY;$/;"	m	class:Imf::PizCompressor
_maxY	3rdparty/openexr-1.7.0/ImfPxr24Compressor.h	/^    int			_maxY;$/;"	m	class:Imf::Pxr24Compressor
_minX	3rdparty/openexr-1.7.0/ImfB44Compressor.h	/^    int			_minX;$/;"	m	class:Imf::B44Compressor
_minX	3rdparty/openexr-1.7.0/ImfPizCompressor.h	/^    int			_minX;$/;"	m	class:Imf::PizCompressor
_minX	3rdparty/openexr-1.7.0/ImfPxr24Compressor.h	/^    int			_minX;$/;"	m	class:Imf::Pxr24Compressor
_mode	3rdparty/openexr-1.7.0/ImfTileOffsets.h	/^    LevelMode		_mode;$/;"	m	class:Imf::TileOffsets
_msbmask	3rdparty/tiff-3.9.4/tif_fax3.c	/^static const int _msbmask[9] =$/;"	v	file:
_mutex	3rdparty/ilmbase-1.0.2/IlmThreadMutex.h	/^	mutable CRITICAL_SECTION _mutex;$/;"	m	class:IlmThread::Mutex
_mutex	3rdparty/ilmbase-1.0.2/IlmThreadMutex.h	/^	mutable pthread_mutex_t _mutex;$/;"	m	class:IlmThread::Mutex
_mutex	3rdparty/ilmbase-1.0.2/IlmThreadMutex.h	/^    const Mutex &	_mutex;$/;"	m	class:IlmThread::Lock
_near	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^    T			_near;$/;"	m	class:Imath::Frustum
_notConfigured	3rdparty/tiff-3.9.4/tif_codec.c	/^_notConfigured(TIFF* tif)$/;"	f	file:
_numChans	3rdparty/openexr-1.7.0/ImfB44Compressor.h	/^    int			_numChans;$/;"	m	class:Imf::B44Compressor
_numChans	3rdparty/openexr-1.7.0/ImfPizCompressor.h	/^    int			_numChans;$/;"	m	class:Imf::PizCompressor
_numScanLines	3rdparty/openexr-1.7.0/ImfB44Compressor.h	/^    int			_numScanLines;$/;"	m	class:Imf::B44Compressor
_numScanLines	3rdparty/openexr-1.7.0/ImfPizCompressor.h	/^    int			_numScanLines;$/;"	m	class:Imf::PizCompressor
_numScanLines	3rdparty/openexr-1.7.0/ImfPxr24Compressor.h	/^    int			_numScanLines;$/;"	m	class:Imf::Pxr24Compressor
_numScanLines	3rdparty/openexr-1.7.0/ImfZipCompressor.h	/^    int		_numScanLines;$/;"	m	class:Imf::ZipCompressor
_numXLevels	3rdparty/openexr-1.7.0/ImfTileOffsets.h	/^    int			_numXLevels;$/;"	m	class:Imf::TileOffsets
_numYLevels	3rdparty/openexr-1.7.0/ImfTileOffsets.h	/^    int			_numYLevels;$/;"	m	class:Imf::TileOffsets
_ofd	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    OutputFile::Data *	_ofd;$/;"	m	class:Imf::__anon24::LineBufferTask	file:
_ofd	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    TiledOutputFile::Data *	_ofd;$/;"	m	class:Imf::__anon38::TileBufferTask	file:
_offsets	3rdparty/openexr-1.7.0/ImfTileOffsets.h	/^    std::vector<std::vector<std::vector <Int64> > > _offsets;$/;"	m	class:Imf::TileOffsets
_optFlatFields	3rdparty/openexr-1.7.0/ImfB44Compressor.h	/^    bool		_optFlatFields;$/;"	m	class:Imf::B44Compressor
_orthographic	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^    bool		_orthographic;$/;"	m	class:Imath::Frustum
_os	3rdparty/openexr-1.7.0/ImfStdIO.h	/^    std::ofstream *	_os;$/;"	m	class:Imf::StdOFStream
_os	3rdparty/openexr-1.7.0/ImfStdIO.h	/^    std::ostringstream 	_os;$/;"	m	class:Imf::StdOSStream
_outBuffer	3rdparty/openexr-1.7.0/ImfB44Compressor.h	/^    char *		_outBuffer;$/;"	m	class:Imf::B44Compressor
_outBuffer	3rdparty/openexr-1.7.0/ImfPizCompressor.h	/^    char *		_outBuffer;$/;"	m	class:Imf::PizCompressor
_outBuffer	3rdparty/openexr-1.7.0/ImfPxr24Compressor.h	/^    char *		_outBuffer;$/;"	m	class:Imf::Pxr24Compressor
_outBuffer	3rdparty/openexr-1.7.0/ImfRleCompressor.h	/^    char *	_outBuffer;$/;"	m	class:Imf::RleCompressor
_outBuffer	3rdparty/openexr-1.7.0/ImfZipCompressor.h	/^    char *	_outBuffer;$/;"	m	class:Imf::ZipCompressor
_outputFile	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    OutputFile &	_outputFile;$/;"	m	class:Imf::RgbaOutputFile::ToYca	file:
_outputFile	3rdparty/openexr-1.7.0/ImfRgbaFile.h	/^    OutputFile *		_outputFile;$/;"	m	class:Imf::RgbaOutputFile
_outputFile	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^     TiledOutputFile &	_outputFile;$/;"	m	class:Imf::TiledRgbaOutputFile::ToYa	file:
_outputFile	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.h	/^    TiledOutputFile *            _outputFile;$/;"	m	class:Imf::TiledRgbaOutputFile
_perfOffset	3rdparty/openexr-1.7.0/ImfKeyCode.h	/^    int		_perfOffset;$/;"	m	class:Imf::KeyCode
_perfsPerCount	3rdparty/openexr-1.7.0/ImfKeyCode.h	/^    int		_perfsPerCount;$/;"	m	class:Imf::KeyCode
_perfsPerFrame	3rdparty/openexr-1.7.0/ImfKeyCode.h	/^    int		_perfsPerFrame;$/;"	m	class:Imf::KeyCode
_pixels	3rdparty/openexr-1.7.0/ImfPreviewImage.h	/^    PreviewRgba *	_pixels;$/;"	m	class:Imf::PreviewImage
_prefix	3rdparty/openexr-1.7.0/ImfKeyCode.h	/^    int		_prefix;$/;"	m	class:Imf::KeyCode
_readC	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    bool		_readC;$/;"	m	class:Imf::RgbaInputFile::FromYca	file:
_redef_far	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^        #define _redef_far$/;"	d
_redef_near	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^        #define _redef_near$/;"	d
_right	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^    T			_right;$/;"	m	class:Imath::Frustum
_roundC	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    int			_roundC;$/;"	m	class:Imf::RgbaOutputFile::ToYca	file:
_roundY	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    int			_roundY;$/;"	m	class:Imf::RgbaOutputFile::ToYca	file:
_scanLineMax	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    int				_scanLineMax;$/;"	m	class:Imf::__anon32::LineBufferTask	file:
_scanLineMin	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    int				_scanLineMin;$/;"	m	class:Imf::__anon32::LineBufferTask	file:
_sem	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    Semaphore		_sem;$/;"	m	struct:Imf::__anon23::LineBuffer	file:
_sem	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    Semaphore		_sem;$/;"	m	struct:Imf::__anon31::LineBuffer	file:
_sem	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    Semaphore _sem;$/;"	m	struct:Imf::__anon34::TileBuffer	file:
_sem	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    Semaphore		_sem;$/;"	m	struct:Imf::__anon37::TileBuffer	file:
_semaphore	3rdparty/ilmbase-1.0.2/IlmThreadSemaphore.h	/^	mutable HANDLE _semaphore;$/;"	m	class:IlmThread::Semaphore
_semaphore	3rdparty/ilmbase-1.0.2/IlmThreadSemaphore.h	/^	mutable sem_t _semaphore;$/;"	m	class:IlmThread::Semaphore
_semaphore	3rdparty/ilmbase-1.0.2/IlmThreadSemaphore.h	/^	mutable sema_t _semaphore;$/;"	m	class:IlmThread::Semaphore
_sizeY	3rdparty/openexr-1.7.0/ImfArray.h	/^    long	_sizeY;$/;"	m	class:Imf::Array2D
_stackTrace	3rdparty/ilmbase-1.0.2/IexBaseExc.h	/^    std::string		_stackTrace;$/;"	m	class:Iex::BaseExc
_state	3rdparty/ilmbase-1.0.2/ImathRandom.h	/^    unsigned long int	_state;$/;"	m	class:Imath::Rand32
_state	3rdparty/ilmbase-1.0.2/ImathRandom.h	/^    unsigned short int	_state[3];$/;"	m	class:Imath::Rand48
_text	3rdparty/openexr-1.7.0/ImfName.h	/^    char		_text[SIZE];$/;"	m	class:Imf::Name
_thread	3rdparty/ilmbase-1.0.2/IlmThread.h	/^	HANDLE _thread;$/;"	m	class:IlmThread::Thread
_thread	3rdparty/ilmbase-1.0.2/IlmThread.h	/^	pthread_t _thread;$/;"	m	class:IlmThread::Thread
_tiffCloseProc	3rdparty/tiff-3.9.4/tif_acorn.c	/^_tiffCloseProc(thandle_t fd)$/;"	f	file:
_tiffCloseProc	3rdparty/tiff-3.9.4/tif_apple.c	/^_tiffCloseProc(thandle_t fd)$/;"	f	file:
_tiffCloseProc	3rdparty/tiff-3.9.4/tif_atari.c	/^_tiffCloseProc(thandle_t fd)$/;"	f	file:
_tiffCloseProc	3rdparty/tiff-3.9.4/tif_msdos.c	/^_tiffCloseProc(thandle_t fd)$/;"	f	file:
_tiffCloseProc	3rdparty/tiff-3.9.4/tif_unix.c	/^_tiffCloseProc(thandle_t fd)$/;"	f	file:
_tiffCloseProc	3rdparty/tiff-3.9.4/tif_win3.c	/^_tiffCloseProc(thandle_t fd)$/;"	f	file:
_tiffCloseProc	3rdparty/tiff-3.9.4/tif_win32.c	/^_tiffCloseProc(thandle_t fd)$/;"	f	file:
_tiffDummyMapProc	3rdparty/tiff-3.9.4/tif_open.c	/^_tiffDummyMapProc(thandle_t fd, tdata_t* pbase, toff_t* psize)$/;"	f	file:
_tiffDummyMapProc	3rdparty/tiff-3.9.4/tif_stream.cxx	/^_tiffDummyMapProc(thandle_t , tdata_t* , toff_t* )$/;"	f	file:
_tiffDummyMapProc	3rdparty/tiff-3.9.4/tif_win32.c	/^_tiffDummyMapProc(thandle_t fd, tdata_t* pbase, toff_t* psize)$/;"	f	file:
_tiffDummyUnmapProc	3rdparty/tiff-3.9.4/tif_open.c	/^_tiffDummyUnmapProc(thandle_t fd, tdata_t base, toff_t size)$/;"	f	file:
_tiffDummyUnmapProc	3rdparty/tiff-3.9.4/tif_stream.cxx	/^_tiffDummyUnmapProc(thandle_t , tdata_t , toff_t )$/;"	f	file:
_tiffDummyUnmapProc	3rdparty/tiff-3.9.4/tif_win32.c	/^_tiffDummyUnmapProc(thandle_t fd, tdata_t base, toff_t size)$/;"	f	file:
_tiffMapProc	3rdparty/tiff-3.9.4/tif_acorn.c	/^_tiffMapProc(thandle_t fd, tdata_t* pbase, toff_t* psize)$/;"	f	file:
_tiffMapProc	3rdparty/tiff-3.9.4/tif_apple.c	/^_tiffMapProc(thandle_t fd, tdata_t* pbase, toff_t* psize)$/;"	f	file:
_tiffMapProc	3rdparty/tiff-3.9.4/tif_atari.c	/^_tiffMapProc(thandle_t fd, tdata_t* pbase, toff_t* psize)$/;"	f	file:
_tiffMapProc	3rdparty/tiff-3.9.4/tif_msdos.c	/^_tiffMapProc(thandle_t fd, tdata_t* pbase, toff_t* psize)$/;"	f	file:
_tiffMapProc	3rdparty/tiff-3.9.4/tif_unix.c	/^_tiffMapProc(thandle_t fd, tdata_t* pbase, toff_t* psize)$/;"	f	file:
_tiffMapProc	3rdparty/tiff-3.9.4/tif_win3.c	/^_tiffMapProc(thandle_t fd, tdata_t* pbase, toff_t* psize)$/;"	f	file:
_tiffMapProc	3rdparty/tiff-3.9.4/tif_win32.c	/^_tiffMapProc(thandle_t fd, tdata_t* pbase, toff_t* psize)$/;"	f	file:
_tiffReadProc	3rdparty/tiff-3.9.4/tif_acorn.c	/^_tiffReadProc(thandle_t fd, tdata_t buf, tsize_t size)$/;"	f	file:
_tiffReadProc	3rdparty/tiff-3.9.4/tif_apple.c	/^_tiffReadProc(thandle_t fd, tdata_t buf, tsize_t size)$/;"	f	file:
_tiffReadProc	3rdparty/tiff-3.9.4/tif_atari.c	/^_tiffReadProc(thandle_t fd, tdata_t buf, tsize_t size)$/;"	f	file:
_tiffReadProc	3rdparty/tiff-3.9.4/tif_msdos.c	/^_tiffReadProc(thandle_t fd, tdata_t buf, tsize_t size)$/;"	f	file:
_tiffReadProc	3rdparty/tiff-3.9.4/tif_unix.c	/^_tiffReadProc(thandle_t fd, tdata_t buf, tsize_t size)$/;"	f	file:
_tiffReadProc	3rdparty/tiff-3.9.4/tif_win3.c	/^_tiffReadProc(thandle_t fd, tdata_t buf, tsize_t size)$/;"	f	file:
_tiffReadProc	3rdparty/tiff-3.9.4/tif_win32.c	/^_tiffReadProc(thandle_t fd, tdata_t buf, tsize_t size)$/;"	f	file:
_tiffSeekProc	3rdparty/tiff-3.9.4/tif_acorn.c	/^_tiffSeekProc(thandle_t fd, toff_t off, int whence)$/;"	f	file:
_tiffSeekProc	3rdparty/tiff-3.9.4/tif_apple.c	/^_tiffSeekProc(thandle_t fd, toff_t off, int whence)$/;"	f	file:
_tiffSeekProc	3rdparty/tiff-3.9.4/tif_atari.c	/^_tiffSeekProc(thandle_t fd, off_t off, int whence)$/;"	f	file:
_tiffSeekProc	3rdparty/tiff-3.9.4/tif_msdos.c	/^_tiffSeekProc(thandle_t fd, toff_t off, int whence)$/;"	f	file:
_tiffSeekProc	3rdparty/tiff-3.9.4/tif_unix.c	/^_tiffSeekProc(thandle_t fd, toff_t off, int whence)$/;"	f	file:
_tiffSeekProc	3rdparty/tiff-3.9.4/tif_win3.c	/^_tiffSeekProc(thandle_t fd, toff_t off, int whence)$/;"	f	file:
_tiffSeekProc	3rdparty/tiff-3.9.4/tif_win32.c	/^_tiffSeekProc(thandle_t fd, toff_t off, int whence)$/;"	f	file:
_tiffSizeProc	3rdparty/tiff-3.9.4/tif_acorn.c	/^_tiffSizeProc(thandle_t fd)$/;"	f	file:
_tiffSizeProc	3rdparty/tiff-3.9.4/tif_apple.c	/^_tiffSizeProc(thandle_t fd)$/;"	f	file:
_tiffSizeProc	3rdparty/tiff-3.9.4/tif_atari.c	/^_tiffSizeProc(thandle_t fd)$/;"	f	file:
_tiffSizeProc	3rdparty/tiff-3.9.4/tif_msdos.c	/^_tiffSizeProc(thandle_t fd)$/;"	f	file:
_tiffSizeProc	3rdparty/tiff-3.9.4/tif_unix.c	/^_tiffSizeProc(thandle_t fd)$/;"	f	file:
_tiffSizeProc	3rdparty/tiff-3.9.4/tif_win3.c	/^_tiffSizeProc(thandle_t fd)$/;"	f	file:
_tiffSizeProc	3rdparty/tiff-3.9.4/tif_win32.c	/^_tiffSizeProc(thandle_t fd)$/;"	f	file:
_tiffStreamOpen	3rdparty/tiff-3.9.4/tif_stream.cxx	/^_tiffStreamOpen(const char* name, const char* mode, void *fd)$/;"	f	file:
_tiffUnmapProc	3rdparty/tiff-3.9.4/tif_acorn.c	/^_tiffUnmapProc(thandle_t fd, tdata_t base, toff_t size)$/;"	f	file:
_tiffUnmapProc	3rdparty/tiff-3.9.4/tif_apple.c	/^_tiffUnmapProc(thandle_t fd, tdata_t base, toff_t size)$/;"	f	file:
_tiffUnmapProc	3rdparty/tiff-3.9.4/tif_atari.c	/^_tiffUnmapProc(thandle_t fd, tdata_t base, toff_t size)$/;"	f	file:
_tiffUnmapProc	3rdparty/tiff-3.9.4/tif_msdos.c	/^_tiffUnmapProc(thandle_t fd, tdata_t base, toff_t size)$/;"	f	file:
_tiffUnmapProc	3rdparty/tiff-3.9.4/tif_unix.c	/^_tiffUnmapProc(thandle_t fd, tdata_t base, toff_t size)$/;"	f	file:
_tiffUnmapProc	3rdparty/tiff-3.9.4/tif_win3.c	/^_tiffUnmapProc(thandle_t fd, tdata_t base, toff_t size)$/;"	f	file:
_tiffUnmapProc	3rdparty/tiff-3.9.4/tif_win32.c	/^_tiffUnmapProc(thandle_t fd, tdata_t base, toff_t size)$/;"	f	file:
_tiffWriteProc	3rdparty/tiff-3.9.4/tif_acorn.c	/^_tiffWriteProc(thandle_t fd, tdata_t buf, tsize_t size)$/;"	f	file:
_tiffWriteProc	3rdparty/tiff-3.9.4/tif_apple.c	/^_tiffWriteProc(thandle_t fd, tdata_t buf, tsize_t size)$/;"	f	file:
_tiffWriteProc	3rdparty/tiff-3.9.4/tif_atari.c	/^_tiffWriteProc(thandle_t fd, tdata_t buf, tsize_t size)$/;"	f	file:
_tiffWriteProc	3rdparty/tiff-3.9.4/tif_msdos.c	/^_tiffWriteProc(thandle_t fd, tdata_t buf, tsize_t size)$/;"	f	file:
_tiffWriteProc	3rdparty/tiff-3.9.4/tif_unix.c	/^_tiffWriteProc(thandle_t fd, tdata_t buf, tsize_t size)$/;"	f	file:
_tiffWriteProc	3rdparty/tiff-3.9.4/tif_win3.c	/^_tiffWriteProc(thandle_t fd, tdata_t buf, tsize_t size)$/;"	f	file:
_tiffWriteProc	3rdparty/tiff-3.9.4/tif_win32.c	/^_tiffWriteProc(thandle_t fd, tdata_t buf, tsize_t size)$/;"	f	file:
_tiffisCloseProc	3rdparty/tiff-3.9.4/tif_stream.cxx	/^_tiffisCloseProc(thandle_t fd)$/;"	f	file:
_tiffisReadProc	3rdparty/tiff-3.9.4/tif_stream.cxx	/^_tiffisReadProc(thandle_t fd, tdata_t buf, tsize_t size)$/;"	f	file:
_tiffisSeekProc	3rdparty/tiff-3.9.4/tif_stream.cxx	/^_tiffisSeekProc(thandle_t fd, toff_t off, int whence)$/;"	f	file:
_tiffisSizeProc	3rdparty/tiff-3.9.4/tif_stream.cxx	/^_tiffisSizeProc(thandle_t fd)$/;"	f	file:
_tiffisWriteProc	3rdparty/tiff-3.9.4/tif_stream.cxx	/^_tiffisWriteProc(thandle_t, tdata_t, tsize_t)$/;"	f	file:
_tiffosCloseProc	3rdparty/tiff-3.9.4/tif_stream.cxx	/^_tiffosCloseProc(thandle_t fd)$/;"	f	file:
_tiffosReadProc	3rdparty/tiff-3.9.4/tif_stream.cxx	/^_tiffosReadProc(thandle_t, tdata_t, tsize_t)$/;"	f	file:
_tiffosSeekProc	3rdparty/tiff-3.9.4/tif_stream.cxx	/^_tiffosSeekProc(thandle_t fd, toff_t off, int whence)$/;"	f	file:
_tiffosSizeProc	3rdparty/tiff-3.9.4/tif_stream.cxx	/^_tiffosSizeProc(thandle_t fd)$/;"	f	file:
_tiffosWriteProc	3rdparty/tiff-3.9.4/tif_stream.cxx	/^_tiffosWriteProc(thandle_t fd, tdata_t buf, tsize_t size)$/;"	f	file:
_tileBuffer	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    TileBuffer *		_tileBuffer;$/;"	m	class:Imf::__anon35::TileBufferTask	file:
_tileBuffer	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    TileBuffer *		_tileBuffer;$/;"	m	class:Imf::__anon38::TileBufferTask	file:
_tileXSize	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^     unsigned int	_tileXSize;$/;"	m	class:Imf::TiledRgbaInputFile::FromYa	file:
_tileXSize	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^     unsigned int	_tileXSize;$/;"	m	class:Imf::TiledRgbaOutputFile::ToYa	file:
_tileYSize	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^     unsigned int	_tileYSize;$/;"	m	class:Imf::TiledRgbaInputFile::FromYa	file:
_tileYSize	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^     unsigned int	_tileYSize;$/;"	m	class:Imf::TiledRgbaOutputFile::ToYa	file:
_time	3rdparty/openexr-1.7.0/ImfTimeCode.h	/^    unsigned int	_time;$/;"	m	class:Imf::TimeCode
_tmpBuf	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    Rgba *		_tmpBuf;$/;"	m	class:Imf::RgbaInputFile::FromYca	file:
_tmpBuf	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    Rgba *		_tmpBuf;$/;"	m	class:Imf::RgbaOutputFile::ToYca	file:
_tmpBuffer	3rdparty/openexr-1.7.0/ImfB44Compressor.h	/^    unsigned short *	_tmpBuffer;$/;"	m	class:Imf::B44Compressor
_tmpBuffer	3rdparty/openexr-1.7.0/ImfPizCompressor.h	/^    unsigned short *	_tmpBuffer;$/;"	m	class:Imf::PizCompressor
_tmpBuffer	3rdparty/openexr-1.7.0/ImfPxr24Compressor.h	/^    unsigned char *	_tmpBuffer;$/;"	m	class:Imf::Pxr24Compressor
_tmpBuffer	3rdparty/openexr-1.7.0/ImfRleCompressor.h	/^    char *	_tmpBuffer;$/;"	m	class:Imf::RleCompressor
_tmpBuffer	3rdparty/openexr-1.7.0/ImfZipCompressor.h	/^    char *	_tmpBuffer;$/;"	m	class:Imf::ZipCompressor
_toFloat	3rdparty/ilmbase-1.0.2/half.h	/^    static HALF_EXPORT_CONST uif		_toFloat[1 << 16];$/;"	m	class:half
_toYa	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.h	/^    ToYa *			_toYa;$/;"	m	class:Imf::TiledRgbaOutputFile
_toYca	3rdparty/openexr-1.7.0/ImfRgbaFile.h	/^    ToYca *			_toYca;$/;"	m	class:Imf::RgbaOutputFile
_top	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^    T			_top;$/;"	m	class:Imath::Frustum
_tr_align	3rdparty/zlib-1.2.5/trees.c	/^void ZLIB_INTERNAL _tr_align(s)$/;"	f
_tr_align	3rdparty/zlib-1.2.5/zconf.h	/^#  define _tr_align /;"	d
_tr_flush_block	3rdparty/zlib-1.2.5/trees.c	/^void ZLIB_INTERNAL _tr_flush_block(s, buf, stored_len, last)$/;"	f
_tr_flush_block	3rdparty/zlib-1.2.5/zconf.h	/^#  define _tr_flush_block /;"	d
_tr_init	3rdparty/zlib-1.2.5/trees.c	/^void ZLIB_INTERNAL _tr_init(s)$/;"	f
_tr_init	3rdparty/zlib-1.2.5/zconf.h	/^#  define _tr_init /;"	d
_tr_stored_block	3rdparty/zlib-1.2.5/trees.c	/^void ZLIB_INTERNAL _tr_stored_block(s, buf, stored_len, last)$/;"	f
_tr_stored_block	3rdparty/zlib-1.2.5/zconf.h	/^#  define _tr_stored_block /;"	d
_tr_tally	3rdparty/zlib-1.2.5/trees.c	/^int ZLIB_INTERNAL _tr_tally (s, dist, lc)$/;"	f
_tr_tally	3rdparty/zlib-1.2.5/zconf.h	/^#  define _tr_tally /;"	d
_tr_tally_dist	3rdparty/zlib-1.2.5/deflate.h	/^# define _tr_tally_dist(/;"	d
_tr_tally_lit	3rdparty/zlib-1.2.5/deflate.h	/^# define _tr_tally_lit(/;"	d
_typeName	3rdparty/openexr-1.7.0/ImfOpaqueAttribute.h	/^    Array<char>			_typeName;$/;"	m	class:Imf::OpaqueAttribute
_user	3rdparty/openexr-1.7.0/ImfTimeCode.h	/^    unsigned int	_user;$/;"	m	class:Imf::TimeCode
_value	3rdparty/openexr-1.7.0/ImfAttribute.h	/^    T					_value;$/;"	m	class:Imf::TypedAttribute
_width	3rdparty/openexr-1.7.0/ImfPreviewImage.h	/^    unsigned int	_width;$/;"	m	class:Imf::PreviewImage
_width	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    int			_width;$/;"	m	class:Imf::RgbaInputFile::FromYca	file:
_width	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    int			_width;$/;"	m	class:Imf::RgbaOutputFile::ToYca	file:
_writeA	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    bool		_writeA;$/;"	m	class:Imf::RgbaOutputFile::ToYca	file:
_writeA	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^     bool		_writeA;$/;"	m	class:Imf::TiledRgbaOutputFile::ToYa	file:
_writeC	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    bool		_writeC;$/;"	m	class:Imf::RgbaOutputFile::ToYca	file:
_writeY	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    bool		_writeY;$/;"	m	class:Imf::RgbaOutputFile::ToYca	file:
_xMin	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    int			_xMin;$/;"	m	class:Imf::RgbaInputFile::FromYca	file:
_xMin	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    int			_xMin;$/;"	m	class:Imf::RgbaOutputFile::ToYca	file:
_yMax	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    int 		_yMax;$/;"	m	class:Imf::RgbaInputFile::FromYca	file:
_yMin	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    int			_yMin;$/;"	m	class:Imf::RgbaInputFile::FromYca	file:
_yw	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    V3f			_yw;$/;"	m	class:Imf::RgbaInputFile::FromYca	file:
_yw	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^    V3f			_yw;$/;"	m	class:Imf::RgbaOutputFile::ToYca	file:
_yw	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^     V3f		_yw;$/;"	m	class:Imf::TiledRgbaInputFile::FromYa	file:
_yw	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^     V3f		_yw;$/;"	m	class:Imf::TiledRgbaOutputFile::ToYa	file:
a	3rdparty/ilmbase-1.0.2/ImathColor.h	/^    T			r, g, b, a;$/;"	m	class:Imath::Color4
a	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^    ImfHalf	a;$/;"	m	struct:ImfRgba
a	3rdparty/openexr-1.7.0/ImfPreviewImage.h	/^    unsigned char	a;	\/\/ The pixel's alpha; 0 == transparent,$/;"	m	struct:Imf::PreviewRgba
a	3rdparty/openexr-1.7.0/ImfRgba.h	/^    half	a;$/;"	m	struct:Imf::Rgba
a	shapes/hyperboloid.h	/^    float a, c;$/;"	m	class:Hyperboloid
a	volumes/exponential.h	/^    float a, b;$/;"	m	class:ExponentialDensity
aaMethod	textures/checkerboard.h	/^    enum { NONE, CLOSEDFORM } aaMethod;$/;"	m	class:Checkerboard2DTexture	typeref:enum:Checkerboard2DTexture::__anon89
abortTasks	integrators/photonmap.cpp	/^    bool &abortTasks;$/;"	m	class:PhotonShootingTask	file:
aboveChild	accelerators/kdtreeaccel.cpp	/^        uint32_t aboveChild;    \/\/ Interior$/;"	m	union:KdAccelNode::__anon80	file:
abs	3rdparty/ilmbase-1.0.2/ImathFun.h	/^abs (T a)$/;"	f	namespace:Imath
acesChromaticities	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^acesChromaticities ()$/;"	f	namespace:Imf
acornErrorHandler	3rdparty/tiff-3.9.4/tif_acorn.c	/^acornErrorHandler(const char* module, const char* fmt, va_list ap)$/;"	f	file:
acornWarningHandler	3rdparty/tiff-3.9.4/tif_acorn.c	/^acornWarningHandler(const char* module, const char* fmt, va_list ap)$/;"	f	file:
acos	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static T	acos  (T x)		{return ::acos (double(x));}	$/;"	f	struct:Imath::Math
acos	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static float	acos  (float x)			{return ::acosf (x);}	$/;"	f	struct:Imath::Math
acquire	3rdparty/ilmbase-1.0.2/IlmThreadMutex.h	/^    void acquire ()$/;"	f	class:IlmThread::Lock
actable	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8* actable[4];$/;"	m	struct:__anon55	file:
actable_offset	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	toff_t actable_offset[3];$/;"	m	struct:__anon55	file:
actable_offset_count	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8 actable_offset_count;$/;"	m	struct:__anon55	file:
activeTransformBits	core/api.cpp	/^static int activeTransformBits = ALL_TRANSFORMS_BITS;$/;"	v	file:
activeWriterReaders	core/parallel.h	/^    DWORD activeWriterReaders;$/;"	m	class:RWMutex
actuallyAnimated	core/transform.h	/^    const bool actuallyAnimated;$/;"	m	class:AnimatedTransform
addGlobalTask	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^ThreadPool::addGlobalTask (Task* task)$/;"	f	class:IlmThread::ThreadPool
addPrivate	core/octree.h	/^void Octree<NodeData>::addPrivate($/;"	f	class:Octree
addSampleToGrid	tools/samplepat.cpp	/^static void addSampleToGrid(float sample[][2], int sampleNum,$/;"	f	file:
addTask	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^TaskGroup::Data::addTask () $/;"	f	class:IlmThread::TaskGroup::Data
addTask	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^ThreadPool::addTask (Task* task) $/;"	f	class:IlmThread::ThreadPool
addTracker	core/probes.cpp	/^static void addTracker(StatTracker *newTracker) {$/;"	f	file:
add_comment	tools/ply.c	/^void add_comment (PlyFile *plyfile, char *line)$/;"	f
add_element	tools/ply.c	/^void add_element (PlyFile *plyfile, char **words, int nwords)$/;"	f
add_obj_info	tools/ply.c	/^void add_obj_info (PlyFile *plyfile, char *line)$/;"	f
add_property	tools/ply.c	/^void add_property (PlyFile *plyfile, char **words, int nwords)$/;"	f
add_string_char	core/pbrtlex.cpp	/^void add_string_char(char c) {$/;"	f
adler	3rdparty/zlib-1.2.5/zlib.h	/^    uLong   adler;      \/* adler32 value of the uncompressed data *\/$/;"	m	struct:z_stream_s
adler32	3rdparty/zlib-1.2.5/adler32.c	/^uLong ZEXPORT adler32(adler, buf, len)$/;"	f
adler32	3rdparty/zlib-1.2.5/zconf.h	/^#  define adler32 /;"	d
adler32_combine	3rdparty/zlib-1.2.5/adler32.c	/^uLong ZEXPORT adler32_combine(adler1, adler2, len2)$/;"	f
adler32_combine	3rdparty/zlib-1.2.5/zconf.h	/^#  define adler32_combine /;"	d
adler32_combine	3rdparty/zlib-1.2.5/zlib.h	/^#  define adler32_combine /;"	d
adler32_combine64	3rdparty/zlib-1.2.5/adler32.c	/^uLong ZEXPORT adler32_combine64(adler1, adler2, len2)$/;"	f
adler32_combine64	3rdparty/zlib-1.2.5/zconf.h	/^#  define adler32_combine64 /;"	d
adler32_combine_	3rdparty/zlib-1.2.5/adler32.c	/^local uLong adler32_combine_(adler1, adler2, len2)$/;"	f
affineTransform	3rdparty/ilmbase-1.0.2/ImathBoxAlgo.h	/^affineTransform (const Box< Vec3<S> > &box, const Matrix44<T> &m)$/;"	f	namespace:Imath
aggregate	core/scene.h	/^    Primitive *aggregate;$/;"	m	class:Scene
alignZAxisWithTargetDir	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^alignZAxisWithTargetDir (Vec3<T> targetDir, Vec3<T> upDir)$/;"	f	namespace:Imath
allCanIntersect	accelerators/grid.h	/^    bool allCanIntersect;$/;"	m	struct:Voxel
alloc_downsampled_buffers	3rdparty/tiff-3.9.4/tif_jpeg.c	/^alloc_downsampled_buffers(TIFF* tif, jpeg_component_info* comp_info,$/;"	f	file:
alloc_func	3rdparty/zlib-1.2.5/zconf.h	/^#  define alloc_func /;"	d
alloc_func	3rdparty/zlib-1.2.5/zlib.h	/^typedef voidpf (*alloc_func) OF((voidpf opaque, uInt items, uInt size));$/;"	t
alloca	core/pbrt.h	/^#define alloca /;"	d
alloca	core/pbrtparse.cpp	/^#    define alloca /;"	d	file:
allocated	core/pbrtparse.cpp	/^    int allocated;$/;"	m	struct:ParamArray	file:
alpha	3rdparty/tiff-3.9.4/tiffio.h	/^	int alpha;                              \/* type of alpha data present *\/$/;"	m	struct:_TIFFRGBAImage
alpha	filters/gaussian.h	/^    const float alpha;$/;"	m	class:GaussianFilter
alpha	integrators/photonmap.cpp	/^    Spectrum alpha;$/;"	m	struct:Photon	file:
alpha	renderers/metropolis.cpp	/^    Spectrum alpha;$/;"	m	struct:PathVertex	file:
alphaTexture	shapes/trianglemesh.h	/^    Reference<Texture<float> > alphaTexture;$/;"	m	class:TriangleMesh
alphap	integrators/dipolesubsurface.cpp	/^    Spectrum zpos, zneg, sigmap_t, sigma_tr, alphap;$/;"	m	struct:DiffusionReflectance	file:
ambient	tools/obj2pbrt.cpp	/^    float ambient[3];$/;"	m	struct:tinyobj::__anon90	file:
ambient_texname	tools/obj2pbrt.cpp	/^    std::string ambient_texname;$/;"	m	struct:tinyobj::__anon90	file:
amount	textures/mix.h	/^    Reference<Texture<float> > amount;$/;"	m	class:MixTexture
angle	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^Quat<T>::angle () const$/;"	f	class:Imath::Quat
angle4D	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^angle4D (const Quat<T> &q1, const Quat<T> &q2)$/;"	f	namespace:Imath
angleMapping	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^ Euler<T>::angleMapping(int &i, int &j, int &k) const$/;"	f	class:Imath::Euler
angleMod	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^Euler<T>::angleMod (T angle)$/;"	f	class:Imath::Euler
angleOrder	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^ Euler<T>::angleOrder(int &i, int &j, int &k) const$/;"	f	class:Imath::Euler
any	3rdparty/tiff-3.9.4/tiffio.h	/^	    void (*any)(TIFFRGBAImage*);$/;"	m	union:_TIFFRGBAImage::__anon66
anyOffsetsAreInvalid	3rdparty/openexr-1.7.0/ImfTileOffsets.cpp	/^TileOffsets::anyOffsetsAreInvalid () const$/;"	f	class:Imf::TileOffsets
append	3rdparty/ilmbase-1.0.2/IexBaseExc.cpp	/^BaseExc::append (std::stringstream &s)$/;"	f	class:Iex::BaseExc
append	3rdparty/ilmbase-1.0.2/IexBaseExc.h	/^BaseExc::append (const char *s)$/;"	f	class:Iex::BaseExc
append_comment_ply	tools/ply.c	/^void append_comment_ply(PlyFile *ply, char *comment)$/;"	f
append_obj_info_ply	tools/ply.c	/^void append_obj_info_ply(PlyFile *ply, char *obj_info)$/;"	f
append_prop_rule	tools/ply.c	/^PlyRuleList *append_prop_rule ($/;"	f
appleErrorHandler	3rdparty/tiff-3.9.4/tif_apple.c	/^appleErrorHandler(const char* module, const char* fmt, va_list ap)$/;"	f	file:
appleWarningHandler	3rdparty/tiff-3.9.4/tif_apple.c	/^appleWarningHandler(const char* module, const char* fmt, va_list ap)$/;"	f	file:
apply	3rdparty/openexr-1.7.0/ImfLut.cpp	/^HalfLut::apply (const Slice &data, const Imath::Box2i &dataWindow) const$/;"	f	class:Imf::HalfLut
apply	3rdparty/openexr-1.7.0/ImfLut.cpp	/^HalfLut::apply (half *data, int nData, int stride) const$/;"	f	class:Imf::HalfLut
apply	3rdparty/openexr-1.7.0/ImfLut.cpp	/^RgbaLut::apply (Rgba *base,$/;"	f	class:Imf::RgbaLut
apply	3rdparty/openexr-1.7.0/ImfLut.cpp	/^RgbaLut::apply (Rgba *data, int nData, int stride) const$/;"	f	class:Imf::RgbaLut
applyLut	3rdparty/openexr-1.7.0/ImfPizCompressor.cpp	/^applyLut (const unsigned short lut[USHORT_RANGE],$/;"	f	namespace:Imf::__anon25
areCounterparts	3rdparty/openexr-1.7.0/ImfMultiView.cpp	/^areCounterparts (const string &channel1, $/;"	f	namespace:Imf
area	integrators/dipolesubsurface.h	/^    float area, rayEpsilon;$/;"	m	struct:IrradiancePoint
area	lights/diffuse.h	/^    float area;$/;"	m	class:DiffuseAreaLight
area	renderers/surfacepoints.h	/^    float area, rayEpsilon;$/;"	m	struct:SurfacePoint
areaDistribution	core/light.h	/^    Distribution1D *areaDistribution;$/;"	m	class:ShapeSet
areaLight	core/api.cpp	/^    string areaLight;$/;"	m	struct:GraphicsState	file:
areaLight	core/primitive.h	/^    AreaLight *areaLight;$/;"	m	class:GeometricPrimitive
areaLightParams	core/api.cpp	/^    ParamSet areaLightParams;$/;"	m	struct:GraphicsState	file:
areas	core/light.h	/^    vector<float> areas;$/;"	m	class:ShapeSet
arena	accelerators/kdtreeaccel.h	/^    MemoryArena arena;$/;"	m	class:KdTreeAccel
arena	core/api.cpp	/^    MemoryArena arena;$/;"	m	class:TransformCache	file:
arena	tools/bsdftest.cpp	/^static MemoryArena arena;$/;"	v	file:
arg	core/pbrtparse.cpp	/^    void *arg;$/;"	m	struct:ParamListItem	file:
array	core/pbrtparse.cpp	/^    void *array;$/;"	m	struct:ParamArray	file:
ascii_get_element	tools/ply.c	/^void ascii_get_element(PlyFile *plyfile, char *elem_ptr)$/;"	f
asin	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static T	asin  (T x)		{return ::asin (double(x));}$/;"	f	struct:Imath::Math
asin	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static float	asin  (float x)			{return ::asinf (x);}$/;"	f	struct:Imath::Math
aspect	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^T Frustum<T>::aspect() const$/;"	f	class:Imath::Frustum
assert	3rdparty/tiff-3.9.4/tiffiop.h	/^# define assert(/;"	d
assign	3rdparty/ilmbase-1.0.2/IexBaseExc.cpp	/^BaseExc::assign (std::stringstream &s)$/;"	f	class:Iex::BaseExc
assign	3rdparty/ilmbase-1.0.2/IexBaseExc.h	/^BaseExc::assign (const char *s)$/;"	f	class:Iex::BaseExc
atan	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static T	atan  (T x)		{return ::atan (double(x));}$/;"	f	struct:Imath::Math
atan	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static float	atan  (float x)			{return ::atanf (x);}$/;"	f	struct:Imath::Math
atan2	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static T	atan2 (T x, T y)	{return ::atan2 (double(x), double(y));}$/;"	f	struct:Imath::Math
atan2	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static float	atan2 (float x, float y)	{return ::atan2f (x, y);}$/;"	f	struct:Imath::Math
atariErrorHandler	3rdparty/tiff-3.9.4/tif_atari.c	/^atariErrorHandler(const char* module, const char* fmt, va_list ap)$/;"	f	file:
atariWarningHandler	3rdparty/tiff-3.9.4/tif_atari.c	/^atariWarningHandler(const char* module, const char* fmt, va_list ap)$/;"	f	file:
attribute	3rdparty/openexr-1.7.0/ImfHeader.h	/^Header::ConstIterator::attribute () const$/;"	f	class:Imf::Header::ConstIterator
attribute	3rdparty/openexr-1.7.0/ImfHeader.h	/^Header::Iterator::attribute () const$/;"	f	class:Imf::Header::Iterator
avail_in	3rdparty/zlib-1.2.5/zlib.h	/^    uInt     avail_in;  \/* number of bytes available at next_in *\/$/;"	m	struct:z_stream_s
avail_out	3rdparty/zlib-1.2.5/zlib.h	/^    uInt     avail_out; \/* remaining free space at next_out *\/$/;"	m	struct:z_stream_s
availableBlocks	core/memory.h	/^    vector<char *> usedBlocks, availableBlocks;$/;"	m	class:MemoryArena
axis	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^Quat<T>::axis () const$/;"	f	class:Imath::Quat
axis	accelerators/bvh.cpp	/^    uint8_t axis;         \/\/ interior node: xyz$/;"	m	struct:LinearBVHNode	file:
axis	core/kdtree.h	/^    int axis;$/;"	m	struct:CompareNode
b	3rdparty/ilmbase-1.0.2/ImathColor.h	/^    T			r, g, b, a;$/;"	m	class:Imath::Color4
b	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^    ImfHalf	b;$/;"	m	struct:ImfRgba
b	3rdparty/openexr-1.7.0/ImfPreviewImage.h	/^    unsigned char	b;	\/\/ proportional to pow (x\/255, 2.2),$/;"	m	struct:Imf::PreviewRgba
b	3rdparty/openexr-1.7.0/ImfRgba.h	/^    half	b;$/;"	m	struct:Imf::Rgba
b	3rdparty/tiff-3.9.4/tif_fax3.c	/^	Fax3BaseState b;$/;"	m	struct:__anon45	file:
b	core/montecarlo.h	/^    uint32_t *b, *permute;$/;"	m	class:PermutedHalton
b	renderers/metropolis.cpp	/^    float b;$/;"	m	class:MLTTask	file:
b	tools/ply2pbrt.c	/^  float r,g,b;$/;"	m	struct:Vertex	file:
b	volumes/exponential.h	/^    float a, b;$/;"	m	class:ExponentialDensity
back	3rdparty/zlib-1.2.5/inflate.h	/^    int back;                   \/* bits back of last unprocessed length\/lit *\/$/;"	m	struct:inflate_state
badFloat	3rdparty/ilmbase-1.0.2/ImathGL.h	/^badFloat (float f)$/;"	f	namespace:__anon6
badfaxlines	3rdparty/tiff-3.9.4/tif_fax3.c	/^	uint32	badfaxlines;		\/* BadFaxLines tag *\/$/;"	m	struct:__anon43	file:
badfaxrun	3rdparty/tiff-3.9.4/tif_fax3.c	/^	uint32	badfaxrun;		\/* BadFaxRun tag *\/$/;"	m	struct:__anon43	file:
badlength	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	badlength(/;"	d	file:
base	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^    char *		base;$/;"	m	struct:Imf::Slice
base	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    const char *	base;$/;"	m	struct:Imf::__anon23::OutSliceInfo	file:
base	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    char *	base;$/;"	m	struct:Imf::__anon31::InSliceInfo	file:
base	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    char *      base;$/;"	m	struct:Imf::__anon34::TInSliceInfo	file:
base	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    const char *	base;$/;"	m	struct:Imf::__anon37::TOutSliceInfo	file:
base	3rdparty/tiff-3.9.4/tif_lzw.c	/^	LZWBaseState base;$/;"	m	struct:__anon52	file:
baseTypeEpsilon	3rdparty/ilmbase-1.0.2/ImathColor.h	/^    static T		baseTypeEpsilon()	{return limits<T>::epsilon();}$/;"	f	class:Imath::Color4
baseTypeEpsilon	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^    static T            baseTypeEpsilon()       {return limits<T>::epsilon();}$/;"	f	class:Imath::Matrix33
baseTypeEpsilon	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^    static T            baseTypeEpsilon()       {return limits<T>::epsilon();}$/;"	f	class:Imath::Matrix44
baseTypeEpsilon	3rdparty/ilmbase-1.0.2/ImathShear.h	/^    static T		baseTypeEpsilon()	{return limits<T>::epsilon();}$/;"	f	class:Imath::Shear6
baseTypeEpsilon	3rdparty/ilmbase-1.0.2/ImathVec.h	/^    static T		baseTypeEpsilon()	{return limits<T>::epsilon();}$/;"	f	class:Imath::Vec2
baseTypeEpsilon	3rdparty/ilmbase-1.0.2/ImathVec.h	/^    static T		baseTypeEpsilon()	{return limits<T>::epsilon();}$/;"	f	class:Imath::Vec3
baseTypeEpsilon	3rdparty/ilmbase-1.0.2/ImathVec.h	/^    static T		baseTypeEpsilon()	{return limits<T>::epsilon();}$/;"	f	class:Imath::Vec4
baseTypeMax	3rdparty/ilmbase-1.0.2/ImathColor.h	/^    static T		baseTypeMax()		{return limits<T>::max();}$/;"	f	class:Imath::Color4
baseTypeMax	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^    static T            baseTypeMax()           {return limits<T>::max();}$/;"	f	class:Imath::Matrix33
baseTypeMax	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^    static T            baseTypeMax()           {return limits<T>::max();}$/;"	f	class:Imath::Matrix44
baseTypeMax	3rdparty/ilmbase-1.0.2/ImathShear.h	/^    static T		baseTypeMax()		{return limits<T>::max();}$/;"	f	class:Imath::Shear6
baseTypeMax	3rdparty/ilmbase-1.0.2/ImathVec.h	/^    static T		baseTypeMax()		{return limits<T>::max();}$/;"	f	class:Imath::Vec2
baseTypeMax	3rdparty/ilmbase-1.0.2/ImathVec.h	/^    static T		baseTypeMax()		{return limits<T>::max();}$/;"	f	class:Imath::Vec3
baseTypeMax	3rdparty/ilmbase-1.0.2/ImathVec.h	/^    static T		baseTypeMax()		{return limits<T>::max();}$/;"	f	class:Imath::Vec4
baseTypeMin	3rdparty/ilmbase-1.0.2/ImathColor.h	/^    static T		baseTypeMin()		{return limits<T>::min();}$/;"	f	class:Imath::Color4
baseTypeMin	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^    static T            baseTypeMin()           {return limits<T>::min();}$/;"	f	class:Imath::Matrix33
baseTypeMin	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^    static T            baseTypeMin()           {return limits<T>::min();}$/;"	f	class:Imath::Matrix44
baseTypeMin	3rdparty/ilmbase-1.0.2/ImathShear.h	/^    static T		baseTypeMin()		{return limits<T>::min();}$/;"	f	class:Imath::Shear6
baseTypeMin	3rdparty/ilmbase-1.0.2/ImathVec.h	/^    static T		baseTypeMin()		{return limits<T>::min();}$/;"	f	class:Imath::Vec2
baseTypeMin	3rdparty/ilmbase-1.0.2/ImathVec.h	/^    static T		baseTypeMin()		{return limits<T>::min();}$/;"	f	class:Imath::Vec3
baseTypeMin	3rdparty/ilmbase-1.0.2/ImathVec.h	/^    static T		baseTypeMin()		{return limits<T>::min();}$/;"	f	class:Imath::Vec4
baseTypeSmallest	3rdparty/ilmbase-1.0.2/ImathColor.h	/^    static T		baseTypeSmallest()	{return limits<T>::smallest();}$/;"	f	class:Imath::Color4
baseTypeSmallest	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^    static T            baseTypeSmallest()      {return limits<T>::smallest();}$/;"	f	class:Imath::Matrix33
baseTypeSmallest	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^    static T            baseTypeSmallest()      {return limits<T>::smallest();}$/;"	f	class:Imath::Matrix44
baseTypeSmallest	3rdparty/ilmbase-1.0.2/ImathShear.h	/^    static T		baseTypeSmallest()	{return limits<T>::smallest();}$/;"	f	class:Imath::Shear6
baseTypeSmallest	3rdparty/ilmbase-1.0.2/ImathVec.h	/^    static T		baseTypeSmallest()	{return limits<T>::smallest();}$/;"	f	class:Imath::Vec2
baseTypeSmallest	3rdparty/ilmbase-1.0.2/ImathVec.h	/^    static T		baseTypeSmallest()	{return limits<T>::smallest();}$/;"	f	class:Imath::Vec3
baseTypeSmallest	3rdparty/ilmbase-1.0.2/ImathVec.h	/^    static T		baseTypeSmallest()	{return limits<T>::smallest();}$/;"	f	class:Imath::Vec4
base_dist	3rdparty/zlib-1.2.5/trees.c	/^local int base_dist[D_CODES];$/;"	v
base_dist	3rdparty/zlib-1.2.5/trees.h	/^local const int base_dist[D_CODES] = {$/;"	v
base_length	3rdparty/zlib-1.2.5/trees.c	/^local int base_length[LENGTH_CODES];$/;"	v
base_length	3rdparty/zlib-1.2.5/trees.h	/^local const int base_length[LENGTH_CODES] = {$/;"	v
bbox	integrators/useprobes.h	/^    BBox bbox;$/;"	m	class:UseRadianceProbes
bbox	renderers/createprobes.cpp	/^    const BBox &bbox;$/;"	m	class:CreateRadProbeTask	file:
bbox	renderers/createprobes.h	/^    BBox bbox;$/;"	m	class:CreateRadianceProbes
bboxes	renderers/aggregatetest.h	/^    vector<BBox> bboxes;$/;"	m	class:AggregateTest
bcdToBinary	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^bcdToBinary (unsigned int bcd)$/;"	f	namespace:Imf::__anon40
begin	3rdparty/openexr-1.7.0/ImfChannelList.cpp	/^ChannelList::begin () const$/;"	f	class:Imf::ChannelList
begin	3rdparty/openexr-1.7.0/ImfChannelList.cpp	/^ChannelList::begin ()$/;"	f	class:Imf::ChannelList
begin	3rdparty/openexr-1.7.0/ImfFrameBuffer.cpp	/^FrameBuffer::begin () const$/;"	f	class:Imf::FrameBuffer
begin	3rdparty/openexr-1.7.0/ImfFrameBuffer.cpp	/^FrameBuffer::begin ()$/;"	f	class:Imf::FrameBuffer
begin	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::begin () const$/;"	f	class:Imf::Header
begin	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::begin ()$/;"	f	class:Imf::Header
beta	shapes/loopsubdiv.h	/^    static float beta(int valence) {$/;"	f	class:LoopSubdiv
bgf0	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^TimeCode::bgf0 () const$/;"	f	class:Imf::TimeCode
bgf1	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^TimeCode::bgf1 () const$/;"	f	class:Imf::TimeCode
bgf2	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^TimeCode::bgf2 () const$/;"	f	class:Imf::TimeCode
bi_buf	3rdparty/zlib-1.2.5/deflate.h	/^    ush bi_buf;$/;"	m	struct:internal_state
bi_flush	3rdparty/zlib-1.2.5/trees.c	/^local void bi_flush(s)$/;"	f
bi_reverse	3rdparty/zlib-1.2.5/trees.c	/^local unsigned bi_reverse(code, len)$/;"	f
bi_valid	3rdparty/zlib-1.2.5/deflate.h	/^    int bi_valid;$/;"	m	struct:internal_state
bi_windup	3rdparty/zlib-1.2.5/trees.c	/^local void bi_windup(s)$/;"	f
bidirectional	renderers/metropolis.h	/^    bool bidirectional;$/;"	m	class:MetropolisRenderer
bigTypeshift	3rdparty/tiff-3.9.4/tif_open.c	/^static const int bigTypeshift[13] = {$/;"	v	file:
binaryGroup	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^TimeCode::binaryGroup (int group) const$/;"	f	class:Imf::TimeCode
binaryToBcd	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^binaryToBcd (int binary)$/;"	f	namespace:Imf::__anon40
binary_get_element	tools/ply.c	/^void binary_get_element(PlyFile *plyfile, char *elem_ptr)$/;"	f
bit	3rdparty/tiff-3.9.4/tif_fax3.c	/^	int	bit;			\/* current i\/o bit in byte *\/$/;"	m	struct:__anon45	file:
bitField	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^bitField (unsigned int value, int minBit, int maxBit)$/;"	f	namespace:Imf::__anon40
bitmap	3rdparty/tiff-3.9.4/tif_fax3.c	/^	const unsigned char* bitmap;	\/* bit reversal table *\/$/;"	m	struct:__anon45	file:
bitmapFromData	3rdparty/openexr-1.7.0/ImfPizCompressor.cpp	/^bitmapFromData (const unsigned short data[\/*nData*\/],$/;"	f	namespace:Imf::__anon25
bits	3rdparty/ilmbase-1.0.2/half.h	/^half::bits () const$/;"	f	class:half
bits	3rdparty/tiff-3.9.4/tif_acorn.c	/^typedef unsigned int                            bits;$/;"	t	file:
bits	3rdparty/zlib-1.2.5/inflate.h	/^    unsigned bits;              \/* number of bits in "in" *\/$/;"	m	struct:inflate_state
bits	3rdparty/zlib-1.2.5/inftrees.h	/^    unsigned char bits;         \/* bits in this part of the code *\/$/;"	m	struct:__anon76
bits_sent	3rdparty/zlib-1.2.5/deflate.h	/^    ulg bits_sent;      \/* bit length of compressed data sent mod 2^32 *\/$/;"	m	struct:internal_state
bitspersample	3rdparty/tiff-3.9.4/tiffio.h	/^	uint16 bitspersample;                   \/* image bits\/sample *\/$/;"	m	struct:_TIFFRGBAImage
bl_count	3rdparty/zlib-1.2.5/deflate.h	/^    ush bl_count[MAX_BITS+1];$/;"	m	struct:internal_state
bl_desc	3rdparty/zlib-1.2.5/deflate.h	/^    struct tree_desc_s bl_desc;              \/* desc. for bit length tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::tree_desc_s
bl_order	3rdparty/zlib-1.2.5/trees.c	/^local const uch bl_order[BL_CODES]$/;"	v
bl_tree	3rdparty/zlib-1.2.5/deflate.h	/^    struct ct_data_s bl_tree[2*BL_CODES+1];  \/* Huffman tree for bit lengths *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::ct_data_s
blockSize	core/memory.h	/^    uint32_t curBlockPos, blockSize;$/;"	m	class:MemoryArena
block_done	3rdparty/zlib-1.2.5/deflate.c	/^    block_done,     \/* block flush performed *\/$/;"	e	enum:__anon71	file:
block_start	3rdparty/zlib-1.2.5/deflate.h	/^    long block_start;$/;"	m	struct:internal_state
block_state	3rdparty/zlib-1.2.5/deflate.c	/^} block_state;$/;"	t	typeref:enum:__anon71	file:
bloom	tools/exrtotiff.cpp	/^void bloom(float *rgb, int xResolution, int yResolution, float bloomRadius,$/;"	f
blue	3rdparty/openexr-1.7.0/ImfChromaticities.h	/^    Imath::V2f	blue;$/;"	m	struct:Imf::Chromaticities
bluecmap	3rdparty/tiff-3.9.4/tiffio.h	/^	uint16* bluecmap;$/;"	m	struct:_TIFFRGBAImage
boolean	3rdparty/tiff-3.9.4/tif_jpeg.c	/^   typedef unsigned char boolean;$/;"	t	file:
bools	core/paramset.h	/^    vector<Reference<ParamSetItem<bool> > > bools;$/;"	m	class:ParamSet
bottom	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^    T			bottom() const		{ return _bottom;	}$/;"	f	class:Imath::Frustum
bound	core/octree.h	/^    BBox bound;$/;"	m	class:Octree
bound	core/scene.h	/^    BBox bound;$/;"	m	class:Scene
bound	core/volume.h	/^    BBox bound;$/;"	m	class:AggregateVolume
boundary	shapes/loopsubdiv.cpp	/^    bool regular, boundary;$/;"	m	struct:SDVertex	file:
bounds	accelerators/bvh.cpp	/^    BBox bounds;$/;"	m	struct:BVHBuildNode	file:
bounds	accelerators/bvh.cpp	/^    BBox bounds;$/;"	m	struct:BVHPrimitiveInfo	file:
bounds	accelerators/bvh.cpp	/^    BBox bounds;$/;"	m	struct:LinearBVHNode	file:
bounds	accelerators/grid.h	/^    BBox bounds;$/;"	m	class:GridAccel
bounds	accelerators/kdtreeaccel.h	/^    BBox bounds;$/;"	m	class:KdTreeAccel
brdf	core/reflection.h	/^    BxDF *brdf;$/;"	m	class:BRDFToBTDF
brdf	core/reflection.h	/^    const float *brdf;$/;"	m	class:RegularHalfangleBRDF
breakScanLine	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^OutputFile::breakScanLine  (int y, int offset, int length, char c)$/;"	f	class:Imf::OutputFile
breakScanLine	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaOutputFile::breakScanLine  (int y, int offset, int length, char c)$/;"	f	class:Imf::RgbaOutputFile
breakTile	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::breakTile $/;"	f	class:Imf::TiledOutputFile
breakTile	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::breakTile  (int dx, int dy, int lx, int ly,$/;"	f	class:Imf::TiledRgbaOutputFile
bsdf	renderers/metropolis.cpp	/^    BSDF *bsdf;$/;"	m	struct:PathVertex	file:
bsdfGatherSampleOffsets	integrators/photonmap.h	/^    BSDFSampleOffsets bsdfGatherSampleOffsets, indirGatherSampleOffsets;$/;"	m	class:PhotonIntegrator
bsdfSample	renderers/metropolis.cpp	/^    BSDFSample bsdfSample;$/;"	m	struct:LightingSample	file:
bsdfSample	renderers/metropolis.cpp	/^    BSDFSample bsdfSample;$/;"	m	struct:PathSample	file:
bsdfSampleOffsets	integrators/dipolesubsurface.h	/^    BSDFSampleOffsets *bsdfSampleOffsets;$/;"	m	class:DipoleSubsurfaceIntegrator
bsdfSampleOffsets	integrators/directlighting.h	/^    BSDFSampleOffsets *bsdfSampleOffsets;$/;"	m	class:DirectLightingIntegrator
bsdfSampleOffsets	integrators/igi.h	/^    BSDFSampleOffsets *bsdfSampleOffsets;$/;"	m	class:IGIIntegrator
bsdfSampleOffsets	integrators/irradiancecache.h	/^    BSDFSampleOffsets *bsdfSampleOffsets;$/;"	m	class:IrradianceCacheIntegrator
bsdfSampleOffsets	integrators/path.h	/^    BSDFSampleOffsets bsdfSampleOffsets[SAMPLE_DEPTH];$/;"	m	class:PathIntegrator
bsdfSampleOffsets	integrators/photonmap.h	/^    BSDFSampleOffsets *bsdfSampleOffsets;$/;"	m	class:PhotonIntegrator
bsdfSampleOffsets	integrators/useprobes.h	/^    BSDFSampleOffsets *bsdfSampleOffsets;$/;"	m	class:UseRadianceProbes
bsearch	3rdparty/tiff-3.9.4/tif_config.wince.h	/^#define bsearch /;"	d
bstep	3rdparty/tiff-3.9.4/tiffio.h	/^	float	rstep, gstep, bstep;$/;"	m	struct:__anon65
buf	core/progressreporter.h	/^    char *buf, *curSpace;$/;"	m	class:ProgressReporter
bufState	core/pbrtlex.cpp	/^    YY_BUFFER_STATE bufState;$/;"	m	struct:IncludeInfo	file:
buffer	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    Array<char>		buffer;$/;"	m	struct:Imf::__anon23::LineBuffer	file:
buffer	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    char *		buffer;$/;"	m	struct:Imf::__anon31::LineBuffer	file:
buffer	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    char *		buffer;$/;"	m	struct:Imf::__anon34::TileBuffer	file:
buffer	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    Array<char>		buffer;$/;"	m	struct:Imf::__anon37::TileBuffer	file:
bufferedReadPixels	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^bufferedReadPixels (InputFile::Data* ifd, int scanLine1, int scanLine2)$/;"	f	namespace:Imf::__anon21
bufferedTileWrite	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^bufferedTileWrite (TiledOutputFile::Data *ofd,$/;"	f	namespace:Imf::__anon38
buildMap	3rdparty/tiff-3.9.4/tif_getimage.c	/^buildMap(TIFFRGBAImage* img)$/;"	f	file:
buildTree	accelerators/kdtreeaccel.cpp	/^void KdTreeAccel::buildTree(int nodeNum, const BBox &nodeBounds,$/;"	f	class:KdTreeAccel
build_bl_tree	3rdparty/zlib-1.2.5/trees.c	/^local int build_bl_tree(s)$/;"	f
build_tree	3rdparty/zlib-1.2.5/trees.c	/^local void build_tree(s, desc)$/;"	f
bumpMap	materials/glass.h	/^    Reference<Texture<float> > bumpMap;$/;"	m	class:GlassMaterial
bumpMap	materials/kdsubsurface.h	/^    Reference<Texture<float> > meanfreepath, eta, bumpMap;$/;"	m	class:KdSubsurfaceMaterial
bumpMap	materials/matte.h	/^    Reference<Texture<float> > sigma, bumpMap;$/;"	m	class:MatteMaterial
bumpMap	materials/measured.h	/^    Reference<Texture<float> > bumpMap;$/;"	m	class:MeasuredMaterial
bumpMap	materials/metal.h	/^    Reference<Texture<float> > bumpMap;$/;"	m	class:MetalMaterial
bumpMap	materials/mirror.h	/^    Reference<Texture<float> > bumpMap;$/;"	m	class:MirrorMaterial
bumpMap	materials/plastic.h	/^    Reference<Texture<float> > roughness, bumpMap;$/;"	m	class:PlasticMaterial
bumpMap	materials/shinymetal.h	/^    Reference<Texture<float> > bumpMap;$/;"	m	class:ShinyMetalMaterial
bumpMap	materials/substrate.h	/^    Reference<Texture<float> > bumpMap;$/;"	m	class:SubstrateMaterial
bumpMap	materials/subsurface.h	/^    Reference<Texture<float> > eta, bumpMap;$/;"	m	class:SubsurfaceMaterial
bumpMap	materials/translucent.h	/^    Reference<Texture<float> > bumpMap;$/;"	m	class:TranslucentMaterial
bumpMap	materials/uber.h	/^    Reference<Texture<float> > roughness, eta, bumpMap;$/;"	m	class:UberMaterial
bump_scale	tools/obj2pbrt.cpp	/^    float bump_scale;$/;"	m	struct:tinyobj::__anon90	file:
bxdf	core/reflection.h	/^    BxDF *bxdf;$/;"	m	class:ScaledBxDF
bxdfs	core/reflection.h	/^    BxDF *bxdfs[MAX_BxDFS];$/;"	m	class:BSDF
byte	3rdparty/tiff-3.9.4/tif_acorn.c	/^typedef unsigned char                           byte;$/;"	t	file:
bytesPerLine	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    vector<size_t>	 bytesPerLine;          \/\/ combined size of a line over$/;"	m	struct:Imf::OutputFile::Data	file:
bytesPerLine	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    vector<size_t>	bytesPerLine;       \/\/ combined size of a line over all$/;"	m	struct:Imf::ScanLineInputFile::Data	file:
bytesPerLineTable	3rdparty/openexr-1.7.0/ImfMisc.cpp	/^bytesPerLineTable (const Header &header,$/;"	f	namespace:Imf
bytesPerPixel	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    size_t	    bytesPerPixel;          \/\/ size of an uncompressed pixel$/;"	m	struct:Imf::TiledInputFile::Data	file:
bytes_per_line	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint32 bytes_per_line;   \/* if the codec outputs subsampled data, a 'line' in bytes_per_line *\/$/;"	m	struct:__anon55	file:
bytesperline	3rdparty/tiff-3.9.4/tif_jpeg.c	/^	tsize_t		bytesperline;	\/* decompressed bytes per scanline *\/$/;"	m	struct:__anon48	file:
c	3rdparty/tiff-3.9.4/tif_jpeg.c	/^		struct jpeg_compress_struct c;$/;"	m	union:__anon48::__anon49	typeref:struct:__anon48::__anon49::jpeg_compress_struct	file:
c	core/spectrum.h	/^    float c[nSamples];$/;"	m	class:CoefficientSpectrum
c	shapes/hyperboloid.h	/^    float a, c;$/;"	m	class:Hyperboloid
c_in	integrators/diffuseprt.h	/^    Spectrum *c_in;$/;"	m	class:DiffusePRTIntegrator
c_in	integrators/glossyprt.h	/^    Spectrum *c_in;$/;"	m	class:GlossyPRTIntegrator
c_in	integrators/useprobes.h	/^    Spectrum *c_in;$/;"	m	class:UseRadianceProbes
c_in	renderers/createprobes.cpp	/^    Spectrum *c_in;$/;"	m	class:CreateRadProbeTask	file:
c_inXYZ	integrators/useprobes.h	/^    const Spectrum *c_inXYZ(int lmax, int vx, int vy, int vz) const {$/;"	f	class:UseRadianceProbes
cache	core/api.cpp	/^    map<Transform, std::pair<Transform *, Transform *> > cache;$/;"	m	class:TransformCache	file:
cachePadding	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^cachePadding (ptrdiff_t size)$/;"	f	namespace:Imf::__anon28
cachedBuffer	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^    FrameBuffer *	cachedBuffer;$/;"	m	struct:Imf::InputFile::Data	file:
cachedSpectra	core/paramset.cpp	/^map<string, Spectrum> ParamSet::cachedSpectra;$/;"	m	class:ParamSet	file:
cachedSpectra	core/paramset.h	/^    static map<string, Spectrum> cachedSpectra;$/;"	m	class:ParamSet
cachedTileY	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^    int			cachedTileY;$/;"	m	struct:Imf::InputFile::Data	file:
calculateBytesPerPixel	3rdparty/openexr-1.7.0/ImfTiledMisc.cpp	/^calculateBytesPerPixel (const Header &header)$/;"	f	namespace:Imf
calculateNumTiles	3rdparty/openexr-1.7.0/ImfTiledMisc.cpp	/^calculateNumTiles (int *numTiles,$/;"	f	namespace:Imf::__anon36
calculateNumXLevels	3rdparty/openexr-1.7.0/ImfTiledMisc.cpp	/^calculateNumXLevels (const TileDescription& tileDesc,$/;"	f	namespace:Imf::__anon36
calculateNumYLevels	3rdparty/openexr-1.7.0/ImfTiledMisc.cpp	/^calculateNumYLevels (const TileDescription& tileDesc,$/;"	f	namespace:Imf::__anon36
camera	integrators/irradiancecache.cpp	/^    const Camera *camera;$/;"	m	struct:IrradiancePrimeTask	file:
camera	renderers/createprobes.h	/^    const Camera *camera;$/;"	m	class:CreateRadianceProbes
camera	renderers/metropolis.cpp	/^    const Camera *camera;$/;"	m	class:MLTTask	file:
camera	renderers/metropolis.h	/^    Camera *camera;$/;"	m	class:MetropolisRenderer
camera	renderers/samplerrenderer.h	/^    Camera *camera;$/;"	m	class:SamplerRenderer
camera	renderers/samplerrenderer.h	/^    Camera *camera;$/;"	m	class:SamplerRendererTask
cameraPathSamples	renderers/metropolis.cpp	/^    vector<PathSample> cameraPathSamples, lightPathSamples;$/;"	m	struct:MLTSample	file:
cameraSample	renderers/metropolis.cpp	/^    CameraSample cameraSample;$/;"	m	struct:MLTSample	file:
cast	3rdparty/openexr-1.7.0/ImfAttribute.h	/^TypedAttribute<T>::cast (Attribute &attribute)$/;"	f	class:Imf::TypedAttribute
cast	3rdparty/openexr-1.7.0/ImfAttribute.h	/^TypedAttribute<T>::cast (Attribute *attribute)$/;"	f	class:Imf::TypedAttribute
cast	3rdparty/openexr-1.7.0/ImfAttribute.h	/^TypedAttribute<T>::cast (const Attribute &attribute)$/;"	f	class:Imf::TypedAttribute
cast	3rdparty/openexr-1.7.0/ImfAttribute.h	/^TypedAttribute<T>::cast (const Attribute *attribute)$/;"	f	class:Imf::TypedAttribute
category	core/probes.cpp	/^    string category, name;$/;"	m	struct:StatTracker	file:
causticMap	integrators/photonmap.cpp	/^    KdTree<Photon> *directMap, *indirectMap, *causticMap;$/;"	m	class:ComputeRadianceTask	file:
causticMap	integrators/photonmap.h	/^    KdTree<Photon> *causticMap;$/;"	m	class:PhotonIntegrator
causticPhotons	integrators/photonmap.cpp	/^    vector<Photon> &directPhotons, &indirectPhotons, &causticPhotons;$/;"	m	class:PhotonShootingTask	file:
cdf	core/montecarlo.h	/^    float *func, *cdf;$/;"	m	struct:Distribution1D
ceil	3rdparty/ilmbase-1.0.2/ImathFun.h	/^ceil (T x)$/;"	f	namespace:Imath
ceil	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static T	ceil  (T x)		{return ::ceil (double(x));}$/;"	f	struct:Imath::Math
ceil	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static float	ceil  (float x)			{return ::ceilf (x);}$/;"	f	struct:Imath::Math
ceilLog2	3rdparty/openexr-1.7.0/ImfTiledMisc.cpp	/^ceilLog2 (int x)$/;"	f	namespace:Imf::__anon36
center	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<T>::center() const $/;"	f	class:Imath::Box
center	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<Vec2<T> >::center() const $/;"	f	class:Imath::Box
center	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<Vec3<T> >::center() const $/;"	f	class:Imath::Box
center	3rdparty/ilmbase-1.0.2/ImathInterval.h	/^Interval<T>::center() const $/;"	f	class:Imath::Interval
center	3rdparty/ilmbase-1.0.2/ImathSphere.h	/^    Vec3<T>	center;$/;"	m	class:Imath::Sphere3
centroid	accelerators/bvh.cpp	/^    Point centroid;$/;"	m	struct:BVHPrimitiveInfo	file:
centroidBounds	accelerators/bvh.cpp	/^    const BBox &centroidBounds;$/;"	m	struct:CompareToBucket	file:
channel	3rdparty/openexr-1.7.0/ImfChannelList.h	/^ChannelList::ConstIterator::channel () const$/;"	f	class:Imf::ChannelList::ConstIterator
channel	3rdparty/openexr-1.7.0/ImfChannelList.h	/^ChannelList::Iterator::channel () const$/;"	f	class:Imf::ChannelList::Iterator
channelInAllViews	3rdparty/openexr-1.7.0/ImfMultiView.cpp	/^channelInAllViews (const string &channelName,$/;"	f	namespace:Imf
channelInOtherView	3rdparty/openexr-1.7.0/ImfMultiView.cpp	/^channelInOtherView (const string &channelName,$/;"	f	namespace:Imf
channels	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesInputFile::channels () const$/;"	f	class:Imf::AcesInputFile
channels	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesOutputFile::channels () const$/;"	f	class:Imf::AcesOutputFile
channels	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::channels () const$/;"	f	class:Imf::Header
channels	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::channels ()$/;"	f	class:Imf::Header
channels	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaInputFile::channels () const$/;"	f	class:Imf::RgbaInputFile
channels	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaOutputFile::channels () const$/;"	f	class:Imf::RgbaOutputFile
channels	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::channels () const$/;"	f	class:Imf::TiledRgbaInputFile
channels	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::channels () const$/;"	f	class:Imf::TiledRgbaOutputFile
channelsInLayer	3rdparty/openexr-1.7.0/ImfChannelList.cpp	/^ChannelList::channelsInLayer (const string &layerName,$/;"	f	class:Imf::ChannelList
channelsInNoView	3rdparty/openexr-1.7.0/ImfMultiView.cpp	/^channelsInNoView (const ChannelList &channelList,$/;"	f	namespace:Imf
channelsInView	3rdparty/openexr-1.7.0/ImfMultiView.cpp	/^channelsInView (const string & viewName,$/;"	f	namespace:Imf
channelsWithPrefix	3rdparty/openexr-1.7.0/ImfChannelList.cpp	/^ChannelList::channelsWithPrefix (const char prefix[],$/;"	f	class:Imf::ChannelList
channelsWithPrefix	3rdparty/openexr-1.7.0/ImfChannelList.cpp	/^ChannelList::channelsWithPrefix (const string &prefix,$/;"	f	class:Imf::ChannelList
charf	3rdparty/zlib-1.2.5/zconf.h	/^#  define charf /;"	d
charf	3rdparty/zlib-1.2.5/zconf.h	/^typedef char  FAR charf;$/;"	t
check	3rdparty/zlib-1.2.5/inflate.h	/^    unsigned long check;        \/* protected copy of check value *\/$/;"	m	struct:inflate_state
checkArraySize	3rdparty/openexr-1.7.0/ImfCheckedArithmetic.h	/^checkArraySize (T n, size_t s)$/;"	f	namespace:Imf
checkCompression	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^checkCompression (Compression compression)$/;"	f	namespace:Imf::__anon13
checkError	3rdparty/openexr-1.7.0/ImfStdIO.cpp	/^checkError (istream &is, streamsize expected = 0)$/;"	f	namespace:Imf::__anon33
checkError	3rdparty/openexr-1.7.0/ImfStdIO.cpp	/^checkError (ostream &os)$/;"	f	namespace:Imf::__anon33
checkForZeroScaleInRow	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^checkForZeroScaleInRow (const T& scl, $/;"	f	namespace:Imath
checkInkNamesString	3rdparty/tiff-3.9.4/tif_dir.c	/^checkInkNamesString(TIFF* tif, uint32 slen, const char* s)$/;"	f	file:
checkIsNullTerminated	3rdparty/openexr-1.7.0/ImfChannelListAttribute.cpp	/^void checkIsNullTerminated (const char (&str)[N], const char *what)$/;"	f	namespace:Imf::__anon16
checkIsNullTerminated	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^void checkIsNullTerminated (const char (&str)[N], const char *what)$/;"	f	namespace:Imf::__anon19
check_match	3rdparty/zlib-1.2.5/deflate.c	/^#  define check_match(/;"	d	file:
check_match	3rdparty/zlib-1.2.5/deflate.c	/^local void check_match(s, start, match, length)$/;"	f
checkcmap	3rdparty/tiff-3.9.4/tif_getimage.c	/^checkcmap(TIFFRGBAImage* img)$/;"	f	file:
child	shapes/loopsubdiv.cpp	/^    SDVertex *child;$/;"	m	struct:SDVertex	file:
children	accelerators/bvh.cpp	/^    BVHBuildNode *children[2];$/;"	m	struct:BVHBuildNode	file:
children	core/octree.h	/^    OctNode *children[8];$/;"	m	struct:OctNode
children	integrators/dipolesubsurface.cpp	/^        SubsurfaceOctreeNode *children[8];$/;"	m	union:SubsurfaceOctreeNode::__anon88	file:
children	shapes/loopsubdiv.cpp	/^    SDFace *children[4];$/;"	m	struct:SDFace	file:
cielab	3rdparty/tiff-3.9.4/tiffio.h	/^	TIFFCIELabToRGB* cielab;                \/* CIE L*a*b conversion state *\/$/;"	m	struct:_TIFFRGBAImage
cinfo	3rdparty/tiff-3.9.4/tif_jpeg.c	/^	} cinfo;			\/* NB: must be first *\/$/;"	m	struct:__anon48	typeref:union:__anon48::__anon49	file:
cinfo_initialized	3rdparty/tiff-3.9.4/tif_jpeg.c	/^        int             cinfo_initialized;$/;"	m	struct:__anon48	file:
circumscribe	3rdparty/ilmbase-1.0.2/ImathSphere.h	/^void Sphere3<T>::circumscribe(const Box<Vec3<T> > &box)$/;"	f	class:Imath::Sphere3
cl_hash	3rdparty/tiff-3.9.4/tif_lzw.c	/^cl_hash(LZWCodecState* sp)$/;"	f	file:
clamp	3rdparty/ilmbase-1.0.2/ImathFun.h	/^clamp (T a, T l, T h)$/;"	f	namespace:Imath
clamp	core/mipmap.h	/^    RGBSpectrum clamp(const RGBSpectrum &v) { return v.Clamp(0.f, INFINITY); }$/;"	f	class:MIPMap
clamp	core/mipmap.h	/^    SampledSpectrum clamp(const SampledSpectrum &v) { return v.Clamp(0.f, INFINITY); }$/;"	f	class:MIPMap
clamp	core/mipmap.h	/^    float clamp(float v) { return Clamp(v, 0.f, INFINITY); }$/;"	f	class:MIPMap
clamptab	3rdparty/tiff-3.9.4/tiffio.h	/^	TIFFRGBValue* clamptab;			\/* range clamping table *\/$/;"	m	struct:__anon64
cleanfaxdata	3rdparty/tiff-3.9.4/tif_fax3.c	/^	uint16	cleanfaxdata;		\/* CleanFaxData tag *\/$/;"	m	struct:__anon43	file:
clear	3rdparty/openexr-1.7.0/ImfIO.cpp	/^IStream::clear ()$/;"	f	class:Imf::IStream
clear	3rdparty/openexr-1.7.0/ImfStdIO.cpp	/^StdIFStream::clear ()$/;"	f	class:Imf::StdIFStream
clearError	3rdparty/openexr-1.7.0/ImfStdIO.cpp	/^clearError ()$/;"	f	namespace:Imf::__anon33
client_info	3rdparty/tiff-3.9.4/tiffiop.h	/^typedef struct client_info {$/;"	s
clip	3rdparty/ilmbase-1.0.2/ImathBoxAlgo.h	/^clip (const T &p, const Box<T> &box)$/;"	f	namespace:Imath
close	3rdparty/tiff-3.9.4/tif_acorn.c	/^extern int close(int fd)$/;"	f
close_ply	tools/ply.c	/^void close_ply(PlyFile *plyfile)$/;"	f
closestPointInBox	3rdparty/ilmbase-1.0.2/ImathBoxAlgo.h	/^closestPointInBox (const T &p, const Box<T> &box)$/;"	f	namespace:Imath
closestPointOnBox	3rdparty/ilmbase-1.0.2/ImathBoxAlgo.h	/^closestPointOnBox (const Vec3<T> &p, const Box< Vec3<T> > &box)$/;"	f	namespace:Imath
closestPointTo	3rdparty/ilmbase-1.0.2/ImathLine.h	/^Line3<T>::closestPointTo(const Line3<T>& line) const$/;"	f	class:Imath::Line3
closestPointTo	3rdparty/ilmbase-1.0.2/ImathLine.h	/^inline Vec3<T> Line3<T>::closestPointTo(const Vec3<T>& point) const$/;"	f	class:Imath::Line3
closestPoints	3rdparty/ilmbase-1.0.2/ImathLineAlgo.h	/^closestPoints$/;"	f	namespace:Imath
closestVertex	3rdparty/ilmbase-1.0.2/ImathLineAlgo.h	/^closestVertex$/;"	f	namespace:Imath
closestVertex	3rdparty/ilmbase-1.0.2/ImathVecAlgo.h	/^closestVertex(const Vec &v0,$/;"	f	namespace:Imath
cmp	3rdparty/ilmbase-1.0.2/ImathFun.h	/^cmp (T a, T b)$/;"	f	namespace:Imath
cmpt	3rdparty/ilmbase-1.0.2/ImathFun.h	/^cmpt (T a, T b, T t)$/;"	f	namespace:Imath
code	3rdparty/tiff-3.9.4/mkg3states.c	/^    uint16 code;		\/* right justified, lsb-first, zero filled *\/$/;"	m	struct:proto	file:
code	3rdparty/tiff-3.9.4/t4.h	/^    unsigned short code;	\/* g3 code *\/$/;"	m	struct:tableentry
code	3rdparty/tiff-3.9.4/tif_lzw.c	/^	hcode_t	code;$/;"	m	struct:__anon51	file:
code	3rdparty/zlib-1.2.5/deflate.h	/^        ush  code;       \/* bit string *\/$/;"	m	union:ct_data_s::__anon72
code	3rdparty/zlib-1.2.5/inftrees.h	/^} code;$/;"	t	typeref:struct:__anon76
code	tools/ply.c	/^  int code;$/;"	m	struct:RuleName	file:
codeLoop	3rdparty/tiff-3.9.4/tif_lzw.c	/^codeLoop(TIFF* tif)$/;"	f	file:
code_ent	3rdparty/tiff-3.9.4/tif_lzw.c	/^typedef struct code_ent {$/;"	s	file:
code_t	3rdparty/tiff-3.9.4/tif_lzw.c	/^} code_t;$/;"	t	typeref:struct:code_ent	file:
codec_t	3rdparty/tiff-3.9.4/tif_compress.c	/^} codec_t;$/;"	t	typeref:struct:_codec	file:
codes	3rdparty/zlib-1.2.5/inflate.h	/^    code codes[ENOUGH];         \/* space for code tables *\/$/;"	m	struct:inflate_state
codetype	3rdparty/zlib-1.2.5/inftrees.h	/^} codetype;$/;"	t	typeref:enum:__anon77
col_offset	3rdparty/tiff-3.9.4/tiffio.h	/^	int col_offset;$/;"	m	struct:_TIFFRGBAImage
colorFrame	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^TimeCode::colorFrame () const$/;"	f	class:Imf::TimeCode
color_map_data	core/targa.h	/^    uint8_t *color_map_data;$/;"	m	struct:__anon86
color_map_depth	core/targa.h	/^    uint8_t     color_map_depth;    \/* number of bits per entry *\/$/;"	m	struct:__anon86
color_map_length	core/targa.h	/^    uint16_t    color_map_length;   \/* number of entries included *\/$/;"	m	struct:__anon86
color_map_origin	core/targa.h	/^    uint16_t    color_map_origin;   \/* index of first entry *\/$/;"	m	struct:__anon86
color_map_type	core/targa.h	/^    uint8_t     color_map_type;$/;"	m	struct:__anon86
comm	3rdparty/tiff-3.9.4/tif_jpeg.c	/^		struct jpeg_common_struct comm;$/;"	m	union:__anon48::__anon49	typeref:struct:__anon48::__anon49::jpeg_common_struct	file:
comm_max	3rdparty/zlib-1.2.5/zlib.h	/^    uInt    comm_max;   \/* space at comment (only when reading header) *\/$/;"	m	struct:gz_header_s
comment	3rdparty/zlib-1.2.5/zlib.h	/^    Bytef   *comment;   \/* pointer to zero-terminated comment or Z_NULL *\/$/;"	m	struct:gz_header_s
comments	tools/ply.h	/^  char **comments;              \/* list of comments *\/$/;"	m	struct:PlyFile
componentOffset	core/light.h	/^    int nSamples, componentOffset, posOffset;$/;"	m	struct:LightSampleOffsets
componentOffset	core/reflection.h	/^    int nSamples, componentOffset, dirOffset;$/;"	m	struct:BSDFSampleOffsets
compress	3rdparty/openexr-1.7.0/ImfB44Compressor.cpp	/^B44Compressor::compress (const char *inPtr,$/;"	f	class:Imf::B44Compressor
compress	3rdparty/openexr-1.7.0/ImfPizCompressor.cpp	/^PizCompressor::compress (const char *inPtr,$/;"	f	class:Imf::PizCompressor
compress	3rdparty/openexr-1.7.0/ImfPxr24Compressor.cpp	/^Pxr24Compressor::compress (const char *inPtr,$/;"	f	class:Imf::Pxr24Compressor
compress	3rdparty/openexr-1.7.0/ImfRleCompressor.cpp	/^RleCompressor::compress (const char *inPtr,$/;"	f	class:Imf::RleCompressor
compress	3rdparty/openexr-1.7.0/ImfZipCompressor.cpp	/^ZipCompressor::compress (const char *inPtr,$/;"	f	class:Imf::ZipCompressor
compress	3rdparty/zlib-1.2.5/compress.c	/^int ZEXPORT compress (dest, destLen, source, sourceLen)$/;"	f
compress	3rdparty/zlib-1.2.5/zconf.h	/^#  define compress /;"	d
compress2	3rdparty/zlib-1.2.5/compress.c	/^int ZEXPORT compress2 (dest, destLen, source, sourceLen, level)$/;"	f
compress2	3rdparty/zlib-1.2.5/zconf.h	/^#  define compress2 /;"	d
compressBound	3rdparty/zlib-1.2.5/compress.c	/^uLong ZEXPORT compressBound (sourceLen)$/;"	f
compressBound	3rdparty/zlib-1.2.5/zconf.h	/^#  define compressBound /;"	d
compressTile	3rdparty/openexr-1.7.0/ImfB44Compressor.cpp	/^B44Compressor::compressTile (const char *inPtr,$/;"	f	class:Imf::B44Compressor
compressTile	3rdparty/openexr-1.7.0/ImfCompressor.cpp	/^Compressor::compressTile (const char *inPtr,$/;"	f	class:Imf::Compressor
compressTile	3rdparty/openexr-1.7.0/ImfPizCompressor.cpp	/^PizCompressor::compressTile (const char *inPtr,$/;"	f	class:Imf::PizCompressor
compressTile	3rdparty/openexr-1.7.0/ImfPxr24Compressor.cpp	/^Pxr24Compressor::compressTile (const char *inPtr,$/;"	f	class:Imf::Pxr24Compressor
compress_block	3rdparty/zlib-1.2.5/trees.c	/^local void compress_block(s, ltree, dtree)$/;"	f
compress_func	3rdparty/zlib-1.2.5/deflate.c	/^typedef block_state (*compress_func) OF((deflate_state *s, int flush));$/;"	t	file:
compressed_len	3rdparty/zlib-1.2.5/deflate.h	/^    ulg compressed_len; \/* total bit length of compressed file mod 2^32 *\/$/;"	m	struct:internal_state
compression	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesInputFile::compression () const$/;"	f	class:Imf::AcesInputFile
compression	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesOutputFile::compression () const$/;"	f	class:Imf::AcesOutputFile
compression	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::compression () const$/;"	f	class:Imf::Header
compression	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::compression ()$/;"	f	class:Imf::Header
compression	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaInputFile::compression () const$/;"	f	class:Imf::RgbaInputFile
compression	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaOutputFile::compression () const$/;"	f	class:Imf::RgbaOutputFile
compression	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::compression () const$/;"	f	class:Imf::TiledRgbaInputFile
compression	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::compression () const$/;"	f	class:Imf::TiledRgbaOutputFile
compressor	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    Compressor *	compressor;$/;"	m	struct:Imf::__anon23::LineBuffer	file:
compressor	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    Compressor *	compressor;$/;"	m	struct:Imf::__anon31::LineBuffer	file:
compressor	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    Compressor *	compressor;$/;"	m	struct:Imf::__anon34::TileBuffer	file:
compressor	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    Compressor *	compressor;$/;"	m	struct:Imf::__anon37::TileBuffer	file:
computeVis	lights/infinite.cpp	/^    bool computeVis;$/;"	m	struct:InfiniteAreaCube	file:
computeYw	3rdparty/openexr-1.7.0/ImfRgbaYca.cpp	/^computeYw (const Chromaticities &cr)$/;"	f	namespace:Imf::RgbaYca
cond	core/parallel.h	/^    pthread_cond_t cond;$/;"	m	class:ConditionVariable
conditionMutex	core/parallel.h	/^    CRITICAL_SECTION waitersCountMutex, conditionMutex;$/;"	m	class:ConditionVariable
config	3rdparty/zlib-1.2.5/deflate.c	/^} config;$/;"	t	typeref:struct:config_s	file:
config_s	3rdparty/zlib-1.2.5/deflate.c	/^typedef struct config_s {$/;"	s	file:
configuration_table	3rdparty/zlib-1.2.5/deflate.c	/^local const config configuration_table[10] = {$/;"	v
configuration_table	3rdparty/zlib-1.2.5/deflate.c	/^local const config configuration_table[2] = {$/;"	v
const	3rdparty/zlib-1.2.5/zconf.h	/^#    define const /;"	d
const_class	3rdparty/tiff-3.9.4/mkg3states.c	/^static	char* const_class = "";$/;"	v	file:
contig	3rdparty/tiff-3.9.4/tiffio.h	/^	    tileContigRoutine contig;$/;"	m	union:_TIFFRGBAImage::__anon66
convertFromLinear	3rdparty/openexr-1.7.0/ImfB44Compressor.cpp	/^convertFromLinear (unsigned short s[16])$/;"	f	namespace:Imf::__anon15
convertIn	textures/imagemap.h	/^    static void convertIn(const RGBSpectrum &from, RGBSpectrum *to,$/;"	f	class:ImageTexture
convertIn	textures/imagemap.h	/^    static void convertIn(const RGBSpectrum &from, float *to,$/;"	f	class:ImageTexture
convertInPlace	3rdparty/openexr-1.7.0/ImfMisc.cpp	/^convertInPlace (char *& writePtr,$/;"	f	namespace:Imf
convertOut	textures/imagemap.h	/^    static void convertOut(const RGBSpectrum &from, Spectrum *to) {$/;"	f	class:ImageTexture
convertOut	textures/imagemap.h	/^    static void convertOut(float from, float *to) {$/;"	f	class:ImageTexture
convertToLinear	3rdparty/openexr-1.7.0/ImfB44Compressor.cpp	/^convertToLinear (unsigned short s[16])$/;"	f	namespace:Imf::__anon15
convertToXdr	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^convertToXdr (OutputFile::Data *ofd,$/;"	f	namespace:Imf::__anon24
convertToXdr	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^convertToXdr (TiledOutputFile::Data *ofd,$/;"	f	namespace:Imf::__anon38
copy	3rdparty/openexr-1.7.0/ImfAttribute.h	/^TypedAttribute<T>::copy () const$/;"	f	class:Imf::TypedAttribute
copy	3rdparty/openexr-1.7.0/ImfOpaqueAttribute.cpp	/^OpaqueAttribute::copy () const$/;"	f	class:Imf::OpaqueAttribute
copyFromFrameBuffer	3rdparty/openexr-1.7.0/ImfMisc.cpp	/^copyFromFrameBuffer (char *& writePtr,$/;"	f	namespace:Imf
copyIntoFrameBuffer	3rdparty/openexr-1.7.0/ImfMisc.cpp	/^copyIntoFrameBuffer (const char *& readPtr,$/;"	f	namespace:Imf
copyPixels	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^OutputFile::copyPixels (InputFile &in)$/;"	f	class:Imf::OutputFile
copyPixels	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::copyPixels (InputFile &in)$/;"	f	class:Imf::TiledOutputFile
copyPixels	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::copyPixels (TiledInputFile &in)$/;"	f	class:Imf::TiledOutputFile
copyValueFrom	3rdparty/openexr-1.7.0/ImfAttribute.h	/^TypedAttribute<T>::copyValueFrom (const Attribute &other)$/;"	f	class:Imf::TypedAttribute
copyValueFrom	3rdparty/openexr-1.7.0/ImfOpaqueAttribute.cpp	/^OpaqueAttribute::copyValueFrom (const Attribute &other)$/;"	f	class:Imf::OpaqueAttribute
copy_block	3rdparty/zlib-1.2.5/trees.c	/^local void copy_block(s, buf, len, header)$/;"	f
copy_comments_ply	tools/ply.c	/^void copy_comments_ply(PlyFile *out_ply, PlyFile *in_ply)$/;"	f
copy_obj_info_ply	tools/ply.c	/^void copy_obj_info_ply(PlyFile *out_ply, PlyFile *in_ply)$/;"	f
copy_property	tools/ply.c	/^void copy_property(PlyProperty *dest, PlyProperty *src)$/;"	f
cos	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static T	cos   (T x)		{return ::cos (double(x));}$/;"	f	struct:Imath::Math
cos	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static float	cos   (float x)			{return ::cosf (x);}$/;"	f	struct:Imath::Math
cosFalloffStart	lights/spot.h	/^    float cosTotalWidth, cosFalloffStart;$/;"	m	class:SpotLight
cosGatherAngle	integrators/photonmap.h	/^    float cosGatherAngle;$/;"	m	class:PhotonIntegrator
cosMaxSampleAngleDifference	integrators/irradiancecache.cpp	/^    float minWeight, cosMaxSampleAngleDifference, sumWt;$/;"	m	struct:IrradProcess	file:
cosMaxSampleAngleDifference	integrators/irradiancecache.h	/^    float minWeight, cosMaxSampleAngleDifference;$/;"	m	class:IrradianceCacheIntegrator
cosTotalWidth	lights/projection.h	/^    float cosTotalWidth;$/;"	m	class:ProjectionLight
cosTotalWidth	lights/spot.h	/^    float cosTotalWidth, cosFalloffStart;$/;"	m	class:SpotLight
cosh	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static T	cosh  (T x)		{return ::cosh (double(x));}$/;"	f	struct:Imath::Math
cosh	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static float	cosh  (float x)			{return ::coshf (x);}$/;"	f	struct:Imath::Math
count	3rdparty/ilmbase-1.0.2/IlmThreadSemaphore.h	/^	    unsigned int count;$/;"	m	struct:IlmThread::Semaphore::sema_t
count	3rdparty/openexr-1.7.0/ImfKeyCode.cpp	/^KeyCode::count () const$/;"	f	class:Imf::KeyCode
count	3rdparty/tiff-3.9.4/tiffio.h	/^    int             count;$/;"	m	struct:_TIFFTagValue
count	core/montecarlo.h	/^    int count;$/;"	m	struct:Distribution1D
count	core/parallel.cpp	/^int Semaphore::count = 0;$/;"	m	class:Semaphore	file:
count	core/parallel.h	/^    static int count;$/;"	m	class:Semaphore
countFrequencies	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^countFrequencies (Int64 freq[HUF_ENCSIZE],$/;"	f	namespace:Imf::__anon20
count_external	tools/ply.h	/^  int count_external;           \/* file's count type *\/$/;"	m	struct:PlyProperty
count_internal	tools/ply.h	/^  int count_internal;           \/* program's count type *\/$/;"	m	struct:PlyProperty
count_offset	tools/ply.h	/^  int count_offset;             \/* offset byte for list count *\/$/;"	m	struct:PlyProperty
crc32	3rdparty/zlib-1.2.5/crc32.c	/^unsigned long ZEXPORT crc32(crc, buf, len)$/;"	f
crc32	3rdparty/zlib-1.2.5/zconf.h	/^#  define crc32 /;"	d
crc32_big	3rdparty/zlib-1.2.5/crc32.c	/^local unsigned long crc32_big(crc, buf, len)$/;"	f
crc32_combine	3rdparty/zlib-1.2.5/crc32.c	/^uLong ZEXPORT crc32_combine(crc1, crc2, len2)$/;"	f
crc32_combine	3rdparty/zlib-1.2.5/zconf.h	/^#  define crc32_combine /;"	d
crc32_combine	3rdparty/zlib-1.2.5/zlib.h	/^#  define crc32_combine /;"	d
crc32_combine64	3rdparty/zlib-1.2.5/crc32.c	/^uLong ZEXPORT crc32_combine64(crc1, crc2, len2)$/;"	f
crc32_combine64	3rdparty/zlib-1.2.5/zconf.h	/^#  define crc32_combine64 /;"	d
crc32_combine_	3rdparty/zlib-1.2.5/crc32.c	/^local uLong crc32_combine_(crc1, crc2, len2)$/;"	f
crc32_little	3rdparty/zlib-1.2.5/crc32.c	/^local unsigned long crc32_little(crc, buf, len)$/;"	f
crc_table	3rdparty/zlib-1.2.5/crc32.c	/^local unsigned long FAR crc_table[TBLS][256];$/;"	v
crc_table	3rdparty/zlib-1.2.5/crc32.h	/^local const unsigned long FAR crc_table[TBLS][256] =$/;"	v
crc_table_empty	3rdparty/zlib-1.2.5/crc32.c	/^local volatile int crc_table_empty = 1;$/;"	v
createAniso0_0	tools/bsdftest.cpp	/^void createAniso0_0(BSDF* bsdf)$/;"	f
createAniso10_10	tools/bsdftest.cpp	/^void createAniso10_10(BSDF* bsdf)$/;"	f
createAniso30_30	tools/bsdftest.cpp	/^void createAniso30_30(BSDF* bsdf)$/;"	f
createBlinn0	tools/bsdftest.cpp	/^void createBlinn0(BSDF* bsdf)$/;"	f
createBlinn05	tools/bsdftest.cpp	/^void createBlinn05(BSDF* bsdf)$/;"	f
createBlinn2	tools/bsdftest.cpp	/^void createBlinn2(BSDF* bsdf)$/;"	f
createBlinn30and0	tools/bsdftest.cpp	/^void createBlinn30and0(BSDF* bsdf)$/;"	f
createFresnelBlend0	tools/bsdftest.cpp	/^void createFresnelBlend0(BSDF* bsdf)$/;"	f
createFresnelBlend30	tools/bsdftest.cpp	/^void createFresnelBlend30(BSDF* bsdf)$/;"	f
createLambertian	tools/bsdftest.cpp	/^void createLambertian(BSDF* bsdf)$/;"	f
createOrenNayar0	tools/bsdftest.cpp	/^void createOrenNayar0(BSDF* bsdf)$/;"	f
createOrenNayar20	tools/bsdftest.cpp	/^void createOrenNayar20(BSDF* bsdf)$/;"	f
createPlastic	tools/bsdftest.cpp	/^void createPlastic(BSDF* bsdf)$/;"	f
createSubstrate	tools/bsdftest.cpp	/^void createSubstrate(BSDF* bsdf)$/;"	f
criticalSection	core/parallel.h	/^    CRITICAL_SECTION criticalSection;$/;"	m	class:Mutex
cropWindow	film/image.h	/^    float cropWindow[4];$/;"	m	class:ImageFilm
cross	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::cross (const Vec2 &v) const$/;"	f	class:Imath::Vec2
cross	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::cross (const Vec3 &v) const$/;"	f	class:Imath::Vec3
cs	core/parallel.h	/^    CRITICAL_SECTION cs;$/;"	m	class:RWMutex
ct_data	3rdparty/zlib-1.2.5/deflate.h	/^} FAR ct_data;$/;"	t	typeref:struct:ct_data_s
ct_data_s	3rdparty/zlib-1.2.5/deflate.h	/^typedef struct ct_data_s {$/;"	s
curBlockPos	core/memory.h	/^    uint32_t curBlockPos, blockSize;$/;"	m	class:MemoryArena
curSpace	core/progressreporter.h	/^    char *buf, *curSpace;$/;"	m	class:ProgressReporter
curTransform	core/api.cpp	/^static TransformSet curTransform;$/;"	v	file:
cur_array	core/pbrtparse.cpp	/^static ParamArray *cur_array = NULL;$/;"	v	file:
cur_paramlist	core/pbrtparse.cpp	/^static vector<ParamListItem> cur_paramlist;$/;"	v	file:
currentApiState	core/api.cpp	/^static int currentApiState = STATE_UNINITIALIZED;$/;"	v	file:
currentBlock	core/memory.h	/^    char *currentBlock;$/;"	m	class:MemoryArena
currentInstance	core/api.cpp	/^    vector<Reference<Primitive> > *currentInstance;$/;"	m	struct:RenderOptions	file:
currentNamedMaterial	core/api.cpp	/^    string currentNamedMaterial;$/;"	m	struct:GraphicsState	file:
currentPixelSample	renderers/metropolis.cpp	/^    int currentPixelSample;$/;"	m	class:MLTTask	file:
currentPosition	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    Int64		 currentPosition;       \/\/ current file position$/;"	m	struct:Imf::OutputFile::Data	file:
currentPosition	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    Int64	    currentPosition;        \/\/ file offset for current tile,$/;"	m	struct:Imf::TiledInputFile::Data	file:
currentPosition	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    Int64		currentPosition;	\/\/ current position in the file$/;"	m	struct:Imf::TiledOutputFile::Data	file:
currentSample	samplers/halton.h	/^    int wantedSamples, currentSample;$/;"	m	class:HaltonSampler
currentScanLine	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesOutputFile::currentScanLine () const$/;"	f	class:Imf::AcesOutputFile
currentScanLine	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    int			 currentScanLine;       \/\/ next scanline to be written$/;"	m	struct:Imf::OutputFile::Data	file:
currentScanLine	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^OutputFile::currentScanLine () const$/;"	f	class:Imf::OutputFile
currentScanLine	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaOutputFile::ToYca::currentScanLine () const$/;"	f	class:Imf::RgbaOutputFile::ToYca
currentScanLine	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaOutputFile::currentScanLine () const$/;"	f	class:Imf::RgbaOutputFile
currentStackTracer	3rdparty/ilmbase-1.0.2/IexBaseExc.cpp	/^StackTracer currentStackTracer = 0;$/;"	m	namespace:Iex::__anon1	file:
current_file	core/pbrtparse.cpp	/^string current_file;$/;"	v
current_file	tools/samplepat.cpp	/^string current_file; \/\/ ditto.$/;"	v
current_rules	tools/ply.h	/^  PlyPropRules *current_rules;  \/* current propagation rules *\/$/;"	m	struct:PlyFile
curruns	3rdparty/tiff-3.9.4/tif_fax3.c	/^	uint32*	curruns;		\/* runs for current line *\/$/;"	m	struct:__anon45	file:
cvtRational	3rdparty/tiff-3.9.4/tif_dirread.c	/^cvtRational(TIFF* tif, TIFFDirEntry* dir, uint32 num, uint32 denom, float* rv)$/;"	f	file:
cvtcmap	3rdparty/tiff-3.9.4/tif_getimage.c	/^cvtcmap(TIFFRGBAImage* img)$/;"	f	file:
cylinder	core/texture.h	/^    void cylinder(const Point &p, float *s, float *t) const {$/;"	f	class:CylindricalMapping2D
d	3rdparty/openexr-1.7.0/ImfRational.h	/^    unsigned int	d;		\/\/ denominator$/;"	m	class:Imf::Rational
d	3rdparty/tiff-3.9.4/tif_jpeg.c	/^		struct jpeg_decompress_struct d;$/;"	m	union:__anon48::__anon49	typeref:struct:__anon48::__anon49::jpeg_decompress_struct	file:
d	core/geometry.h	/^    Vector d;$/;"	m	class:Ray
d_Vrwb	3rdparty/tiff-3.9.4/tiffio.h	/^	uint32 d_Vrwb;$/;"	m	struct:__anon63
d_Vrwg	3rdparty/tiff-3.9.4/tiffio.h	/^	uint32 d_Vrwg;$/;"	m	struct:__anon63
d_Vrwr	3rdparty/tiff-3.9.4/tiffio.h	/^	uint32 d_Vrwr;			\/* Pixel values for ref. white *\/$/;"	m	struct:__anon63
d_Y0B	3rdparty/tiff-3.9.4/tiffio.h	/^	float d_Y0B;$/;"	m	struct:__anon63
d_Y0G	3rdparty/tiff-3.9.4/tiffio.h	/^	float d_Y0G;$/;"	m	struct:__anon63
d_Y0R	3rdparty/tiff-3.9.4/tiffio.h	/^	float d_Y0R;			\/* Residual light for black pixel *\/$/;"	m	struct:__anon63
d_YCB	3rdparty/tiff-3.9.4/tiffio.h	/^	float d_YCB;$/;"	m	struct:__anon63
d_YCG	3rdparty/tiff-3.9.4/tiffio.h	/^	float d_YCG;$/;"	m	struct:__anon63
d_YCR	3rdparty/tiff-3.9.4/tiffio.h	/^	float d_YCR;			\/* Light o\/p for reference white *\/$/;"	m	struct:__anon63
d_buf	3rdparty/zlib-1.2.5/deflate.h	/^    ushf *d_buf;$/;"	m	struct:internal_state
d_code	3rdparty/zlib-1.2.5/deflate.h	/^#define d_code(/;"	d
d_desc	3rdparty/zlib-1.2.5/deflate.h	/^    struct tree_desc_s d_desc;               \/* desc. for distance tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::tree_desc_s
d_gammaB	3rdparty/tiff-3.9.4/tiffio.h	/^	float d_gammaB;$/;"	m	struct:__anon63
d_gammaG	3rdparty/tiff-3.9.4/tiffio.h	/^	float d_gammaG;$/;"	m	struct:__anon63
d_gammaR	3rdparty/tiff-3.9.4/tiffio.h	/^	float d_gammaR;			\/* Gamma values for the three guns *\/$/;"	m	struct:__anon63
d_mat	3rdparty/tiff-3.9.4/tiffio.h	/^	float d_mat[3][3]; 		\/* XYZ -> luminance matrix *\/$/;"	m	struct:__anon63
dad	3rdparty/zlib-1.2.5/deflate.h	/^        ush  dad;        \/* father node in Huffman tree *\/$/;"	m	union:ct_data_s::__anon73
data	3rdparty/tiff-3.9.4/tif_fax3.c	/^	uint32	data;			\/* current i\/o byte\/word *\/$/;"	m	struct:__anon45	file:
data	3rdparty/tiff-3.9.4/tiffiop.h	/^    void      *data;$/;"	m	struct:client_info
data	core/memory.h	/^    T *data;$/;"	m	class:BlockedArray
data	core/octree.h	/^    vector<NodeData> data;$/;"	m	struct:OctNode
data	core/paramset.h	/^    T *data;$/;"	m	struct:ParamSetItem
dataPtr	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    const char *	dataPtr;$/;"	m	struct:Imf::__anon23::LineBuffer	file:
dataPtr	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    const char *	dataPtr;$/;"	m	struct:Imf::__anon37::TileBuffer	file:
dataSize	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    int			dataSize;$/;"	m	struct:Imf::__anon23::LineBuffer	file:
dataSize	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    int			dataSize;$/;"	m	struct:Imf::__anon31::LineBuffer	file:
dataSize	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    int			dataSize;$/;"	m	struct:Imf::__anon34::TileBuffer	file:
dataSize	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    int			dataSize;$/;"	m	struct:Imf::__anon37::TileBuffer	file:
dataWindow	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesInputFile::dataWindow () const$/;"	f	class:Imf::AcesInputFile
dataWindow	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesOutputFile::dataWindow () const$/;"	f	class:Imf::AcesOutputFile
dataWindow	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::dataWindow () const$/;"	f	class:Imf::Header
dataWindow	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::dataWindow ()$/;"	f	class:Imf::Header
dataWindow	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaInputFile::dataWindow () const$/;"	f	class:Imf::RgbaInputFile
dataWindow	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaOutputFile::dataWindow () const$/;"	f	class:Imf::RgbaOutputFile
dataWindow	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::dataWindow () const$/;"	f	class:Imf::TiledRgbaInputFile
dataWindow	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::dataWindow () const$/;"	f	class:Imf::TiledRgbaOutputFile
dataWindowForFace	3rdparty/openexr-1.7.0/ImfEnvmap.cpp	/^dataWindowForFace (CubeMapFace face, const Box2i &dataWindow)$/;"	f	namespace:Imf::CubeMap
dataWindowForLevel	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::dataWindowForLevel (int l) const$/;"	f	class:Imf::TiledInputFile
dataWindowForLevel	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::dataWindowForLevel (int lx, int ly) const$/;"	f	class:Imf::TiledInputFile
dataWindowForLevel	3rdparty/openexr-1.7.0/ImfTiledMisc.cpp	/^dataWindowForLevel (const TileDescription &tileDesc,$/;"	f	namespace:Imf
dataWindowForLevel	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::dataWindowForLevel (int l) const$/;"	f	class:Imf::TiledOutputFile
dataWindowForLevel	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::dataWindowForLevel (int lx, int ly) const$/;"	f	class:Imf::TiledOutputFile
dataWindowForLevel	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::dataWindowForLevel (int l) const$/;"	f	class:Imf::TiledRgbaInputFile
dataWindowForLevel	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::dataWindowForLevel (int lx, int ly) const$/;"	f	class:Imf::TiledRgbaInputFile
dataWindowForLevel	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::dataWindowForLevel (int l) const$/;"	f	class:Imf::TiledRgbaOutputFile
dataWindowForLevel	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::dataWindowForLevel (int lx, int ly) const$/;"	f	class:Imf::TiledRgbaOutputFile
dataWindowForTile	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::dataWindowForTile (int dx, int dy, int l) const$/;"	f	class:Imf::TiledInputFile
dataWindowForTile	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::dataWindowForTile (int dx, int dy, int lx, int ly) const$/;"	f	class:Imf::TiledInputFile
dataWindowForTile	3rdparty/openexr-1.7.0/ImfTiledMisc.cpp	/^dataWindowForTile (const TileDescription &tileDesc,$/;"	f	namespace:Imf
dataWindowForTile	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::dataWindowForTile (int dx, int dy, int l) const$/;"	f	class:Imf::TiledOutputFile
dataWindowForTile	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::dataWindowForTile (int dx, int dy, int lx, int ly) const$/;"	f	class:Imf::TiledOutputFile
dataWindowForTile	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::dataWindowForTile (int dx, int dy, int l) const$/;"	f	class:Imf::TiledRgbaInputFile
dataWindowForTile	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::dataWindowForTile (int dx, int dy, int lx, int ly) const$/;"	f	class:Imf::TiledRgbaInputFile
dataWindowForTile	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::dataWindowForTile (int dx, int dy, int l) const$/;"	f	class:Imf::TiledRgbaOutputFile
dataWindowForTile	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::dataWindowForTile (int dx, int dy, int lx, int ly) const$/;"	f	class:Imf::TiledRgbaOutputFile
data_type	3rdparty/zlib-1.2.5/zlib.h	/^    int     data_type;  \/* best guess about the data type: binary or text *\/$/;"	m	struct:z_stream_s
dctable	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8* dctable[4];$/;"	m	struct:__anon55	file:
dctable_offset	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	toff_t dctable_offset[3];$/;"	m	struct:__anon55	file:
dctable_offset_count	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8 dctable_offset_count;$/;"	m	struct:__anon55	file:
dec_bitsleft	3rdparty/tiff-3.9.4/tif_lzw.c	/^	long	dec_bitsleft;		\/* available bits in raw data *\/$/;"	m	struct:__anon52	file:
dec_codep	3rdparty/tiff-3.9.4/tif_lzw.c	/^	code_t*	dec_codep;		\/* current recognized code *\/$/;"	m	struct:__anon52	file:
dec_codetab	3rdparty/tiff-3.9.4/tif_lzw.c	/^	code_t*	dec_codetab;		\/* kept separate for small machines *\/$/;"	m	struct:__anon52	file:
dec_decode	3rdparty/tiff-3.9.4/tif_lzw.c	/^	decodeFunc dec_decode;		\/* regular or backwards compatible *\/$/;"	m	struct:__anon52	file:
dec_free_entp	3rdparty/tiff-3.9.4/tif_lzw.c	/^	code_t*	dec_free_entp;		\/* next free entry *\/$/;"	m	struct:__anon52	file:
dec_maxcodep	3rdparty/tiff-3.9.4/tif_lzw.c	/^	code_t*	dec_maxcodep;		\/* max available entry *\/$/;"	m	struct:__anon52	file:
dec_nbitsmask	3rdparty/tiff-3.9.4/tif_lzw.c	/^	long	dec_nbitsmask;		\/* lzw_nbits 1 bits, right adjusted *\/$/;"	m	struct:__anon52	file:
dec_oldcodep	3rdparty/tiff-3.9.4/tif_lzw.c	/^	code_t*	dec_oldcodep;		\/* previously recognized code *\/$/;"	m	struct:__anon52	file:
dec_restart	3rdparty/tiff-3.9.4/tif_lzw.c	/^	long	dec_restart;		\/* restart count *\/$/;"	m	struct:__anon52	file:
decimateChromaHoriz	3rdparty/openexr-1.7.0/ImfRgbaYca.cpp	/^decimateChromaHoriz (int n,$/;"	f	namespace:Imf::RgbaYca
decimateChromaVert	3rdparty/openexr-1.7.0/ImfRgbaYca.cpp	/^decimateChromaVert (int n,$/;"	f	namespace:Imf::RgbaYca
decimateChromaVertAndWriteScanLine	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaOutputFile::ToYca::decimateChromaVertAndWriteScanLine ()$/;"	f	class:Imf::RgbaOutputFile::ToYca
decodeFunc	3rdparty/tiff-3.9.4/tif_lzw.c	/^typedef	int (*decodeFunc)(TIFF*, tidata_t, tsize_t, tsample_t);$/;"	t	file:
decodepfunc	3rdparty/tiff-3.9.4/tif_predict.h	/^ 	TIFFPostMethod  decodepfunc;	\/* horizontal accumulator *\/$/;"	m	struct:__anon58
decoderow	3rdparty/tiff-3.9.4/tif_predict.h	/^ 	TIFFCodeMethod  decoderow;	\/* parent codec encode\/decode row *\/$/;"	m	struct:__anon58
decodestrip	3rdparty/tiff-3.9.4/tif_predict.h	/^ 	TIFFCodeMethod  decodestrip;	\/* parent codec encode\/decode strip *\/$/;"	m	struct:__anon58
decodetile	3rdparty/tiff-3.9.4/tif_predict.h	/^ 	TIFFCodeMethod  decodetile;	\/* parent codec encode\/decode tile *\/ $/;"	m	struct:__anon58
defaultFormat	3rdparty/openexr-1.7.0/ImfMisc.cpp	/^defaultFormat (Compressor * compressor)$/;"	f	namespace:Imf
defaultViewName	3rdparty/openexr-1.7.0/ImfMultiView.cpp	/^defaultViewName (const StringVector &multiView)$/;"	f	namespace:Imf
deflate	3rdparty/zlib-1.2.5/deflate.c	/^int ZEXPORT deflate (strm, flush)$/;"	f
deflate	3rdparty/zlib-1.2.5/zconf.h	/^#  define deflate /;"	d
deflateBound	3rdparty/zlib-1.2.5/deflate.c	/^uLong ZEXPORT deflateBound(strm, sourceLen)$/;"	f
deflateBound	3rdparty/zlib-1.2.5/zconf.h	/^#  define deflateBound /;"	d
deflateCopy	3rdparty/zlib-1.2.5/deflate.c	/^int ZEXPORT deflateCopy (dest, source)$/;"	f
deflateCopy	3rdparty/zlib-1.2.5/zconf.h	/^#  define deflateCopy /;"	d
deflateEnd	3rdparty/zlib-1.2.5/deflate.c	/^int ZEXPORT deflateEnd (strm)$/;"	f
deflateEnd	3rdparty/zlib-1.2.5/zconf.h	/^#  define deflateEnd /;"	d
deflateInit	3rdparty/zlib-1.2.5/zlib.h	/^#define deflateInit(/;"	d
deflateInit2	3rdparty/zlib-1.2.5/zlib.h	/^#define deflateInit2(/;"	d
deflateInit2_	3rdparty/zlib-1.2.5/deflate.c	/^int ZEXPORT deflateInit2_(strm, level, method, windowBits, memLevel, strategy,$/;"	f
deflateInit2_	3rdparty/zlib-1.2.5/zconf.h	/^#  define deflateInit2_ /;"	d
deflateInit_	3rdparty/zlib-1.2.5/deflate.c	/^int ZEXPORT deflateInit_(strm, level, version, stream_size)$/;"	f
deflateInit_	3rdparty/zlib-1.2.5/zconf.h	/^#  define deflateInit_ /;"	d
deflateParams	3rdparty/zlib-1.2.5/deflate.c	/^int ZEXPORT deflateParams(strm, level, strategy)$/;"	f
deflateParams	3rdparty/zlib-1.2.5/zconf.h	/^#  define deflateParams /;"	d
deflatePrime	3rdparty/zlib-1.2.5/deflate.c	/^int ZEXPORT deflatePrime (strm, bits, value)$/;"	f
deflatePrime	3rdparty/zlib-1.2.5/zconf.h	/^#  define deflatePrime /;"	d
deflateReset	3rdparty/zlib-1.2.5/deflate.c	/^int ZEXPORT deflateReset (strm)$/;"	f
deflateReset	3rdparty/zlib-1.2.5/zconf.h	/^#  define deflateReset /;"	d
deflateSetDictionary	3rdparty/zlib-1.2.5/deflate.c	/^int ZEXPORT deflateSetDictionary (strm, dictionary, dictLength)$/;"	f
deflateSetDictionary	3rdparty/zlib-1.2.5/zconf.h	/^#  define deflateSetDictionary /;"	d
deflateSetHeader	3rdparty/zlib-1.2.5/deflate.c	/^int ZEXPORT deflateSetHeader (strm, head)$/;"	f
deflateSetHeader	3rdparty/zlib-1.2.5/zconf.h	/^#  define deflateSetHeader /;"	d
deflateTune	3rdparty/zlib-1.2.5/deflate.c	/^int ZEXPORT deflateTune(strm, good_length, max_lazy, nice_length, max_chain)$/;"	f
deflateTune	3rdparty/zlib-1.2.5/zconf.h	/^#  define deflateTune /;"	d
deflate_copyright	3rdparty/zlib-1.2.5/deflate.c	/^const char deflate_copyright[] =$/;"	v
deflate_copyright	3rdparty/zlib-1.2.5/zconf.h	/^#  define deflate_copyright /;"	d
deflate_fast	3rdparty/zlib-1.2.5/deflate.c	/^local block_state deflate_fast(s, flush)$/;"	f
deflate_huff	3rdparty/zlib-1.2.5/deflate.c	/^local block_state deflate_huff(s, flush)$/;"	f
deflate_rle	3rdparty/zlib-1.2.5/deflate.c	/^local block_state deflate_rle(s, flush)$/;"	f
deflate_slow	3rdparty/zlib-1.2.5/deflate.c	/^local block_state deflate_slow(s, flush)$/;"	f
deflate_state	3rdparty/zlib-1.2.5/deflate.h	/^} FAR deflate_state;$/;"	t	typeref:struct:internal_state
deflate_stored	3rdparty/zlib-1.2.5/deflate.c	/^local block_state deflate_stored(s, flush)$/;"	f
defsparent	3rdparty/tiff-3.9.4/tif_jpeg.c	/^	TIFFStripMethod	defsparent;	\/* super-class method *\/$/;"	m	struct:__anon48	file:
deftparent	3rdparty/tiff-3.9.4/tif_jpeg.c	/^	TIFFTileMethod	deftparent;	\/* super-class method *\/$/;"	m	struct:__anon48	file:
deleteCachedBuffer	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^InputFile::Data::deleteCachedBuffer()$/;"	f	class:Imf::InputFile::Data
deleteStream	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^    bool		deleteStream;$/;"	m	struct:Imf::InputFile::Data	file:
deleteStream	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    bool		 deleteStream;$/;"	m	struct:Imf::OutputFile::Data	file:
deleteStream	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    bool	    deleteStream;	    \/\/ should we delete the stream$/;"	m	struct:Imf::TiledInputFile::Data	file:
deleteStream	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    bool		deleteStream;$/;"	m	struct:Imf::TiledOutputFile::Data	file:
denom	3rdparty/openexr-1.7.0/ImfRational.cpp	/^denom (double x, double e)$/;"	f	namespace:Imf::__anon27
denorm_min	3rdparty/ilmbase-1.0.2/halfLimits.h	/^    static half denorm_min () throw () {return HALF_MIN;}$/;"	f	class:std::numeric_limits
density	volumes/volumegrid.h	/^    float *density;$/;"	m	class:VolumeGridDensity
depth	3rdparty/zlib-1.2.5/deflate.h	/^    uch depth[2*L_CODES+1];$/;"	m	struct:internal_state
depth	core/geometry.h	/^    int depth;$/;"	m	class:Ray
desaturate	3rdparty/openexr-1.7.0/ImfRgbaYca.cpp	/^desaturate (const Rgba &in, float f, const V3f &yw, Rgba &out)$/;"	f	namespace:Imf::RgbaYca::__anon29
describe_element_ply	tools/ply.c	/^void describe_element_ply($/;"	f
describe_other_elements_ply	tools/ply.c	/^void describe_other_elements_ply ($/;"	f
describe_other_properties_ply	tools/ply.c	/^void describe_other_properties_ply($/;"	f
describe_property_ply	tools/ply.c	/^void describe_property_ply($/;"	f
dest	3rdparty/tiff-3.9.4/tif_jpeg.c	/^	jpeg_destination_mgr dest;	\/* data dest for compression *\/$/;"	m	struct:__anon48	file:
detect_data_type	3rdparty/zlib-1.2.5/trees.c	/^local int detect_data_type(s)$/;"	f
dfact	core/sh.cpp	/^static float dfact(float v) {$/;"	f	file:
dg	core/intersection.h	/^    DifferentialGeometry dg;$/;"	m	struct:Intersection
dgShading	core/reflection.h	/^    const DifferentialGeometry dgShading;$/;"	m	class:BSDF
dictId	3rdparty/zlib-1.2.5/example.c	/^uLong dictId; \/* Adler32 value of the dictionary *\/$/;"	v
dictionary	3rdparty/zlib-1.2.5/example.c	/^const char dictionary[] = "hello";$/;"	v
diffuse	tools/obj2pbrt.cpp	/^    float diffuse[3];$/;"	m	struct:tinyobj::__anon90	file:
diffuse_texname	tools/obj2pbrt.cpp	/^    std::string diffuse_texname;$/;"	m	struct:tinyobj::__anon90	file:
digits	3rdparty/ilmbase-1.0.2/halfLimits.h	/^    static const int digits = HALF_MANT_DIG;$/;"	m	class:std::numeric_limits
digits10	3rdparty/ilmbase-1.0.2/halfLimits.h	/^    static const int digits10 = HALF_DIG;$/;"	m	class:std::numeric_limits
dim	accelerators/bvh.cpp	/^    int dim;$/;"	m	struct:ComparePoints	file:
dim	accelerators/bvh.cpp	/^    int dim;$/;"	m	struct:CompareToMid	file:
dim	accelerators/bvh.cpp	/^    int splitBucket, nBuckets, dim;$/;"	m	struct:CompareToBucket	file:
dimensions	3rdparty/ilmbase-1.0.2/ImathColor.h	/^    static unsigned int	dimensions() {return 4;}$/;"	f	class:Imath::Color4
dimensions	3rdparty/ilmbase-1.0.2/ImathShear.h	/^    static unsigned int	dimensions() {return 6;}$/;"	f	class:Imath::Shear6
dimensions	3rdparty/ilmbase-1.0.2/ImathVec.h	/^    static unsigned int	dimensions() {return 2;}$/;"	f	class:Imath::Vec2
dimensions	3rdparty/ilmbase-1.0.2/ImathVec.h	/^    static unsigned int	dimensions() {return 3;}$/;"	f	class:Imath::Vec3
dimensions	3rdparty/ilmbase-1.0.2/ImathVec.h	/^    static unsigned int	dimensions() {return 4;}$/;"	f	class:Imath::Vec4
dims	core/montecarlo.h	/^    uint32_t dims;$/;"	m	class:PermutedHalton
dir	3rdparty/ilmbase-1.0.2/ImathLine.h	/^    Vec3<T>			dir;$/;"	m	class:Imath::Line3
dirOffset	core/reflection.h	/^    int nSamples, componentOffset, dirOffset;$/;"	m	struct:BSDFSampleOffsets
direct	3rdparty/zlib-1.2.5/gzguts.h	/^    int direct;             \/* true if last read direct, false if gzip *\/$/;"	m	struct:__anon74
directLighting	renderers/metropolis.h	/^    DirectLightingIntegrator *directLighting;$/;"	m	class:MetropolisRenderer
directMap	integrators/photonmap.cpp	/^    KdTree<Photon> *directMap, *indirectMap, *causticMap;$/;"	m	class:ComputeRadianceTask	file:
directPhotons	integrators/photonmap.cpp	/^    vector<Photon> &directPhotons, &indirectPhotons, &causticPhotons;$/;"	m	class:PhotonShootingTask	file:
direction	3rdparty/openexr-1.7.0/ImfEnvmap.cpp	/^direction (CubeMapFace face, const Box2i &dataWindow, const V2f &positionInFace)$/;"	f	namespace:Imf::CubeMap
direction	3rdparty/openexr-1.7.0/ImfEnvmap.cpp	/^direction (const Box2i &dataWindow, const V2f &pixelPosition)$/;"	f	namespace:Imf::LatLongMap
display	3rdparty/tiff-3.9.4/tiffio.h	/^	TIFFDisplay display;$/;"	m	struct:__anon65
displayWindow	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesInputFile::displayWindow () const$/;"	f	class:Imf::AcesInputFile
displayWindow	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesOutputFile::displayWindow () const$/;"	f	class:Imf::AcesOutputFile
displayWindow	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::displayWindow () const$/;"	f	class:Imf::Header
displayWindow	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::displayWindow ()$/;"	f	class:Imf::Header
displayWindow	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaInputFile::displayWindow () const$/;"	f	class:Imf::RgbaInputFile
displayWindow	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaOutputFile::displayWindow () const$/;"	f	class:Imf::RgbaOutputFile
displayWindow	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::displayWindow () const$/;"	f	class:Imf::TiledRgbaInputFile
displayWindow	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::displayWindow () const$/;"	f	class:Imf::TiledRgbaOutputFile
display_sRGB	3rdparty/tiff-3.9.4/tif_getimage.c	/^TIFFDisplay display_sRGB = {$/;"	v
dissolve	tools/obj2pbrt.cpp	/^    float dissolve;           \/\/ 1 == opaque; 0 == fully transparent$/;"	m	struct:tinyobj::__anon90	file:
distance	3rdparty/ilmbase-1.0.2/ImathPlane.h	/^    T				distance;$/;"	m	class:Imath::Plane3
distanceSquared	integrators/photonmap.cpp	/^    float distanceSquared;$/;"	m	struct:ClosePhoton	file:
distanceTo	3rdparty/ilmbase-1.0.2/ImathLine.h	/^inline T Line3<T>::distanceTo(const Line3<T>& line) const$/;"	f	class:Imath::Line3
distanceTo	3rdparty/ilmbase-1.0.2/ImathLine.h	/^inline T Line3<T>::distanceTo(const Vec3<T>& point) const$/;"	f	class:Imath::Line3
distanceTo	3rdparty/ilmbase-1.0.2/ImathPlane.h	/^inline T Plane3<T>::distanceTo(const Vec3<T> &point) const$/;"	f	class:Imath::Plane3
distbits	3rdparty/zlib-1.2.5/inflate.h	/^    unsigned distbits;          \/* index bits for distcode *\/$/;"	m	struct:inflate_state
distcode	3rdparty/zlib-1.2.5/inflate.h	/^    code const FAR *distcode;   \/* starting table for distance codes *\/$/;"	m	struct:inflate_state
distfix	3rdparty/zlib-1.2.5/inffixed.h	/^    static const code distfix[32] = {$/;"	v
distribution	core/reflection.h	/^    MicrofacetDistribution *distribution;$/;"	m	class:FresnelBlend
distribution	core/reflection.h	/^    MicrofacetDistribution *distribution;$/;"	m	class:Microfacet
distribution	lights/infinite.h	/^    Distribution2D *distribution;$/;"	m	class:InfiniteAreaLight
divfact	core/sh.cpp	/^static inline float divfact(int a, int b) {$/;"	f	file:
divp	3rdparty/ilmbase-1.0.2/ImathFun.h	/^divp (int x, int y)$/;"	f	namespace:Imath
divs	3rdparty/ilmbase-1.0.2/ImathFun.h	/^divs (int x, int y)$/;"	f	namespace:Imath
dl	3rdparty/zlib-1.2.5/deflate.h	/^    } dl;$/;"	m	struct:ct_data_s	typeref:union:ct_data_s::__anon73
dmax	3rdparty/zlib-1.2.5/inflate.h	/^    unsigned dmax;              \/* zlib header max distance (INFLATE_STRICT) *\/$/;"	m	struct:inflate_state
dndu	core/diffgeom.h	/^    Normal dndu, dndv;$/;"	m	struct:DifferentialGeometry
dndv	core/diffgeom.h	/^    Normal dndu, dndv;$/;"	m	struct:DifferentialGeometry
doTrilinear	core/mipmap.h	/^    bool doTrilinear;$/;"	m	class:MIPMap
doTrilinear	textures/imagemap.h	/^    bool doTrilinear;$/;"	m	struct:TexInfo
done	3rdparty/zlib-1.2.5/zlib.h	/^    int     done;       \/* true when done reading gzip header (not used$/;"	m	struct:gz_header_s
dot	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::dot (const Vec2 &v) const$/;"	f	class:Imath::Vec2
dot	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::dot (const Vec3 &v) const$/;"	f	class:Imath::Vec3
dot	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::dot (const Vec4 &v) const$/;"	f	class:Imath::Vec4
dpdu	core/diffgeom.h	/^    Vector dpdu, dpdv;$/;"	m	struct:DifferentialGeometry
dpdv	core/diffgeom.h	/^    Vector dpdu, dpdv;$/;"	m	struct:DifferentialGeometry
dpdx	core/diffgeom.h	/^    mutable Vector dpdx, dpdy;$/;"	m	struct:DifferentialGeometry
dpdy	core/diffgeom.h	/^    mutable Vector dpdx, dpdy;$/;"	m	struct:DifferentialGeometry
drand48	3rdparty/ilmbase-1.0.2/ImathRandom.cpp	/^drand48 ()$/;"	f	namespace:Imath
drand48	tools/ply.c	/^#define drand48(/;"	d	file:
dropFrame	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^TimeCode::dropFrame () const$/;"	f	class:Imf::TimeCode
ds	core/texture.h	/^    const float ds, dt;$/;"	m	class:PlanarMapping2D
ds_buffer	3rdparty/tiff-3.9.4/tif_jpeg.c	/^	JSAMPARRAY	ds_buffer[MAX_COMPONENTS];$/;"	m	struct:__anon48	file:
dt	core/texture.h	/^    const float ds, dt;$/;"	m	class:PlanarMapping2D
du	core/texture.h	/^    float su, sv, du, dv;$/;"	m	class:UVMapping2D
dudx	core/diffgeom.h	/^    mutable float dudx, dvdx, dudy, dvdy;$/;"	m	struct:DifferentialGeometry
dudy	core/diffgeom.h	/^    mutable float dudx, dvdx, dudy, dvdy;$/;"	m	struct:DifferentialGeometry
dummy	3rdparty/zlib-1.2.5/deflate.c	/^struct static_tree_desc_s {int dummy;}; \/* for buggy compilers *\/$/;"	m	struct:static_tree_desc_s	file:
dummy	3rdparty/zlib-1.2.5/zlib.h	/^    struct internal_state {int dummy;};$/;"	m	struct:internal_state
dummy	3rdparty/zlib-1.2.5/zutil.c	/^struct internal_state      {int dummy;}; \/* for buggy compilers *\/$/;"	m	struct:internal_state	file:
duplicateLastBuffer	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaOutputFile::ToYca::duplicateLastBuffer ()$/;"	f	class:Imf::RgbaOutputFile::ToYca
duplicateSecondToLastBuffer	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaOutputFile::ToYca::duplicateSecondToLastBuffer ()$/;"	f	class:Imf::RgbaOutputFile::ToYca
dv	core/texture.h	/^    float su, sv, du, dv;$/;"	m	class:UVMapping2D
dvdx	core/diffgeom.h	/^    mutable float dudx, dvdx, dudy, dvdy;$/;"	m	struct:DifferentialGeometry
dvdy	core/diffgeom.h	/^    mutable float dudx, dvdx, dudy, dvdy;$/;"	m	struct:DifferentialGeometry
dx	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    int			dx;$/;"	m	struct:Imf::__anon34::TileBuffer	file:
dx	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    int		dx;$/;"	m	struct:Imf::__anon37::TileCoord	file:
dx	renderers/metropolis.cpp	/^    float dx, dy;$/;"	m	class:MLTTask	file:
dxCamera	cameras/orthographic.h	/^    Vector dxCamera, dyCamera;$/;"	m	class:OrthoCamera
dxCamera	cameras/perspective.h	/^    Vector dxCamera, dyCamera;$/;"	m	class:PerspectiveCamera
dy	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    int			dy;$/;"	m	struct:Imf::__anon34::TileBuffer	file:
dy	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    int		dy;$/;"	m	struct:Imf::__anon37::TileCoord	file:
dy	renderers/metropolis.cpp	/^    float dx, dy;$/;"	m	class:MLTTask	file:
dyCamera	cameras/orthographic.h	/^    Vector dxCamera, dyCamera;$/;"	m	class:OrthoCamera
dyCamera	cameras/perspective.h	/^    Vector dxCamera, dyCamera;$/;"	m	class:PerspectiveCamera
dyn_dtree	3rdparty/zlib-1.2.5/deflate.h	/^    struct ct_data_s dyn_dtree[2*D_CODES+1]; \/* distance tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::ct_data_s
dyn_ltree	3rdparty/zlib-1.2.5/deflate.h	/^    struct ct_data_s dyn_ltree[HEAP_SIZE];   \/* literal and length tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::ct_data_s
dyn_tree	3rdparty/zlib-1.2.5/deflate.h	/^    ct_data *dyn_tree;           \/* the dynamic tree *\/$/;"	m	struct:tree_desc_s
e	core/reflection.h	/^    float e;$/;"	m	class:BSSRDF
elapsed	core/timer.h	/^    double time0, elapsed;$/;"	m	class:Timer
elem	tools/ply.h	/^  PlyElement *elem;      \/* element whose rules we are making *\/$/;"	m	struct:PlyPropRules
elem_count	tools/ply.h	/^  int elem_count;              \/* count of instances of each element *\/$/;"	m	struct:OtherElem
elem_name	tools/ply.h	/^  char *elem_name;             \/* names of other elements *\/$/;"	m	struct:OtherElem
elem_names	tools/ply2pbrt.c	/^char *elem_names[] = { \/* list of the elements in the object *\/$/;"	v
element	tools/ply.h	/^  char *element;               \/* name of element that rule applies to *\/$/;"	m	struct:PlyRuleList
element_count_ply	tools/ply.c	/^void element_count_ply($/;"	f
element_layout_ply	tools/ply.c	/^void element_layout_ply($/;"	f
element_size	core/pbrtparse.cpp	/^    int element_size;$/;"	m	struct:ParamArray	file:
elems	3rdparty/zlib-1.2.5/trees.c	/^    int     elems;               \/* max number of elements in the tree *\/$/;"	m	struct:static_tree_desc_s	file:
elems	tools/ply.h	/^  PlyElement **elems;           \/* list of elements *\/$/;"	m	struct:PlyFile
emission	tools/obj2pbrt.cpp	/^    float emission[3];$/;"	m	struct:tinyobj::__anon90	file:
emptyBonus	accelerators/kdtreeaccel.h	/^    float emptyBonus;$/;"	m	class:KdTreeAccel
enc_checkpoint	3rdparty/tiff-3.9.4/tif_lzw.c	/^	long	enc_checkpoint;		\/* point at which to clear table *\/$/;"	m	struct:__anon52	file:
enc_hashtab	3rdparty/tiff-3.9.4/tif_lzw.c	/^	hash_t*	enc_hashtab;		\/* kept separate for small machines *\/$/;"	m	struct:__anon52	file:
enc_incount	3rdparty/tiff-3.9.4/tif_lzw.c	/^	long	enc_incount;		\/* (input) data bytes encoded *\/$/;"	m	struct:__anon52	file:
enc_oldcode	3rdparty/tiff-3.9.4/tif_lzw.c	/^	int	enc_oldcode;		\/* last code encountered *\/$/;"	m	struct:__anon52	file:
enc_outcount	3rdparty/tiff-3.9.4/tif_lzw.c	/^	long	enc_outcount;		\/* encoded (output) bytes *\/$/;"	m	struct:__anon52	file:
enc_ratio	3rdparty/tiff-3.9.4/tif_lzw.c	/^	long	enc_ratio;		\/* current compression ratio *\/$/;"	m	struct:__anon52	file:
enc_rawlimit	3rdparty/tiff-3.9.4/tif_lzw.c	/^	tidata_t enc_rawlimit;		\/* bound on tif_rawdata buffer *\/$/;"	m	struct:__anon52	file:
encode_meth	3rdparty/tiff-3.9.4/tif_luv.c	/^	int			encode_meth;	\/* encoding method *\/$/;"	m	struct:logLuvState	file:
encodepfunc	3rdparty/tiff-3.9.4/tif_predict.h	/^ 	TIFFPostMethod  encodepfunc;	\/* horizontal differencer *\/$/;"	m	struct:__anon58
encoderow	3rdparty/tiff-3.9.4/tif_predict.h	/^ 	TIFFCodeMethod  encoderow;	\/* parent codec encode\/decode row *\/$/;"	m	struct:__anon58
encodestrip	3rdparty/tiff-3.9.4/tif_predict.h	/^ 	TIFFCodeMethod  encodestrip;	\/* parent codec encode\/decode strip *\/$/;"	m	struct:__anon58
encodetile	3rdparty/tiff-3.9.4/tif_predict.h	/^ 	TIFFCodeMethod  encodetile;	\/* parent codec encode\/decode tile *\/ $/;"	m	struct:__anon58
end	3rdparty/openexr-1.7.0/ImfB44Compressor.cpp	/^    unsigned short *	end;$/;"	m	struct:Imf::B44Compressor::ChannelData	file:
end	3rdparty/openexr-1.7.0/ImfChannelList.cpp	/^ChannelList::end () const$/;"	f	class:Imf::ChannelList
end	3rdparty/openexr-1.7.0/ImfChannelList.cpp	/^ChannelList::end ()$/;"	f	class:Imf::ChannelList
end	3rdparty/openexr-1.7.0/ImfFrameBuffer.cpp	/^FrameBuffer::end () const$/;"	f	class:Imf::FrameBuffer
end	3rdparty/openexr-1.7.0/ImfFrameBuffer.cpp	/^FrameBuffer::end ()$/;"	f	class:Imf::FrameBuffer
end	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::end () const$/;"	f	class:Imf::Header
end	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::end ()$/;"	f	class:Imf::Header
end	3rdparty/openexr-1.7.0/ImfPizCompressor.cpp	/^    unsigned short *	end;$/;"	m	struct:Imf::PizCompressor::ChannelData	file:
endOfLineBufferData	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    char *		endOfLineBufferData;$/;"	m	struct:Imf::__anon23::LineBuffer	file:
endTime	core/transform.h	/^    const float startTime, endTime;$/;"	m	class:AnimatedTransform
endTransform	core/transform.h	/^    const Transform *startTransform, *endTransform;$/;"	m	class:AnimatedTransform
eof	3rdparty/zlib-1.2.5/gzguts.h	/^    int eof;                \/* true if end of input file reached *\/$/;"	m	struct:__anon74
epsilon	3rdparty/ilmbase-1.0.2/ImathHalfLimits.h	/^    static float		epsilon()	{return HALF_EPSILON;}$/;"	f	struct:Imath::limits
epsilon	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static char			epsilon()	{return 1;}$/;"	f	struct:Imath::limits
epsilon	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static double		epsilon()	{return DBL_EPSILON;}$/;"	f	struct:Imath::limits
epsilon	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static float		epsilon()	{return FLT_EPSILON;}$/;"	f	struct:Imath::limits
epsilon	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static int			epsilon()	{return 1;}$/;"	f	struct:Imath::limits
epsilon	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static long			epsilon()	{return 1;}$/;"	f	struct:Imath::limits
epsilon	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static long double		epsilon()	{return LDBL_EPSILON;}$/;"	f	struct:Imath::limits
epsilon	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static short		epsilon()	{return 1;}$/;"	f	struct:Imath::limits
epsilon	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static signed char		epsilon()	{return 1;}$/;"	f	struct:Imath::limits
epsilon	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static unsigned char	epsilon()	{return 1;}$/;"	f	struct:Imath::limits
epsilon	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static unsigned int		epsilon()	{return 1;}$/;"	f	struct:Imath::limits
epsilon	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static unsigned long	epsilon()	{return 1;}$/;"	f	struct:Imath::limits
epsilon	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static unsigned short	epsilon()	{return 1;}$/;"	f	struct:Imath::limits
epsilon	3rdparty/ilmbase-1.0.2/halfLimits.h	/^    static half epsilon () throw () {return HALF_EPSILON;}$/;"	f	class:std::numeric_limits
equal	3rdparty/ilmbase-1.0.2/ImathFun.h	/^equal (T1 a, T2 b, T3 t)$/;"	f	namespace:Imath
equalWithAbsError	3rdparty/ilmbase-1.0.2/ImathMath.h	/^equalWithAbsError (T x1, T x2, T e)$/;"	f	namespace:Imath
equalWithAbsError	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::equalWithAbsError (const Matrix33<T> &m, T e) const$/;"	f	class:Imath::Matrix33
equalWithAbsError	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::equalWithAbsError (const Matrix44<T> &m, T e) const$/;"	f	class:Imath::Matrix44
equalWithAbsError	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::equalWithAbsError (const Shear6<T> &h, T e) const$/;"	f	class:Imath::Shear6
equalWithAbsError	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::equalWithAbsError (const Vec2<T> &v, T e) const$/;"	f	class:Imath::Vec2
equalWithAbsError	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::equalWithAbsError (const Vec3<T> &v, T e) const$/;"	f	class:Imath::Vec3
equalWithAbsError	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::equalWithAbsError (const Vec4<T> &v, T e) const$/;"	f	class:Imath::Vec4
equalWithRelError	3rdparty/ilmbase-1.0.2/ImathMath.h	/^equalWithRelError (T x1, T x2, T e)$/;"	f	namespace:Imath
equalWithRelError	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::equalWithRelError (const Matrix33<T> &m, T e) const$/;"	f	class:Imath::Matrix33
equalWithRelError	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::equalWithRelError (const Matrix44<T> &m, T e) const$/;"	f	class:Imath::Matrix44
equalWithRelError	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::equalWithRelError (const Shear6<T> &h, T e) const$/;"	f	class:Imath::Shear6
equalWithRelError	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::equalWithRelError (const Vec2<T> &v, T e) const$/;"	f	class:Imath::Vec2
equalWithRelError	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::equalWithRelError (const Vec3<T> &v, T e) const$/;"	f	class:Imath::Vec3
equalWithRelError	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::equalWithRelError (const Vec4<T> &v, T e) const$/;"	f	class:Imath::Vec4
equal_strings	tools/ply.c	/^int equal_strings(char *s1, char *s2)$/;"	f
erand48	3rdparty/ilmbase-1.0.2/ImathRandom.cpp	/^erand48 (unsigned short state[3])$/;"	f	namespace:Imath
err	3rdparty/tiff-3.9.4/tif_jpeg.c	/^	jpeg_error_mgr	err;		\/* libjpeg error manager *\/$/;"	m	struct:__anon48	file:
err	3rdparty/zlib-1.2.5/gzguts.h	/^    int err;                \/* error code *\/$/;"	m	struct:__anon74
errno	3rdparty/zlib-1.2.5/zutil.c	/^    int errno = 0;$/;"	v
error	3rdparty/zlib-1.2.5/minigzip.c	/^void error(msg)$/;"	f
errorMessage	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^char errorMessage[MAX_ERR_LENGTH];$/;"	m	namespace:__anon18	file:
errorString	3rdparty/ilmbase-1.0.2/IlmThreadSemaphoreWin32.cpp	/^errorString ()$/;"	f	namespace:IlmThread::__anon4
eta	core/reflection.h	/^    Spectrum eta, k;$/;"	m	class:FresnelConductor
eta	core/reflection.h	/^    const float eta;$/;"	m	class:BSDF
eta	core/reflection.h	/^    float eta() const { return e; }$/;"	f	class:BSSRDF
eta	materials/kdsubsurface.h	/^    Reference<Texture<float> > meanfreepath, eta, bumpMap;$/;"	m	class:KdSubsurfaceMaterial
eta	materials/metal.h	/^    Reference<Texture<Spectrum> > eta, k;$/;"	m	class:MetalMaterial
eta	materials/subsurface.h	/^    Reference<Texture<float> > eta, bumpMap;$/;"	m	class:SubsurfaceMaterial
eta	materials/uber.h	/^    Reference<Texture<float> > roughness, eta, bumpMap;$/;"	m	class:UberMaterial
eta_i	core/reflection.h	/^    float eta_i, eta_t;$/;"	m	class:FresnelDielectric
eta_t	core/reflection.h	/^    float eta_i, eta_t;$/;"	m	class:FresnelDielectric
etai	core/reflection.h	/^    float etai, etat;$/;"	m	class:SpecularTransmission
etat	core/reflection.h	/^    float etai, etat;$/;"	m	class:SpecularTransmission
euclideanInnerProduct	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^Quat<T>::euclideanInnerProduct (const Quat<T> &q) const$/;"	f	class:Imath::Quat
events	core/parallel.h	/^    HANDLE events[NUM_EVENTS];$/;"	m	class:ConditionVariable
ex	core/reflection.h	/^    float ex, ey;$/;"	m	class:Anisotropic
exception	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    string		exception;$/;"	m	struct:Imf::__anon23::LineBuffer	file:
exception	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    string		exception;$/;"	m	struct:Imf::__anon31::LineBuffer	file:
exception	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    string		exception;$/;"	m	struct:Imf::__anon34::TileBuffer	file:
exception	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    string		exception;$/;"	m	struct:Imf::__anon37::TileBuffer	file:
execute	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^LineBufferTask::execute ()$/;"	f	class:Imf::__anon24::LineBufferTask
execute	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^LineBufferTask::execute ()$/;"	f	class:Imf::__anon32::LineBufferTask
execute	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TileBufferTask::execute ()$/;"	f	class:Imf::__anon35::TileBufferTask
execute	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TileBufferTask::execute ()$/;"	f	class:Imf::__anon38::TileBufferTask
exifFieldInfo	3rdparty/tiff-3.9.4/tif_dirinfo.c	/^exifFieldInfo[] = {$/;"	v	file:
exit_jmpbuf	3rdparty/tiff-3.9.4/tif_jpeg.c	/^	JMP_BUF		exit_jmpbuf;	\/* for catching libjpeg failures *\/$/;"	m	struct:__anon48	file:
exit_jmpbuf	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	JMP_BUF exit_jmpbuf;$/;"	m	struct:__anon55	file:
exp	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static T	exp   (T x)		{return ::exp (double(x));}$/;"	f	struct:Imath::Math
exp	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static float	exp   (float x)			{return ::expf (x);}$/;"	f	struct:Imath::Math
exp	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^Quat<T>::exp () const$/;"	f	class:Imath::Quat
exp2	3rdparty/tiff-3.9.4/tif_luv.c	/^#define exp2(/;"	d	file:
expTable	3rdparty/openexr-1.7.0/b44ExpLogTable.h	/^const unsigned short expTable[] =$/;"	v
expX	filters/gaussian.h	/^    const float expX, expY;$/;"	m	class:GaussianFilter
expY	filters/gaussian.h	/^    const float expX, expY;$/;"	m	class:GaussianFilter
exponent	core/reflection.h	/^    float exponent;$/;"	m	class:Blinn
exportFaceGroupToShape	tools/obj2pbrt.cpp	/^exportFaceGroupToShape($/;"	f	namespace:tinyobj
extendBy	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<T>::extendBy(const Box<T> &box)$/;"	f	class:Imath::Box
extendBy	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<T>::extendBy(const T &point)$/;"	f	class:Imath::Box
extendBy	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<Vec2<T> >::extendBy (const Box<Vec2<T> > &box)$/;"	f	class:Imath::Box
extendBy	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<Vec2<T> >::extendBy (const Vec2<T> &point)$/;"	f	class:Imath::Box
extendBy	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<Vec3<T> >::extendBy (const Box<Vec3<T> > &box)$/;"	f	class:Imath::Box
extendBy	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<Vec3<T> >::extendBy (const Vec3<T> &point)$/;"	f	class:Imath::Box
extendBy	3rdparty/ilmbase-1.0.2/ImathInterval.h	/^Interval<T>::extendBy(const Interval<T>& interval)$/;"	f	class:Imath::Interval
extendBy	3rdparty/ilmbase-1.0.2/ImathInterval.h	/^Interval<T>::extendBy(const T& point)$/;"	f	class:Imath::Interval
extension	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	extension(/;"	d	file:
extent	volumes/exponential.h	/^    BBox extent;$/;"	m	class:ExponentialDensity
extent	volumes/homogeneous.h	/^    BBox extent;$/;"	m	class:HomogeneousVolumeDensity
extent	volumes/volumegrid.h	/^    const BBox extent;$/;"	m	class:VolumeGridDensity
external_type	tools/ply.h	/^  int external_type;            \/* file's data type *\/$/;"	m	struct:PlyProperty
extra	3rdparty/zlib-1.2.5/inflate.h	/^    unsigned extra;             \/* extra bits needed *\/$/;"	m	struct:inflate_state
extra	3rdparty/zlib-1.2.5/zlib.h	/^    Bytef   *extra;     \/* pointer to extra field or Z_NULL if none *\/$/;"	m	struct:gz_header_s
extra_base	3rdparty/zlib-1.2.5/trees.c	/^    int     extra_base;          \/* base index for extra_bits *\/$/;"	m	struct:static_tree_desc_s	file:
extra_bits	3rdparty/zlib-1.2.5/trees.c	/^    const intf *extra_bits;      \/* extra bits for each code or NULL *\/$/;"	m	struct:static_tree_desc_s	file:
extra_blbits	3rdparty/zlib-1.2.5/trees.c	/^local const int extra_blbits[BL_CODES]\/* extra bits for each bit length code *\/$/;"	v
extra_dbits	3rdparty/zlib-1.2.5/trees.c	/^local const int extra_dbits[D_CODES] \/* extra bits for each distance code *\/$/;"	v
extra_lbits	3rdparty/zlib-1.2.5/trees.c	/^local const int extra_lbits[LENGTH_CODES] \/* extra bits for each length code *\/$/;"	v
extra_len	3rdparty/zlib-1.2.5/zlib.h	/^    uInt    extra_len;  \/* extra field length (valid if extra != Z_NULL) *\/$/;"	m	struct:gz_header_s
extra_max	3rdparty/zlib-1.2.5/zlib.h	/^    uInt    extra_max;  \/* space at extra (only when reading header) *\/$/;"	m	struct:gz_header_s
extract	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^inline void Euler<T>::extract(const Quat<T> &q)$/;"	f	class:Imath::Euler
extract	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^void Euler<T>::extract(const Matrix33<T> &M)$/;"	f	class:Imath::Euler
extract	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^void Euler<T>::extract(const Matrix44<T> &M)$/;"	f	class:Imath::Euler
extractAndRemoveScalingAndShear	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^extractAndRemoveScalingAndShear (Matrix33<T> &mat, $/;"	f	namespace:Imath
extractAndRemoveScalingAndShear	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^extractAndRemoveScalingAndShear (Matrix44<T> &mat, $/;"	f	namespace:Imath
extractEuler	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^extractEuler (const Matrix33<T> &mat, T &rot)$/;"	f	namespace:Imath
extractEulerXYZ	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^extractEulerXYZ (const Matrix44<T> &mat, Vec3<T> &rot)$/;"	f	namespace:Imath
extractEulerZYX	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^extractEulerZYX (const Matrix44<T> &mat, Vec3<T> &rot)$/;"	f	namespace:Imath
extractQuat	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^extractQuat (const Matrix44<T> &mat)$/;"	f	namespace:Imath
extractSHRT	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^extractSHRT (const Matrix33<T> &mat,$/;"	f	namespace:Imath
extractSHRT	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^extractSHRT (const Matrix44<T> &mat,$/;"	f	namespace:Imath
extractScaling	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^extractScaling (const Matrix33<T> &mat, Vec2<T> &scl, bool exc)$/;"	f	namespace:Imath
extractScaling	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^extractScaling (const Matrix44<T> &mat, Vec3<T> &scl, bool exc)$/;"	f	namespace:Imath
extractScalingAndShear	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^extractScalingAndShear (const Matrix33<T> &mat, Vec2<T> &scl, T &shr, bool exc)$/;"	f	namespace:Imath
extractScalingAndShear	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^extractScalingAndShear (const Matrix44<T> &mat, $/;"	f	namespace:Imath
ey	core/reflection.h	/^    float ex, ey;$/;"	m	class:Anisotropic
f	3rdparty/ilmbase-1.0.2/half.h	/^	float		f;$/;"	m	union:half::uif
f	core/reflection.cpp	/^Spectrum BRDFToBTDF::f(const Vector &wo, const Vector &wi) const {$/;"	f	class:BRDFToBTDF
f	core/reflection.cpp	/^Spectrum BSDF::f(const Vector &woW, const Vector &wiW,$/;"	f	class:BSDF
f	core/reflection.cpp	/^Spectrum FresnelBlend::f(const Vector &wo, const Vector &wi) const {$/;"	f	class:FresnelBlend
f	core/reflection.cpp	/^Spectrum IrregIsotropicBRDF::f(const Vector &wo,$/;"	f	class:IrregIsotropicBRDF
f	core/reflection.cpp	/^Spectrum Lambertian::f(const Vector &wo, const Vector &wi) const {$/;"	f	class:Lambertian
f	core/reflection.cpp	/^Spectrum Microfacet::f(const Vector &wo, const Vector &wi) const {$/;"	f	class:Microfacet
f	core/reflection.cpp	/^Spectrum OrenNayar::f(const Vector &wo, const Vector &wi) const {$/;"	f	class:OrenNayar
f	core/reflection.cpp	/^Spectrum RegularHalfangleBRDF::f(const Vector &WO,$/;"	f	class:RegularHalfangleBRDF
f	core/reflection.cpp	/^Spectrum ScaledBxDF::f(const Vector &wo, const Vector &wi) const {$/;"	f	class:ScaledBxDF
f	core/reflection.h	/^    Spectrum f(const Vector &, const Vector &) const {$/;"	f	class:SpecularReflection
f	core/reflection.h	/^    Spectrum f(const Vector &, const Vector &) const {$/;"	f	class:SpecularTransmission
f	shapes/loopsubdiv.cpp	/^    SDFace *f[2];$/;"	m	struct:SDEdge	file:
f	shapes/loopsubdiv.cpp	/^    SDFace *f[3];$/;"	m	struct:SDFace	file:
f0edgeNum	shapes/loopsubdiv.cpp	/^    int f0edgeNum;$/;"	m	struct:SDEdge	file:
fabs	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static T	fabs  (T x)		{return ::fabs (double(x));}$/;"	f	struct:Imath::Math
fabs	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static float	fabs  (float x)			{return ::fabsf (x);}$/;"	f	struct:Imath::Math
faceAndPixelPosition	3rdparty/openexr-1.7.0/ImfEnvmap.cpp	/^faceAndPixelPosition (const V3f &direction,$/;"	f	namespace:Imf::CubeMap
face_other	tools/ply2pbrt.c	/^static PlyOtherProp *vert_other,*face_other;$/;"	v	file:
face_props	tools/ply2pbrt.c	/^PlyProperty face_props[] = { \/* list of property information for a face *\/$/;"	v
faces	shapes/loopsubdiv.h	/^    vector<SDFace *> faces;$/;"	m	class:LoopSubdiv
fact	core/sh.cpp	/^static inline float fact(float v) {$/;"	f	file:
failed	renderers/surfacepoints.cpp	/^    bool failed;$/;"	m	struct:PoissonCheck	file:
far	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^        #define far$/;"	d
far	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^        #undef far$/;"	d
far	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^    T			far() const		{ return _far;		}$/;"	f	class:Imath::Frustum
fax3FieldInfo	3rdparty/tiff-3.9.4/tif_fax3.c	/^static const TIFFFieldInfo fax3FieldInfo[] = {$/;"	v	file:
fax4FieldInfo	3rdparty/tiff-3.9.4/tif_fax3.c	/^static const TIFFFieldInfo fax4FieldInfo[] = {$/;"	v	file:
faxFieldInfo	3rdparty/tiff-3.9.4/tif_fax3.c	/^static const TIFFFieldInfo faxFieldInfo[] = {$/;"	v	file:
faxdcs	3rdparty/tiff-3.9.4/tif_fax3.c	/^	char*	faxdcs;			\/* Table 2\/T.30 encoded session params *\/$/;"	m	struct:__anon43	file:
faxdcs	3rdparty/tiff-3.9.4/tif_jbig.c	/^        char*   faxdcs;         \/* encoded fax parameters (DCS, Table 2\/T.30) *\/$/;"	m	struct:__anon47	file:
faxdcs	3rdparty/tiff-3.9.4/tif_jpeg.c	/^	char*		faxdcs;		\/* encoded fax parameters (DCS, Table 2\/T.30) *\/$/;"	m	struct:__anon48	file:
fbBase	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^    Rgba *		fbBase;$/;"	m	class:Imf::AcesInputFile::Data	file:
fbXStride	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^    size_t		fbXStride;$/;"	m	class:Imf::AcesInputFile::Data	file:
fbYStride	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^    size_t		fbYStride;$/;"	m	class:Imf::AcesInputFile::Data	file:
fc	3rdparty/zlib-1.2.5/deflate.h	/^    } fc;$/;"	m	struct:ct_data_s	typeref:union:ct_data_s::__anon72
fd	3rdparty/zlib-1.2.5/gzguts.h	/^    int fd;                 \/* file descriptor *\/$/;"	m	struct:__anon74
fdopen	3rdparty/zlib-1.2.5/zutil.h	/^#      define fdopen(/;"	d
fdopen	3rdparty/zlib-1.2.5/zutil.h	/^#    define fdopen(/;"	d
fdopen	3rdparty/zlib-1.2.5/zutil.h	/^#  define fdopen(/;"	d
fieldPhase	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^TimeCode::fieldPhase () const$/;"	f	class:Imf::TimeCode
field_bit	3rdparty/tiff-3.9.4/tiffio.h	/^        unsigned short field_bit;	\/* bit in fieldsset bit vector *\/$/;"	m	struct:__anon68
field_name	3rdparty/tiff-3.9.4/tiffio.h	/^	char	*field_name;		\/* ASCII name *\/$/;"	m	struct:__anon68
field_oktochange	3rdparty/tiff-3.9.4/tiffio.h	/^	unsigned char field_oktochange;	\/* if true, can change while writing *\/$/;"	m	struct:__anon68
field_passcount	3rdparty/tiff-3.9.4/tiffio.h	/^	unsigned char field_passcount;	\/* if true, pass dir count on set *\/$/;"	m	struct:__anon68
field_readcount	3rdparty/tiff-3.9.4/tiffio.h	/^	short	field_readcount;	\/* read count\/TIFF_VARIABLE\/TIFF_SPP *\/$/;"	m	struct:__anon68
field_tag	3rdparty/tiff-3.9.4/tiffio.h	/^	ttag_t	field_tag;		\/* field's tag *\/$/;"	m	struct:__anon68
field_type	3rdparty/tiff-3.9.4/tiffio.h	/^	TIFFDataType field_type;	\/* type of associated data *\/$/;"	m	struct:__anon68
field_writecount	3rdparty/tiff-3.9.4/tiffio.h	/^	short	field_writecount;	\/* write count\/TIFF_VARIABLE *\/$/;"	m	struct:__anon68
fileIsComplete	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    bool		fileIsComplete;	    \/\/ True if no scanlines are missing$/;"	m	struct:Imf::ScanLineInputFile::Data	file:
fileIsComplete	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    bool	    fileIsComplete;	    \/\/ True if no tiles are missing$/;"	m	struct:Imf::TiledInputFile::Data	file:
fileName	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesInputFile::fileName () const$/;"	f	class:Imf::AcesInputFile
fileName	3rdparty/openexr-1.7.0/ImfIO.cpp	/^IStream::fileName () const$/;"	f	class:Imf::IStream
fileName	3rdparty/openexr-1.7.0/ImfIO.cpp	/^OStream::fileName () const$/;"	f	class:Imf::OStream
fileName	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^InputFile::fileName () const$/;"	f	class:Imf::InputFile
fileName	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^OutputFile::fileName () const$/;"	f	class:Imf::OutputFile
fileName	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaInputFile::fileName () const$/;"	f	class:Imf::RgbaInputFile
fileName	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^ScanLineInputFile::fileName () const$/;"	f	class:Imf::ScanLineInputFile
fileName	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::fileName () const$/;"	f	class:Imf::TiledInputFile
fileName	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::fileName () const$/;"	f	class:Imf::TiledOutputFile
fileName	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::fileName () const$/;"	f	class:Imf::TiledRgbaInputFile
fileToAces	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^    M44f		fileToAces;$/;"	m	class:Imf::AcesInputFile::Data	file:
file_compress	3rdparty/zlib-1.2.5/minigzip.c	/^void file_compress(file, mode)$/;"	f
file_size	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	toff_t file_size;$/;"	m	struct:__anon55	file:
file_type	tools/ply.h	/^  int file_type;                \/* ascii or binary *\/$/;"	m	struct:PlyFile
file_uncompress	3rdparty/zlib-1.2.5/minigzip.c	/^void file_uncompress(file)$/;"	f
filename	core/pbrtlex.cpp	/^    string filename;$/;"	m	struct:IncludeInfo	file:
filename	film/image.h	/^    string filename;$/;"	m	class:ImageFilm
filename	integrators/dipolesubsurface.h	/^    string filename;$/;"	m	class:DipoleSubsurfaceIntegrator
filename	renderers/createprobes.h	/^    string filename;$/;"	m	class:CreateRadianceProbes
filename	renderers/surfacepoints.h	/^    string filename;$/;"	m	class:SurfacePointsRenderer
filename	textures/imagemap.h	/^    string filename;$/;"	m	struct:TexInfo
fileno	3rdparty/zlib-1.2.5/minigzip.c	/^#  define fileno(/;"	d	file:
fill	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    bool	fill;$/;"	m	struct:Imf::__anon31::InSliceInfo	file:
fill	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    bool        fill;$/;"	m	struct:Imf::__anon34::TInSliceInfo	file:
fill	3rdparty/tiff-3.9.4/tif_fax3.c	/^	TIFFFaxFillFunc fill;		\/* fill routine *\/$/;"	m	struct:__anon45	file:
fillChannelWithZeroes	3rdparty/openexr-1.7.0/ImfMisc.cpp	/^fillChannelWithZeroes (char *& writePtr,$/;"	f	namespace:Imf
fillValue	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^    double		fillValue;$/;"	m	struct:Imf::Slice
fillValue	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    double	fillValue;$/;"	m	struct:Imf::__anon31::InSliceInfo	file:
fillValue	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    double      fillValue;$/;"	m	struct:Imf::__anon34::TInSliceInfo	file:
fill_window	3rdparty/zlib-1.2.5/deflate.c	/^local void fill_window(s)$/;"	f
film	core/camera.h	/^    Film *film;$/;"	m	class:Camera
filmMfcCode	3rdparty/openexr-1.7.0/ImfKeyCode.cpp	/^KeyCode::filmMfcCode () const$/;"	f	class:Imf::KeyCode
filmMutex	renderers/metropolis.cpp	/^    Mutex *filmMutex;$/;"	m	class:MLTTask	file:
filmType	3rdparty/openexr-1.7.0/ImfKeyCode.cpp	/^KeyCode::filmType () const$/;"	f	class:Imf::KeyCode
filter	film/image.h	/^    Filter *filter;$/;"	m	class:ImageFilm
filterTable	film/image.h	/^    float *filterTable;$/;"	m	class:ImageFilm
finalGather	integrators/photonmap.h	/^    bool finalGather;$/;"	m	class:PhotonIntegrator
find	3rdparty/openexr-1.7.0/ImfChannelList.cpp	/^ChannelList::find (const char name[]) const$/;"	f	class:Imf::ChannelList
find	3rdparty/openexr-1.7.0/ImfChannelList.cpp	/^ChannelList::find (const char name[])$/;"	f	class:Imf::ChannelList
find	3rdparty/openexr-1.7.0/ImfChannelList.cpp	/^ChannelList::find (const string &name) const$/;"	f	class:Imf::ChannelList
find	3rdparty/openexr-1.7.0/ImfChannelList.cpp	/^ChannelList::find (const string &name)$/;"	f	class:Imf::ChannelList
find	3rdparty/openexr-1.7.0/ImfFrameBuffer.cpp	/^FrameBuffer::find (const char name[]) const$/;"	f	class:Imf::FrameBuffer
find	3rdparty/openexr-1.7.0/ImfFrameBuffer.cpp	/^FrameBuffer::find (const char name[])$/;"	f	class:Imf::FrameBuffer
find	3rdparty/openexr-1.7.0/ImfFrameBuffer.cpp	/^FrameBuffer::find (const string &name) const$/;"	f	class:Imf::FrameBuffer
find	3rdparty/openexr-1.7.0/ImfFrameBuffer.cpp	/^FrameBuffer::find (const string &name)$/;"	f	class:Imf::FrameBuffer
find	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::find (const char name[]) const$/;"	f	class:Imf::Header
find	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::find (const char name[])$/;"	f	class:Imf::Header
find	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::find (const string &name) const$/;"	f	class:Imf::Header
find	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::find (const string &name)$/;"	f	class:Imf::Header
find0span	3rdparty/tiff-3.9.4/tif_fax3.c	/^find0span(unsigned char* bp, int32 bs, int32 be)$/;"	f	file:
find1span	3rdparty/tiff-3.9.4/tif_fax3.c	/^find1span(unsigned char* bp, int32 bs, int32 be)$/;"	f	file:
findChannel	3rdparty/openexr-1.7.0/ImfChannelList.cpp	/^ChannelList::findChannel (const char name[]) const$/;"	f	class:Imf::ChannelList
findChannel	3rdparty/openexr-1.7.0/ImfChannelList.cpp	/^ChannelList::findChannel (const char name[])$/;"	f	class:Imf::ChannelList
findChannel	3rdparty/openexr-1.7.0/ImfChannelList.cpp	/^ChannelList::findChannel (const string &name) const$/;"	f	class:Imf::ChannelList
findChannel	3rdparty/openexr-1.7.0/ImfChannelList.cpp	/^ChannelList::findChannel (const string &name)$/;"	f	class:Imf::ChannelList
findEntryAndExitPoints	3rdparty/ilmbase-1.0.2/ImathBoxAlgo.h	/^findEntryAndExitPoints (const Line3<T> &r,$/;"	f	namespace:Imath
findSlice	3rdparty/openexr-1.7.0/ImfFrameBuffer.cpp	/^FrameBuffer::findSlice (const char name[]) const$/;"	f	class:Imf::FrameBuffer
findSlice	3rdparty/openexr-1.7.0/ImfFrameBuffer.cpp	/^FrameBuffer::findSlice (const char name[])$/;"	f	class:Imf::FrameBuffer
findSlice	3rdparty/openexr-1.7.0/ImfFrameBuffer.cpp	/^FrameBuffer::findSlice (const string &name) const$/;"	f	class:Imf::FrameBuffer
findSlice	3rdparty/openexr-1.7.0/ImfFrameBuffer.cpp	/^FrameBuffer::findSlice (const string &name)$/;"	f	class:Imf::FrameBuffer
findTiles	3rdparty/openexr-1.7.0/ImfTileOffsets.cpp	/^TileOffsets::findTiles (IStream &is)$/;"	f	class:Imf::TileOffsets
findTypedAttribute	3rdparty/openexr-1.7.0/ImfHeader.h	/^Header::findTypedAttribute (const char name[]) const$/;"	f	class:Imf::Header
findTypedAttribute	3rdparty/openexr-1.7.0/ImfHeader.h	/^Header::findTypedAttribute (const char name[])$/;"	f	class:Imf::Header
findTypedAttribute	3rdparty/openexr-1.7.0/ImfHeader.h	/^Header::findTypedAttribute (const std::string &name) const$/;"	f	class:Imf::Header
findTypedAttribute	3rdparty/openexr-1.7.0/ImfHeader.h	/^Header::findTypedAttribute (const std::string &name)$/;"	f	class:Imf::Header
findWordEnd	core/error.cpp	/^const char *findWordEnd(const char *buf) {$/;"	f
find_element	tools/ply.c	/^PlyElement *find_element(PlyFile *plyfile, char *element)$/;"	f
find_property	tools/ply.c	/^PlyProperty *find_property(PlyElement *elem, char *prop_name, int *index)$/;"	f
finddiff	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	finddiff(/;"	d	file:
finddiff2	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	finddiff2(/;"	d	file:
finish	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^ThreadPool::Data::finish ()$/;"	f	class:IlmThread::ThreadPool::Data
finish_done	3rdparty/zlib-1.2.5/deflate.c	/^    finish_done     \/* finish done, accept no more input or output *\/$/;"	e	enum:__anon71	file:
finish_started	3rdparty/zlib-1.2.5/deflate.c	/^    finish_started, \/* finish started, need only more output at next deflate *\/$/;"	e	enum:__anon71	file:
finited	3rdparty/ilmbase-1.0.2/ImathFun.h	/^finited (double d)$/;"	f	namespace:Imath
finitef	3rdparty/ilmbase-1.0.2/ImathFun.h	/^finitef (float f)$/;"	f	namespace:Imath
firstFrame	3rdparty/ilmbase-1.0.2/ImathFrame.h	/^template<class T> Matrix44<T> firstFrame$/;"	f	namespace:Imath
firstPrimOffset	accelerators/bvh.cpp	/^    uint32_t splitAxis, firstPrimOffset, nPrimitives;$/;"	m	struct:BVHBuildNode	file:
firstTexel	core/mipmap.h	/^        int firstTexel;$/;"	m	struct:MIPMap::ResampleWeight
firstchar	3rdparty/tiff-3.9.4/tif_lzw.c	/^	unsigned char	firstchar;	\/* first token of string *\/$/;"	m	struct:code_ent	file:
fixIndex	tools/obj2pbrt.cpp	/^static inline int fixIndex(int idx, int n)$/;"	f	namespace:tinyobj
fixSaturation	3rdparty/openexr-1.7.0/ImfRgbaYca.cpp	/^fixSaturation (const Imath::V3f &yw,$/;"	f	namespace:Imf::RgbaYca
fixedtables	3rdparty/zlib-1.2.5/infback.c	/^local void fixedtables(state)$/;"	f
fixedtables	3rdparty/zlib-1.2.5/inflate.c	/^local void fixedtables(state)$/;"	f
flags	3rdparty/zlib-1.2.5/inflate.h	/^    int flags;                  \/* gzip header method and flags (0 if zlib) *\/$/;"	m	struct:inflate_state
flags	accelerators/kdtreeaccel.cpp	/^        uint32_t flags;         \/\/ Both$/;"	m	union:KdAccelNode::__anon80	file:
flattenBVHTree	accelerators/bvh.cpp	/^uint32_t BVHAccel::flattenBVHTree(BVHBuildNode *node, uint32_t *offset) {$/;"	f	class:BVHAccel
flex_int16_t	core/pbrtlex.cpp	/^typedef int16_t flex_int16_t;$/;"	t	file:
flex_int16_t	core/pbrtlex.cpp	/^typedef short int flex_int16_t;$/;"	t	file:
flex_int32_t	core/pbrtlex.cpp	/^typedef int flex_int32_t;$/;"	t	file:
flex_int32_t	core/pbrtlex.cpp	/^typedef int32_t flex_int32_t;$/;"	t	file:
flex_int8_t	core/pbrtlex.cpp	/^typedef int8_t flex_int8_t;$/;"	t	file:
flex_int8_t	core/pbrtlex.cpp	/^typedef signed char flex_int8_t;$/;"	t	file:
flex_uint16_t	core/pbrtlex.cpp	/^typedef uint16_t flex_uint16_t;$/;"	t	file:
flex_uint16_t	core/pbrtlex.cpp	/^typedef unsigned short int flex_uint16_t;$/;"	t	file:
flex_uint32_t	core/pbrtlex.cpp	/^typedef uint32_t flex_uint32_t;$/;"	t	file:
flex_uint32_t	core/pbrtlex.cpp	/^typedef unsigned int flex_uint32_t;$/;"	t	file:
flex_uint8_t	core/pbrtlex.cpp	/^typedef uint8_t flex_uint8_t;$/;"	t	file:
flex_uint8_t	core/pbrtlex.cpp	/^typedef unsigned char flex_uint8_t; $/;"	t	file:
flist	tools/ply2pbrt.c	/^static Face **flist;$/;"	v	file:
floatTextures	core/api.cpp	/^    map<string, Reference<Texture<float> > > floatTextures;$/;"	m	struct:GraphicsState	file:
floatTextures	core/paramset.h	/^    map<string, Reference<Texture<float> > > &floatTextures;$/;"	m	class:TextureParams
floatToFloat24	3rdparty/openexr-1.7.0/ImfPxr24Compressor.cpp	/^floatToFloat24 (float f)$/;"	f	namespace:Imf::__anon26
floatToHalf	3rdparty/openexr-1.7.0/ImfConvert.cpp	/^floatToHalf (float f)$/;"	f	namespace:Imf
floatToUint	3rdparty/openexr-1.7.0/ImfConvert.cpp	/^floatToUint (float f)$/;"	f	namespace:Imf
floats	core/paramset.h	/^    vector<Reference<ParamSetItem<float> > > floats;$/;"	m	class:ParamSet
floor	3rdparty/ilmbase-1.0.2/ImathFun.h	/^floor (T x)$/;"	f	namespace:Imath
floor	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static T	floor (T x)		{return ::floor (double(x));}$/;"	f	struct:Imath::Math
floor	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static float	floor (float x)			{return ::floorf (x);}$/;"	f	struct:Imath::Math
floorLog2	3rdparty/openexr-1.7.0/ImfTiledMisc.cpp	/^floorLog2 (int x)$/;"	f	namespace:Imf::__anon36
flush_pending	3rdparty/zlib-1.2.5/deflate.c	/^local void flush_pending(strm)$/;"	f
fmod	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static T	fmod  (T x, T y)	{return ::fmod (double(x), double(y));}$/;"	f	struct:Imath::Math
fmod	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static float	fmod  (float x, float y)	{return ::fmodf (x, y);}$/;"	f	struct:Imath::Math
focalDistance	core/camera.h	/^    float lensRadius, focalDistance;$/;"	m	class:ProjectiveCamera
format	3rdparty/openexr-1.7.0/ImfB44Compressor.cpp	/^B44Compressor::format () const$/;"	f	class:Imf::B44Compressor
format	3rdparty/openexr-1.7.0/ImfCompressor.cpp	/^Compressor::format () const$/;"	f	class:Imf::Compressor
format	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    Compressor::Format	 format;                \/\/ compressor's data format$/;"	m	struct:Imf::OutputFile::Data	file:
format	3rdparty/openexr-1.7.0/ImfPizCompressor.cpp	/^PizCompressor::format () const$/;"	f	class:Imf::PizCompressor
format	3rdparty/openexr-1.7.0/ImfPxr24Compressor.cpp	/^Pxr24Compressor::format () const$/;"	f	class:Imf::Pxr24Compressor
format	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    Compressor::Format	format;$/;"	m	struct:Imf::__anon31::LineBuffer	file:
format	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    Compressor::Format	format;$/;"	m	struct:Imf::__anon34::TileBuffer	file:
format	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    Compressor::Format	format;			\/\/ compressor's data format$/;"	m	struct:Imf::TiledOutputFile::Data	file:
forwardLutFromBitmap	3rdparty/openexr-1.7.0/ImfPizCompressor.cpp	/^forwardLutFromBitmap (const unsigned char bitmap[BITMAP_SIZE],$/;"	f	namespace:Imf::__anon25
fovx	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^T Frustum<T>::fovx() const$/;"	f	class:Imath::Frustum
fovy	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^T Frustum<T>::fovy() const$/;"	f	class:Imath::Frustum
fp	tools/ply.h	/^  FILE *fp;                     \/* file pointer *\/$/;"	m	struct:PlyFile
fpAcc	3rdparty/tiff-3.9.4/tif_predict.c	/^fpAcc(TIFF* tif, tidata_t cp0, tsize_t cc)$/;"	f	file:
fpDiff	3rdparty/tiff-3.9.4/tif_predict.c	/^fpDiff(TIFF* tif, tidata_t cp0, tsize_t cc)$/;"	f	file:
fps_23_976	3rdparty/openexr-1.7.0/ImfFramesPerSecond.h	/^inline Rational	fps_23_976 ()	{return Rational (24000, 1001);}$/;"	f	namespace:Imf
fps_24	3rdparty/openexr-1.7.0/ImfFramesPerSecond.h	/^inline Rational	fps_24 ()	{return Rational (24, 1);}$/;"	f	namespace:Imf
fps_25	3rdparty/openexr-1.7.0/ImfFramesPerSecond.h	/^inline Rational	fps_25 ()	{return Rational (25, 1);}$/;"	f	namespace:Imf
fps_29_97	3rdparty/openexr-1.7.0/ImfFramesPerSecond.h	/^inline Rational	fps_29_97 ()	{return Rational (30000, 1001);}$/;"	f	namespace:Imf
fps_30	3rdparty/openexr-1.7.0/ImfFramesPerSecond.h	/^inline Rational	fps_30 ()	{return Rational (30, 1);}$/;"	f	namespace:Imf
fps_47_952	3rdparty/openexr-1.7.0/ImfFramesPerSecond.h	/^inline Rational	fps_47_952 ()	{return Rational (48000, 1001);}$/;"	f	namespace:Imf
fps_48	3rdparty/openexr-1.7.0/ImfFramesPerSecond.h	/^inline Rational	fps_48 ()	{return Rational (48, 1);}$/;"	f	namespace:Imf
fps_50	3rdparty/openexr-1.7.0/ImfFramesPerSecond.h	/^inline Rational	fps_50 ()	{return Rational (50, 1);}$/;"	f	namespace:Imf
fps_59_94	3rdparty/openexr-1.7.0/ImfFramesPerSecond.h	/^inline Rational	fps_59_94 ()	{return Rational (60000, 1001);}$/;"	f	namespace:Imf
fps_60	3rdparty/openexr-1.7.0/ImfFramesPerSecond.h	/^inline Rational	fps_60 ()	{return Rational (60, 1);}$/;"	f	namespace:Imf
frac	3rdparty/openexr-1.7.0/ImfRational.cpp	/^frac (double x, double e)$/;"	f	namespace:Imf::__anon27
frame	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^TimeCode::frame () const$/;"	f	class:Imf::TimeCode
frameBuffer	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^InputFile::frameBuffer () const$/;"	f	class:Imf::InputFile
frameBuffer	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    FrameBuffer		 frameBuffer;           \/\/ framebuffer to write into$/;"	m	struct:Imf::OutputFile::Data	file:
frameBuffer	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^OutputFile::frameBuffer () const$/;"	f	class:Imf::OutputFile
frameBuffer	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaInputFile::frameBuffer () const$/;"	f	class:Imf::RgbaInputFile
frameBuffer	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaOutputFile::frameBuffer () const$/;"	f	class:Imf::RgbaOutputFile
frameBuffer	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    FrameBuffer		frameBuffer;	    \/\/ framebuffer to write into$/;"	m	struct:Imf::ScanLineInputFile::Data	file:
frameBuffer	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^ScanLineInputFile::frameBuffer () const$/;"	f	class:Imf::ScanLineInputFile
frameBuffer	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    FrameBuffer	    frameBuffer;	    \/\/ framebuffer to write into$/;"	m	struct:Imf::TiledInputFile::Data	file:
frameBuffer	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::frameBuffer () const$/;"	f	class:Imf::TiledInputFile
frameBuffer	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    FrameBuffer		frameBuffer;		\/\/ framebuffer to write into$/;"	m	struct:Imf::TiledOutputFile::Data	file:
frameBuffer	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::frameBuffer () const$/;"	f	class:Imf::TiledOutputFile
frameBuffer	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::frameBuffer () const$/;"	f	class:Imf::TiledRgbaInputFile
frameBuffer	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::frameBuffer () const$/;"	f	class:Imf::TiledRgbaOutputFile
frameStatic	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^    bool		frameStatic() const { return _frameStatic; }$/;"	f	class:Imath::Euler
free_ent	3rdparty/tiff-3.9.4/tif_lzw.c	/^	unsigned short	free_ent;	\/* next free entry in hash table *\/$/;"	m	struct:__anon50	file:
free_func	3rdparty/zlib-1.2.5/zconf.h	/^#  define free_func /;"	d
free_func	3rdparty/zlib-1.2.5/zlib.h	/^typedef void   (*free_func)  OF((voidpf opaque, voidpf address));$/;"	t
free_other_elements_ply	tools/ply.c	/^void free_other_elements_ply (PlyOtherElems *other_elems)$/;"	f
free_ply	tools/ply.c	/^void free_ply(PlyFile *plyfile)$/;"	f
freq	3rdparty/zlib-1.2.5/deflate.h	/^        ush  freq;       \/* frequency count *\/$/;"	m	union:ct_data_s::__anon72
fresnel	core/reflection.h	/^    Fresnel *fresnel;$/;"	m	class:Microfacet
fresnel	core/reflection.h	/^    Fresnel *fresnel;$/;"	m	class:SpecularReflection
fresnel	core/reflection.h	/^    FresnelDielectric fresnel;$/;"	m	class:SpecularTransmission
func	3rdparty/zlib-1.2.5/deflate.c	/^   compress_func func;$/;"	m	struct:config_s	file:
func	core/montecarlo.h	/^    float *func, *cdf;$/;"	m	struct:Distribution1D
funcInt	core/montecarlo.h	/^    float funcInt;$/;"	m	struct:Distribution1D
g	3rdparty/ilmbase-1.0.2/ImathColor.h	/^    T			r, g, b, a;$/;"	m	class:Imath::Color4
g	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^    ImfHalf	g;$/;"	m	struct:ImfRgba
g	3rdparty/openexr-1.7.0/ImfPreviewImage.h	/^    unsigned char	g;	\/\/ the pixel's color; intensity is$/;"	m	struct:Imf::PreviewRgba
g	3rdparty/openexr-1.7.0/ImfRgba.h	/^    half	g;$/;"	m	struct:Imf::Rgba
g	core/volume.h	/^    float g;$/;"	m	class:DensityRegion
g	tools/ply2pbrt.c	/^  float r,g,b;$/;"	m	struct:Vertex	file:
g	volumes/homogeneous.h	/^    float g;$/;"	m	class:HomogeneousVolumeDensity
gLimit	integrators/igi.h	/^    float gLimit;$/;"	m	class:IGIIntegrator
gamma	shapes/loopsubdiv.h	/^    static float gamma(int valence) {$/;"	f	class:LoopSubdiv
gamma	textures/imagemap.h	/^    float scale, gamma;$/;"	m	struct:TexInfo
gatherSampleOffset	integrators/igi.h	/^    BSDFSampleOffsets gatherSampleOffset;$/;"	m	class:IGIIntegrator
gatherSamples	integrators/photonmap.h	/^    int gatherSamples;$/;"	m	class:PhotonIntegrator
gaussRand	3rdparty/ilmbase-1.0.2/ImathRandom.h	/^gaussRand (Rand &rand)$/;"	f	namespace:Imath
gaussSphereRand	3rdparty/ilmbase-1.0.2/ImathRandom.h	/^gaussSphereRand (Rand &rand)$/;"	f	namespace:Imath
gcdGroup	core/parallel.cpp	/^static dispatch_group_t gcdGroup = dispatch_group_create();$/;"	v	file:
gcdQueue	core/parallel.cpp	/^static dispatch_queue_t gcdQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);$/;"	v	file:
gen_bitlen	3rdparty/zlib-1.2.5/trees.c	/^local void gen_bitlen(s, desc)$/;"	f
gen_codes	3rdparty/zlib-1.2.5/trees.c	/^local void gen_codes (tree, max_code, bl_count)$/;"	f
gen_trees_header	3rdparty/zlib-1.2.5/trees.c	/^void gen_trees_header()$/;"	f
geomParams	core/paramset.h	/^    const ParamSet &geomParams, &materialParams;$/;"	m	class:TextureParams
get	3rdparty/tiff-3.9.4/tiffio.h	/^	int (*get)(TIFFRGBAImage*, uint32*, uint32, uint32);$/;"	m	struct:_TIFFRGBAImage
getBits	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^getBits (int nBits, Int64 &c, int &lc, const char *&in)$/;"	f	namespace:Imf::__anon20
getChar	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^#define getChar(/;"	d	file:
getCode	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^#define getCode(/;"	d	file:
getFlags	3rdparty/openexr-1.7.0/ImfVersion.h	/^inline int   getFlags (int version)	{return version & VERSION_FLAGS_FIELD;}$/;"	f	namespace:Imf
getLineBuffer	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^OutputFile::Data::getLineBuffer (int number)$/;"	f	class:Imf::OutputFile::Data
getLineBuffer	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^ScanLineInputFile::Data::getLineBuffer (int lineBufferNumber)$/;"	f	class:Imf::ScanLineInputFile::Data
getTileBuffer	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::Data::getTileBuffer (int number)$/;"	f	class:Imf::TiledInputFile::Data
getTileBuffer	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::Data::getTileBuffer (int number)$/;"	f	class:Imf::TiledOutputFile::Data
getValue	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color4<T>::getValue (Color4<S> &v) const$/;"	f	class:Imath::Color4
getValue	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color4<T>::getValue (S &x, S &y, S &z, S &w) const$/;"	f	class:Imath::Color4
getValue	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color4<T>::getValue() const$/;"	f	class:Imath::Color4
getValue	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color4<T>::getValue()$/;"	f	class:Imath::Color4
getValue	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::getValue () const$/;"	f	class:Imath::Matrix33
getValue	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::getValue ()$/;"	f	class:Imath::Matrix33
getValue	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::getValue (Matrix33<S> &v) const$/;"	f	class:Imath::Matrix33
getValue	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::getValue () const$/;"	f	class:Imath::Matrix44
getValue	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::getValue ()$/;"	f	class:Imath::Matrix44
getValue	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::getValue (Matrix44<S> &v) const$/;"	f	class:Imath::Matrix44
getValue	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::getValue (S &XY, S &XZ, S &YZ, S &YX, S &ZX, S &ZY) const$/;"	f	class:Imath::Shear6
getValue	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::getValue (Shear6<S> &h) const$/;"	f	class:Imath::Shear6
getValue	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::getValue() const$/;"	f	class:Imath::Shear6
getValue	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::getValue()$/;"	f	class:Imath::Shear6
getValue	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::getValue (S &a, S &b) const$/;"	f	class:Imath::Vec2
getValue	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::getValue (Vec2<S> &v) const$/;"	f	class:Imath::Vec2
getValue	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::getValue() const$/;"	f	class:Imath::Vec2
getValue	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::getValue()$/;"	f	class:Imath::Vec2
getValue	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::getValue (S &a, S &b, S &c) const$/;"	f	class:Imath::Vec3
getValue	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::getValue (Vec3<S> &v) const$/;"	f	class:Imath::Vec3
getValue	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::getValue() const$/;"	f	class:Imath::Vec3
getValue	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::getValue()$/;"	f	class:Imath::Vec3
getVersion	3rdparty/openexr-1.7.0/ImfVersion.h	/^inline int   getVersion (int version)	{return version & VERSION_NUMBER_FIELD;}$/;"	f	namespace:Imf
get_ascii_item	tools/ply.c	/^void get_ascii_item($/;"	f
get_binary_item	tools/ply.c	/^void get_binary_item($/;"	f
get_comments_ply	tools/ply.c	/^char **get_comments_ply(PlyFile *plyfile, int *num_comments)$/;"	f
get_crc_table	3rdparty/zlib-1.2.5/crc32.c	/^const unsigned long FAR * ZEXPORT get_crc_table()$/;"	f
get_crc_table	3rdparty/zlib-1.2.5/zconf.h	/^#  define get_crc_table /;"	d
get_element_description_ply	tools/ply.c	/^PlyProperty **get_element_description_ply($/;"	f
get_element_list_ply	tools/ply.c	/^char **get_element_list_ply(PlyFile *ply, int *num_elems)$/;"	f
get_element_ply	tools/ply.c	/^void get_element_ply (PlyFile *plyfile, void *elem_ptr)$/;"	f
get_element_setup_ply	tools/ply.c	/^void get_element_setup_ply($/;"	f
get_info_ply	tools/ply.c	/^void get_info_ply(PlyFile *ply, float *version, int *file_type)$/;"	f
get_item_value	tools/ply.c	/^double get_item_value(char *item, int type)$/;"	f
get_new_props_ply	tools/ply.c	/^void *get_new_props_ply(PlyFile *ply)$/;"	f
get_obj_info_ply	tools/ply.c	/^char **get_obj_info_ply(PlyFile *plyfile, int *num_obj_info)$/;"	f
get_other_element_ply	tools/ply.c	/^PlyOtherElems *get_other_element_ply (PlyFile *plyfile)$/;"	f
get_other_properties	tools/ply.c	/^static PlyOtherProp *get_other_properties($/;"	f	file:
get_other_properties_ply	tools/ply.c	/^PlyOtherProp *get_other_properties_ply($/;"	f
get_prop_type	tools/ply.c	/^int get_prop_type(char *type_name)$/;"	f
get_stored_item	tools/ply.c	/^void get_stored_item($/;"	f
get_words	tools/ply.c	/^char **get_words(FILE *fp, int *nwords, char **orig_line)$/;"	f
gf2_matrix_square	3rdparty/zlib-1.2.5/crc32.c	/^local void gf2_matrix_square(square, mat)$/;"	f
gf2_matrix_times	3rdparty/zlib-1.2.5/crc32.c	/^local unsigned long gf2_matrix_times(mat, vec)$/;"	f
gjInverse	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::gjInverse (bool singExc) const throw (Iex::MathExc)$/;"	f	class:Imath::Matrix33
gjInverse	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::gjInverse (bool singExc) const throw (Iex::MathExc)$/;"	f	class:Imath::Matrix44
gjInvert	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::gjInvert (bool singExc) throw (Iex::MathExc)$/;"	f	class:Imath::Matrix33
gjInvert	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::gjInvert (bool singExc) throw (Iex::MathExc)$/;"	f	class:Imath::Matrix44
glColor	3rdparty/ilmbase-1.0.2/ImathGL.h	/^inline void glColor     ( const Imath::V3f &c ) { glColor3f(c.x,c.y,c.z);    }$/;"	f
glDisableTexture	3rdparty/ilmbase-1.0.2/ImathGL.h	/^inline void glDisableTexture()$/;"	f
glLoadMatrix	3rdparty/ilmbase-1.0.2/ImathGL.h	/^glLoadMatrix( const Imath::M44f& m ) $/;"	f
glLoadMatrix	3rdparty/ilmbase-1.0.2/ImathGL.h	/^glLoadMatrix( const Imath::M44f* m ) $/;"	f
glMultMatrix	3rdparty/ilmbase-1.0.2/ImathGL.h	/^glMultMatrix( const Imath::M44f& m ) $/;"	f
glMultMatrix	3rdparty/ilmbase-1.0.2/ImathGL.h	/^glMultMatrix( const Imath::M44f* m ) $/;"	f
glNormal	3rdparty/ilmbase-1.0.2/ImathGL.h	/^inline void glNormal    ( const Imath::V3f &n ) { glNormal3f(n.x,n.y,n.z);   }$/;"	f
glTexCoord	3rdparty/ilmbase-1.0.2/ImathGL.h	/^inline void glTexCoord( const Imath::V2f &t )$/;"	f
glTranslate	3rdparty/ilmbase-1.0.2/ImathGL.h	/^inline void glTranslate ( const Imath::V3f &t ) { glTranslatef(t.x,t.y,t.z); }$/;"	f
glVertex	3rdparty/ilmbase-1.0.2/ImathGL.h	/^inline void glVertex    ( const Imath::V2f &v ) { glVertex2f(v.x,v.y);       }$/;"	f
glVertex	3rdparty/ilmbase-1.0.2/ImathGL.h	/^inline void glVertex    ( const Imath::V3f &v ) { glVertex3f(v.x,v.y,v.z);   }$/;"	f
globalThreadCount	3rdparty/openexr-1.7.0/ImfThreading.cpp	/^globalThreadCount ()$/;"	f	namespace:Imf
globalThreadPool	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^ThreadPool::globalThreadPool ()$/;"	f	class:IlmThread::ThreadPool
gluLookAt	3rdparty/ilmbase-1.0.2/ImathGLU.h	/^gluLookAt(const Imath::V3f &pos, const Imath::V3f &interest, const Imath::V3f &up)$/;"	f
good_length	3rdparty/zlib-1.2.5/deflate.c	/^   ush good_length; \/* reduce lazy search above this match length *\/$/;"	m	struct:config_s	file:
good_match	3rdparty/zlib-1.2.5/deflate.h	/^    uInt good_match;$/;"	m	struct:internal_state
graphicsState	core/api.cpp	/^static GraphicsState graphicsState;$/;"	v	file:
green	3rdparty/openexr-1.7.0/ImfChromaticities.h	/^    Imath::V2f	green;$/;"	m	struct:Imf::Chromaticities
greencmap	3rdparty/tiff-3.9.4/tiffio.h	/^	uint16* greencmap;$/;"	m	struct:_TIFFRGBAImage
group	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^Task::group ()$/;"	f	class:IlmThread::Task
groupoptions	3rdparty/tiff-3.9.4/tif_fax3.c	/^	uint32	groupoptions;		\/* Group 3\/4 options tag *\/$/;"	m	struct:__anon43	file:
gstep	3rdparty/tiff-3.9.4/tiffio.h	/^	float	rstep, gstep, bstep;$/;"	m	struct:__anon65
gtStripContig	3rdparty/tiff-3.9.4/tif_getimage.c	/^gtStripContig(TIFFRGBAImage* img, uint32* raster, uint32 w, uint32 h)$/;"	f	file:
gtStripSeparate	3rdparty/tiff-3.9.4/tif_getimage.c	/^gtStripSeparate(TIFFRGBAImage* img, uint32* raster, uint32 w, uint32 h)$/;"	f	file:
gtTileContig	3rdparty/tiff-3.9.4/tif_getimage.c	/^gtTileContig(TIFFRGBAImage* img, uint32* raster, uint32 w, uint32 h)$/;"	f	file:
gtTileSeparate	3rdparty/tiff-3.9.4/tif_getimage.c	/^gtTileSeparate(TIFFRGBAImage* img, uint32* raster, uint32 w, uint32 h)$/;"	f	file:
guessExactFps	3rdparty/openexr-1.7.0/ImfFramesPerSecond.cpp	/^guessExactFps (const Rational &fps)$/;"	f	namespace:Imf
guessExactFps	3rdparty/openexr-1.7.0/ImfFramesPerSecond.cpp	/^guessExactFps (double fps)$/;"	f	namespace:Imf
gzFile	3rdparty/zlib-1.2.5/zconf.h	/^#  define gzFile /;"	d
gzFile	3rdparty/zlib-1.2.5/zlib.h	/^typedef voidp gzFile;       \/* opaque gzip file descriptor *\/$/;"	t
gz_avail	3rdparty/zlib-1.2.5/gzread.c	/^local int gz_avail(state)$/;"	f
gz_comp	3rdparty/zlib-1.2.5/gzwrite.c	/^local int gz_comp(state, flush)$/;"	f
gz_compress	3rdparty/zlib-1.2.5/minigzip.c	/^void gz_compress(in, out)$/;"	f
gz_compress_mmap	3rdparty/zlib-1.2.5/minigzip.c	/^int gz_compress_mmap(in, out)$/;"	f
gz_decomp	3rdparty/zlib-1.2.5/gzread.c	/^local int gz_decomp(state)$/;"	f
gz_error	3rdparty/zlib-1.2.5/gzlib.c	/^void ZLIB_INTERNAL gz_error(state, err, msg)$/;"	f
gz_error	3rdparty/zlib-1.2.5/zconf.h	/^#  define gz_error /;"	d
gz_head	3rdparty/zlib-1.2.5/gzread.c	/^local int gz_head(state)$/;"	f
gz_header	3rdparty/zlib-1.2.5/zconf.h	/^#  define gz_header /;"	d
gz_header	3rdparty/zlib-1.2.5/zlib.h	/^} gz_header;$/;"	t	typeref:struct:gz_header_s
gz_header_s	3rdparty/zlib-1.2.5/zconf.h	/^#  define gz_header_s /;"	d
gz_header_s	3rdparty/zlib-1.2.5/zlib.h	/^typedef struct gz_header_s {$/;"	s
gz_headerp	3rdparty/zlib-1.2.5/zconf.h	/^#  define gz_headerp /;"	d
gz_headerp	3rdparty/zlib-1.2.5/zlib.h	/^typedef gz_header FAR *gz_headerp;$/;"	t
gz_init	3rdparty/zlib-1.2.5/gzwrite.c	/^local int gz_init(state)$/;"	f
gz_intmax	3rdparty/zlib-1.2.5/gzlib.c	/^unsigned ZLIB_INTERNAL gz_intmax()$/;"	f
gz_intmax	3rdparty/zlib-1.2.5/zconf.h	/^#  define gz_intmax /;"	d
gz_load	3rdparty/zlib-1.2.5/gzread.c	/^local int gz_load(state, buf, len, have)$/;"	f
gz_make	3rdparty/zlib-1.2.5/gzread.c	/^local int gz_make(state)$/;"	f
gz_next4	3rdparty/zlib-1.2.5/gzread.c	/^local int gz_next4(state, ret)$/;"	f
gz_open	3rdparty/zlib-1.2.5/gzlib.c	/^local gzFile gz_open(path, fd, mode)$/;"	f
gz_reset	3rdparty/zlib-1.2.5/gzlib.c	/^local void gz_reset(state)$/;"	f
gz_skip	3rdparty/zlib-1.2.5/gzread.c	/^local int gz_skip(state, len)$/;"	f
gz_state	3rdparty/zlib-1.2.5/gzguts.h	/^} gz_state;$/;"	t	typeref:struct:__anon74
gz_statep	3rdparty/zlib-1.2.5/gzguts.h	/^typedef gz_state FAR *gz_statep;$/;"	t
gz_strwinerror	3rdparty/zlib-1.2.5/gzlib.c	/^char ZLIB_INTERNAL *gz_strwinerror (error)$/;"	f
gz_strwinerror	3rdparty/zlib-1.2.5/zconf.h	/^#  define gz_strwinerror /;"	d
gz_uncompress	3rdparty/zlib-1.2.5/minigzip.c	/^void gz_uncompress(in, out)$/;"	f
gz_zero	3rdparty/zlib-1.2.5/gzwrite.c	/^local int gz_zero(state, len)$/;"	f
gzbuffer	3rdparty/zlib-1.2.5/gzlib.c	/^int ZEXPORT gzbuffer(file, size)$/;"	f
gzbuffer	3rdparty/zlib-1.2.5/zconf.h	/^#  define gzbuffer /;"	d
gzclearerr	3rdparty/zlib-1.2.5/gzlib.c	/^void ZEXPORT gzclearerr(file)$/;"	f
gzclearerr	3rdparty/zlib-1.2.5/zconf.h	/^#  define gzclearerr /;"	d
gzclose	3rdparty/zlib-1.2.5/gzclose.c	/^int ZEXPORT gzclose(file)$/;"	f
gzclose	3rdparty/zlib-1.2.5/zconf.h	/^#  define gzclose /;"	d
gzclose_r	3rdparty/zlib-1.2.5/gzread.c	/^int ZEXPORT gzclose_r(file)$/;"	f
gzclose_r	3rdparty/zlib-1.2.5/zconf.h	/^#  define gzclose_r /;"	d
gzclose_w	3rdparty/zlib-1.2.5/gzwrite.c	/^int ZEXPORT gzclose_w(file)$/;"	f
gzclose_w	3rdparty/zlib-1.2.5/zconf.h	/^#  define gzclose_w /;"	d
gzdirect	3rdparty/zlib-1.2.5/gzread.c	/^int ZEXPORT gzdirect(file)$/;"	f
gzdirect	3rdparty/zlib-1.2.5/zconf.h	/^#  define gzdirect /;"	d
gzdopen	3rdparty/zlib-1.2.5/gzlib.c	/^gzFile ZEXPORT gzdopen(fd, mode)$/;"	f
gzdopen	3rdparty/zlib-1.2.5/zconf.h	/^#  define gzdopen /;"	d
gzeof	3rdparty/zlib-1.2.5/gzlib.c	/^int ZEXPORT gzeof(file)$/;"	f
gzeof	3rdparty/zlib-1.2.5/zconf.h	/^#  define gzeof /;"	d
gzerror	3rdparty/zlib-1.2.5/gzlib.c	/^const char * ZEXPORT gzerror(file, errnum)$/;"	f
gzerror	3rdparty/zlib-1.2.5/zconf.h	/^#  define gzerror /;"	d
gzflush	3rdparty/zlib-1.2.5/gzwrite.c	/^int ZEXPORT gzflush(file, flush)$/;"	f
gzflush	3rdparty/zlib-1.2.5/zconf.h	/^#  define gzflush /;"	d
gzgetc	3rdparty/zlib-1.2.5/gzread.c	/^int ZEXPORT gzgetc(file)$/;"	f
gzgetc	3rdparty/zlib-1.2.5/zconf.h	/^#  define gzgetc /;"	d
gzgets	3rdparty/zlib-1.2.5/gzread.c	/^char * ZEXPORT gzgets(file, buf, len)$/;"	f
gzgets	3rdparty/zlib-1.2.5/zconf.h	/^#  define gzgets /;"	d
gzhead	3rdparty/zlib-1.2.5/deflate.h	/^    gz_headerp  gzhead;  \/* gzip header information to write *\/$/;"	m	struct:internal_state
gzindex	3rdparty/zlib-1.2.5/deflate.h	/^    uInt   gzindex;      \/* where in extra, name, or comment *\/$/;"	m	struct:internal_state
gzoffset	3rdparty/zlib-1.2.5/gzlib.c	/^z_off_t ZEXPORT gzoffset(file)$/;"	f
gzoffset	3rdparty/zlib-1.2.5/zconf.h	/^#  define gzoffset /;"	d
gzoffset	3rdparty/zlib-1.2.5/zlib.h	/^#  define gzoffset /;"	d
gzoffset64	3rdparty/zlib-1.2.5/gzlib.c	/^z_off64_t ZEXPORT gzoffset64(file)$/;"	f
gzoffset64	3rdparty/zlib-1.2.5/zconf.h	/^#  define gzoffset64 /;"	d
gzopen	3rdparty/zlib-1.2.5/gzlib.c	/^gzFile ZEXPORT gzopen(path, mode)$/;"	f
gzopen	3rdparty/zlib-1.2.5/zconf.h	/^#  define gzopen /;"	d
gzopen	3rdparty/zlib-1.2.5/zlib.h	/^#  define gzopen /;"	d
gzopen64	3rdparty/zlib-1.2.5/gzlib.c	/^gzFile ZEXPORT gzopen64(path, mode)$/;"	f
gzopen64	3rdparty/zlib-1.2.5/zconf.h	/^#  define gzopen64 /;"	d
gzprintf	3rdparty/zlib-1.2.5/gzwrite.c	/^int ZEXPORTVA gzprintf (file, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10,$/;"	f
gzprintf	3rdparty/zlib-1.2.5/gzwrite.c	/^int ZEXPORTVA gzprintf (gzFile file, const char *format, ...)$/;"	f
gzprintf	3rdparty/zlib-1.2.5/zconf.h	/^#  define gzprintf /;"	d
gzputc	3rdparty/zlib-1.2.5/gzwrite.c	/^int ZEXPORT gzputc(file, c)$/;"	f
gzputc	3rdparty/zlib-1.2.5/zconf.h	/^#  define gzputc /;"	d
gzputs	3rdparty/zlib-1.2.5/gzwrite.c	/^int ZEXPORT gzputs(file, str)$/;"	f
gzputs	3rdparty/zlib-1.2.5/zconf.h	/^#  define gzputs /;"	d
gzread	3rdparty/zlib-1.2.5/gzread.c	/^int ZEXPORT gzread(file, buf, len)$/;"	f
gzread	3rdparty/zlib-1.2.5/zconf.h	/^#  define gzread /;"	d
gzrewind	3rdparty/zlib-1.2.5/gzlib.c	/^int ZEXPORT gzrewind(file)$/;"	f
gzrewind	3rdparty/zlib-1.2.5/zconf.h	/^#  define gzrewind /;"	d
gzseek	3rdparty/zlib-1.2.5/gzlib.c	/^z_off_t ZEXPORT gzseek(file, offset, whence)$/;"	f
gzseek	3rdparty/zlib-1.2.5/zconf.h	/^#  define gzseek /;"	d
gzseek	3rdparty/zlib-1.2.5/zlib.h	/^#  define gzseek /;"	d
gzseek64	3rdparty/zlib-1.2.5/gzlib.c	/^z_off64_t ZEXPORT gzseek64(file, offset, whence)$/;"	f
gzseek64	3rdparty/zlib-1.2.5/zconf.h	/^#  define gzseek64 /;"	d
gzsetparams	3rdparty/zlib-1.2.5/gzwrite.c	/^int ZEXPORT gzsetparams(file, level, strategy)$/;"	f
gzsetparams	3rdparty/zlib-1.2.5/zconf.h	/^#  define gzsetparams /;"	d
gztell	3rdparty/zlib-1.2.5/gzlib.c	/^z_off_t ZEXPORT gztell(file)$/;"	f
gztell	3rdparty/zlib-1.2.5/zconf.h	/^#  define gztell /;"	d
gztell	3rdparty/zlib-1.2.5/zlib.h	/^#  define gztell /;"	d
gztell64	3rdparty/zlib-1.2.5/gzlib.c	/^z_off64_t ZEXPORT gztell64(file)$/;"	f
gztell64	3rdparty/zlib-1.2.5/zconf.h	/^#  define gztell64 /;"	d
gzungetc	3rdparty/zlib-1.2.5/gzread.c	/^int ZEXPORT gzungetc(c, file)$/;"	f
gzungetc	3rdparty/zlib-1.2.5/zconf.h	/^#  define gzungetc /;"	d
gzwrite	3rdparty/zlib-1.2.5/gzwrite.c	/^int ZEXPORT gzwrite(file, buf, len)$/;"	f
gzwrite	3rdparty/zlib-1.2.5/zconf.h	/^#  define gzwrite /;"	d
hReadyToRead	core/parallel.h	/^    HANDLE hReadyToRead;$/;"	m	class:RWMutex
hReadyToWrite	core/parallel.h	/^    HANDLE hReadyToWrite;$/;"	m	class:RWMutex
h_sampling	3rdparty/tiff-3.9.4/tif_jpeg.c	/^	uint16		h_sampling;	\/* luminance sampling factors *\/$/;"	m	struct:__anon48	file:
half	3rdparty/ilmbase-1.0.2/half.h	/^class HALF_EXPORT half$/;"	c
half	3rdparty/ilmbase-1.0.2/half.h	/^half::half ()$/;"	f	class:half
half	3rdparty/ilmbase-1.0.2/half.h	/^half::half (float f)$/;"	f	class:half
halfFunction	3rdparty/ilmbase-1.0.2/halfFunction.h	/^class halfFunction$/;"	c
halfFunction	3rdparty/ilmbase-1.0.2/halfFunction.h	/^halfFunction<T>::halfFunction (Function f,$/;"	f	class:halfFunction
halfToFloat	3rdparty/ilmbase-1.0.2/toFloat.cpp	/^halfToFloat (unsigned short y)$/;"	f
halfToUint	3rdparty/openexr-1.7.0/ImfConvert.cpp	/^halfToUint (half h)$/;"	f	namespace:Imf
handle	core/parallel.h	/^    HANDLE handle;$/;"	m	class:Semaphore
hasDifferentials	core/geometry.h	/^    bool hasDifferentials;$/;"	m	class:RayDifferential
hasException	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    bool		hasException;$/;"	m	struct:Imf::__anon23::LineBuffer	file:
hasException	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    bool		hasException;$/;"	m	struct:Imf::__anon31::LineBuffer	file:
hasException	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    bool		hasException;$/;"	m	struct:Imf::__anon34::TileBuffer	file:
hasException	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    bool		hasException;$/;"	m	struct:Imf::__anon37::TileBuffer	file:
hasLeftChild	core/kdtree.h	/^    uint32_t hasLeftChild:1, rightChild:29;$/;"	m	struct:KdNode
hasPreviewImage	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::hasPreviewImage () const$/;"	f	class:Imf::Header
hasTileDescription	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::hasTileDescription() const$/;"	f	class:Imf::Header
hasVolume	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<T>::hasVolume() const$/;"	f	class:Imath::Box
hasVolume	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<Vec2<T> >::hasVolume() const$/;"	f	class:Imath::Box
hasVolume	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<Vec3<T> >::hasVolume() const$/;"	f	class:Imath::Box
hasVolume	3rdparty/ilmbase-1.0.2/ImathInterval.h	/^inline bool Interval<T>::hasVolume() const$/;"	f	class:Imath::Interval
has_denorm	3rdparty/ilmbase-1.0.2/halfLimits.h	/^    static const float_denorm_style has_denorm = denorm_present;$/;"	m	class:std::numeric_limits
has_denorm_loss	3rdparty/ilmbase-1.0.2/halfLimits.h	/^    static const bool has_denorm_loss = false;$/;"	m	class:std::numeric_limits
has_infinity	3rdparty/ilmbase-1.0.2/halfLimits.h	/^    static const bool has_infinity = true;$/;"	m	class:std::numeric_limits
has_normals	tools/ply2pbrt.c	/^static int has_normals = 0;$/;"	v	file:
has_quiet_NaN	3rdparty/ilmbase-1.0.2/halfLimits.h	/^    static const bool has_quiet_NaN = true;$/;"	m	class:std::numeric_limits
has_signaling_NaN	3rdparty/ilmbase-1.0.2/halfLimits.h	/^    static const bool has_signaling_NaN = true;$/;"	m	class:std::numeric_limits
hash	3rdparty/tiff-3.9.4/tif_lzw.c	/^	long	hash;$/;"	m	struct:__anon51	file:
hash	renderers/samplerrenderer.cpp	/^static uint32_t hash(char *key, uint32_t len)$/;"	f	file:
hash_bits	3rdparty/zlib-1.2.5/deflate.h	/^    uInt  hash_bits;      \/* log2(hash_size) *\/$/;"	m	struct:internal_state
hash_mask	3rdparty/zlib-1.2.5/deflate.h	/^    uInt  hash_mask;      \/* hash_size-1 *\/$/;"	m	struct:internal_state
hash_shift	3rdparty/zlib-1.2.5/deflate.h	/^    uInt  hash_shift;$/;"	m	struct:internal_state
hash_size	3rdparty/zlib-1.2.5/deflate.h	/^    uInt  hash_size;      \/* number of elements in hash table *\/$/;"	m	struct:internal_state
hash_t	3rdparty/tiff-3.9.4/tif_lzw.c	/^} hash_t;$/;"	t	typeref:struct:__anon51	file:
have	3rdparty/zlib-1.2.5/gzguts.h	/^    unsigned have;          \/* amount of output data unused at next *\/$/;"	m	struct:__anon74
have	3rdparty/zlib-1.2.5/inflate.h	/^    unsigned have;              \/* number of code lengths in lens[] *\/$/;"	m	struct:inflate_state
havedict	3rdparty/zlib-1.2.5/inflate.h	/^    int havedict;               \/* true if dictionary provided *\/$/;"	m	struct:inflate_state
hcode_t	3rdparty/tiff-3.9.4/tif_lzw.c	/^typedef uint16 hcode_t;			\/* codes fit in 16 bits *\/$/;"	t	file:
hcrc	3rdparty/zlib-1.2.5/zlib.h	/^    int     hcrc;       \/* true if there was or will be a header crc *\/$/;"	m	struct:gz_header_s
head	3rdparty/zlib-1.2.5/deflate.h	/^    Posf *head; \/* Heads of the hash chains or NIL. *\/$/;"	m	struct:internal_state
head	3rdparty/zlib-1.2.5/inflate.h	/^    gz_headerp head;            \/* where to save gzip header information *\/$/;"	m	struct:inflate_state
header	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesInputFile::header () const$/;"	f	class:Imf::AcesInputFile
header	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesOutputFile::header () const$/;"	f	class:Imf::AcesOutputFile
header	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^header (ImfHeader *hdr)$/;"	f	namespace:__anon18
header	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^header (const ImfHeader *hdr)$/;"	f	namespace:__anon18
header	3rdparty/openexr-1.7.0/ImfCompressor.h	/^    const Header &	header () const		{return _header;}$/;"	f	class:Imf::Compressor
header	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^    Header              header;$/;"	m	struct:Imf::InputFile::Data	file:
header	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^InputFile::header () const$/;"	f	class:Imf::InputFile
header	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    Header		 header;		\/\/ the image header$/;"	m	struct:Imf::OutputFile::Data	file:
header	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^OutputFile::header () const$/;"	f	class:Imf::OutputFile
header	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaInputFile::header () const$/;"	f	class:Imf::RgbaInputFile
header	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaOutputFile::header () const$/;"	f	class:Imf::RgbaOutputFile
header	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    Header		header;		    \/\/ the image header$/;"	m	struct:Imf::ScanLineInputFile::Data	file:
header	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^ScanLineInputFile::header () const$/;"	f	class:Imf::ScanLineInputFile
header	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    Header	    header;		    \/\/ the image header$/;"	m	struct:Imf::TiledInputFile::Data	file:
header	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::header () const$/;"	f	class:Imf::TiledInputFile
header	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    Header		header;			\/\/ the image header$/;"	m	struct:Imf::TiledOutputFile::Data	file:
header	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::header () const$/;"	f	class:Imf::TiledOutputFile
header	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::header () const$/;"	f	class:Imf::TiledRgbaInputFile
header	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::header () const$/;"	f	class:Imf::TiledRgbaOutputFile
header_complete_ply	tools/ply.c	/^void header_complete_ply(PlyFile *plyfile)$/;"	f
heap	3rdparty/zlib-1.2.5/deflate.h	/^    int heap[2*L_CODES+1];      \/* heap used to build the Huffman trees *\/$/;"	m	struct:internal_state
heap_len	3rdparty/zlib-1.2.5/deflate.h	/^    int heap_len;               \/* number of elements in the heap *\/$/;"	m	struct:internal_state
heap_max	3rdparty/zlib-1.2.5/deflate.h	/^    int heap_max;               \/* element of largest frequency *\/$/;"	m	struct:internal_state
height	3rdparty/openexr-1.7.0/ImfPreviewImage.h	/^    unsigned int	height () const	{return _height;}$/;"	f	class:Imf::PreviewImage
height	3rdparty/tiff-3.9.4/tiffio.h	/^	uint32 height;                          \/* image height *\/$/;"	m	struct:_TIFFRGBAImage
height	core/mipmap.h	/^    uint32_t width, height, nLevels;$/;"	m	class:MIPMap
height	core/targa.h	/^    uint16_t    height;$/;"	m	struct:__anon86
height	shapes/cone.h	/^    float radius, height, phiMax;$/;"	m	class:Cone
height	shapes/disk.h	/^    float height, radius, innerRadius, phiMax;$/;"	m	class:Disk
hello	3rdparty/zlib-1.2.5/example.c	/^const char hello[] = "hello, hello!";$/;"	v
high_water	3rdparty/zlib-1.2.5/deflate.h	/^    ulg high_water;$/;"	m	struct:internal_state
hither	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^    T           hither() const      { return _near;     }$/;"	f	class:Imath::Frustum
hither	lights/projection.h	/^    float hither, yon;$/;"	m	class:ProjectionLight
hold	3rdparty/zlib-1.2.5/inflate.h	/^    unsigned long hold;         \/* input bit accumulator *\/$/;"	m	struct:inflate_state
hollowSphereRand	3rdparty/ilmbase-1.0.2/ImathRandom.h	/^hollowSphereRand (Rand &rand)$/;"	f	namespace:Imath
horAcc16	3rdparty/tiff-3.9.4/tif_predict.c	/^horAcc16(TIFF* tif, tidata_t cp0, tsize_t cc)$/;"	f	file:
horAcc32	3rdparty/tiff-3.9.4/tif_predict.c	/^horAcc32(TIFF* tif, tidata_t cp0, tsize_t cc)$/;"	f	file:
horAcc8	3rdparty/tiff-3.9.4/tif_predict.c	/^horAcc8(TIFF* tif, tidata_t cp0, tsize_t cc)$/;"	f	file:
horDiff16	3rdparty/tiff-3.9.4/tif_predict.c	/^horDiff16(TIFF* tif, tidata_t cp0, tsize_t cc)$/;"	f	file:
horDiff32	3rdparty/tiff-3.9.4/tif_predict.c	/^horDiff32(TIFF* tif, tidata_t cp0, tsize_t cc)$/;"	f	file:
horDiff8	3rdparty/tiff-3.9.4/tif_predict.c	/^horDiff8(TIFF* tif, tidata_t cp0, tsize_t cc)$/;"	f	file:
horizcode	3rdparty/tiff-3.9.4/tif_fax3.c	/^static const tableentry horizcode =$/;"	v	file:
horizontalAccumulate11	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^horizontalAccumulate11(uint16 *wp, int n, int stride, uint16 *op)$/;"	f	file:
horizontalAccumulate12	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^horizontalAccumulate12(uint16 *wp, int n, int stride, int16 *op,$/;"	f	file:
horizontalAccumulate16	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^horizontalAccumulate16(uint16 *wp, int n, int stride, uint16 *op,$/;"	f	file:
horizontalAccumulate8	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^horizontalAccumulate8(uint16 *wp, int n, int stride, unsigned char *op,$/;"	f	file:
horizontalAccumulate8abgr	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^horizontalAccumulate8abgr(uint16 *wp, int n, int stride, unsigned char *op,$/;"	f	file:
horizontalAccumulateF	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^horizontalAccumulateF(uint16 *wp, int n, int stride, float *op, $/;"	f	file:
horizontalDifference16	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^horizontalDifference16(unsigned short *ip, int n, int stride, $/;"	f	file:
horizontalDifference8	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^horizontalDifference8(unsigned char *ip, int n, int stride, $/;"	f	file:
horizontalDifferenceF	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^horizontalDifferenceF(float *ip, int n, int stride, uint16 *wp, uint16 *FromLT2)$/;"	f	file:
hostLittleEndian	core/imageio.cpp	/^static bool hostLittleEndian =$/;"	v	file:
hours	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^TimeCode::hours () const$/;"	f	class:Imf::TimeCode
how	3rdparty/zlib-1.2.5/gzguts.h	/^    int how;                \/* 0: get header, 1: copy, 2: decompress *\/$/;"	m	struct:__anon74
hsv2rgb	3rdparty/ilmbase-1.0.2/ImathColorAlgo.h	/^hsv2rgb(const Color4<T> &hsv)$/;"	f	namespace:Imath
hsv2rgb	3rdparty/ilmbase-1.0.2/ImathColorAlgo.h	/^hsv2rgb(const Vec3<T> &hsv)$/;"	f	namespace:Imath
hsv2rgb_d	3rdparty/ilmbase-1.0.2/ImathColorAlgo.cpp	/^hsv2rgb_d(const Color4<double> &hsv)$/;"	f	namespace:Imath
hsv2rgb_d	3rdparty/ilmbase-1.0.2/ImathColorAlgo.cpp	/^hsv2rgb_d(const Vec3<double> &hsv)$/;"	f	namespace:Imath
htole16	core/targa.h	/^# define htole16(/;"	d
htole16	core/targa.h	/^# undef htole16$/;"	d
hufBuildDecTable	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^hufBuildDecTable$/;"	f	namespace:Imf::__anon20
hufBuildEncTable	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^hufBuildEncTable$/;"	f	namespace:Imf::__anon20
hufCanonicalCodeTable	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^hufCanonicalCodeTable (Int64 hcode[HUF_ENCSIZE])$/;"	f	namespace:Imf::__anon20
hufClearDecTable	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^hufClearDecTable$/;"	f	namespace:Imf::__anon20
hufCode	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^hufCode (Int64 code)$/;"	f	namespace:Imf::__anon20
hufCompress	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^hufCompress (const unsigned short raw[],$/;"	f	namespace:Imf
hufDecode	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^hufDecode$/;"	f	namespace:Imf::__anon20
hufEncode	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^hufEncode				\/\/ return: output size (in bits)$/;"	f	namespace:Imf::__anon20
hufFreeDecTable	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^hufFreeDecTable (HufDec *hdecod)	\/\/ io: Decoding table$/;"	f	namespace:Imf::__anon20
hufLength	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^hufLength (Int64 code)$/;"	f	namespace:Imf::__anon20
hufPackEncTable	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^hufPackEncTable$/;"	f	namespace:Imf::__anon20
hufUncompress	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^hufUncompress (const char compressed[],$/;"	f	namespace:Imf
hufUnpackEncTable	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^hufUnpackEncTable$/;"	f	namespace:Imf::__anon20
hypot	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static T	hypot (T x, T y)	{return ::hypot (double(x), double(y));}$/;"	f	struct:Imath::Math
hypot	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static float	hypot (float x, float y)	{return ::hypotf (x, y);}$/;"	f	struct:Imath::Math
hypot	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static float hypot (float x, float y)	{return ::sqrtf(x*x + y*y);}$/;"	f	struct:Imath::Math
hypotf	core/imageio.cpp	/^#define hypotf /;"	d	file:
i	3rdparty/ilmbase-1.0.2/half.h	/^	unsigned int	i;$/;"	m	union:half::uif
identity	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^Quat<T>::identity ()$/;"	f	class:Imath::Quat
identity33d	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^IMATH_EXPORT_CONST M33d identity33d;$/;"	m	namespace:Imath
identity33f	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^IMATH_EXPORT_CONST M33f identity33f;$/;"	m	namespace:Imath
identity44d	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^IMATH_EXPORT_CONST M44d identity44d;$/;"	m	namespace:Imath
identity44f	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^IMATH_EXPORT_CONST M44f identity44f;$/;"	m	namespace:Imath
illum	tools/obj2pbrt.cpp	/^    int illum;$/;"	m	struct:tinyobj::__anon90	file:
imageFile	core/pbrt.h	/^    string imageFile;$/;"	m	struct:Options
imageSamples	samplers/random.h	/^    float *imageSamples, *lensSamples, *timeSamples;$/;"	m	class:RandomSampler
imageSamples	tools/samplepat.cpp	/^static float imageSamples[SAMPLE_TABLE_SIZE][2];$/;"	v	file:
imageX	core/sampler.h	/^    float imageX, imageY;$/;"	m	struct:CameraSample
imageY	core/sampler.h	/^    float imageX, imageY;$/;"	m	struct:CameraSample
image_data	core/targa.h	/^    uint8_t *image_data;$/;"	m	struct:__anon86
image_descriptor	core/targa.h	/^    uint8_t     image_descriptor;$/;"	m	struct:__anon86
image_id	core/targa.h	/^    uint8_t *image_id;$/;"	m	struct:__anon86
image_id_length	core/targa.h	/^    uint8_t     image_id_length;$/;"	m	struct:__anon86
image_length	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint32 image_length;$/;"	m	struct:__anon55	file:
image_type	core/targa.h	/^    uint8_t     image_type;$/;"	m	struct:__anon86
image_width	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint32 image_width;$/;"	m	struct:__anon55	file:
in	3rdparty/zlib-1.2.5/gzguts.h	/^    unsigned char *in;      \/* input buffer *\/$/;"	m	struct:__anon74
in_buffer	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8 in_buffer[OJPEG_BUFFER];$/;"	m	struct:__anon55	file:
in_buffer_cur	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8* in_buffer_cur;$/;"	m	struct:__anon55	file:
in_buffer_file_pos	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^		toff_t in_buffer_file_pos;$/;"	m	struct:__anon55::__anon56	file:
in_buffer_file_pos	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	toff_t in_buffer_file_pos;$/;"	m	struct:__anon55	file:
in_buffer_file_pos_log	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8 in_buffer_file_pos_log;$/;"	m	struct:__anon55	file:
in_buffer_file_togo	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^		toff_t in_buffer_file_togo;$/;"	m	struct:__anon55::__anon56	file:
in_buffer_file_togo	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	toff_t in_buffer_file_togo;$/;"	m	struct:__anon55	file:
in_buffer_next_strile	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^		tstrile_t in_buffer_next_strile;$/;"	m	struct:__anon55::__anon56	file:
in_buffer_next_strile	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	tstrile_t in_buffer_next_strile;$/;"	m	struct:__anon55	file:
in_buffer_source	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^		OJPEGStateInBufferSource in_buffer_source;$/;"	m	struct:__anon55::__anon56	file:
in_buffer_source	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	OJPEGStateInBufferSource in_buffer_source;$/;"	m	struct:__anon55	file:
in_buffer_strile_count	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	tstrile_t in_buffer_strile_count;$/;"	m	struct:__anon55	file:
in_buffer_togo	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint16 in_buffer_togo;$/;"	m	struct:__anon55	file:
in_func	3rdparty/zlib-1.2.5/zconf.h	/^#  define in_func /;"	d
in_func	3rdparty/zlib-1.2.5/zlib.h	/^typedef unsigned (*in_func) OF((void FAR *, unsigned char FAR * FAR *));$/;"	t
includeDirectInProbes	integrators/useprobes.h	/^    int lmax, includeDirectInProbes, includeIndirectInProbes;$/;"	m	class:UseRadianceProbes
includeDirectInProbes	renderers/createprobes.cpp	/^    bool includeDirectInProbes, includeIndirectInProbes;$/;"	m	class:CreateRadProbeTask	file:
includeDirectInProbes	renderers/createprobes.h	/^    bool includeDirectInProbes, includeIndirectInProbes;$/;"	m	class:CreateRadianceProbes
includeIndirectInProbes	integrators/useprobes.h	/^    int lmax, includeDirectInProbes, includeIndirectInProbes;$/;"	m	class:UseRadianceProbes
includeIndirectInProbes	renderers/createprobes.cpp	/^    bool includeDirectInProbes, includeIndirectInProbes;$/;"	m	class:CreateRadProbeTask	file:
includeIndirectInProbes	renderers/createprobes.h	/^    bool includeDirectInProbes, includeIndirectInProbes;$/;"	m	class:CreateRadianceProbes
includeStack	core/pbrtlex.cpp	/^vector<IncludeInfo> includeStack;$/;"	v
include_pop	core/pbrtlex.cpp	/^void include_pop() {$/;"	f
include_push	core/pbrtlex.cpp	/^void include_push(char *filename) {$/;"	f
index	materials/glass.h	/^    Reference<Texture<float> > index;$/;"	m	class:GlassMaterial
indices	tools/obj2pbrt.cpp	/^    std::vector<unsigned int>   indices;$/;"	m	struct:tinyobj::__anon91	file:
indirGatherSampleOffsets	integrators/photonmap.h	/^    BSDFSampleOffsets bsdfGatherSampleOffsets, indirGatherSampleOffsets;$/;"	m	class:PhotonIntegrator
indirectLo	integrators/irradiancecache.cpp	/^Spectrum IrradianceCacheIntegrator::indirectLo(const Point &p,$/;"	f	class:IrradianceCacheIntegrator
indirectMap	integrators/photonmap.cpp	/^    KdTree<Photon> *directMap, *indirectMap, *causticMap;$/;"	m	class:ComputeRadianceTask	file:
indirectMap	integrators/photonmap.h	/^    KdTree<Photon> *indirectMap;$/;"	m	class:PhotonIntegrator
indirectPhotons	integrators/photonmap.cpp	/^    vector<Photon> &directPhotons, &indirectPhotons, &causticPhotons;$/;"	m	class:PhotonShootingTask	file:
infile	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^infile (ImfInputFile *in)$/;"	f	namespace:__anon18
infile	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^infile (ImfTiledInputFile *in)$/;"	f	namespace:__anon18
infile	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^infile (const ImfInputFile *in)$/;"	f	namespace:__anon18
infile	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^infile (const ImfTiledInputFile *in)$/;"	f	namespace:__anon18
infinity	3rdparty/ilmbase-1.0.2/halfLimits.h	/^    static half infinity () throw () {return half::posInf();}$/;"	f	class:std::numeric_limits
inflate	3rdparty/zlib-1.2.5/inflate.c	/^int ZEXPORT inflate(strm, flush)$/;"	f
inflate	3rdparty/zlib-1.2.5/zconf.h	/^#  define inflate /;"	d
inflateBack	3rdparty/zlib-1.2.5/infback.c	/^int ZEXPORT inflateBack(strm, in, in_desc, out, out_desc)$/;"	f
inflateBack	3rdparty/zlib-1.2.5/zconf.h	/^#  define inflateBack /;"	d
inflateBackEnd	3rdparty/zlib-1.2.5/infback.c	/^int ZEXPORT inflateBackEnd(strm)$/;"	f
inflateBackEnd	3rdparty/zlib-1.2.5/zconf.h	/^#  define inflateBackEnd /;"	d
inflateBackInit	3rdparty/zlib-1.2.5/zlib.h	/^#define inflateBackInit(/;"	d
inflateBackInit_	3rdparty/zlib-1.2.5/infback.c	/^int ZEXPORT inflateBackInit_(strm, windowBits, window, version, stream_size)$/;"	f
inflateBackInit_	3rdparty/zlib-1.2.5/zconf.h	/^#  define inflateBackInit_ /;"	d
inflateCopy	3rdparty/zlib-1.2.5/inflate.c	/^int ZEXPORT inflateCopy(dest, source)$/;"	f
inflateCopy	3rdparty/zlib-1.2.5/zconf.h	/^#  define inflateCopy /;"	d
inflateEnd	3rdparty/zlib-1.2.5/inflate.c	/^int ZEXPORT inflateEnd(strm)$/;"	f
inflateEnd	3rdparty/zlib-1.2.5/zconf.h	/^#  define inflateEnd /;"	d
inflateGetHeader	3rdparty/zlib-1.2.5/inflate.c	/^int ZEXPORT inflateGetHeader(strm, head)$/;"	f
inflateGetHeader	3rdparty/zlib-1.2.5/zconf.h	/^#  define inflateGetHeader /;"	d
inflateInit	3rdparty/zlib-1.2.5/zlib.h	/^#define inflateInit(/;"	d
inflateInit2	3rdparty/zlib-1.2.5/zlib.h	/^#define inflateInit2(/;"	d
inflateInit2_	3rdparty/zlib-1.2.5/inflate.c	/^int ZEXPORT inflateInit2_(strm, windowBits, version, stream_size)$/;"	f
inflateInit2_	3rdparty/zlib-1.2.5/zconf.h	/^#  define inflateInit2_ /;"	d
inflateInit_	3rdparty/zlib-1.2.5/inflate.c	/^int ZEXPORT inflateInit_(strm, version, stream_size)$/;"	f
inflateInit_	3rdparty/zlib-1.2.5/zconf.h	/^#  define inflateInit_ /;"	d
inflateMark	3rdparty/zlib-1.2.5/inflate.c	/^long ZEXPORT inflateMark(strm)$/;"	f
inflateMark	3rdparty/zlib-1.2.5/zconf.h	/^#  define inflateMark /;"	d
inflatePrime	3rdparty/zlib-1.2.5/inflate.c	/^int ZEXPORT inflatePrime(strm, bits, value)$/;"	f
inflatePrime	3rdparty/zlib-1.2.5/zconf.h	/^#  define inflatePrime /;"	d
inflateReset	3rdparty/zlib-1.2.5/inflate.c	/^int ZEXPORT inflateReset(strm)$/;"	f
inflateReset	3rdparty/zlib-1.2.5/zconf.h	/^#  define inflateReset /;"	d
inflateReset2	3rdparty/zlib-1.2.5/inflate.c	/^int ZEXPORT inflateReset2(strm, windowBits)$/;"	f
inflateReset2	3rdparty/zlib-1.2.5/zconf.h	/^#  define inflateReset2 /;"	d
inflateSetDictionary	3rdparty/zlib-1.2.5/inflate.c	/^int ZEXPORT inflateSetDictionary(strm, dictionary, dictLength)$/;"	f
inflateSetDictionary	3rdparty/zlib-1.2.5/zconf.h	/^#  define inflateSetDictionary /;"	d
inflateSync	3rdparty/zlib-1.2.5/inflate.c	/^int ZEXPORT inflateSync(strm)$/;"	f
inflateSync	3rdparty/zlib-1.2.5/zconf.h	/^#  define inflateSync /;"	d
inflateSyncPoint	3rdparty/zlib-1.2.5/inflate.c	/^int ZEXPORT inflateSyncPoint(strm)$/;"	f
inflateSyncPoint	3rdparty/zlib-1.2.5/zconf.h	/^#  define inflateSyncPoint /;"	d
inflateUndermine	3rdparty/zlib-1.2.5/inflate.c	/^int ZEXPORT inflateUndermine(strm, subvert)$/;"	f
inflateUndermine	3rdparty/zlib-1.2.5/zconf.h	/^#  define inflateUndermine /;"	d
inflate_copyright	3rdparty/zlib-1.2.5/inftrees.c	/^const char inflate_copyright[] =$/;"	v
inflate_copyright	3rdparty/zlib-1.2.5/zconf.h	/^#  define inflate_copyright /;"	d
inflate_fast	3rdparty/zlib-1.2.5/inffast.c	/^void ZLIB_INTERNAL inflate_fast(strm, start)$/;"	f
inflate_fast	3rdparty/zlib-1.2.5/zconf.h	/^#  define inflate_fast /;"	d
inflate_mode	3rdparty/zlib-1.2.5/inflate.h	/^} inflate_mode;$/;"	t	typeref:enum:__anon75
inflate_state	3rdparty/zlib-1.2.5/inflate.h	/^struct inflate_state {$/;"	s
inflate_table	3rdparty/zlib-1.2.5/inftrees.c	/^int ZLIB_INTERNAL inflate_table(type, lens, codes, table, bits, work)$/;"	f
inflate_table	3rdparty/zlib-1.2.5/zconf.h	/^#  define inflate_table /;"	d
info	3rdparty/tiff-3.9.4/tif_compress.c	/^	TIFFCodec*	info;$/;"	m	struct:_codec	file:
info	3rdparty/tiff-3.9.4/tiffio.h	/^    const TIFFFieldInfo  *info;$/;"	m	struct:_TIFFTagValue
init	3rdparty/ilmbase-1.0.2/ImathRandom.h	/^Rand32::init (unsigned long int seed)$/;"	f	class:Imath::Rand32
init	3rdparty/ilmbase-1.0.2/ImathRandom.h	/^Rand48::init (unsigned long int seed)$/;"	f	class:Imath::Rand48
init	3rdparty/tiff-3.9.4/tiffio.h	/^	TIFFInitMethod	init;$/;"	m	struct:__anon67
init	core/kdtree.h	/^    void init(float p, uint32_t a) {$/;"	f	struct:KdNode
initCIELabConversion	3rdparty/tiff-3.9.4/tif_getimage.c	/^initCIELabConversion(TIFFRGBAImage* img)$/;"	f	file:
initColorConversion	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesInputFile::Data::initColorConversion ()$/;"	f	class:Imf::AcesInputFile::Data
initELut	3rdparty/ilmbase-1.0.2/eLut.cpp	/^initELut (unsigned short eLut[])$/;"	f
initInterior	accelerators/kdtreeaccel.cpp	/^    void initInterior(uint32_t axis, uint32_t ac, float s) {$/;"	f	struct:KdAccelNode
initLeaf	accelerators/kdtreeaccel.cpp	/^void KdAccelNode::initLeaf(uint32_t *primNums, int np,$/;"	f	class:KdAccelNode
initLeaf	core/kdtree.h	/^    void initLeaf() {$/;"	f	struct:KdNode
initYCbCrConversion	3rdparty/tiff-3.9.4/tif_getimage.c	/^initYCbCrConversion(TIFFRGBAImage* img)$/;"	f	file:
init_block	3rdparty/zlib-1.2.5/trees.c	/^local void init_block(s)$/;"	f
init_rule_ply	tools/ply.c	/^PlyPropRules *init_rule_ply (PlyFile *ply, char *elem_name)$/;"	f
init_tga_image	core/targa.c	/^static void init_tga_image(tga_image *img, uint8_t *image,$/;"	f	file:
initialAxis	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^    Axis		initialAxis() const { return _initialAxis; }$/;"	f	class:Imath::Euler
initialRepeated	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^    bool		initialRepeated() const { return _initialRepeated; }$/;"	f	class:Imath::Euler
initialSample	renderers/metropolis.cpp	/^    const MLTSample &initialSample;$/;"	m	class:MLTTask	file:
initialize	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^initialize (Header &header,$/;"	f	namespace:Imf::__anon19
initialize	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^InputFile::initialize ()$/;"	f	class:Imf::InputFile
initialize	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^OutputFile::initialize (const Header &header)$/;"	f	class:Imf::OutputFile
initialize	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::initialize ()$/;"	f	class:Imf::TiledInputFile
initialize	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::initialize (const Header &header)$/;"	f	class:Imf::TiledOutputFile
inline	3rdparty/tiff-3.9.4/tif_config.h	/^#  define inline /;"	d
inline	3rdparty/tiff-3.9.4/tif_config.vc.h	/^#  define inline /;"	d
inline	3rdparty/tiff-3.9.4/tif_config.wince.h	/^#  define inline /;"	d
innerRadius	shapes/disk.h	/^    float height, radius, innerRadius, phiMax;$/;"	m	class:Disk
ins_h	3rdparty/zlib-1.2.5/deflate.h	/^    uInt  ins_h;          \/* hash index of string to be inserted *\/$/;"	m	struct:internal_state
insert	3rdparty/openexr-1.7.0/ImfChannelList.cpp	/^ChannelList::insert (const char name[], const Channel &channel)$/;"	f	class:Imf::ChannelList
insert	3rdparty/openexr-1.7.0/ImfChannelList.cpp	/^ChannelList::insert (const string &name, const Channel &channel)$/;"	f	class:Imf::ChannelList
insert	3rdparty/openexr-1.7.0/ImfFrameBuffer.cpp	/^FrameBuffer::insert (const char name[], const Slice &slice)$/;"	f	class:Imf::FrameBuffer
insert	3rdparty/openexr-1.7.0/ImfFrameBuffer.cpp	/^FrameBuffer::insert (const string &name, const Slice &slice)$/;"	f	class:Imf::FrameBuffer
insert	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::insert (const char name[], const Attribute &attribute)$/;"	f	class:Imf::Header
insert	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::insert (const string &name, const Attribute &attribute)$/;"	f	class:Imf::Header
insertChannels	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^insertChannels (Header &header, RgbaChannels rgbaChannels)$/;"	f	namespace:Imf::__anon28
insertChannels	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^insertChannels (Header &header,$/;"	f	namespace:Imf::__anon39
insertViewName	3rdparty/openexr-1.7.0/ImfMultiView.cpp	/^insertViewName (const string &channel,$/;"	f	namespace:Imf
insideDot	textures/dots.h	/^    Reference<Texture<T> > outsideDot, insideDot;$/;"	m	class:DotsTexture
instances	core/api.cpp	/^    map<string, vector<Reference<Primitive> > > instances;$/;"	m	struct:RenderOptions	file:
int16	3rdparty/tiff-3.9.4/tiff.h	/^typedef	short int16;$/;"	t
int32	3rdparty/tiff-3.9.4/tiff.h	/^typedef	int int32;$/;"	t
int32	3rdparty/tiff-3.9.4/tiff.h	/^typedef	long int32;$/;"	t
int64	3rdparty/tiff-3.9.4/tiffiop.h	/^typedef TIFF_INT64_T  int64;$/;"	t
int8	3rdparty/tiff-3.9.4/tiff.h	/^typedef	signed char int8;	\/* NB: non-ANSI compilers may not grok *\/$/;"	t
integrator	integrators/photonmap.cpp	/^    PhotonIntegrator *integrator;$/;"	m	class:PhotonShootingTask	file:
intermediate	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^intermediate (const Quat<T> &q0, const Quat<T> &q1, const Quat<T> &q2)$/;"	f	namespace:Imath
internal_state	3rdparty/zlib-1.2.5/deflate.h	/^typedef struct internal_state {$/;"	s
internal_state	3rdparty/zlib-1.2.5/zconf.h	/^#  define internal_state /;"	d
internal_state	3rdparty/zlib-1.2.5/zlib.h	/^    struct internal_state {int dummy;};$/;"	s
internal_state	3rdparty/zlib-1.2.5/zutil.c	/^struct internal_state      {int dummy;}; \/* for buggy compilers *\/$/;"	s	file:
internal_type	tools/ply.h	/^  int internal_type;            \/* program's data type *\/$/;"	m	struct:PlyProperty
interpolateE	integrators/irradiancecache.cpp	/^bool IrradianceCacheIntegrator::interpolateE(const Scene *scene,$/;"	f	class:IrradianceCacheIntegrator
intersect	3rdparty/ilmbase-1.0.2/ImathLineAlgo.h	/^intersect$/;"	f	namespace:Imath
intersect	3rdparty/ilmbase-1.0.2/ImathPlane.h	/^inline bool Plane3<T>::intersect(const Line3<T>& line, Vec3<T>& point) const$/;"	f	class:Imath::Plane3
intersect	3rdparty/ilmbase-1.0.2/ImathSphere.h	/^bool Sphere3<T>::intersect(const Line3<T> &line, Vec3<T> &intersection) const$/;"	f	class:Imath::Sphere3
intersectT	3rdparty/ilmbase-1.0.2/ImathPlane.h	/^inline bool Plane3<T>::intersectT(const Line3<T>& line, T &t) const$/;"	f	class:Imath::Plane3
intersectT	3rdparty/ilmbase-1.0.2/ImathSphere.h	/^bool Sphere3<T>::intersectT(const Line3<T> &line, T &t) const$/;"	f	class:Imath::Sphere3
intersects	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<T>::intersects(const Box<T> &box) const$/;"	f	class:Imath::Box
intersects	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<T>::intersects(const T &point) const$/;"	f	class:Imath::Box
intersects	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<Vec2<T> >::intersects (const Box<Vec2<T> > &box) const$/;"	f	class:Imath::Box
intersects	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<Vec2<T> >::intersects (const Vec2<T> &point) const$/;"	f	class:Imath::Box
intersects	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<Vec3<T> >::intersects (const Box<Vec3<T> > &box) const$/;"	f	class:Imath::Box
intersects	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<Vec3<T> >::intersects (const Vec3<T> &point) const$/;"	f	class:Imath::Box
intersects	3rdparty/ilmbase-1.0.2/ImathBoxAlgo.h	/^intersects (const Box< Vec3<T> > &b, const Line3<T> &r, Vec3<T> &ip)$/;"	f	namespace:Imath
intersects	3rdparty/ilmbase-1.0.2/ImathBoxAlgo.h	/^intersects (const Box< Vec3<T> > &box, const Line3<T> &ray)$/;"	f	namespace:Imath
intersects	3rdparty/ilmbase-1.0.2/ImathInterval.h	/^Interval<T>::intersects(const Interval<T>& interval) const$/;"	f	class:Imath::Interval
intersects	3rdparty/ilmbase-1.0.2/ImathInterval.h	/^Interval<T>::intersects(const T& point) const$/;"	f	class:Imath::Interval
intf	3rdparty/zlib-1.2.5/zconf.h	/^#  define intf /;"	d
intf	3rdparty/zlib-1.2.5/zconf.h	/^typedef int   FAR intf;$/;"	t
ints	core/paramset.h	/^    vector<Reference<ParamSetItem<int> > > ints;$/;"	m	class:ParamSet
invWidth	accelerators/grid.h	/^    Vector width, invWidth;$/;"	m	class:GridAccel
invXWidth	core/filter.h	/^    const float invXWidth, invYWidth;$/;"	m	class:Filter
invYWidth	core/filter.h	/^    const float invXWidth, invYWidth;$/;"	m	class:Filter
invalidCode	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^invalidCode ()$/;"	f	namespace:Imf::__anon20
invalidNBits	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^invalidNBits ()$/;"	f	namespace:Imf::__anon20
invalidTableEntry	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^invalidTableEntry ()$/;"	f	namespace:Imf::__anon20
invalidTableSize	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^invalidTableSize ()$/;"	f	namespace:Imf::__anon20
inverse	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::inverse (bool singExc) const throw (Iex::MathExc)$/;"	f	class:Imath::Matrix33
inverse	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::inverse (bool singExc) const throw (Iex::MathExc)$/;"	f	class:Imath::Matrix44
inverse	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^Quat<T>::inverse () const$/;"	f	class:Imath::Quat
invert	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::invert (bool singExc) throw (Iex::MathExc)$/;"	f	class:Imath::Matrix33
invert	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::invert (bool singExc) throw (Iex::MathExc)$/;"	f	class:Imath::Matrix44
invert	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^Quat<T>::invert ()$/;"	f	class:Imath::Quat
ior	tools/obj2pbrt.cpp	/^    float ior;                \/\/ index of refraction$/;"	m	struct:tinyobj::__anon90	file:
ips	integrators/dipolesubsurface.cpp	/^        IrradiancePoint *ips[8];$/;"	m	union:SubsurfaceOctreeNode::__anon88	file:
irradianceCache	integrators/irradiancecache.cpp	/^    IrradianceCacheIntegrator *irradianceCache;$/;"	m	struct:IrradiancePrimeTask	file:
irradiancePoints	integrators/dipolesubsurface.h	/^    vector<IrradiancePoint> irradiancePoints;$/;"	m	class:DipoleSubsurfaceIntegrator
is	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^    IStream *		is;$/;"	m	struct:Imf::InputFile::Data	file:
is	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    IStream *		is;                 \/\/ file stream to read from$/;"	m	struct:Imf::ScanLineInputFile::Data	file:
is	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    IStream *	    is;			    \/\/ file stream to read from$/;"	m	struct:Imf::TiledInputFile::Data	file:
is2DEncoding	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	is2DEncoding(/;"	d	file:
isAligned	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	isAligned(/;"	d	file:
isCCITTCompression	3rdparty/tiff-3.9.4/tif_getimage.c	/^isCCITTCompression(TIFF* tif)$/;"	f	file:
isComplete	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesInputFile::isComplete () const$/;"	f	class:Imf::AcesInputFile
isComplete	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^InputFile::isComplete () const$/;"	f	class:Imf::InputFile
isComplete	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaInputFile::isComplete () const$/;"	f	class:Imf::RgbaInputFile
isComplete	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^ScanLineInputFile::isComplete () const$/;"	f	class:Imf::ScanLineInputFile
isComplete	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::isComplete () const$/;"	f	class:Imf::TiledInputFile
isComplete	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::isComplete () const$/;"	f	class:Imf::TiledRgbaInputFile
isContig	3rdparty/tiff-3.9.4/tiffio.h	/^	int isContig;                           \/* data is packed\/separate *\/$/;"	m	struct:_TIFFRGBAImage
isDenormalized	3rdparty/ilmbase-1.0.2/half.h	/^half::isDenormalized () const$/;"	f	class:half
isEmpty	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^    Semaphore	isEmpty;	\/\/ used to signal that the taskgroup is empty$/;"	m	struct:IlmThread::TaskGroup::Data	file:
isEmpty	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<T>::isEmpty() const$/;"	f	class:Imath::Box
isEmpty	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<Vec2<T> >::isEmpty() const$/;"	f	class:Imath::Box
isEmpty	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<Vec3<T> >::isEmpty() const$/;"	f	class:Imath::Box
isEmpty	3rdparty/ilmbase-1.0.2/ImathInterval.h	/^Interval<T>::isEmpty() const$/;"	f	class:Imath::Interval
isEmpty	3rdparty/openexr-1.7.0/ImfTileOffsets.cpp	/^TileOffsets::isEmpty () const$/;"	f	class:Imf::TileOffsets
isFillOrder	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	isFillOrder(/;"	d
isFinite	3rdparty/ilmbase-1.0.2/half.h	/^half::isFinite () const$/;"	f	class:half
isFinite	3rdparty/openexr-1.7.0/ImfConvert.cpp	/^isFinite (float f)$/;"	f	namespace:Imf::__anon17
isHomogeneous	shapes/nurbs.h	/^    bool isHomogeneous;$/;"	m	class:NURBS
isImfMagic	3rdparty/openexr-1.7.0/ImfVersion.cpp	/^isImfMagic (const char bytes[4])$/;"	f	namespace:Imf
isInfinity	3rdparty/ilmbase-1.0.2/half.h	/^half::isInfinity () const$/;"	f	class:half
isInfinity	3rdparty/openexr-1.7.0/ImfConvert.cpp	/^isInfinity (float f)$/;"	f	namespace:Imf::__anon17
isIntegral	3rdparty/ilmbase-1.0.2/ImathHalfLimits.h	/^    static bool			isIntegral()	{return false;}$/;"	f	struct:Imath::limits
isIntegral	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static bool			isIntegral()	{return false;}$/;"	f	struct:Imath::limits
isIntegral	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static bool			isIntegral()	{return true;}$/;"	f	struct:Imath::limits
isLeaf	integrators/dipolesubsurface.cpp	/^    bool isLeaf;$/;"	m	struct:SubsurfaceOctreeNode	file:
isMapped	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	isMapped(/;"	d
isMemoryMapped	3rdparty/openexr-1.7.0/ImfIO.cpp	/^IStream::isMemoryMapped () const$/;"	f	class:Imf::IStream
isNan	3rdparty/ilmbase-1.0.2/half.h	/^half::isNan () const$/;"	f	class:half
isNan	3rdparty/openexr-1.7.0/ImfConvert.cpp	/^isNan (float f)$/;"	f	namespace:Imf::__anon17
isNegative	3rdparty/ilmbase-1.0.2/half.h	/^half::isNegative () const$/;"	f	class:half
isNegative	3rdparty/openexr-1.7.0/ImfConvert.cpp	/^isNegative (float f)$/;"	f	namespace:Imf::__anon17
isNewLine	tools/obj2pbrt.cpp	/^static inline bool isNewLine(const char c) {$/;"	f	namespace:tinyobj
isNormalized	3rdparty/ilmbase-1.0.2/half.h	/^half::isNormalized () const$/;"	f	class:half
isOpenExrFile	3rdparty/openexr-1.7.0/ImfTestFile.cpp	/^isOpenExrFile (IStream &is)$/;"	f	namespace:Imf
isOpenExrFile	3rdparty/openexr-1.7.0/ImfTestFile.cpp	/^isOpenExrFile (IStream &is, bool &tiled)$/;"	f	namespace:Imf
isOpenExrFile	3rdparty/openexr-1.7.0/ImfTestFile.cpp	/^isOpenExrFile (const char fileName[])$/;"	f	namespace:Imf
isOpenExrFile	3rdparty/openexr-1.7.0/ImfTestFile.cpp	/^isOpenExrFile (const char fileName[], bool &tiled)$/;"	f	namespace:Imf
isPseudoTag	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	isPseudoTag(/;"	d
isSameType	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^    struct isSameType$/;"	s	class:Imath::Matrix33
isSameType	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^    struct isSameType$/;"	s	class:Imath::Matrix44
isSameType	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^    struct isSameType<R, R>$/;"	s	class:Imath::Matrix33
isSameType	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^    struct isSameType<R, R>$/;"	s	class:Imath::Matrix44
isSigned	3rdparty/ilmbase-1.0.2/ImathHalfLimits.h	/^    static bool			isSigned()	{return true;}$/;"	f	struct:Imath::limits
isSigned	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static bool			isSigned()	{return (char) ~0 < 0;}$/;"	f	struct:Imath::limits
isSigned	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static bool			isSigned()	{return false;}$/;"	f	struct:Imath::limits
isSigned	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static bool			isSigned()	{return true;}$/;"	f	struct:Imath::limits
isSpace	tools/obj2pbrt.cpp	/^static inline bool isSpace(const char c) {$/;"	f	namespace:tinyobj
isString	core/pbrtparse.cpp	/^    bool isString;$/;"	m	struct:ParamArray	file:
isString	core/pbrtparse.cpp	/^    bool isString;$/;"	m	struct:ParamListItem	file:
isTiled	3rdparty/openexr-1.7.0/ImfVersion.h	/^inline bool  isTiled (int version)	{return !!(version & TILED_FLAG);}$/;"	f	namespace:Imf
isTiled	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	isTiled(/;"	d
isTiledOpenExrFile	3rdparty/openexr-1.7.0/ImfTestFile.cpp	/^isTiledOpenExrFile (IStream &is)$/;"	f	namespace:Imf
isTiledOpenExrFile	3rdparty/openexr-1.7.0/ImfTestFile.cpp	/^isTiledOpenExrFile (const char fileName[])$/;"	f	namespace:Imf
isUnspecified	3rdparty/tiff-3.9.4/tif_write.c	/^#define	isUnspecified(/;"	d	file:
isUnspecified	3rdparty/tiff-3.9.4/tif_write.c	/^#undef isUnspecified$/;"	d	file:
isUpSampled	3rdparty/tiff-3.9.4/tiffiop.h	/^#define	isUpSampled(/;"	d
isValidCompression	3rdparty/openexr-1.7.0/ImfCompressor.cpp	/^isValidCompression (Compression c)$/;"	f	namespace:Imf
isValidLevel	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::isValidLevel (int lx, int ly) const$/;"	f	class:Imf::TiledInputFile
isValidLevel	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::isValidLevel (int lx, int ly) const$/;"	f	class:Imf::TiledOutputFile
isValidLevel	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::isValidLevel (int lx, int ly) const$/;"	f	class:Imf::TiledRgbaInputFile
isValidLevel	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::isValidLevel (int lx, int ly) const$/;"	f	class:Imf::TiledRgbaOutputFile
isValidTile	3rdparty/openexr-1.7.0/ImfTileOffsets.cpp	/^TileOffsets::isValidTile (int dx, int dy, int lx, int ly) const$/;"	f	class:Imf::TileOffsets
isValidTile	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::isValidTile (int dx, int dy, int lx, int ly) const$/;"	f	class:Imf::TiledInputFile
isValidTile	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::isValidTile (int dx, int dy, int lx, int ly) const$/;"	f	class:Imf::TiledOutputFile
isWhitespace	core/imageio.cpp	/^static inline int isWhitespace( char c )$/;"	f	file:
isZero	3rdparty/ilmbase-1.0.2/half.h	/^half::isZero () const$/;"	f	class:half
is_bounded	3rdparty/ilmbase-1.0.2/halfLimits.h	/^    static const bool is_bounded = false;$/;"	m	class:std::numeric_limits
is_exact	3rdparty/ilmbase-1.0.2/halfLimits.h	/^    static const bool is_exact = false;$/;"	m	class:std::numeric_limits
is_iec559	3rdparty/ilmbase-1.0.2/halfLimits.h	/^    static const bool is_iec559 = false;$/;"	m	class:std::numeric_limits
is_integer	3rdparty/ilmbase-1.0.2/halfLimits.h	/^    static const bool is_integer = false;$/;"	m	class:std::numeric_limits
is_list	tools/ply.h	/^  int is_list;                  \/* 0 = scalar, 1 = list, 2 = char string *\/$/;"	m	struct:PlyProperty
is_modulo	3rdparty/ilmbase-1.0.2/halfLimits.h	/^    static const bool is_modulo = false;$/;"	m	class:std::numeric_limits
is_signed	3rdparty/ilmbase-1.0.2/halfLimits.h	/^    static const bool is_signed = true;$/;"	m	class:std::numeric_limits
is_specialized	3rdparty/ilmbase-1.0.2/halfLimits.h	/^    static const bool is_specialized = true;$/;"	m	class:std::numeric_limits
isatty	3rdparty/unistd.h	/^static int isatty(int) { return 0; }$/;"	f
isect	renderers/metropolis.cpp	/^    Intersection isect;$/;"	m	struct:PathVertex	file:
isectCost	accelerators/kdtreeaccel.h	/^    int isectCost, traversalCost, maxPrims, maxDepth;$/;"	m	class:KdTreeAccel
isinf	core/pbrt.h	/^#define isinf(/;"	d
isnan	core/pbrt.h	/^#define isnan /;"	d
isoBRDFData	core/reflection.h	/^    const KdTree<IrregIsotropicBRDFSample> *isoBRDFData;$/;"	m	class:IrregIsotropicBRDF
iszero	3rdparty/ilmbase-1.0.2/ImathFun.h	/^iszero (T a, T t)$/;"	f	namespace:Imath
itrunc	3rdparty/tiff-3.9.4/tif_luv.c	/^#define itrunc(/;"	d	file:
jbigFieldInfo	3rdparty/tiff-3.9.4/tif_jbig.c	/^static const TIFFFieldInfo jbigFieldInfo[] = $/;"	v	file:
jitterSamples	samplers/stratified.h	/^    bool jitterSamples;$/;"	m	class:StratifiedSampler
jpegFieldInfo	3rdparty/tiff-3.9.4/tif_jpeg.c	/^static const TIFFFieldInfo jpegFieldInfo[] = {$/;"	v	file:
jpeg_common_struct	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^typedef struct jpeg_common_struct jpeg_common_struct;$/;"	t	typeref:struct:jpeg_common_struct	file:
jpeg_create_decompress_encap	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^jpeg_create_decompress_encap(OJPEGState* sp, jpeg_decompress_struct* cinfo)$/;"	f	file:
jpeg_decompress_struct	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^typedef struct jpeg_decompress_struct jpeg_decompress_struct;$/;"	t	typeref:struct:jpeg_decompress_struct	file:
jpeg_destination_mgr	3rdparty/tiff-3.9.4/tif_jpeg.c	/^typedef struct jpeg_destination_mgr jpeg_destination_mgr;$/;"	t	typeref:struct:jpeg_destination_mgr	file:
jpeg_encap_unwind	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^jpeg_encap_unwind(TIFF* tif)$/;"	f	file:
jpeg_error_mgr	3rdparty/tiff-3.9.4/tif_jpeg.c	/^typedef	struct jpeg_error_mgr jpeg_error_mgr;$/;"	t	typeref:struct:jpeg_error_mgr	file:
jpeg_error_mgr	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^typedef struct jpeg_error_mgr jpeg_error_mgr;$/;"	t	typeref:struct:jpeg_error_mgr	file:
jpeg_interchange_format	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	toff_t jpeg_interchange_format;$/;"	m	struct:__anon55	file:
jpeg_interchange_format_length	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	toff_t jpeg_interchange_format_length;$/;"	m	struct:__anon55	file:
jpeg_proc	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8 jpeg_proc;$/;"	m	struct:__anon55	file:
jpeg_read_header_encap	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^jpeg_read_header_encap(OJPEGState* sp, jpeg_decompress_struct* cinfo, uint8 require_image)$/;"	f	file:
jpeg_read_raw_data_encap	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^jpeg_read_raw_data_encap(OJPEGState* sp, jpeg_decompress_struct* cinfo, void* data, uint32 max_lines)$/;"	f	file:
jpeg_read_scanlines_encap	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^jpeg_read_scanlines_encap(OJPEGState* sp, jpeg_decompress_struct* cinfo, void* scanlines, uint32 max_lines)$/;"	f	file:
jpeg_source_mgr	3rdparty/tiff-3.9.4/tif_jpeg.c	/^typedef struct jpeg_source_mgr jpeg_source_mgr;$/;"	t	typeref:struct:jpeg_source_mgr	file:
jpeg_source_mgr	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^typedef struct jpeg_source_mgr jpeg_source_mgr;$/;"	t	typeref:struct:jpeg_source_mgr	file:
jpeg_start_decompress_encap	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^jpeg_start_decompress_encap(OJPEGState* sp, jpeg_decompress_struct* cinfo)$/;"	f	file:
jpegcolormode	3rdparty/tiff-3.9.4/tif_jpeg.c	/^	int		jpegcolormode;	\/* Auto RGB<=>YCbCr convert? *\/$/;"	m	struct:__anon48	file:
jpegquality	3rdparty/tiff-3.9.4/tif_jpeg.c	/^	int		jpegquality;	\/* Compression quality level *\/$/;"	m	struct:__anon48	file:
jpegtables	3rdparty/tiff-3.9.4/tif_jpeg.c	/^	void*		jpegtables;	\/* JPEGTables tag value, or NULL *\/$/;"	m	struct:__anon48	file:
jpegtables_length	3rdparty/tiff-3.9.4/tif_jpeg.c	/^	uint32		jpegtables_length; \/* number of bytes in same *\/$/;"	m	struct:__anon48	file:
jpegtablesmode	3rdparty/tiff-3.9.4/tif_jpeg.c	/^	int		jpegtablesmode;	\/* What to put in JPEGTables *\/$/;"	m	struct:__anon48	file:
k	3rdparty/tiff-3.9.4/tif_fax3.c	/^	int	k;			\/* #rows left that can be 2d encoded *\/$/;"	m	struct:__anon45	file:
k	core/reflection.h	/^    Spectrum eta, k;$/;"	m	class:FresnelConductor
k	materials/metal.h	/^    Reference<Texture<Spectrum> > eta, k;$/;"	m	class:MetalMaterial
kernel	integrators/photonmap.cpp	/^inline float kernel(const Photon *photon, const Point &p,$/;"	f
knownType	3rdparty/openexr-1.7.0/ImfAttribute.cpp	/^Attribute::knownType (const char typeName[])$/;"	f	class:Imf::Attribute
lRunTask	core/parallel.cpp	/^static void lRunTask(void *t) {$/;"	f	file:
l_buf	3rdparty/zlib-1.2.5/deflate.h	/^    uchf *l_buf;          \/* buffer for literals or lengths *\/$/;"	m	struct:internal_state
l_desc	3rdparty/zlib-1.2.5/deflate.h	/^    struct tree_desc_s l_desc;               \/* desc. for literal tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::tree_desc_s
lambda	core/sh.cpp	/^static inline float lambda(float l) {$/;"	f	file:
largeStepsPerPixel	renderers/metropolis.h	/^    uint32_t largeStepsPerPixel, nBootstrap, maxConsecutiveRejects;$/;"	m	class:MetropolisRenderer
last	3rdparty/zlib-1.2.5/inflate.h	/^    int last;                   \/* true if processing last block *\/$/;"	m	struct:inflate_state
lastFrame	3rdparty/ilmbase-1.0.2/ImathFrame.h	/^template<class T> Matrix44<T> lastFrame$/;"	f	namespace:Imath
last_eob_len	3rdparty/zlib-1.2.5/deflate.h	/^    int last_eob_len;   \/* bit length of EOB code for last block *\/$/;"	m	struct:internal_state
last_flush	3rdparty/zlib-1.2.5/deflate.h	/^    int   last_flush;    \/* value of flush param for previous deflate call *\/$/;"	m	struct:internal_state
last_lit	3rdparty/zlib-1.2.5/deflate.h	/^    uInt last_lit;      \/* running index in l_buf *\/$/;"	m	struct:internal_state
latLong	3rdparty/openexr-1.7.0/ImfEnvmap.cpp	/^latLong (const Box2i &dataWindow, const V2f &pixelPosition)$/;"	f	namespace:Imf::LatLongMap
latLong	3rdparty/openexr-1.7.0/ImfEnvmap.cpp	/^latLong (const V3f &dir)$/;"	f	namespace:Imf::LatLongMap
layers	3rdparty/openexr-1.7.0/ImfChannelList.cpp	/^ChannelList::layers (set <string> &layerNames) const$/;"	f	class:Imf::ChannelList
le	core/volume.h	/^    Spectrum sig_a, sig_s, le;$/;"	m	class:DensityRegion
le	volumes/homogeneous.h	/^    Spectrum sig_a, sig_s, le;$/;"	m	class:HomogeneousVolumeDensity
left	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^    T			left() const		{ return _left;		}$/;"	f	class:Imath::Frustum
legal	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^Euler<T>::legal(typename Euler<T>::Order order)$/;"	f	class:Imath::Euler
legendrep	core/sh.cpp	/^static void legendrep(float x, int lmax, float *out) {$/;"	f	file:
len	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^    int		len:8;		\/\/ code length		0	 $/;"	m	struct:Imf::__anon20::HufDec	file:
len	3rdparty/zlib-1.2.5/deflate.h	/^        ush  len;        \/* length of bit string *\/$/;"	m	union:ct_data_s::__anon73
lenbits	3rdparty/zlib-1.2.5/inflate.h	/^    unsigned lenbits;           \/* index bits for lencode *\/$/;"	m	struct:inflate_state
lencode	3rdparty/zlib-1.2.5/inflate.h	/^    code const FAR *lencode;    \/* starting table for length\/literal codes *\/$/;"	m	struct:inflate_state
lenfix	3rdparty/zlib-1.2.5/inffixed.h	/^    static const code lenfix[512] = {$/;"	v
length	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^Quat<T>::length () const$/;"	f	class:Imath::Quat
length	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec2<int>::length () const$/;"	f	class:Imath::Vec2
length	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec2<short>::length () const$/;"	f	class:Imath::Vec2
length	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec3<int>::length () const$/;"	f	class:Imath::Vec3
length	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec3<short>::length () const$/;"	f	class:Imath::Vec3
length	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec4<int>::length () const$/;"	f	class:Imath::Vec4
length	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec4<short>::length () const$/;"	f	class:Imath::Vec4
length	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::length () const$/;"	f	class:Imath::Vec2
length	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::length () const$/;"	f	class:Imath::Vec3
length	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::length () const$/;"	f	class:Imath::Vec4
length	3rdparty/tiff-3.9.4/t4.h	/^    unsigned short length;	\/* bit length of g3 code *\/$/;"	m	struct:tableentry
length	3rdparty/tiff-3.9.4/tif_lzw.c	/^	unsigned short	length;		\/* string len, including this token *\/$/;"	m	struct:code_ent	file:
length	3rdparty/zlib-1.2.5/inflate.h	/^    unsigned length;            \/* literal or length of data to copy *\/$/;"	m	struct:inflate_state
length2	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::length2 () const$/;"	f	class:Imath::Vec2
length2	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::length2 () const$/;"	f	class:Imath::Vec3
length2	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::length2 () const$/;"	f	class:Imath::Vec4
lengthTiny	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::lengthTiny () const$/;"	f	class:Imath::Vec2
lengthTiny	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::lengthTiny () const$/;"	f	class:Imath::Vec3
lengthTiny	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::lengthTiny () const$/;"	f	class:Imath::Vec4
lens	3rdparty/zlib-1.2.5/inflate.h	/^    unsigned short lens[320];   \/* temporary storage for code lengths *\/$/;"	m	struct:inflate_state
lensRadius	core/camera.h	/^    float lensRadius, focalDistance;$/;"	m	class:ProjectiveCamera
lensSamples	samplers/random.h	/^    float *imageSamples, *lensSamples, *timeSamples;$/;"	m	class:RandomSampler
lensSamples	tools/samplepat.cpp	/^static float lensSamples[SAMPLE_TABLE_SIZE][2];$/;"	v	file:
lensU	core/sampler.h	/^    float lensU, lensV;$/;"	m	struct:CameraSample
lensV	core/sampler.h	/^    float lensU, lensV;$/;"	m	struct:CameraSample
lerp	3rdparty/ilmbase-1.0.2/ImathFun.h	/^lerp (T a, T b, Q t)$/;"	f	namespace:Imath
lerpfactor	3rdparty/ilmbase-1.0.2/ImathFun.h	/^lerpfactor(T m, T a, T b)$/;"	f	namespace:Imath
letoh16	core/targa.h	/^# define letoh16(/;"	d
letoh16	core/targa.h	/^# undef letoh16$/;"	d
level	3rdparty/zlib-1.2.5/deflate.h	/^    int level;    \/* compression level (1..9) *\/$/;"	m	struct:internal_state
level	3rdparty/zlib-1.2.5/gzguts.h	/^    int level;              \/* compression level *\/$/;"	m	struct:__anon74
levelHeight	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::levelHeight (int ly) const$/;"	f	class:Imf::TiledInputFile
levelHeight	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::levelHeight (int ly) const$/;"	f	class:Imf::TiledOutputFile
levelHeight	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::levelHeight (int ly) const$/;"	f	class:Imf::TiledRgbaInputFile
levelHeight	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::levelHeight (int ly) const$/;"	f	class:Imf::TiledRgbaOutputFile
levelMode	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::levelMode () const$/;"	f	class:Imf::TiledInputFile
levelMode	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::levelMode () const$/;"	f	class:Imf::TiledOutputFile
levelMode	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::levelMode () const$/;"	f	class:Imf::TiledRgbaInputFile
levelMode	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::levelMode () const$/;"	f	class:Imf::TiledRgbaOutputFile
levelRoundingMode	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::levelRoundingMode () const$/;"	f	class:Imf::TiledInputFile
levelRoundingMode	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::levelRoundingMode () const$/;"	f	class:Imf::TiledOutputFile
levelRoundingMode	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::levelRoundingMode () const$/;"	f	class:Imf::TiledRgbaInputFile
levelRoundingMode	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::levelRoundingMode () const$/;"	f	class:Imf::TiledRgbaOutputFile
levelSize	3rdparty/openexr-1.7.0/ImfTiledMisc.cpp	/^levelSize (int min, int max, int l, LevelRoundingMode rmode)$/;"	f	namespace:Imf
levelWidth	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::levelWidth (int lx) const$/;"	f	class:Imf::TiledInputFile
levelWidth	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::levelWidth (int lx) const$/;"	f	class:Imf::TiledOutputFile
levelWidth	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::levelWidth (int lx) const$/;"	f	class:Imf::TiledRgbaInputFile
levelWidth	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::levelWidth (int lx) const$/;"	f	class:Imf::TiledRgbaOutputFile
lfind	3rdparty/tiff-3.9.4/tif_config.h	/^#define lfind /;"	d
lfind	3rdparty/tiff-3.9.4/tif_config.vc.h	/^#define lfind /;"	d
lfind	3rdparty/tiff-3.9.4/tif_config.wince.h	/^#define lfind /;"	d
libjpeg_jpeg_decompress_struct	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	jpeg_decompress_struct libjpeg_jpeg_decompress_struct;$/;"	m	struct:__anon55	file:
libjpeg_jpeg_error_mgr	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	jpeg_error_mgr libjpeg_jpeg_error_mgr;$/;"	m	struct:__anon55	file:
libjpeg_jpeg_query_style	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8 libjpeg_jpeg_query_style;$/;"	m	struct:__anon55	file:
libjpeg_jpeg_source_mgr	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	jpeg_source_mgr libjpeg_jpeg_source_mgr;$/;"	m	struct:__anon55	file:
libjpeg_session_active	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8 libjpeg_session_active;$/;"	m	struct:__anon55	file:
light	lights/infinite.cpp	/^    const InfiniteAreaLight *light;$/;"	m	struct:InfiniteAreaCube	file:
lightDir	lights/distant.h	/^    Vector lightDir;$/;"	m	class:DistantLight
lightDistribution	integrators/photonmap.cpp	/^    const Distribution1D *lightDistribution;$/;"	m	class:PhotonShootingTask	file:
lightDistribution	renderers/metropolis.cpp	/^    Distribution1D *lightDistribution;$/;"	m	class:MLTTask	file:
lightNum	renderers/metropolis.cpp	/^    float lightNum;$/;"	m	struct:LightingSample	file:
lightNumOffset	integrators/directlighting.h	/^    int lightNumOffset;$/;"	m	class:DirectLightingIntegrator
lightNumOffset	integrators/path.h	/^    int lightNumOffset[SAMPLE_DEPTH];$/;"	m	class:PathIntegrator
lightNumSample	renderers/metropolis.cpp	/^    float lightNumSample, lightRaySamples[5];$/;"	m	struct:MLTSample	file:
lightPathSamples	renderers/metropolis.cpp	/^    vector<PathSample> cameraPathSamples, lightPathSamples;$/;"	m	struct:MLTSample	file:
lightPos	lights/goniometric.h	/^    Point lightPos;$/;"	m	class:GonioPhotometricLight
lightPos	lights/point.h	/^    Point lightPos;$/;"	m	class:PointLight
lightPos	lights/projection.h	/^    Point lightPos;$/;"	m	class:ProjectionLight
lightPos	lights/spot.h	/^    Point lightPos;$/;"	m	class:SpotLight
lightProjection	lights/projection.h	/^    Transform lightProjection;$/;"	m	class:ProjectionLight
lightRaySamples	renderers/metropolis.cpp	/^    float lightNumSample, lightRaySamples[5];$/;"	m	struct:MLTSample	file:
lightSample	renderers/metropolis.cpp	/^    LightSample lightSample;$/;"	m	struct:LightingSample	file:
lightSampleOffsets	integrators/dipolesubsurface.h	/^    LightSampleOffsets *lightSampleOffsets;$/;"	m	class:DipoleSubsurfaceIntegrator
lightSampleOffsets	integrators/directlighting.h	/^    LightSampleOffsets *lightSampleOffsets;$/;"	m	class:DirectLightingIntegrator
lightSampleOffsets	integrators/igi.h	/^    LightSampleOffsets *lightSampleOffsets;$/;"	m	class:IGIIntegrator
lightSampleOffsets	integrators/irradiancecache.h	/^    LightSampleOffsets *lightSampleOffsets;$/;"	m	class:IrradianceCacheIntegrator
lightSampleOffsets	integrators/path.h	/^    LightSampleOffsets lightSampleOffsets[SAMPLE_DEPTH];$/;"	m	class:PathIntegrator
lightSampleOffsets	integrators/photonmap.h	/^    LightSampleOffsets *lightSampleOffsets;$/;"	m	class:PhotonIntegrator
lightSampleOffsets	integrators/useprobes.h	/^    LightSampleOffsets *lightSampleOffsets;$/;"	m	class:UseRadianceProbes
lightingSamples	renderers/metropolis.cpp	/^    vector<LightingSample> lightingSamples;$/;"	m	struct:MLTSample	file:
lights	core/api.cpp	/^    vector<Light *> lights;$/;"	m	struct:RenderOptions	file:
lights	core/scene.h	/^    vector<Light *> lights;$/;"	m	class:Scene
limits	3rdparty/ilmbase-1.0.2/ImathHalfLimits.h	/^struct limits <half>$/;"	s	namespace:Imath
limits	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^struct limits <char>$/;"	s	namespace:Imath
limits	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^struct limits <double>$/;"	s	namespace:Imath
limits	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^struct limits <float>$/;"	s	namespace:Imath
limits	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^struct limits <int>$/;"	s	namespace:Imath
limits	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^struct limits <long double>$/;"	s	namespace:Imath
limits	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^struct limits <long>$/;"	s	namespace:Imath
limits	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^struct limits <short>$/;"	s	namespace:Imath
limits	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^struct limits <signed char>$/;"	s	namespace:Imath
limits	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^struct limits <unsigned char>$/;"	s	namespace:Imath
limits	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^struct limits <unsigned int>$/;"	s	namespace:Imath
limits	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^struct limits <unsigned long>$/;"	s	namespace:Imath
limits	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^struct limits <unsigned short>$/;"	s	namespace:Imath
limits	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^template <class T> struct limits$/;"	s	namespace:Imath
line	3rdparty/tiff-3.9.4/tif_fax3.c	/^	int line;$/;"	m	struct:__anon45	file:
lineBufferMaxY	3rdparty/openexr-1.7.0/ImfMisc.cpp	/^lineBufferMaxY (int y, int minY, int linesInLineBuffer)$/;"	f	namespace:Imf
lineBufferMinY	3rdparty/openexr-1.7.0/ImfMisc.cpp	/^lineBufferMinY (int y, int minY, int linesInLineBuffer)$/;"	f	namespace:Imf
lineBufferSize	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    size_t		 lineBufferSize;        \/\/ size of the line buffer$/;"	m	struct:Imf::OutputFile::Data	file:
lineBufferSize	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    size_t		lineBufferSize;     \/\/ size of the line buffer$/;"	m	struct:Imf::ScanLineInputFile::Data	file:
lineBuffers	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    vector<LineBuffer*>  lineBuffers;           \/\/ each holds one line buffer$/;"	m	struct:Imf::OutputFile::Data	file:
lineBuffers	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    vector<LineBuffer*> lineBuffers;        \/\/ each holds one line buffer$/;"	m	struct:Imf::ScanLineInputFile::Data	file:
lineNum	core/pbrtlex.cpp	/^    int lineNum;$/;"	m	struct:IncludeInfo	file:
lineOffsets	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    vector<Int64>	 lineOffsets;		\/\/ stores offsets in file for$/;"	m	struct:Imf::OutputFile::Data	file:
lineOffsets	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    vector<Int64>	lineOffsets;	    \/\/ stores offsets in file for$/;"	m	struct:Imf::ScanLineInputFile::Data	file:
lineOffsetsPosition	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    Int64		 lineOffsetsPosition;   \/\/ file position for line$/;"	m	struct:Imf::OutputFile::Data	file:
lineOrder	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesInputFile::lineOrder () const$/;"	f	class:Imf::AcesInputFile
lineOrder	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesOutputFile::lineOrder () const$/;"	f	class:Imf::AcesOutputFile
lineOrder	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::lineOrder () const$/;"	f	class:Imf::Header
lineOrder	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::lineOrder ()$/;"	f	class:Imf::Header
lineOrder	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^    LineOrder		lineOrder;      \/\/ the file's lineorder$/;"	m	struct:Imf::InputFile::Data	file:
lineOrder	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    LineOrder		 lineOrder;		\/\/ the file's lineorder$/;"	m	struct:Imf::OutputFile::Data	file:
lineOrder	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaInputFile::lineOrder () const$/;"	f	class:Imf::RgbaInputFile
lineOrder	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaOutputFile::lineOrder () const$/;"	f	class:Imf::RgbaOutputFile
lineOrder	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    LineOrder		lineOrder;          \/\/ order of the scanlines in file$/;"	m	struct:Imf::ScanLineInputFile::Data	file:
lineOrder	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    LineOrder	    lineOrder;		    \/\/ the file's lineorder$/;"	m	struct:Imf::TiledInputFile::Data	file:
lineOrder	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    LineOrder		lineOrder;		\/\/ the file's lineorder$/;"	m	struct:Imf::TiledOutputFile::Data	file:
lineOrder	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::lineOrder () const$/;"	f	class:Imf::TiledRgbaInputFile
lineOrder	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::lineOrder () const$/;"	f	class:Imf::TiledRgbaOutputFile
line_num	core/pbrtparse.cpp	/^int line_num = 0;$/;"	v
line_num	tools/samplepat.cpp	/^int line_num = 0; \/\/ make this link!$/;"	v
linesInBuffer	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    int			 linesInBuffer;         \/\/ number of scanlines each$/;"	m	struct:Imf::OutputFile::Data	file:
linesInBuffer	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    int			linesInBuffer;      \/\/ number of scanlines each buffer$/;"	m	struct:Imf::ScanLineInputFile::Data	file:
lines_per_strile	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint32 lines_per_strile; \/* and lines_per_strile means subsampling_ver desubsampled rows     *\/$/;"	m	struct:__anon55	file:
lit	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^    int		lit:24;		\/\/ lit			p size	 $/;"	m	struct:Imf::__anon20::HufDec	file:
litTypeshift	3rdparty/tiff-3.9.4/tif_open.c	/^static const int litTypeshift[13] = {$/;"	v	file:
lit_bufsize	3rdparty/zlib-1.2.5/deflate.h	/^    uInt  lit_bufsize;$/;"	m	struct:internal_state
lm_init	3rdparty/zlib-1.2.5/deflate.c	/^local void lm_init (s)$/;"	f
lmax	integrators/diffuseprt.h	/^    const int lmax, nSamples;$/;"	m	class:DiffusePRTIntegrator
lmax	integrators/glossyprt.h	/^    const int lmax, nSamples;$/;"	m	class:GlossyPRTIntegrator
lmax	integrators/useprobes.h	/^    int lmax, includeDirectInProbes, includeIndirectInProbes;$/;"	m	class:UseRadianceProbes
lmax	renderers/createprobes.cpp	/^    int lmax, nIndirSamples;$/;"	m	class:CreateRadProbeTask	file:
lmax	renderers/createprobes.h	/^    int lmax, nIndirSamples;$/;"	m	class:CreateRadianceProbes
loadedRegularHalfangle	materials/measured.cpp	/^static map<string, float *> loadedRegularHalfangle;$/;"	v	file:
loadedThetaPhi	materials/measured.cpp	/^static map<string, KdTree<IrregIsotropicBRDFSample> *> loadedThetaPhi;$/;"	v	file:
local	3rdparty/zlib-1.2.5/adler32.c	/^#define local /;"	d	file:
local	3rdparty/zlib-1.2.5/crc32.c	/^#define local /;"	d	file:
local	3rdparty/zlib-1.2.5/gzguts.h	/^#  define local /;"	d
local	3rdparty/zlib-1.2.5/minigzip.c	/^#  define local /;"	d	file:
local	3rdparty/zlib-1.2.5/minigzip.c	/^#  define local$/;"	d	file:
local	3rdparty/zlib-1.2.5/zutil.h	/^#  define local /;"	d
localToScreen	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^Vec2<T> Frustum<T>::localToScreen(const Vec2<T> &p) const$/;"	f	class:Imath::Frustum
lock	3rdparty/ilmbase-1.0.2/IlmThreadMutex.cpp	/^void Mutex::lock () const {}$/;"	f	class:IlmThread::Mutex
lock	3rdparty/ilmbase-1.0.2/IlmThreadMutexPosix.cpp	/^Mutex::lock () const$/;"	f	class:IlmThread::Mutex
lock	3rdparty/ilmbase-1.0.2/IlmThreadMutexWin32.cpp	/^Mutex::lock () const$/;"	f	class:IlmThread::Mutex
locked	3rdparty/ilmbase-1.0.2/IlmThreadMutex.h	/^    bool locked ()$/;"	f	class:IlmThread::Lock
log	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static T	log   (T x)		{return ::log (double(x));}$/;"	f	struct:Imath::Math
log	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static float	log   (float x)			{return ::logf (x);}$/;"	f	struct:Imath::Math
log	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^Quat<T>::log () const$/;"	f	class:Imath::Quat
log	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^		uint8 log;$/;"	m	struct:__anon55::__anon56	file:
log10	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static T	log10 (T x)		{return ::log10 (double(x));}$/;"	f	struct:Imath::Math
log10	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static float	log10 (float x)			{return ::log10f (x);}$/;"	f	struct:Imath::Math
log2	3rdparty/tiff-3.9.4/tif_luv.c	/^#define log2(/;"	d	file:
logLuvState	3rdparty/tiff-3.9.4/tif_luv.c	/^struct logLuvState {$/;"	s	file:
logTable	3rdparty/openexr-1.7.0/b44ExpLogTable.h	/^const unsigned short logTable[] =$/;"	v
longest_match	3rdparty/zlib-1.2.5/deflate.c	/^local uInt longest_match(s, cur_match)$/;"	f
lookahead	3rdparty/zlib-1.2.5/deflate.h	/^    uInt lookahead;              \/* number of valid bytes ahead in window *\/$/;"	m	struct:internal_state
lookedUp	core/paramset.h	/^    mutable bool lookedUp;$/;"	m	struct:ParamSetItem
lookupPrivate	core/octree.h	/^bool Octree<NodeData>::lookupPrivate(OctNode<NodeData> *node,$/;"	f	class:Octree
lookupType	core/pbrtparse.cpp	/^static bool lookupType(const char *name, int *type, string &sname) {$/;"	f	file:
lrand48	3rdparty/ilmbase-1.0.2/ImathRandom.cpp	/^lrand48 ()$/;"	f	namespace:Imath
lseek	3rdparty/tiff-3.9.4/tif_acorn.c	/^extern off_t lseek(int fd, off_t offset, int whence)$/;"	f
lx	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    int			lx;$/;"	m	struct:Imf::__anon34::TileBuffer	file:
lx	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    int		lx;$/;"	m	struct:Imf::__anon37::TileCoord	file:
ly	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    int			ly;$/;"	m	struct:Imf::__anon34::TileBuffer	file:
ly	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    int		ly;$/;"	m	struct:Imf::__anon37::TileCoord	file:
lzw_free_ent	3rdparty/tiff-3.9.4/tif_lzw.c	/^#define	lzw_free_ent	/;"	d	file:
lzw_maxcode	3rdparty/tiff-3.9.4/tif_lzw.c	/^#define	lzw_maxcode	/;"	d	file:
lzw_nbits	3rdparty/tiff-3.9.4/tif_lzw.c	/^#define	lzw_nbits	/;"	d	file:
lzw_nextbits	3rdparty/tiff-3.9.4/tif_lzw.c	/^#define	lzw_nextbits	/;"	d	file:
lzw_nextdata	3rdparty/tiff-3.9.4/tif_lzw.c	/^#define	lzw_nextdata	/;"	d	file:
m	core/transform.h	/^    Matrix4x4 m, mInv;$/;"	m	class:Transform
m	core/transform.h	/^    float m[4][4];$/;"	m	struct:Matrix4x4
m1	materials/mixmat.h	/^    Reference<Material> m1, m2;$/;"	m	class:MixMaterial
m2	materials/mixmat.h	/^    Reference<Material> m1, m2;$/;"	m	class:MixMaterial
mInv	core/transform.h	/^    Matrix4x4 m, mInv;$/;"	m	class:Transform
main	3rdparty/ilmbase-1.0.2/eLut.cpp	/^main ()$/;"	f
main	3rdparty/ilmbase-1.0.2/toFloat.cpp	/^main ()$/;"	f
main	3rdparty/openexr-1.7.0/b44ExpLogTable.cpp	/^main ()$/;"	f
main	3rdparty/tiff-3.9.4/mkg3states.c	/^main(int argc, char* argv[])$/;"	f
main	3rdparty/zlib-1.2.5/example.c	/^int main(argc, argv)$/;"	f
main	3rdparty/zlib-1.2.5/minigzip.c	/^int main(argc, argv)$/;"	f
main	main/pbrt.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tools/bsdftest.cpp	/^int main(int argc, char *argv[]) $/;"	f
main	tools/exravg.cpp	/^int main(int argc, char *argv[]) $/;"	f
main	tools/exrdiff.cpp	/^int main(int argc, char *argv[]) $/;"	f
main	tools/exrtotiff.cpp	/^int main(int argc, char *argv[]) $/;"	f
main	tools/obj2pbrt.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	tools/ply2pbrt.c	/^main(int argc, char *argv[])$/;"	f
main	tools/samplepat.cpp	/^int main() {$/;"	f
main	tools/tifftoexr.cpp	/^int main(int argc, char *argv[]) $/;"	f
mainSampler	renderers/samplerrenderer.h	/^    Sampler *mainSampler;$/;"	m	class:SamplerRendererTask
majorAxis	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<T>::majorAxis() const$/;"	f	class:Imath::Box
majorAxis	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<Vec2<T> >::majorAxis() const$/;"	f	class:Imath::Box
majorAxis	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<Vec3<T> >::majorAxis() const$/;"	f	class:Imath::Box
makeEmpty	3rdparty/ilmbase-1.0.2/ImathBox.h	/^inline void Box<T>::makeEmpty()$/;"	f	class:Imath::Box
makeEmpty	3rdparty/ilmbase-1.0.2/ImathBox.h	/^inline void Box<Vec2<T> >::makeEmpty()$/;"	f	class:Imath::Box
makeEmpty	3rdparty/ilmbase-1.0.2/ImathBox.h	/^inline void Box<Vec3<T> >::makeEmpty()$/;"	f	class:Imath::Box
makeEmpty	3rdparty/ilmbase-1.0.2/ImathInterval.h	/^Interval<T>::makeEmpty()$/;"	f	class:Imath::Interval
makeIdentity	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::makeIdentity()$/;"	f	class:Imath::Matrix33
makeIdentity	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::makeIdentity()$/;"	f	class:Imath::Matrix44
makeNear	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^Euler<T>::makeNear (const Euler<T> &target)$/;"	f	class:Imath::Euler
makeNewAttribute	3rdparty/openexr-1.7.0/ImfAttribute.h	/^TypedAttribute<T>::makeNewAttribute ()$/;"	f	class:Imf::TypedAttribute
makeNotTiled	3rdparty/openexr-1.7.0/ImfVersion.h	/^inline int   makeNotTiled (int version) {return version & ~TILED_FLAG;}$/;"	f	namespace:Imf
makeTiled	3rdparty/openexr-1.7.0/ImfVersion.h	/^inline int   makeTiled (int version)	{return version | TILED_FLAG;}$/;"	f	namespace:Imf
make_crc_table	3rdparty/zlib-1.2.5/crc32.c	/^local void make_crc_table()$/;"	f
makebwmap	3rdparty/tiff-3.9.4/tif_getimage.c	/^makebwmap(TIFFRGBAImage* img)$/;"	f	file:
makecmap	3rdparty/tiff-3.9.4/tif_getimage.c	/^makecmap(TIFFRGBAImage* img)$/;"	f	file:
makefixed	3rdparty/zlib-1.2.5/inflate.c	/^void makefixed()$/;"	f
mapping	textures/bilerp.h	/^    TextureMapping2D *mapping;$/;"	m	class:BilerpTexture
mapping	textures/checkerboard.h	/^    TextureMapping2D *mapping;$/;"	m	class:Checkerboard2DTexture
mapping	textures/checkerboard.h	/^    TextureMapping3D *mapping;$/;"	m	class:Checkerboard3DTexture
mapping	textures/dots.h	/^    TextureMapping2D *mapping;$/;"	m	class:DotsTexture
mapping	textures/fbm.h	/^    TextureMapping3D *mapping;$/;"	m	class:FBmTexture
mapping	textures/imagemap.h	/^    TextureMapping2D *mapping;$/;"	m	class:ImageTexture
mapping	textures/marble.h	/^    TextureMapping3D *mapping;$/;"	m	class:MarbleTexture
mapping	textures/uv.h	/^    TextureMapping2D *mapping;$/;"	m	class:UVTexture
mapping	textures/windy.h	/^    TextureMapping3D *mapping;$/;"	m	class:WindyTexture
mapping	textures/wrinkled.h	/^    TextureMapping3D *mapping;$/;"	m	class:WrinkledTexture
match_available	3rdparty/zlib-1.2.5/deflate.h	/^    int match_available;         \/* set if previous match exists *\/$/;"	m	struct:internal_state
match_length	3rdparty/zlib-1.2.5/deflate.h	/^    uInt match_length;           \/* length of best match *\/$/;"	m	struct:internal_state
match_start	3rdparty/zlib-1.2.5/deflate.h	/^    uInt match_start;            \/* start of matching string *\/$/;"	m	struct:internal_state
matches	3rdparty/zlib-1.2.5/deflate.h	/^    uInt matches;       \/* number of string matches in current block *\/$/;"	m	struct:internal_state
matches_rule_name	tools/ply.c	/^int matches_rule_name (char *name)$/;"	f
material	core/api.cpp	/^    string material;$/;"	m	struct:GraphicsState	file:
material	core/primitive.h	/^    Reference<Material> material;$/;"	m	class:GeometricPrimitive
material	tools/obj2pbrt.cpp	/^    material_t   material;$/;"	m	struct:tinyobj::__anon92	file:
materialParams	core/api.cpp	/^    ParamSet materialParams;$/;"	m	struct:GraphicsState	file:
materialParams	core/paramset.h	/^    const ParamSet &geomParams, &materialParams;$/;"	m	class:TextureParams
material_t	tools/obj2pbrt.cpp	/^} material_t;$/;"	t	namespace:tinyobj	typeref:struct:tinyobj::__anon90	file:
max	3rdparty/ilmbase-1.0.2/ImathBox.h	/^    T				max;$/;"	m	class:Imath::Box
max	3rdparty/ilmbase-1.0.2/ImathBox.h	/^    Vec2<T>		max;$/;"	m	class:Imath::Box
max	3rdparty/ilmbase-1.0.2/ImathBox.h	/^    Vec3<T>			max;$/;"	m	class:Imath::Box
max	3rdparty/ilmbase-1.0.2/ImathHalfLimits.h	/^    static float		max()		{return HALF_MAX;}$/;"	f	struct:Imath::limits
max	3rdparty/ilmbase-1.0.2/ImathInterval.h	/^    T				max;$/;"	m	class:Imath::Interval
max	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^        #undef max$/;"	d
max	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static char			max()		{return CHAR_MAX;}$/;"	f	struct:Imath::limits
max	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static double		max()		{return DBL_MAX;}$/;"	f	struct:Imath::limits
max	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static float		max()		{return FLT_MAX;}$/;"	f	struct:Imath::limits
max	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static int			max()		{return INT_MAX;}$/;"	f	struct:Imath::limits
max	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static long			max()		{return LONG_MAX;}$/;"	f	struct:Imath::limits
max	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static long double		max()		{return LDBL_MAX;}$/;"	f	struct:Imath::limits
max	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static short		max()		{return SHRT_MAX;}$/;"	f	struct:Imath::limits
max	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static signed char		max()		{return SCHAR_MAX;}$/;"	f	struct:Imath::limits
max	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static unsigned char	max()		{return UCHAR_MAX;}$/;"	f	struct:Imath::limits
max	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static unsigned int		max()		{return UINT_MAX;}$/;"	f	struct:Imath::limits
max	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static unsigned long	max()		{return ULONG_MAX;}$/;"	f	struct:Imath::limits
max	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static unsigned short	max()		{return USHRT_MAX;}$/;"	f	struct:Imath::limits
max	3rdparty/ilmbase-1.0.2/halfLimits.h	/^    static half max () throw () {return HALF_MAX;}$/;"	f	class:std::numeric_limits
maxAniso	textures/imagemap.h	/^    float maxAniso;$/;"	m	struct:TexInfo
maxAnisotropy	core/mipmap.h	/^    float maxAnisotropy;$/;"	m	class:MIPMap
maxBytesPerTileLine	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    size_t	    maxBytesPerTileLine;    \/\/ combined size of a line$/;"	m	struct:Imf::TiledInputFile::Data	file:
maxBytesPerTileLine	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    size_t		maxBytesPerTileLine;	\/\/ combined size of a tile line$/;"	m	struct:Imf::TiledOutputFile::Data	file:
maxConsecutiveRejects	renderers/metropolis.h	/^    uint32_t largeStepsPerPixel, nBootstrap, maxConsecutiveRejects;$/;"	m	class:MetropolisRenderer
maxDepth	accelerators/kdtreeaccel.h	/^    int isectCost, traversalCost, maxPrims, maxDepth;$/;"	m	class:KdTreeAccel
maxDepth	core/octree.h	/^    int maxDepth;$/;"	m	class:Octree
maxDepth	integrators/directlighting.h	/^    int maxDepth;$/;"	m	class:DirectLightingIntegrator
maxDepth	integrators/path.h	/^    int maxDepth;$/;"	m	class:PathIntegrator
maxDepth	integrators/whitted.h	/^    int maxDepth;$/;"	m	class:WhittedIntegrator
maxDepth	renderers/metropolis.h	/^    uint32_t nDirectPixelSamples, nPixelSamples, maxDepth;$/;"	m	class:MetropolisRenderer
maxDist	integrators/ambientocclusion.h	/^    float maxDist;$/;"	m	class:AmbientOcclusionIntegrator
maxDist	integrators/irradiancecache.cpp	/^    float maxDist;$/;"	m	struct:IrradianceSample	file:
maxDist2	renderers/surfacepoints.cpp	/^    float maxDist2;$/;"	m	struct:PoissonCheck	file:
maxDistSquared	integrators/photonmap.cpp	/^    float maxDistSquared;$/;"	m	class:ComputeRadianceTask	file:
maxDistSquared	integrators/photonmap.h	/^    float maxDistSquared;$/;"	m	class:PhotonIntegrator
maxError	integrators/dipolesubsurface.h	/^    float maxError, minSampleDist;$/;"	m	class:DipoleSubsurfaceIntegrator
maxFails	renderers/surfacepoints.cpp	/^    int maxFails;$/;"	m	class:SurfacePointTask	file:
maxImageHeight	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^int maxImageHeight = 0;$/;"	m	namespace:Imf::__anon19	file:
maxImageWidth	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^int maxImageWidth = 0;$/;"	m	namespace:Imf::__anon19	file:
maxIndirectDepth	integrators/irradiancecache.h	/^    int nSamples, maxSpecularDepth, maxIndirectDepth;$/;"	m	class:IrradianceCacheIntegrator
maxPhotonDepth	integrators/photonmap.h	/^    int maxSpecularDepth, maxPhotonDepth;$/;"	m	class:PhotonIntegrator
maxPrims	accelerators/kdtreeaccel.h	/^    int isectCost, traversalCost, maxPrims, maxDepth;$/;"	m	class:KdTreeAccel
maxPrimsInNode	accelerators/bvh.h	/^    uint32_t maxPrimsInNode;$/;"	m	class:BVHAccel
maxRepeatedFails	renderers/surfacepoints.cpp	/^    int &repeatedFails, &maxRepeatedFails;$/;"	m	class:SurfacePointTask	file:
maxSamplePixelSpacing	integrators/irradiancecache.h	/^    float minSamplePixelSpacing, maxSamplePixelSpacing;$/;"	m	class:IrradianceCacheIntegrator
maxSamples	samplers/adaptive.h	/^    int minSamples, maxSamples;$/;"	m	class:AdaptiveSampler
maxSpecularDepth	integrators/dipolesubsurface.h	/^    int maxSpecularDepth;$/;"	m	class:DipoleSubsurfaceIntegrator
maxSpecularDepth	integrators/igi.h	/^    int maxSpecularDepth;$/;"	m	class:IGIIntegrator
maxSpecularDepth	integrators/irradiancecache.h	/^    int nSamples, maxSpecularDepth, maxIndirectDepth;$/;"	m	class:IrradianceCacheIntegrator
maxSpecularDepth	integrators/photonmap.h	/^    int maxSpecularDepth, maxPhotonDepth;$/;"	m	class:PhotonIntegrator
maxTileHeight	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^int maxTileHeight = 0;$/;"	m	namespace:Imf::__anon19	file:
maxTileWidth	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^int maxTileWidth = 0;$/;"	m	namespace:Imf::__anon19	file:
maxX	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^    int			maxX;$/;"	m	class:Imf::AcesInputFile::Data	file:
maxX	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    int			 maxX;			\/\/ data window's max x coord$/;"	m	struct:Imf::OutputFile::Data	file:
maxX	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    int			maxX;		    \/\/ data window's max x coord$/;"	m	struct:Imf::ScanLineInputFile::Data	file:
maxX	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    int		    maxX;		    \/\/ data window's max x coord$/;"	m	struct:Imf::TiledInputFile::Data	file:
maxX	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    int			maxX;			\/\/ data window's max x coord$/;"	m	struct:Imf::TiledOutputFile::Data	file:
maxY	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^    int			maxY;           \/\/ data window's max x coord$/;"	m	struct:Imf::InputFile::Data	file:
maxY	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    int			 maxY;			\/\/ data window's max x coord$/;"	m	struct:Imf::OutputFile::Data	file:
maxY	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    int			maxY;$/;"	m	struct:Imf::__anon23::LineBuffer	file:
maxY	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    int			maxY;		    \/\/ data window's max x coord$/;"	m	struct:Imf::ScanLineInputFile::Data	file:
maxY	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    int			maxY;$/;"	m	struct:Imf::__anon31::LineBuffer	file:
maxY	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    int		    maxY;		    \/\/ data window's max x coord$/;"	m	struct:Imf::TiledInputFile::Data	file:
maxY	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    int			maxY;			\/\/ data window's max x coord$/;"	m	struct:Imf::TiledOutputFile::Data	file:
max_chain	3rdparty/zlib-1.2.5/deflate.c	/^   ush max_chain;$/;"	m	struct:config_s	file:
max_chain_length	3rdparty/zlib-1.2.5/deflate.h	/^    uInt max_chain_length;$/;"	m	struct:internal_state
max_code	3rdparty/zlib-1.2.5/deflate.h	/^    int     max_code;            \/* largest code with non zero frequency *\/$/;"	m	struct:tree_desc_s
max_exponent	3rdparty/ilmbase-1.0.2/halfLimits.h	/^    static const int max_exponent = HALF_MAX_EXP;$/;"	m	class:std::numeric_limits
max_exponent10	3rdparty/ilmbase-1.0.2/halfLimits.h	/^    static const int max_exponent10 = HALF_MAX_10_EXP;$/;"	m	class:std::numeric_limits
max_insert_length	3rdparty/zlib-1.2.5/deflate.h	/^#   define max_insert_length /;"	d
max_lazy	3rdparty/zlib-1.2.5/deflate.c	/^   ush max_lazy;    \/* do not perform lazy search above this match length *\/$/;"	m	struct:config_s	file:
max_lazy_match	3rdparty/zlib-1.2.5/deflate.h	/^    uInt max_lazy_match;$/;"	m	struct:internal_state
max_length	3rdparty/zlib-1.2.5/trees.c	/^    int     max_length;          \/* max bit length for the codes *\/$/;"	m	struct:static_tree_desc_s	file:
max_props	tools/ply.h	/^  int max_props;         \/* maximum number of properties we have room for now *\/$/;"	m	struct:PlyPropRules
maxcode	3rdparty/tiff-3.9.4/tif_lzw.c	/^	unsigned short	maxcode;	\/* maximum code for lzw_nbits *\/$/;"	m	struct:__anon50	file:
maxk	3rdparty/tiff-3.9.4/tif_fax3.c	/^	int	maxk;			\/* max #rows that can be 2d encoded *\/$/;"	m	struct:__anon45	file:
maxt	core/geometry.h	/^    mutable float mint, maxt;$/;"	m	class:Ray
meanfreepath	materials/kdsubsurface.h	/^    Reference<Texture<float> > meanfreepath, eta, bumpMap;$/;"	m	class:KdSubsurfaceMaterial
mesh	shapes/trianglemesh.h	/^    Reference<TriangleMesh> mesh;$/;"	m	class:Triangle
mesh	tools/obj2pbrt.cpp	/^    mesh_t       mesh;$/;"	m	struct:tinyobj::__anon92	file:
mesh_t	tools/obj2pbrt.cpp	/^} mesh_t;$/;"	t	namespace:tinyobj	typeref:struct:tinyobj::__anon91	file:
method	3rdparty/zlib-1.2.5/deflate.h	/^    Byte  method;        \/* STORED (for zip only) or DEFLATED *\/$/;"	m	struct:internal_state
method	samplers/adaptive.h	/^    AdaptiveTest method;$/;"	m	class:AdaptiveSampler
mid	accelerators/bvh.cpp	/^    float mid;$/;"	m	struct:CompareToMid	file:
min	3rdparty/ilmbase-1.0.2/ImathBox.h	/^    T				min;$/;"	m	class:Imath::Box
min	3rdparty/ilmbase-1.0.2/ImathBox.h	/^    Vec2<T>		min;$/;"	m	class:Imath::Box
min	3rdparty/ilmbase-1.0.2/ImathBox.h	/^    Vec3<T>			min;$/;"	m	class:Imath::Box
min	3rdparty/ilmbase-1.0.2/ImathHalfLimits.h	/^    static float		min()		{return -HALF_MAX;}$/;"	f	struct:Imath::limits
min	3rdparty/ilmbase-1.0.2/ImathInterval.h	/^    T				min;$/;"	m	class:Imath::Interval
min	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^        #undef min$/;"	d
min	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static char			min()		{return CHAR_MIN;}$/;"	f	struct:Imath::limits
min	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static double		min()		{return -DBL_MAX;}$/;"	f	struct:Imath::limits
min	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static float		min()		{return -FLT_MAX;}$/;"	f	struct:Imath::limits
min	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static int			min()		{return INT_MIN;}$/;"	f	struct:Imath::limits
min	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static long			min()		{return LONG_MIN;}$/;"	f	struct:Imath::limits
min	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static long double		min()		{return -LDBL_MAX;}$/;"	f	struct:Imath::limits
min	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static short		min()		{return SHRT_MIN;}$/;"	f	struct:Imath::limits
min	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static signed char		min()		{return SCHAR_MIN;}$/;"	f	struct:Imath::limits
min	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static unsigned char	min()		{return 0;}$/;"	f	struct:Imath::limits
min	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static unsigned int		min()		{return 0;}$/;"	f	struct:Imath::limits
min	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static unsigned long	min()		{return 0;}$/;"	f	struct:Imath::limits
min	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static unsigned short	min()		{return 0;}$/;"	f	struct:Imath::limits
min	3rdparty/ilmbase-1.0.2/halfLimits.h	/^    static half min () throw () {return HALF_NRM_MIN;}$/;"	f	class:std::numeric_limits
minDist	renderers/surfacepoints.h	/^    float minDist, time;$/;"	m	class:SurfacePointsRenderer
minSampleDist	integrators/dipolesubsurface.h	/^    float maxError, minSampleDist;$/;"	m	class:DipoleSubsurfaceIntegrator
minSampleDist	renderers/surfacepoints.cpp	/^    float minSampleDist;$/;"	m	class:SurfacePointTask	file:
minSamplePixelSpacing	integrators/irradiancecache.h	/^    float minSamplePixelSpacing, maxSamplePixelSpacing;$/;"	m	class:IrradianceCacheIntegrator
minSamples	samplers/adaptive.h	/^    int minSamples, maxSamples;$/;"	m	class:AdaptiveSampler
minWeight	integrators/irradiancecache.cpp	/^    float minWeight, cosMaxSampleAngleDifference, sumWt;$/;"	m	struct:IrradProcess	file:
minWeight	integrators/irradiancecache.h	/^    float minWeight, cosMaxSampleAngleDifference;$/;"	m	class:IrradianceCacheIntegrator
minX	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^    int			minX;$/;"	m	class:Imf::AcesInputFile::Data	file:
minX	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    int			 minX;			\/\/ data window's min x coord$/;"	m	struct:Imf::OutputFile::Data	file:
minX	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    int			minX;		    \/\/ data window's min x coord$/;"	m	struct:Imf::ScanLineInputFile::Data	file:
minX	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    int		    minX;		    \/\/ data window's min x coord$/;"	m	struct:Imf::TiledInputFile::Data	file:
minX	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    int			minX;			\/\/ data window's min x coord$/;"	m	struct:Imf::TiledOutputFile::Data	file:
minY	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^    int			minY;           \/\/ data window's min y coord$/;"	m	struct:Imf::InputFile::Data	file:
minY	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    int			 minY;			\/\/ data window's min y coord$/;"	m	struct:Imf::OutputFile::Data	file:
minY	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    int			minY;$/;"	m	struct:Imf::__anon23::LineBuffer	file:
minY	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    int			minY;		    \/\/ data window's min y coord$/;"	m	struct:Imf::ScanLineInputFile::Data	file:
minY	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    int			minY;$/;"	m	struct:Imf::__anon31::LineBuffer	file:
minY	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    int		    minY;		    \/\/ data window's min y coord$/;"	m	struct:Imf::TiledInputFile::Data	file:
minY	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    int			minY;			\/\/ data window's min y coord$/;"	m	struct:Imf::TiledOutputFile::Data	file:
min_exponent	3rdparty/ilmbase-1.0.2/halfLimits.h	/^    static const int min_exponent = HALF_MIN_EXP;$/;"	m	class:std::numeric_limits
min_exponent10	3rdparty/ilmbase-1.0.2/halfLimits.h	/^    static const int min_exponent10 = HALF_MIN_10_EXP;$/;"	m	class:std::numeric_limits
mint	core/geometry.h	/^    mutable float mint, maxt;$/;"	m	class:Ray
minutes	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^TimeCode::minutes () const$/;"	f	class:Imf::TimeCode
mipmap	lights/goniometric.h	/^    MIPMap<RGBSpectrum> *mipmap;$/;"	m	class:GonioPhotometricLight
mipmap	textures/imagemap.h	/^    MIPMap<Tmemory> *mipmap;$/;"	m	class:ImageTexture
missingScanLines	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    int			 missingScanLines;      \/\/ number of lines to write$/;"	m	struct:Imf::OutputFile::Data	file:
mode	3rdparty/openexr-1.7.0/ImfTileDescription.h	/^    LevelMode		mode;$/;"	m	class:Imf::TileDescription
mode	3rdparty/tiff-3.9.4/tif_fax3.c	/^	int	mode;			\/* operating mode *\/$/;"	m	struct:__anon43	file:
mode	3rdparty/zlib-1.2.5/gzguts.h	/^    int mode;               \/* see gzip modes above *\/$/;"	m	struct:__anon74
mode	3rdparty/zlib-1.2.5/inflate.h	/^    inflate_mode mode;          \/* current inflate mode *\/$/;"	m	struct:inflate_state
modf	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static T	modf  (T x, T *iptr)$/;"	f	struct:Imath::Math
modf	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static float	modf  (float x, float *y)	{return ::modff (x, y);}$/;"	f	struct:Imath::Math
modifyNearAndFar	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^void Frustum<T>::modifyNearAndFar(T n, T f)$/;"	f	class:Imath::Frustum
modify_rule_ply	tools/ply.c	/^void modify_rule_ply (PlyPropRules *rules, char *prop_name, int rule_type)$/;"	f
modp	3rdparty/ilmbase-1.0.2/ImathFun.h	/^modp (int x, int y)$/;"	f	namespace:Imath
mods	3rdparty/ilmbase-1.0.2/ImathFun.h	/^mods (int x, int y)$/;"	f	namespace:Imath
msdosErrorHandler	3rdparty/tiff-3.9.4/tif_msdos.c	/^msdosErrorHandler(const char* module, const char* fmt, va_list ap)$/;"	f	file:
msdosWarningHandler	3rdparty/tiff-3.9.4/tif_msdos.c	/^msdosWarningHandler(const char* module, const char* fmt, va_list ap)$/;"	f	file:
msg	3rdparty/zlib-1.2.5/gzguts.h	/^    char *msg;              \/* error message *\/$/;"	m	struct:__anon74
msg	3rdparty/zlib-1.2.5/zlib.h	/^    char     *msg;      \/* last error message, NULL if no error *\/$/;"	m	struct:z_stream_s
mss	core/volume.cpp	/^static MeasuredSS mss[] = {$/;"	v	file:
mt	core/rng.h	/^    mutable unsigned long mt[N]; \/* the array for the state vector  *\/$/;"	m	class:RNG
mti	core/rng.h	/^    mutable int mti;$/;"	m	class:RNG
multDirMatrix	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::multDirMatrix(const Vec2<S> &src, Vec2<S> &dst) const$/;"	f	class:Imath::Matrix33
multDirMatrix	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::multDirMatrix(const Vec3<S> &src, Vec3<S> &dst) const$/;"	f	class:Imath::Matrix44
multVecMatrix	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::multVecMatrix(const Vec2<S> &src, Vec2<S> &dst) const$/;"	f	class:Imath::Matrix33
multVecMatrix	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::multVecMatrix(const Vec3<S> &src, Vec3<S> &dst) const$/;"	f	class:Imath::Matrix44
multiply	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::multiply (const Matrix44<T> &a,$/;"	f	class:Imath::Matrix44
multiply	3rdparty/tiff-3.9.4/tif_luv.c	/^multiply(size_t m1, size_t m2)$/;"	f	file:
multiply	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^multiply(size_t m1, size_t m2)$/;"	f	file:
multiply	3rdparty/tiff-3.9.4/tif_strip.c	/^multiply(TIFF* tif, size_t nmemb, size_t elem_size, const char* where)$/;"	f	file:
multiply	3rdparty/tiff-3.9.4/tif_tile.c	/^multiply(TIFF* tif, size_t nmemb, size_t elem_size, const char* where)$/;"	f	file:
mustConvertColor	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^    bool		mustConvertColor;$/;"	m	class:Imf::AcesInputFile::Data	file:
mutate	renderers/metropolis.cpp	/^static inline void mutate(RNG &rng, float *v, float min = 0.f,$/;"	f	file:
mutex	3rdparty/ilmbase-1.0.2/IlmThreadSemaphore.h	/^	    pthread_mutex_t mutex;$/;"	m	struct:IlmThread::Semaphore::sema_t
mutex	3rdparty/openexr-1.7.0/ImfAttribute.cpp	/^    Mutex mutex;$/;"	m	class:Imf::__anon14::LockedTypeMap	file:
mutex	core/parallel.h	/^    Mutex &mutex;$/;"	m	struct:MutexLock
mutex	core/parallel.h	/^    RWMutex &mutex;$/;"	m	struct:RWMutexLock
mutex	core/parallel.h	/^    pthread_mutex_t mutex;$/;"	m	class:ConditionVariable
mutex	core/parallel.h	/^    pthread_mutex_t mutex;$/;"	m	class:Mutex
mutex	core/parallel.h	/^    pthread_rwlock_t mutex;$/;"	m	class:RWMutex
mutex	core/progressreporter.h	/^    Mutex *mutex;$/;"	m	class:ProgressReporter
mutex	integrators/irradiancecache.h	/^    mutable RWMutex *mutex;$/;"	m	class:IrradianceCacheIntegrator
mutex	integrators/photonmap.cpp	/^    Mutex &mutex;$/;"	m	class:PhotonShootingTask	file:
mutex	renderers/surfacepoints.cpp	/^    RWMutex &mutex;$/;"	m	class:SurfacePointTask	file:
myIS	3rdparty/tiff-3.9.4/tif_stream.cxx	/^	istream	*myIS;$/;"	m	class:tiffis_data	file:
myOS	3rdparty/tiff-3.9.4/tif_stream.cxx	/^	ostream	*myOS;$/;"	m	class:tiffos_data	file:
myStreamStartPos	3rdparty/tiff-3.9.4/tif_stream.cxx	/^	long	myStreamStartPos;$/;"	m	class:tiffos_data	file:
myStreamStartPos	3rdparty/tiff-3.9.4/tif_stream.cxx	/^        long	myStreamStartPos;$/;"	m	class:tiffis_data	file:
my_alloc	tools/ply.c	/^static char *my_alloc(int size, int lnum, char *fname)$/;"	f	file:
myalloc	tools/ply.h	/^#define myalloc(/;"	d
n	3rdparty/openexr-1.7.0/ImfLut.h	/^    int n;$/;"	m	struct:Imf::roundNBit
n	3rdparty/openexr-1.7.0/ImfRational.h	/^    int			n;		\/\/ numerator$/;"	m	class:Imf::Rational
n	integrators/dipolesubsurface.h	/^    Normal n;$/;"	m	struct:IrradiancePoint
n	integrators/igi.h	/^    Normal n;$/;"	m	struct:VirtualLight
n	integrators/irradiancecache.cpp	/^    Normal n;$/;"	m	struct:IrradProcess	file:
n	integrators/irradiancecache.cpp	/^    Normal n;$/;"	m	struct:IrradianceSample	file:
n	integrators/photonmap.cpp	/^    Normal n;$/;"	m	struct:RadiancePhoton	file:
n	integrators/photonmap.cpp	/^    const Normal &n;$/;"	m	struct:RadiancePhotonProcess	file:
n	renderers/surfacepoints.h	/^    Normal n;$/;"	m	struct:SurfacePoint
n	shapes/trianglemesh.h	/^    Normal *n;$/;"	m	class:TriangleMesh
n1D	core/sampler.h	/^    vector<uint32_t> n1D, n2D;$/;"	m	struct:Sample
n2D	core/sampler.h	/^    vector<uint32_t> n1D, n2D;$/;"	m	struct:Sample
nAllocedNodes	accelerators/kdtreeaccel.h	/^    int nAllocedNodes, nextFreeNode;$/;"	m	class:KdTreeAccel
nBootstrap	renderers/metropolis.h	/^    uint32_t largeStepsPerPixel, nBootstrap, maxConsecutiveRejects;$/;"	m	class:MetropolisRenderer
nBuckets	accelerators/bvh.cpp	/^    int splitBucket, nBuckets, dim;$/;"	m	struct:CompareToBucket	file:
nBxDFs	core/reflection.h	/^    int nBxDFs;$/;"	m	class:BSDF
nCIESamples	core/spectrum.h	/^static const int nCIESamples = 471;$/;"	v
nCausticPaths	integrators/photonmap.cpp	/^    int nDirectPaths, nIndirectPaths, nCausticPaths;$/;"	m	class:ComputeRadianceTask	file:
nCausticPaths	integrators/photonmap.h	/^    int nCausticPaths, nIndirectPaths;$/;"	m	class:PhotonIntegrator
nCausticPhotonsWanted	integrators/photonmap.h	/^    uint32_t nCausticPhotonsWanted, nIndirectPhotonsWanted, nLookup;$/;"	m	class:PhotonIntegrator
nCores	core/pbrt.h	/^    int nCores;$/;"	m	struct:Options
nDirectPaths	integrators/photonmap.cpp	/^    int &nDirectPaths;$/;"	m	class:PhotonShootingTask	file:
nDirectPaths	integrators/photonmap.cpp	/^    int nDirectPaths, nIndirectPaths, nCausticPaths;$/;"	m	class:ComputeRadianceTask	file:
nDirectPixelSamples	renderers/metropolis.h	/^    uint32_t nDirectPixelSamples, nPixelSamples, maxDepth;$/;"	m	class:MetropolisRenderer
nFound	core/reflection.cpp	/^    int nFound;$/;"	m	struct:IrregIsoProc	file:
nFound	integrators/irradiancecache.cpp	/^    int nFound;$/;"	m	struct:IrradProcess	file:
nFound	integrators/photonmap.cpp	/^    uint32_t nLookup, nFound;$/;"	m	struct:PhotonProcess	file:
nGatherSamples	integrators/igi.h	/^    int nGatherSamples;$/;"	m	class:IGIIntegrator
nIndirSamples	renderers/createprobes.cpp	/^    int lmax, nIndirSamples;$/;"	m	class:CreateRadProbeTask	file:
nIndirSamples	renderers/createprobes.h	/^    int lmax, nIndirSamples;$/;"	m	class:CreateRadianceProbes
nIndirectPaths	integrators/photonmap.cpp	/^    int nDirectPaths, nIndirectPaths, nCausticPaths;$/;"	m	class:ComputeRadianceTask	file:
nIndirectPaths	integrators/photonmap.h	/^    int nCausticPaths, nIndirectPaths;$/;"	m	class:PhotonIntegrator
nIndirectPhotonsWanted	integrators/photonmap.h	/^    uint32_t nCausticPhotonsWanted, nIndirectPhotonsWanted, nLookup;$/;"	m	class:PhotonIntegrator
nItems	core/paramset.h	/^    int nItems;$/;"	m	struct:ParamSetItem
nIterations	renderers/aggregatetest.h	/^    int nIterations;$/;"	m	class:AggregateTest
nLevels	core/mipmap.h	/^    uint32_t width, height, nLevels;$/;"	m	class:MIPMap
nLevels	shapes/loopsubdiv.h	/^    int nLevels;$/;"	m	class:LoopSubdiv
nLightPaths	integrators/igi.h	/^    uint32_t nLightPaths, nLightSets;$/;"	m	class:IGIIntegrator
nLightSets	integrators/igi.h	/^    uint32_t nLightPaths, nLightSets;$/;"	m	class:IGIIntegrator
nLookup	integrators/photonmap.cpp	/^    uint32_t nLookup, nFound;$/;"	m	struct:PhotonProcess	file:
nLookup	integrators/photonmap.cpp	/^    uint32_t nLookup;$/;"	m	class:ComputeRadianceTask	file:
nLookup	integrators/photonmap.h	/^    uint32_t nCausticPhotonsWanted, nIndirectPhotonsWanted, nLookup;$/;"	m	class:PhotonIntegrator
nNodes	core/kdtree.h	/^    uint32_t nNodes, nextFreeNode;$/;"	m	class:KdTree
nPhiD	core/reflection.h	/^    const uint32_t nThetaH, nThetaD, nPhiD;$/;"	m	class:RegularHalfangleBRDF
nPhiD	materials/measured.h	/^    uint32_t nThetaH, nThetaD, nPhiD;$/;"	m	class:MeasuredMaterial
nPixelSamples	renderers/metropolis.h	/^    uint32_t nDirectPixelSamples, nPixelSamples, maxDepth;$/;"	m	class:MetropolisRenderer
nPixelSamples	samplers/lowdiscrepancy.h	/^    int xPos, yPos, nPixelSamples;$/;"	m	class:LDSampler
nPrimitives	accelerators/bvh.cpp	/^    uint32_t splitAxis, firstPrimOffset, nPrimitives;$/;"	m	struct:BVHBuildNode	file:
nPrimitives	accelerators/bvh.cpp	/^    uint8_t nPrimitives;  \/\/ 0 -> interior node$/;"	m	struct:LinearBVHNode	file:
nPrimitives	accelerators/kdtreeaccel.cpp	/^    uint32_t nPrimitives() const { return nPrims >> 2; }$/;"	f	struct:KdAccelNode
nPrims	accelerators/kdtreeaccel.cpp	/^        uint32_t nPrims;        \/\/ Leaf$/;"	m	union:KdAccelNode::__anon80	file:
nProbes	integrators/useprobes.h	/^    int nProbes[3];$/;"	m	class:UseRadianceProbes
nProbes	renderers/createprobes.cpp	/^    int pointNum, nProbes[3];$/;"	m	class:CreateRadProbeTask	file:
nRGB2SpectSamples	core/spectrum.h	/^static const int nRGB2SpectSamples = 32;$/;"	v
nReferences	core/memory.h	/^    AtomicInt32 nReferences;$/;"	m	class:ReferenceCounted
nSamples	core/light.h	/^    const int nSamples;$/;"	m	class:Light
nSamples	core/light.h	/^    int nSamples, componentOffset, posOffset;$/;"	m	struct:LightSampleOffsets
nSamples	core/reflection.h	/^    int nSamples, componentOffset, dirOffset;$/;"	m	struct:BSDFSampleOffsets
nSamples	integrators/ambientocclusion.h	/^    int nSamples;$/;"	m	class:AmbientOcclusionIntegrator
nSamples	integrators/diffuseprt.h	/^    const int lmax, nSamples;$/;"	m	class:DiffusePRTIntegrator
nSamples	integrators/glossyprt.h	/^    const int lmax, nSamples;$/;"	m	class:GlossyPRTIntegrator
nSamples	integrators/irradiancecache.h	/^    int nSamples, maxSpecularDepth, maxIndirectDepth;$/;"	m	class:IrradianceCacheIntegrator
nSamples	samplers/random.h	/^    int xPos, yPos, nSamples;$/;"	m	class:RandomSampler
nSpectralSamples	core/spectrum.h	/^static const int nSpectralSamples = 30;$/;"	v
nSpecularComponents	renderers/metropolis.cpp	/^    int nSpecularComponents;$/;"	m	struct:PathVertex	file:
nTasksFinished	renderers/metropolis.h	/^    AtomicInt32 nTasksFinished;$/;"	m	class:MetropolisRenderer
nThetaD	core/reflection.h	/^    const uint32_t nThetaH, nThetaD, nPhiD;$/;"	m	class:RegularHalfangleBRDF
nThetaD	materials/measured.h	/^    uint32_t nThetaH, nThetaD, nPhiD;$/;"	m	class:MeasuredMaterial
nThetaH	core/reflection.h	/^    const uint32_t nThetaH, nThetaD, nPhiD;$/;"	m	class:RegularHalfangleBRDF
nThetaH	materials/measured.h	/^    uint32_t nThetaH, nThetaD, nPhiD;$/;"	m	class:MeasuredMaterial
nVoxels	accelerators/grid.h	/^    int nVoxels[3];$/;"	m	class:GridAccel
na	core/probes.cpp	/^    StatsCounterType na, nb;$/;"	m	class:StatsPercentage	file:
na	core/probes.cpp	/^    StatsCounterType na, nb;$/;"	m	class:StatsRatio	file:
name	3rdparty/openexr-1.7.0/ImfChannelList.h	/^ChannelList::ConstIterator::name () const$/;"	f	class:Imf::ChannelList::ConstIterator
name	3rdparty/openexr-1.7.0/ImfChannelList.h	/^ChannelList::Iterator::name () const$/;"	f	class:Imf::ChannelList::Iterator
name	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^FrameBuffer::ConstIterator::name () const$/;"	f	class:Imf::FrameBuffer::ConstIterator
name	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^FrameBuffer::Iterator::name () const$/;"	f	class:Imf::FrameBuffer::Iterator
name	3rdparty/openexr-1.7.0/ImfHeader.h	/^Header::ConstIterator::name () const$/;"	f	class:Imf::Header::ConstIterator
name	3rdparty/openexr-1.7.0/ImfHeader.h	/^Header::Iterator::name () const$/;"	f	class:Imf::Header::Iterator
name	3rdparty/tiff-3.9.4/tiffio.h	/^	char*		name;$/;"	m	struct:__anon67
name	3rdparty/tiff-3.9.4/tiffiop.h	/^    char      *name;$/;"	m	struct:client_info
name	3rdparty/zlib-1.2.5/zlib.h	/^    Bytef   *name;      \/* pointer to zero-terminated file name or Z_NULL *\/$/;"	m	struct:gz_header_s
name	core/paramset.h	/^    string name;$/;"	m	struct:ParamSetItem
name	core/pbrtparse.cpp	/^    const char *name;$/;"	m	struct:ParamListItem	file:
name	core/probes.cpp	/^    string category, name;$/;"	m	struct:StatTracker	file:
name	core/volume.cpp	/^    const char *name;$/;"	m	struct:MeasuredSS	file:
name	tools/obj2pbrt.cpp	/^    std::string  name;$/;"	m	struct:tinyobj::__anon92	file:
name	tools/obj2pbrt.cpp	/^    std::string name;$/;"	m	struct:tinyobj::__anon90	file:
name	tools/ply.c	/^  char *name;$/;"	m	struct:RuleName	file:
name	tools/ply.h	/^  char *name;                   \/* element name *\/$/;"	m	struct:PlyElement
name	tools/ply.h	/^  char *name;                   \/* element name *\/$/;"	m	struct:PlyOtherProp
name	tools/ply.h	/^  char *name;                   \/* property name *\/$/;"	m	struct:PlyProperty
name	tools/ply.h	/^  char *name;                  \/* name of the rule *\/$/;"	m	struct:PlyRuleList
name_max	3rdparty/zlib-1.2.5/zlib.h	/^    uInt    name_max;   \/* space at name (only when reading header) *\/$/;"	m	struct:gz_header_s
namedCoordinateSystems	core/api.cpp	/^static map<string, TransformSet> namedCoordinateSystems;$/;"	v	file:
namedMaterials	core/api.cpp	/^    map<string, Reference<Material> > namedMaterials;$/;"	m	struct:GraphicsState	file:
nb	core/probes.cpp	/^    StatsCounterType na, nb;$/;"	m	class:StatsPercentage	file:
nb	core/probes.cpp	/^    StatsCounterType na, nb;$/;"	m	class:StatsRatio	file:
nbits	3rdparty/tiff-3.9.4/tif_lzw.c	/^	unsigned short	nbits;		\/* # of bits\/code *\/$/;"	m	struct:__anon50	file:
ncode	3rdparty/zlib-1.2.5/inflate.h	/^    unsigned ncode;             \/* number of code length code lengths *\/$/;"	m	struct:inflate_state
ncum	3rdparty/tiff-3.9.4/uvcode.h	/^	short	nus, ncum;$/;"	m	struct:__anon70
ndist	3rdparty/zlib-1.2.5/inflate.h	/^    unsigned ndist;             \/* number of distance code lengths *\/$/;"	m	struct:inflate_state
near	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^        #define near$/;"	d
near	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^        #undef near$/;"	d
near	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^    T			near() const		{ return _near;		}$/;"	f	class:Imath::Frustum
nearestRotation	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^Euler<T>::nearestRotation (Vec3<T> &xyzRot, const Vec3<T> &targetXyzRot,$/;"	f	class:Imath::Euler
need_more	3rdparty/zlib-1.2.5/deflate.c	/^    need_more,      \/* block not completed, need more input or more output *\/$/;"	e	enum:__anon71	file:
needsSupersampling	samplers/adaptive.cpp	/^bool AdaptiveSampler::needsSupersampling(Sample *samples,$/;"	f	class:AdaptiveSampler
negInf	3rdparty/ilmbase-1.0.2/half.h	/^half::negInf ()$/;"	f	class:half
negate	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color3<T>::negate ()$/;"	f	class:Imath::Color3
negate	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color4<T>::negate ()$/;"	f	class:Imath::Color4
negate	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::negate ()$/;"	f	class:Imath::Matrix33
negate	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::negate ()$/;"	f	class:Imath::Matrix44
negate	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::negate ()$/;"	f	class:Imath::Shear6
negate	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::negate ()$/;"	f	class:Imath::Vec2
negate	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::negate ()$/;"	f	class:Imath::Vec3
negate	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::negate ()$/;"	f	class:Imath::Vec4
nelems	core/pbrtparse.cpp	/^    int nelems;$/;"	m	struct:ParamArray	file:
newAttribute	3rdparty/openexr-1.7.0/ImfAttribute.cpp	/^Attribute::newAttribute (const char typeName[])$/;"	f	class:Imf::Attribute
newCompressor	3rdparty/openexr-1.7.0/ImfCompressor.cpp	/^newCompressor (Compression c, size_t maxScanLineSize, const Header &hdr)$/;"	f	namespace:Imf
newLineBufferTask	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^newLineBufferTask$/;"	f	namespace:Imf::__anon32
newTileBufferTask	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^newTileBufferTask$/;"	f	namespace:Imf::__anon35
newTileCompressor	3rdparty/openexr-1.7.0/ImfCompressor.cpp	/^newTileCompressor (Compression c,$/;"	f	namespace:Imf
new_ptr	3rdparty/zlib-1.2.5/zutil.c	/^    voidpf new_ptr;$/;"	m	struct:ptr_table_s	file:
next	3rdparty/ilmbase-1.0.2/ImathRandom.h	/^Rand32::next ()$/;"	f	class:Imath::Rand32
next	3rdparty/tiff-3.9.4/tif_compress.c	/^	struct _codec*	next;$/;"	m	struct:_codec	typeref:struct:_codec::_codec	file:
next	3rdparty/tiff-3.9.4/tif_lzw.c	/^	struct code_ent *next;$/;"	m	struct:code_ent	typeref:struct:code_ent::code_ent	file:
next	3rdparty/tiff-3.9.4/tiffiop.h	/^    struct client_info *next;$/;"	m	struct:client_info	typeref:struct:client_info::client_info
next	3rdparty/zlib-1.2.5/gzguts.h	/^    unsigned char *next;    \/* next output data to deliver or write *\/$/;"	m	struct:__anon74
next	3rdparty/zlib-1.2.5/inflate.h	/^    code FAR *next;             \/* next available space in codes[] *\/$/;"	m	struct:inflate_state
next	tools/ply.h	/^  struct PlyRuleList *next;    \/* pointer for linked list of rules *\/$/;"	m	struct:PlyRuleList	typeref:struct:PlyRuleList::PlyRuleList
nextFace	shapes/loopsubdiv.cpp	/^    SDFace *nextFace(SDVertex *vert) {$/;"	f	struct:SDFace
nextFrame	3rdparty/ilmbase-1.0.2/ImathFrame.h	/^template<class T> Matrix44<T> nextFrame$/;"	f	namespace:Imath
nextFreeNode	accelerators/kdtreeaccel.h	/^    int nAllocedNodes, nextFreeNode;$/;"	m	class:KdTreeAccel
nextFreeNode	core/kdtree.h	/^    uint32_t nNodes, nextFreeNode;$/;"	m	class:KdTree
nextLineBufferMinY	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    int			nextLineBufferMinY; \/\/ minimum y of the next linebuffer$/;"	m	struct:Imf::ScanLineInputFile::Data	file:
nextTileCoord	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::Data::nextTileCoord (const TileCoord &a)$/;"	f	class:Imf::TiledOutputFile::Data
nextTileToWrite	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    TileCoord		nextTileToWrite;$/;"	m	struct:Imf::TiledOutputFile::Data	file:
nextVert	shapes/loopsubdiv.cpp	/^    SDVertex *nextVert(SDVertex *vert) {$/;"	f	struct:SDFace
next_in	3rdparty/zlib-1.2.5/zlib.h	/^    Bytef    *next_in;  \/* next input byte *\/$/;"	m	struct:z_stream_s
next_out	3rdparty/zlib-1.2.5/zlib.h	/^    Bytef    *next_out; \/* next output byte should be put there *\/$/;"	m	struct:z_stream_s
next_ptr	3rdparty/zlib-1.2.5/zutil.c	/^local int next_ptr = 0;$/;"	v
nextb	3rdparty/ilmbase-1.0.2/ImathRandom.h	/^Rand32::nextb ()$/;"	f	class:Imath::Rand32
nextb	3rdparty/ilmbase-1.0.2/ImathRandom.h	/^Rand48::nextb ()$/;"	f	class:Imath::Rand48
nextbits	3rdparty/tiff-3.9.4/tif_lzw.c	/^	long		nextbits;	\/* # of valid bits in lzw_nextdata *\/$/;"	m	struct:__anon50	file:
nextdata	3rdparty/tiff-3.9.4/tif_lzw.c	/^	long		nextdata;	\/* next bits of i\/o *\/$/;"	m	struct:__anon50	file:
nextf	3rdparty/ilmbase-1.0.2/ImathRandom.cpp	/^Rand32::nextf ()$/;"	f	class:Imath::Rand32
nextf	3rdparty/ilmbase-1.0.2/ImathRandom.h	/^Rand32::nextf (float rangeMin, float rangeMax)$/;"	f	class:Imath::Rand32
nextf	3rdparty/ilmbase-1.0.2/ImathRandom.h	/^Rand48::nextf ()$/;"	f	class:Imath::Rand48
nextf	3rdparty/ilmbase-1.0.2/ImathRandom.h	/^Rand48::nextf (double rangeMin, double rangeMax)$/;"	f	class:Imath::Rand48
nexti	3rdparty/ilmbase-1.0.2/ImathRandom.h	/^Rand32::nexti ()$/;"	f	class:Imath::Rand32
nexti	3rdparty/ilmbase-1.0.2/ImathRandom.h	/^Rand48::nexti ()$/;"	f	class:Imath::Rand48
nextprimitiveId	core/primitive.cpp	/^uint32_t Primitive::nextprimitiveId = 1;$/;"	m	class:Primitive	file:
nextprimitiveId	core/primitive.h	/^    static uint32_t nextprimitiveId;$/;"	m	class:Primitive
nextshapeId	core/shape.cpp	/^uint32_t Shape::nextshapeId = 1;$/;"	m	class:Shape	file:
nextshapeId	core/shape.h	/^    static uint32_t nextshapeId;$/;"	m	class:Shape
nfaces	tools/ply2pbrt.c	/^static int nverts,nfaces;$/;"	v	file:
ng	core/reflection.h	/^    Normal nn, ng;$/;"	m	class:BSDF
nice_length	3rdparty/zlib-1.2.5/deflate.c	/^   ush nice_length; \/* quit search above this match length *\/$/;"	m	struct:config_s	file:
nice_match	3rdparty/zlib-1.2.5/deflate.h	/^    int nice_match; \/* Stop searching when current match exceeds this *\/$/;"	m	struct:internal_state
nlen	3rdparty/zlib-1.2.5/inflate.h	/^    unsigned nlen;              \/* number of length code lengths *\/$/;"	m	struct:inflate_state
nn	core/diffgeom.h	/^    Normal nn;$/;"	m	struct:DifferentialGeometry
nn	core/reflection.h	/^    Normal nn, ng;$/;"	m	class:BSDF
node	accelerators/kdtreeaccel.h	/^    const KdAccelNode *node;$/;"	m	struct:KdToDo
nodeData	core/kdtree.h	/^    NodeData *nodeData;$/;"	m	class:KdTree
nodes	accelerators/bvh.h	/^    LinearBVHNode *nodes;$/;"	m	class:BVHAccel
nodes	accelerators/kdtreeaccel.h	/^    KdAccelNode *nodes;$/;"	m	class:KdTreeAccel
nodes	core/kdtree.h	/^    KdNode *nodes;$/;"	m	class:KdTree
nonZero	3rdparty/ilmbase-1.0.2/IlmThreadSemaphore.h	/^	    pthread_cond_t nonZero;$/;"	m	struct:IlmThread::Semaphore::sema_t
normal	3rdparty/ilmbase-1.0.2/ImathPlane.h	/^    Vec3<T>			normal;$/;"	m	class:Imath::Plane3
normal_texname	tools/obj2pbrt.cpp	/^    std::string normal_texname;$/;"	m	struct:tinyobj::__anon90	file:
normalize	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^Quat<T>::normalize ()$/;"	f	class:Imath::Quat
normalize	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec2<int>::normalize ()$/;"	f	class:Imath::Vec2
normalize	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec2<short>::normalize ()$/;"	f	class:Imath::Vec2
normalize	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec3<int>::normalize ()$/;"	f	class:Imath::Vec3
normalize	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec3<short>::normalize ()$/;"	f	class:Imath::Vec3
normalize	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec4<int>::normalize ()$/;"	f	class:Imath::Vec4
normalize	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec4<short>::normalize ()$/;"	f	class:Imath::Vec4
normalize	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::normalize ()$/;"	f	class:Imath::Vec2
normalize	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::normalize ()$/;"	f	class:Imath::Vec3
normalize	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::normalize ()$/;"	f	class:Imath::Vec4
normalizeExc	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec2<int>::normalizeExc () throw (Iex::MathExc)$/;"	f	class:Imath::Vec2
normalizeExc	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec2<short>::normalizeExc () throw (Iex::MathExc)$/;"	f	class:Imath::Vec2
normalizeExc	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec3<int>::normalizeExc () throw (Iex::MathExc)$/;"	f	class:Imath::Vec3
normalizeExc	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec3<short>::normalizeExc () throw (Iex::MathExc)$/;"	f	class:Imath::Vec3
normalizeExc	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec4<int>::normalizeExc () throw (Iex::MathExc)$/;"	f	class:Imath::Vec4
normalizeExc	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec4<short>::normalizeExc () throw (Iex::MathExc)$/;"	f	class:Imath::Vec4
normalizeExc	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::normalizeExc () throw (Iex::MathExc)$/;"	f	class:Imath::Vec2
normalizeExc	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::normalizeExc () throw (Iex::MathExc)$/;"	f	class:Imath::Vec3
normalizeExc	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::normalizeExc () throw (Iex::MathExc)$/;"	f	class:Imath::Vec4
normalizeNonNull	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec2<int>::normalizeNonNull ()$/;"	f	class:Imath::Vec2
normalizeNonNull	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec2<short>::normalizeNonNull ()$/;"	f	class:Imath::Vec2
normalizeNonNull	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec3<int>::normalizeNonNull ()$/;"	f	class:Imath::Vec3
normalizeNonNull	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec3<short>::normalizeNonNull ()$/;"	f	class:Imath::Vec3
normalizeNonNull	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec4<int>::normalizeNonNull ()$/;"	f	class:Imath::Vec4
normalizeNonNull	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec4<short>::normalizeNonNull ()$/;"	f	class:Imath::Vec4
normalizeNonNull	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::normalizeNonNull ()$/;"	f	class:Imath::Vec2
normalizeNonNull	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::normalizeNonNull ()$/;"	f	class:Imath::Vec3
normalizeNonNull	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::normalizeNonNull ()$/;"	f	class:Imath::Vec4
normalizeOrThrow	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^normalizeOrThrow(Vec2<T> &v)$/;"	f	namespace:Imath::__anon12
normalizeOrThrow	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^normalizeOrThrow(Vec3<T> &v)$/;"	f	namespace:Imath::__anon12
normalizeOrThrow	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^normalizeOrThrow(Vec4<T> &v)$/;"	f	namespace:Imath::__anon12
normalized	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^Quat<T>::normalized () const$/;"	f	class:Imath::Quat
normalized	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec2<int>::normalized () const$/;"	f	class:Imath::Vec2
normalized	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec2<short>::normalized () const$/;"	f	class:Imath::Vec2
normalized	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec3<int>::normalized () const$/;"	f	class:Imath::Vec3
normalized	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec3<short>::normalized () const$/;"	f	class:Imath::Vec3
normalized	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec4<int>::normalized () const$/;"	f	class:Imath::Vec4
normalized	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec4<short>::normalized () const$/;"	f	class:Imath::Vec4
normalized	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::normalized () const$/;"	f	class:Imath::Vec2
normalized	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::normalized () const$/;"	f	class:Imath::Vec3
normalized	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::normalized () const$/;"	f	class:Imath::Vec4
normalizedExc	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec2<int>::normalizedExc () const throw (Iex::MathExc)$/;"	f	class:Imath::Vec2
normalizedExc	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec2<short>::normalizedExc () const throw (Iex::MathExc)$/;"	f	class:Imath::Vec2
normalizedExc	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec3<int>::normalizedExc () const throw (Iex::MathExc)$/;"	f	class:Imath::Vec3
normalizedExc	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec3<short>::normalizedExc () const throw (Iex::MathExc)$/;"	f	class:Imath::Vec3
normalizedExc	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec4<int>::normalizedExc () const throw (Iex::MathExc)$/;"	f	class:Imath::Vec4
normalizedExc	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec4<short>::normalizedExc () const throw (Iex::MathExc)$/;"	f	class:Imath::Vec4
normalizedExc	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::normalizedExc () const throw (Iex::MathExc)$/;"	f	class:Imath::Vec2
normalizedExc	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::normalizedExc () const throw (Iex::MathExc)$/;"	f	class:Imath::Vec3
normalizedExc	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::normalizedExc () const throw (Iex::MathExc)$/;"	f	class:Imath::Vec4
normalizedNonNull	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec2<int>::normalizedNonNull () const$/;"	f	class:Imath::Vec2
normalizedNonNull	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec2<short>::normalizedNonNull () const$/;"	f	class:Imath::Vec2
normalizedNonNull	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec3<int>::normalizedNonNull () const$/;"	f	class:Imath::Vec3
normalizedNonNull	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec3<short>::normalizedNonNull () const$/;"	f	class:Imath::Vec3
normalizedNonNull	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec4<int>::normalizedNonNull () const$/;"	f	class:Imath::Vec4
normalizedNonNull	3rdparty/ilmbase-1.0.2/ImathVec.cpp	/^Vec4<short>::normalizedNonNull () const$/;"	f	class:Imath::Vec4
normalizedNonNull	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::normalizedNonNull () const$/;"	f	class:Imath::Vec2
normalizedNonNull	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::normalizedNonNull () const$/;"	f	class:Imath::Vec3
normalizedNonNull	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::normalizedNonNull () const$/;"	f	class:Imath::Vec4
normalizedZToDepth	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^T Frustum<T>::normalizedZToDepth(T zval) const$/;"	f	class:Imath::Frustum
normals	core/paramset.h	/^    vector<Reference<ParamSetItem<Normal> > > normals;$/;"	m	class:ParamSet
normals	tools/obj2pbrt.cpp	/^    std::vector<float>          normals;$/;"	m	struct:tinyobj::__anon91	file:
notEnoughData	3rdparty/openexr-1.7.0/ImfB44Compressor.cpp	/^notEnoughData ()$/;"	f	namespace:Imf::__anon15
notEnoughData	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^notEnoughData ()$/;"	f	namespace:Imf::__anon20
notEnoughData	3rdparty/openexr-1.7.0/ImfPxr24Compressor.cpp	/^notEnoughData ()$/;"	f	namespace:Imf::__anon26
nprops	tools/ply.h	/^  int nprops;                   \/* number of properties for this element *\/$/;"	m	struct:PlyElement
nprops	tools/ply.h	/^  int nprops;                   \/* number of properties in other_props *\/$/;"	m	struct:PlyOtherProp
nprops	tools/ply.h	/^  int nprops;            \/* number of properties we're combining so far *\/$/;"	m	struct:PlyPropRules
nrand48	3rdparty/ilmbase-1.0.2/ImathRandom.cpp	/^nrand48 (unsigned short state[3])$/;"	f	namespace:Imath
nshot	integrators/photonmap.cpp	/^    uint32_t &nshot;$/;"	m	class:PhotonShootingTask	file:
ntris	shapes/trianglemesh.h	/^    int ntris, nverts;$/;"	m	class:TriangleMesh
nu	materials/substrate.h	/^    Reference<Texture<float> > nu, nv;$/;"	m	class:SubstrateMaterial
nu	shapes/nurbs.h	/^    int nu, uorder, nv, vorder;$/;"	m	class:NURBS
num	core/pbrtparse.cpp	/^float num;$/;"	m	union:YYSTYPE	file:
num	core/pbrtparse.hh	/^float num;$/;"	m	union:YYSTYPE
num	core/probes.cpp	/^    StatsCounterType num;$/;"	m	class:StatsCounter	file:
num	tools/ply.h	/^  int num;                      \/* number of elements in this object *\/$/;"	m	struct:PlyElement
numLevels	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::numLevels () const$/;"	f	class:Imf::TiledInputFile
numLevels	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::numLevels () const$/;"	f	class:Imf::TiledOutputFile
numLevels	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::numLevels () const$/;"	f	class:Imf::TiledRgbaInputFile
numLevels	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::numLevels () const$/;"	f	class:Imf::TiledRgbaOutputFile
numLinesInBuffer	3rdparty/openexr-1.7.0/ImfMisc.cpp	/^numLinesInBuffer (Compressor * compressor)$/;"	f	namespace:Imf
numPending	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^    int		numPending;	\/\/ number of pending tasks to still execute$/;"	m	struct:IlmThread::TaskGroup::Data	file:
numPointsAdded	renderers/surfacepoints.cpp	/^    int &totalPathsTraced, &totalRaysTraced, &numPointsAdded;$/;"	m	class:SurfacePointTask	file:
numReadersWaiting	core/parallel.h	/^    LONG numReadersWaiting;$/;"	m	class:RWMutex
numSamples	3rdparty/openexr-1.7.0/ImfMisc.cpp	/^numSamples (int s, int a, int b)$/;"	f	namespace:Imf
numScanLines	3rdparty/openexr-1.7.0/ImfB44Compressor.cpp	/^B44Compressor::numScanLines () const$/;"	f	class:Imf::B44Compressor
numScanLines	3rdparty/openexr-1.7.0/ImfPizCompressor.cpp	/^PizCompressor::numScanLines () const$/;"	f	class:Imf::PizCompressor
numScanLines	3rdparty/openexr-1.7.0/ImfPxr24Compressor.cpp	/^Pxr24Compressor::numScanLines () const$/;"	f	class:Imf::Pxr24Compressor
numScanLines	3rdparty/openexr-1.7.0/ImfRleCompressor.cpp	/^RleCompressor::numScanLines () const$/;"	f	class:Imf::RleCompressor
numScanLines	3rdparty/openexr-1.7.0/ImfZipCompressor.cpp	/^ZipCompressor::numScanLines () const$/;"	f	class:Imf::ZipCompressor
numTasks	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^    size_t numTasks;                \/\/ fast access to list size$/;"	m	struct:IlmThread::ThreadPool::Data	file:
numTasks	integrators/irradiancecache.cpp	/^    int taskNum, numTasks;$/;"	m	struct:IrradiancePrimeTask	file:
numTasks	integrators/photonmap.cpp	/^    uint32_t taskNum, numTasks;$/;"	m	class:ComputeRadianceTask	file:
numThreads	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^    size_t numThreads;              \/\/ fast access to list size$/;"	m	struct:IlmThread::ThreadPool::Data	file:
numThreads	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^ThreadPool::numThreads () const$/;"	f	class:IlmThread::ThreadPool
numThreads	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^    int                 numThreads;$/;"	m	struct:Imf::InputFile::Data	file:
numUnfinishedTasks	core/parallel.cpp	/^static uint32_t numUnfinishedTasks;$/;"	v	file:
numWaiting	3rdparty/ilmbase-1.0.2/IlmThreadSemaphore.h	/^	    unsigned long numWaiting;$/;"	m	struct:IlmThread::Semaphore::sema_t
numWritersWaiting	core/parallel.h	/^    LONG numWritersWaiting;$/;"	m	class:RWMutex
numXLevels	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    int		    numXLevels;		    \/\/ number of x levels$/;"	m	struct:Imf::TiledInputFile::Data	file:
numXLevels	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::numXLevels () const$/;"	f	class:Imf::TiledInputFile
numXLevels	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    int			numXLevels;		\/\/ number of x levels$/;"	m	struct:Imf::TiledOutputFile::Data	file:
numXLevels	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::numXLevels () const$/;"	f	class:Imf::TiledOutputFile
numXLevels	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::numXLevels () const$/;"	f	class:Imf::TiledRgbaInputFile
numXLevels	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::numXLevels () const$/;"	f	class:Imf::TiledRgbaOutputFile
numXTiles	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    int *	    numXTiles;		    \/\/ number of x tiles at a level$/;"	m	struct:Imf::TiledInputFile::Data	file:
numXTiles	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::numXTiles (int lx) const$/;"	f	class:Imf::TiledInputFile
numXTiles	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    int *		numXTiles;		\/\/ number of x tiles at a level$/;"	m	struct:Imf::TiledOutputFile::Data	file:
numXTiles	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::numXTiles (int lx) const$/;"	f	class:Imf::TiledOutputFile
numXTiles	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::numXTiles (int lx) const$/;"	f	class:Imf::TiledRgbaInputFile
numXTiles	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::numXTiles (int lx) const$/;"	f	class:Imf::TiledRgbaOutputFile
numYLevels	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    int		    numYLevels;		    \/\/ number of y levels$/;"	m	struct:Imf::TiledInputFile::Data	file:
numYLevels	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::numYLevels () const$/;"	f	class:Imf::TiledInputFile
numYLevels	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    int			numYLevels;		\/\/ number of y levels$/;"	m	struct:Imf::TiledOutputFile::Data	file:
numYLevels	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::numYLevels () const$/;"	f	class:Imf::TiledOutputFile
numYLevels	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::numYLevels () const$/;"	f	class:Imf::TiledRgbaInputFile
numYLevels	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::numYLevels () const$/;"	f	class:Imf::TiledRgbaOutputFile
numYTiles	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    int *	    numYTiles;		    \/\/ number of y tiles at a level$/;"	m	struct:Imf::TiledInputFile::Data	file:
numYTiles	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::numYTiles (int ly) const$/;"	f	class:Imf::TiledInputFile
numYTiles	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    int *		numYTiles;		\/\/ number of y tiles at a level$/;"	m	struct:Imf::TiledOutputFile::Data	file:
numYTiles	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::numYTiles (int ly) const$/;"	f	class:Imf::TiledOutputFile
numYTiles	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::numYTiles (int ly) const$/;"	f	class:Imf::TiledRgbaInputFile
numYTiles	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::numYTiles (int ly) const$/;"	f	class:Imf::TiledRgbaOutputFile
num_comments	tools/ply.h	/^  int num_comments;             \/* number of comments *\/$/;"	m	struct:PlyFile
num_elem_types	tools/ply.h	/^  int num_elem_types;           \/* number of element types of object *\/$/;"	m	struct:PlyFile
num_elems	tools/ply.h	/^  int num_elems;                \/* number of other elements *\/$/;"	m	struct:PlyOtherElems
num_obj_info	tools/ply.h	/^  int num_obj_info;             \/* number of items of object information *\/$/;"	m	struct:PlyFile
number	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    int			number;$/;"	m	struct:Imf::__anon31::LineBuffer	file:
numeric_limits	3rdparty/ilmbase-1.0.2/halfLimits.h	/^class numeric_limits <half>$/;"	c	namespace:std
nus	3rdparty/tiff-3.9.4/uvcode.h	/^	short	nus, ncum;$/;"	m	struct:__anon70
nv	materials/substrate.h	/^    Reference<Texture<float> > nu, nv;$/;"	m	class:SubstrateMaterial
nv	shapes/nurbs.h	/^    int nu, uorder, nv, vorder;$/;"	m	class:NURBS
nverts	shapes/trianglemesh.h	/^    int ntris, nverts;$/;"	m	class:TriangleMesh
nverts	tools/ply2pbrt.c	/^  unsigned char nverts;    \/* number of vertex indices in list *\/$/;"	m	struct:Face	file:
nverts	tools/ply2pbrt.c	/^static int nverts,nfaces;$/;"	v	file:
nx	3rdparty/openexr-1.7.0/ImfB44Compressor.cpp	/^    int			nx;$/;"	m	struct:Imf::B44Compressor::ChannelData	file:
nx	3rdparty/openexr-1.7.0/ImfPizCompressor.cpp	/^    int			nx;$/;"	m	struct:Imf::PizCompressor::ChannelData	file:
nx	shapes/heightfield.h	/^    int nx, ny;$/;"	m	class:Heightfield
nx	shapes/heightfield2.h	/^    int nx, ny;$/;"	m	class:Heightfield2
nx	tools/ply2pbrt.c	/^  float nx,ny,nz;$/;"	m	struct:Vertex	file:
nx	volumes/volumegrid.h	/^    const int nx, ny, nz;$/;"	m	class:VolumeGridDensity
ny	3rdparty/openexr-1.7.0/ImfB44Compressor.cpp	/^    int			ny;$/;"	m	struct:Imf::B44Compressor::ChannelData	file:
ny	3rdparty/openexr-1.7.0/ImfPizCompressor.cpp	/^    int			ny;$/;"	m	struct:Imf::PizCompressor::ChannelData	file:
ny	shapes/heightfield.h	/^    int nx, ny;$/;"	m	class:Heightfield
ny	shapes/heightfield2.h	/^    int nx, ny;$/;"	m	class:Heightfield2
ny	tools/ply2pbrt.c	/^  float nx,ny,nz;$/;"	m	struct:Vertex	file:
ny	volumes/volumegrid.h	/^    const int nx, ny, nz;$/;"	m	class:VolumeGridDensity
nz	tools/ply2pbrt.c	/^  float nx,ny,nz;$/;"	m	struct:Vertex	file:
nz	volumes/volumegrid.h	/^    const int nx, ny, nz;$/;"	m	class:VolumeGridDensity
o	core/geometry.h	/^    Point o;$/;"	m	class:Ray
obj_info	tools/ply.h	/^  char **obj_info;              \/* list of object info items *\/$/;"	m	struct:PlyFile
obj_shape	tools/obj2pbrt.cpp	/^struct obj_shape {$/;"	s	namespace:tinyobj	file:
octaves	textures/fbm.h	/^    int octaves;$/;"	m	class:FBmTexture
octaves	textures/marble.h	/^    int octaves;$/;"	m	class:MarbleTexture
octaves	textures/wrinkled.h	/^    int octaves;$/;"	m	class:WrinkledTexture
octree	integrators/dipolesubsurface.h	/^    SubsurfaceOctreeNode *octree;$/;"	m	class:DipoleSubsurfaceIntegrator
octree	integrators/irradiancecache.h	/^    mutable Octree<IrradianceSample *> *octree;$/;"	m	class:IrradianceCacheIntegrator
octree	renderers/surfacepoints.cpp	/^    Octree<SurfacePoint> &octree;$/;"	m	class:SurfacePointTask	file:
octreeArena	integrators/dipolesubsurface.h	/^    MemoryArena octreeArena;$/;"	m	class:DipoleSubsurfaceIntegrator
octreeBounds	integrators/dipolesubsurface.h	/^    BBox octreeBounds;$/;"	m	class:DipoleSubsurfaceIntegrator
octreeChildBound	core/octree.h	/^inline BBox octreeChildBound(int child, const BBox &nodeBound,$/;"	f
offset	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^    int                 offset;$/;"	m	struct:Imf::InputFile::Data	file:
offset	3rdparty/zlib-1.2.5/inflate.h	/^    unsigned offset;            \/* distance back to copy string from *\/$/;"	m	struct:inflate_state
offset	accelerators/grid.h	/^    inline int offset(int x, int y, int z) const {$/;"	f	class:GridAccel
offset	tools/ply.h	/^  int offset;                   \/* offset bytes of prop in a struct *\/$/;"	m	struct:PlyProperty
offsetInLineBuffer	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    vector<size_t>	 offsetInLineBuffer;    \/\/ offset for each scanline in$/;"	m	struct:Imf::OutputFile::Data	file:
offsetInLineBuffer	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    vector<size_t>	offsetInLineBuffer; \/\/ offset for each scanline in its$/;"	m	struct:Imf::ScanLineInputFile::Data	file:
offsetInLineBufferTable	3rdparty/openexr-1.7.0/ImfMisc.cpp	/^offsetInLineBufferTable (const vector<size_t> &bytesPerLine,$/;"	f	namespace:Imf
ojpeg_field_info	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^static const TIFFFieldInfo ojpeg_field_info[] = {$/;"	v	file:
old_type_names	tools/ply.c	/^char *old_type_names[] = {  \/* old names of types for backward compatability *\/$/;"	v
omega	textures/fbm.h	/^    float omega;$/;"	m	class:FBmTexture
omega	textures/marble.h	/^    float omega, scale, variation;$/;"	m	class:MarbleTexture
omega	textures/wrinkled.h	/^    float omega;$/;"	m	class:WrinkledTexture
oneD	core/sampler.h	/^    float **oneD, **twoD;$/;"	m	struct:Sample
onePrimitive	accelerators/kdtreeaccel.cpp	/^        uint32_t onePrimitive;  \/\/ Leaf$/;"	m	union:KdAccelNode::__anon79	file:
oneRing	shapes/loopsubdiv.cpp	/^void SDVertex::oneRing(Point *P) {$/;"	f	class:SDVertex
one_over_frequency	core/timer.h	/^    double one_over_frequency;$/;"	m	class:Timer
oneruns	3rdparty/tiff-3.9.4/tif_fax3.c	/^static const unsigned char oneruns[256] = {$/;"	v	file:
oog_encode	3rdparty/tiff-3.9.4/tif_luv.c	/^oog_encode(double u, double v)		\/* encode out-of-gamut chroma *\/$/;"	f	file:
op	3rdparty/zlib-1.2.5/inftrees.h	/^    unsigned char op;           \/* operation, extra bits, table bits *\/$/;"	m	struct:__anon76
opacity	materials/uber.h	/^    Reference<Texture<Spectrum> > Kd, Ks, Kr, Kt, opacity;$/;"	m	class:UberMaterial
opaque	3rdparty/zlib-1.2.5/zlib.h	/^    voidpf     opaque;  \/* private data object passed to zalloc and zfree *\/$/;"	m	struct:z_stream_s
open	3rdparty/tiff-3.9.4/tif_acorn.c	/^extern int open(const char* name, int flags, int mode)$/;"	f
openWindow	core/pbrt.h	/^    bool openWindow;$/;"	m	struct:Options
open_for_writing_ply	tools/ply.c	/^PlyFile *open_for_writing_ply($/;"	f
operator !=	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<T>::operator != (const Box<T> &src) const$/;"	f	class:Imath::Box
operator !=	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<Vec2<T> >::operator != (const Box<Vec2<T> > &src) const$/;"	f	class:Imath::Box
operator !=	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<Vec3<T> >::operator != (const Box<Vec3<T> > &src) const$/;"	f	class:Imath::Box
operator !=	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color4<T>::operator != (const Color4<S> &v) const$/;"	f	class:Imath::Color4
operator !=	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^Frustum<T>::operator != (const Frustum<T> &src) const$/;"	f	class:Imath::Frustum
operator !=	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::operator != (const Matrix33 &v) const$/;"	f	class:Imath::Matrix33
operator !=	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::operator != (const Matrix44 &v) const$/;"	f	class:Imath::Matrix44
operator !=	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^Quat<T>::operator != (const Quat<S> &q) const$/;"	f	class:Imath::Quat
operator !=	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::operator != (const Shear6<S> &h) const$/;"	f	class:Imath::Shear6
operator !=	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::operator != (const Vec2<S> &v) const$/;"	f	class:Imath::Vec2
operator !=	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::operator != (const Vec3<S> &v) const$/;"	f	class:Imath::Vec3
operator !=	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::operator != (const Vec4<S> &v) const$/;"	f	class:Imath::Vec4
operator !=	3rdparty/openexr-1.7.0/ImfChannelList.h	/^operator != (const ChannelList::ConstIterator &x,$/;"	f	namespace:Imf
operator !=	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^operator != (const FrameBuffer::ConstIterator &x,$/;"	f	namespace:Imf
operator !=	3rdparty/openexr-1.7.0/ImfHeader.h	/^operator != (const Header::ConstIterator &x, const Header::ConstIterator &y)$/;"	f	namespace:Imf
operator !=	3rdparty/openexr-1.7.0/ImfName.h	/^operator != (const Name &x, const Name &y)$/;"	f	namespace:Imf
operator !=	core/geometry.h	/^    bool operator!=(const BBox &b) const {$/;"	f	class:BBox
operator !=	core/geometry.h	/^    bool operator!=(const Normal &n) const {$/;"	f	class:Normal
operator !=	core/geometry.h	/^    bool operator!=(const Point &p) const {$/;"	f	class:Point
operator !=	core/geometry.h	/^    bool operator!=(const Vector &v) const {$/;"	f	class:Vector
operator !=	core/spectrum.h	/^    bool operator!=(const CoefficientSpectrum &sp) const {$/;"	f	class:CoefficientSpectrum
operator !=	core/transform.h	/^    bool operator!=(const Matrix4x4 &m2) const {$/;"	f	struct:Matrix4x4
operator !=	core/transform.h	/^    bool operator!=(const Transform &t) const {$/;"	f	class:Transform
operator %	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::operator % (const Vec2 &v) const$/;"	f	class:Imath::Vec2
operator %	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::operator % (const Vec3 &v) const$/;"	f	class:Imath::Vec3
operator %=	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::operator %= (const Vec3 &v)$/;"	f	class:Imath::Vec3
operator ()	3rdparty/ilmbase-1.0.2/ImathLine.h	/^inline Vec3<T> Line3<T>::operator()(T parameter) const$/;"	f	class:Imath::Line3
operator ()	3rdparty/ilmbase-1.0.2/halfFunction.h	/^halfFunction<T>::operator () (half x) const$/;"	f	class:halfFunction
operator ()	3rdparty/openexr-1.7.0/ImfAttribute.cpp	/^    operator () (const char *x, const char *y) const$/;"	f	struct:Imf::__anon14::NameCompare
operator ()	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^    bool operator () (Int64 *a, Int64 *b) {return *a > *b;}$/;"	f	struct:Imf::__anon20::FHeapCompare
operator ()	3rdparty/openexr-1.7.0/ImfLut.h	/^    half operator () (half x) {return x.round(n);}$/;"	f	struct:Imf::roundNBit
operator ()	3rdparty/openexr-1.7.0/ImfTileOffsets.cpp	/^TileOffsets::operator () (int dx, int dy, int l) const$/;"	f	class:Imf::TileOffsets
operator ()	3rdparty/openexr-1.7.0/ImfTileOffsets.cpp	/^TileOffsets::operator () (int dx, int dy, int l)$/;"	f	class:Imf::TileOffsets
operator ()	3rdparty/openexr-1.7.0/ImfTileOffsets.cpp	/^TileOffsets::operator () (int dx, int dy, int lx, int ly) const$/;"	f	class:Imf::TileOffsets
operator ()	3rdparty/openexr-1.7.0/ImfTileOffsets.cpp	/^TileOffsets::operator () (int dx, int dy, int lx, int ly)$/;"	f	class:Imf::TileOffsets
operator ()	accelerators/bvh.cpp	/^    bool operator()(const BVHPrimitiveInfo &a) const {$/;"	f	struct:CompareToMid
operator ()	accelerators/bvh.cpp	/^    bool operator()(const BVHPrimitiveInfo &a,$/;"	f	struct:ComparePoints
operator ()	accelerators/bvh.cpp	/^bool CompareToBucket::operator()(const BVHPrimitiveInfo &p) const {$/;"	f	class:CompareToBucket
operator ()	core/geometry.h	/^    Point operator()(float t) const { return o + d * t; }$/;"	f	class:Ray
operator ()	core/kdtree.h	/^    bool operator()(const NodeData *d1, const NodeData *d2) const {$/;"	f	struct:CompareNode
operator ()	core/memory.h	/^    T &operator()(uint32_t u, uint32_t v) {$/;"	f	class:BlockedArray
operator ()	core/memory.h	/^    const T &operator()(uint32_t u, uint32_t v) const {$/;"	f	class:BlockedArray
operator ()	core/reflection.cpp	/^    void operator()(const Point &p, const IrregIsotropicBRDFSample &sample,$/;"	f	struct:IrregIsoProc
operator ()	core/transform.cpp	/^BBox Transform::operator()(const BBox &b) const {$/;"	f	class:Transform
operator ()	core/transform.cpp	/^Point AnimatedTransform::operator()(float time, const Point &p) const {$/;"	f	class:AnimatedTransform
operator ()	core/transform.cpp	/^Ray AnimatedTransform::operator()(const Ray &r) const {$/;"	f	class:AnimatedTransform
operator ()	core/transform.cpp	/^Vector AnimatedTransform::operator()(float time, const Vector &v) const {$/;"	f	class:AnimatedTransform
operator ()	core/transform.cpp	/^void AnimatedTransform::operator()(const Ray &r, Ray *tr) const {$/;"	f	class:AnimatedTransform
operator ()	core/transform.cpp	/^void AnimatedTransform::operator()(const RayDifferential &r,$/;"	f	class:AnimatedTransform
operator ()	core/transform.h	/^inline Normal Transform::operator()(const Normal &n) const {$/;"	f	class:Transform
operator ()	core/transform.h	/^inline Point Transform::operator()(const Point &pt) const {$/;"	f	class:Transform
operator ()	core/transform.h	/^inline Ray Transform::operator()(const Ray &r) const {$/;"	f	class:Transform
operator ()	core/transform.h	/^inline RayDifferential Transform::operator()(const RayDifferential &r) const {$/;"	f	class:Transform
operator ()	core/transform.h	/^inline Vector Transform::operator()(const Vector &v) const {$/;"	f	class:Transform
operator ()	core/transform.h	/^inline void Transform::operator()(const Normal &n,$/;"	f	class:Transform
operator ()	core/transform.h	/^inline void Transform::operator()(const Point &pt,$/;"	f	class:Transform
operator ()	core/transform.h	/^inline void Transform::operator()(const Ray &r, Ray *rt) const {$/;"	f	class:Transform
operator ()	core/transform.h	/^inline void Transform::operator()(const RayDifferential &r, RayDifferential *rt) const {$/;"	f	class:Transform
operator ()	core/transform.h	/^inline void Transform::operator()(const Vector &v,$/;"	f	class:Transform
operator ()	integrators/dipolesubsurface.cpp	/^    Spectrum operator()(float d2) const {$/;"	f	struct:DiffusionReflectance
operator ()	integrators/irradiancecache.cpp	/^bool IrradProcess::operator()(const IrradianceSample *sample) {$/;"	f	class:IrradProcess
operator ()	integrators/photonmap.cpp	/^    void operator()(const Point &p, const RadiancePhoton &rp,$/;"	f	struct:RadiancePhotonProcess
operator ()	integrators/photonmap.cpp	/^inline void PhotonProcess::operator()(const Point &p,$/;"	f	class:PhotonProcess
operator ()	lights/infinite.cpp	/^    Spectrum operator()(int, int, const Point &p, const Vector &w) {$/;"	f	struct:InfiniteAreaCube
operator ()	renderers/surfacepoints.cpp	/^    bool operator()(const SurfacePoint &sp) {$/;"	f	struct:PoissonCheck
operator *	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color3<T>::operator * (T a) const$/;"	f	class:Imath::Color3
operator *	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color3<T>::operator * (const Color3 &c) const$/;"	f	class:Imath::Color3
operator *	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color4<T>::operator * (T x) const$/;"	f	class:Imath::Color4
operator *	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color4<T>::operator * (const Color4 &v) const$/;"	f	class:Imath::Color4
operator *	3rdparty/ilmbase-1.0.2/ImathColor.h	/^operator * (S x, const Color4<T> &v)$/;"	f	namespace:Imath
operator *	3rdparty/ilmbase-1.0.2/ImathLine.h	/^inline Line3<S> operator * (const Line3<S> &line, const Matrix44<T> &M)$/;"	f	namespace:Imath
operator *	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::operator * (T a) const$/;"	f	class:Imath::Matrix33
operator *	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::operator * (const Matrix33<T> &v) const$/;"	f	class:Imath::Matrix33
operator *	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::operator * (T a) const$/;"	f	class:Imath::Matrix44
operator *	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::operator * (const Matrix44<T> &v) const$/;"	f	class:Imath::Matrix44
operator *	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^operator * (T a, const Matrix33<T> &v)$/;"	f	namespace:Imath
operator *	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^operator * (T a, const Matrix44<T> &v)$/;"	f	namespace:Imath
operator *	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^operator * (const Vec2<S> &v, const Matrix33<T> &m)$/;"	f	namespace:Imath
operator *	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^operator * (const Vec3<S> &v, const Matrix33<T> &m)$/;"	f	namespace:Imath
operator *	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^operator * (const Vec3<S> &v, const Matrix44<T> &m)$/;"	f	namespace:Imath
operator *	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^operator * (const Vec4<S> &v, const Matrix44<T> &m)$/;"	f	namespace:Imath
operator *	3rdparty/ilmbase-1.0.2/ImathPlane.h	/^Plane3<T> operator* (const Plane3<T> &plane, const Matrix44<T> &M)$/;"	f	namespace:Imath
operator *	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^operator * (T t, const Quat<T> &q)$/;"	f	namespace:Imath
operator *	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^operator * (const Matrix33<T> &M, const Quat<T> &q)$/;"	f	namespace:Imath
operator *	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^operator * (const Quat<T> &q, T t)$/;"	f	namespace:Imath
operator *	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^operator * (const Quat<T> &q, const Matrix33<T> &M)$/;"	f	namespace:Imath
operator *	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^operator * (const Quat<T> &q1, const Quat<T> &q2)$/;"	f	namespace:Imath
operator *	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^operator * (const Vec3<T> &v, const Quat<T> &q)$/;"	f	namespace:Imath
operator *	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::operator * (T a) const$/;"	f	class:Imath::Shear6
operator *	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::operator * (const Shear6 &h) const$/;"	f	class:Imath::Shear6
operator *	3rdparty/ilmbase-1.0.2/ImathShear.h	/^operator * (S a, const Shear6<T> &h)$/;"	f	namespace:Imath
operator *	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::operator * (T a) const$/;"	f	class:Imath::Vec2
operator *	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::operator * (const Vec2 &v) const$/;"	f	class:Imath::Vec2
operator *	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::operator * (T a) const$/;"	f	class:Imath::Vec3
operator *	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::operator * (const Vec3 &v) const$/;"	f	class:Imath::Vec3
operator *	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::operator * (T a) const$/;"	f	class:Imath::Vec4
operator *	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::operator * (const Vec4 &v) const$/;"	f	class:Imath::Vec4
operator *	3rdparty/ilmbase-1.0.2/ImathVec.h	/^operator * (T a, const Vec2<T> &v)$/;"	f	namespace:Imath
operator *	3rdparty/ilmbase-1.0.2/ImathVec.h	/^operator * (T a, const Vec3<T> &v)$/;"	f	namespace:Imath
operator *	3rdparty/ilmbase-1.0.2/ImathVec.h	/^operator * (T a, const Vec4<T> &v)$/;"	f	namespace:Imath
operator *	3rdparty/openexr-1.7.0/ImfName.h	/^    const char *	operator * () const	{return _text;}$/;"	f	class:Imf::Name
operator *	core/geometry.h	/^    Normal operator*(float f) const {$/;"	f	class:Normal
operator *	core/geometry.h	/^    Point operator* (float f) const {$/;"	f	class:Point
operator *	core/geometry.h	/^    Vector operator*(float f) const { return Vector(f*x, f*y, f*z); }$/;"	f	class:Vector
operator *	core/geometry.h	/^inline Normal operator*(float f, const Normal &n) {$/;"	f
operator *	core/geometry.h	/^inline Point operator*(float f, const Point &p) {$/;"	f
operator *	core/geometry.h	/^inline Vector operator*(float f, const Vector &v) { return v*f; }$/;"	f
operator *	core/quaternion.h	/^    Quaternion operator*(float f) const {$/;"	f	struct:Quaternion
operator *	core/quaternion.h	/^inline Quaternion operator*(float f, const Quaternion &q) {$/;"	f
operator *	core/spectrum.h	/^    CoefficientSpectrum operator*(const CoefficientSpectrum &sp) const {$/;"	f	class:CoefficientSpectrum
operator *	core/spectrum.h	/^    CoefficientSpectrum operator*(float a) const {$/;"	f	class:CoefficientSpectrum
operator *	core/spectrum.h	/^    CoefficientSpectrum operator*(float a, const CoefficientSpectrum &s) {$/;"	f	class:CoefficientSpectrum
operator *	core/transform.cpp	/^Transform Transform::operator*(const Transform &t2) const {$/;"	f	class:Transform
operator *=	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color3<T>::operator *= (T a)$/;"	f	class:Imath::Color3
operator *=	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color3<T>::operator *= (const Color3 &c)$/;"	f	class:Imath::Color3
operator *=	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color4<T>::operator *= (T x)$/;"	f	class:Imath::Color4
operator *=	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color4<T>::operator *= (const Color4 &v)$/;"	f	class:Imath::Color4
operator *=	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::operator *= (T a)$/;"	f	class:Imath::Matrix33
operator *=	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::operator *= (const Matrix33<T> &v)$/;"	f	class:Imath::Matrix33
operator *=	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::operator *= (T a)$/;"	f	class:Imath::Matrix44
operator *=	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::operator *= (const Matrix44<T> &v)$/;"	f	class:Imath::Matrix44
operator *=	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^operator *= (Vec2<S> &v, const Matrix33<T> &m)$/;"	f	namespace:Imath
operator *=	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^operator *= (Vec3<S> &v, const Matrix33<T> &m)$/;"	f	namespace:Imath
operator *=	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^operator *= (Vec3<S> &v, const Matrix44<T> &m)$/;"	f	namespace:Imath
operator *=	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^operator *= (Vec4<S> &v, const Matrix44<T> &m)$/;"	f	namespace:Imath
operator *=	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^Quat<T>::operator *= (T t)$/;"	f	class:Imath::Quat
operator *=	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^Quat<T>::operator *= (const Quat<T> &q)$/;"	f	class:Imath::Quat
operator *=	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::operator *= (T a)$/;"	f	class:Imath::Shear6
operator *=	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::operator *= (const Shear6 &h)$/;"	f	class:Imath::Shear6
operator *=	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::operator *= (T a)$/;"	f	class:Imath::Vec2
operator *=	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::operator *= (const Vec2 &v)$/;"	f	class:Imath::Vec2
operator *=	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::operator *= (T a)$/;"	f	class:Imath::Vec3
operator *=	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::operator *= (const Vec3 &v)$/;"	f	class:Imath::Vec3
operator *=	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::operator *= (T a)$/;"	f	class:Imath::Vec4
operator *=	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::operator *= (const Vec4 &v)$/;"	f	class:Imath::Vec4
operator *=	3rdparty/ilmbase-1.0.2/half.h	/^half::operator *= (float f)$/;"	f	class:half
operator *=	3rdparty/ilmbase-1.0.2/half.h	/^half::operator *= (half h)$/;"	f	class:half
operator *=	core/geometry.h	/^    Normal &operator*=(float f) {$/;"	f	class:Normal
operator *=	core/geometry.h	/^    Point &operator*=(float f) {$/;"	f	class:Point
operator *=	core/geometry.h	/^    Vector &operator*=(float f) {$/;"	f	class:Vector
operator *=	core/quaternion.h	/^    Quaternion &operator*=(float f) {$/;"	f	struct:Quaternion
operator *=	core/spectrum.h	/^    CoefficientSpectrum &operator*=(const CoefficientSpectrum &sp) {$/;"	f	class:CoefficientSpectrum
operator *=	core/spectrum.h	/^    CoefficientSpectrum &operator*=(float a) {$/;"	f	class:CoefficientSpectrum
operator +	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color3<T>::operator + (const Color3 &c) const$/;"	f	class:Imath::Color3
operator +	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color4<T>::operator + (const Color4 &v) const$/;"	f	class:Imath::Color4
operator +	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::operator + (const Matrix33<T> &v) const$/;"	f	class:Imath::Matrix33
operator +	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::operator + (const Matrix44<T> &v) const$/;"	f	class:Imath::Matrix44
operator +	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^operator + (const Quat<T> &q1, const Quat<T> &q2)$/;"	f	namespace:Imath
operator +	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::operator + (const Shear6 &h) const$/;"	f	class:Imath::Shear6
operator +	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::operator + (const Vec2 &v) const$/;"	f	class:Imath::Vec2
operator +	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::operator + (const Vec3 &v) const$/;"	f	class:Imath::Vec3
operator +	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::operator + (const Vec4 &v) const$/;"	f	class:Imath::Vec4
operator +	core/geometry.h	/^    Normal operator+ (const Normal &n) const {$/;"	f	class:Normal
operator +	core/geometry.h	/^    Point operator+(const Point &p) const {$/;"	f	class:Point
operator +	core/geometry.h	/^    Point operator+(const Vector &v) const {$/;"	f	class:Point
operator +	core/geometry.h	/^    Vector operator+(const Vector &v) const {$/;"	f	class:Vector
operator +	core/quaternion.h	/^    friend Quaternion operator+(const Quaternion &q1, const Quaternion &q2) {$/;"	f	struct:Quaternion
operator +	core/spectrum.h	/^    CoefficientSpectrum operator+(const CoefficientSpectrum &s2) const {$/;"	f	class:CoefficientSpectrum
operator ++	3rdparty/openexr-1.7.0/ImfChannelList.h	/^ChannelList::ConstIterator::operator ++ ()$/;"	f	class:Imf::ChannelList::ConstIterator
operator ++	3rdparty/openexr-1.7.0/ImfChannelList.h	/^ChannelList::ConstIterator::operator ++ (int)$/;"	f	class:Imf::ChannelList::ConstIterator
operator ++	3rdparty/openexr-1.7.0/ImfChannelList.h	/^ChannelList::Iterator::operator ++ ()$/;"	f	class:Imf::ChannelList::Iterator
operator ++	3rdparty/openexr-1.7.0/ImfChannelList.h	/^ChannelList::Iterator::operator ++ (int)$/;"	f	class:Imf::ChannelList::Iterator
operator ++	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^FrameBuffer::ConstIterator::operator ++ ()$/;"	f	class:Imf::FrameBuffer::ConstIterator
operator ++	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^FrameBuffer::ConstIterator::operator ++ (int)$/;"	f	class:Imf::FrameBuffer::ConstIterator
operator ++	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^FrameBuffer::Iterator::operator ++ ()$/;"	f	class:Imf::FrameBuffer::Iterator
operator ++	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^FrameBuffer::Iterator::operator ++ (int)$/;"	f	class:Imf::FrameBuffer::Iterator
operator ++	3rdparty/openexr-1.7.0/ImfHeader.h	/^Header::ConstIterator::operator ++ ()$/;"	f	class:Imf::Header::ConstIterator
operator ++	3rdparty/openexr-1.7.0/ImfHeader.h	/^Header::ConstIterator::operator ++ (int)$/;"	f	class:Imf::Header::ConstIterator
operator ++	3rdparty/openexr-1.7.0/ImfHeader.h	/^Header::Iterator::operator ++ ()$/;"	f	class:Imf::Header::Iterator
operator ++	3rdparty/openexr-1.7.0/ImfHeader.h	/^Header::Iterator::operator ++ (int)$/;"	f	class:Imf::Header::Iterator
operator ++	core/probes.cpp	/^    void operator++() {$/;"	f	class:StatsCounter
operator ++	core/probes.cpp	/^    void operator++(int) {$/;"	f	class:StatsCounter
operator +=	3rdparty/ilmbase-1.0.2/IexBaseExc.h	/^BaseExc::operator += (const char *s)$/;"	f	class:Iex::BaseExc
operator +=	3rdparty/ilmbase-1.0.2/IexBaseExc.h	/^BaseExc::operator += (std::stringstream &s)$/;"	f	class:Iex::BaseExc
operator +=	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color3<T>::operator += (const Color3 &c)$/;"	f	class:Imath::Color3
operator +=	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color4<T>::operator += (const Color4 &v)$/;"	f	class:Imath::Color4
operator +=	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::operator += (T a)$/;"	f	class:Imath::Matrix33
operator +=	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::operator += (const Matrix33<T> &v)$/;"	f	class:Imath::Matrix33
operator +=	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::operator += (T a)$/;"	f	class:Imath::Matrix44
operator +=	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::operator += (const Matrix44<T> &v)$/;"	f	class:Imath::Matrix44
operator +=	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^Quat<T>::operator += (const Quat<T> &q)$/;"	f	class:Imath::Quat
operator +=	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::operator += (const Shear6 &h)$/;"	f	class:Imath::Shear6
operator +=	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::operator += (const Vec2 &v)$/;"	f	class:Imath::Vec2
operator +=	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::operator += (const Vec3 &v)$/;"	f	class:Imath::Vec3
operator +=	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::operator += (const Vec4 &v)$/;"	f	class:Imath::Vec4
operator +=	3rdparty/ilmbase-1.0.2/half.h	/^half::operator += (float f)$/;"	f	class:half
operator +=	3rdparty/ilmbase-1.0.2/half.h	/^half::operator += (half h)$/;"	f	class:half
operator +=	core/geometry.h	/^    Normal& operator+=(const Normal &n) {$/;"	f	class:Normal
operator +=	core/geometry.h	/^    Point &operator+=(const Point &p) {$/;"	f	class:Point
operator +=	core/geometry.h	/^    Point &operator+=(const Vector &v) {$/;"	f	class:Point
operator +=	core/geometry.h	/^    Vector& operator+=(const Vector &v) {$/;"	f	class:Vector
operator +=	core/quaternion.h	/^    Quaternion &operator+=(const Quaternion &q) {$/;"	f	struct:Quaternion
operator +=	core/spectrum.h	/^    CoefficientSpectrum &operator+=(const CoefficientSpectrum &s2) {$/;"	f	class:CoefficientSpectrum
operator -	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color3<T>::operator - () const$/;"	f	class:Imath::Color3
operator -	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color3<T>::operator - (const Color3 &c) const$/;"	f	class:Imath::Color3
operator -	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color4<T>::operator - () const$/;"	f	class:Imath::Color4
operator -	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color4<T>::operator - (const Color4 &v) const$/;"	f	class:Imath::Color4
operator -	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::operator - () const$/;"	f	class:Imath::Matrix33
operator -	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::operator - (const Matrix33<T> &v) const$/;"	f	class:Imath::Matrix33
operator -	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::operator - () const$/;"	f	class:Imath::Matrix44
operator -	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::operator - (const Matrix44<T> &v) const$/;"	f	class:Imath::Matrix44
operator -	3rdparty/ilmbase-1.0.2/ImathPlane.h	/^Plane3<T> operator- (const Plane3<T> &plane)$/;"	f	namespace:Imath
operator -	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^operator - (const Quat<T> &q)$/;"	f	namespace:Imath
operator -	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^operator - (const Quat<T> &q1, const Quat<T> &q2)$/;"	f	namespace:Imath
operator -	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::operator - () const$/;"	f	class:Imath::Shear6
operator -	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::operator - (const Shear6 &h) const$/;"	f	class:Imath::Shear6
operator -	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::operator - () const$/;"	f	class:Imath::Vec2
operator -	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::operator - (const Vec2 &v) const$/;"	f	class:Imath::Vec2
operator -	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::operator - () const$/;"	f	class:Imath::Vec3
operator -	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::operator - (const Vec3 &v) const$/;"	f	class:Imath::Vec3
operator -	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::operator - () const$/;"	f	class:Imath::Vec4
operator -	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::operator - (const Vec4 &v) const$/;"	f	class:Imath::Vec4
operator -	3rdparty/ilmbase-1.0.2/half.h	/^half::operator - () const$/;"	f	class:half
operator -	core/geometry.h	/^    Normal operator- (const Normal &n) const {$/;"	f	class:Normal
operator -	core/geometry.h	/^    Normal operator-() const {$/;"	f	class:Normal
operator -	core/geometry.h	/^    Point operator-(const Vector &v) const {$/;"	f	class:Point
operator -	core/geometry.h	/^    Vector operator-() const { return Vector(-x, -y, -z); }$/;"	f	class:Vector
operator -	core/geometry.h	/^    Vector operator-(const Point &p) const {$/;"	f	class:Point
operator -	core/geometry.h	/^    Vector operator-(const Vector &v) const {$/;"	f	class:Vector
operator -	core/quaternion.h	/^    friend Quaternion operator-(const Quaternion &q1, const Quaternion &q2) {$/;"	f	struct:Quaternion
operator -	core/spectrum.h	/^    CoefficientSpectrum operator-() const {$/;"	f	class:CoefficientSpectrum
operator -	core/spectrum.h	/^    CoefficientSpectrum operator-(const CoefficientSpectrum &s2) const {$/;"	f	class:CoefficientSpectrum
operator -=	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color3<T>::operator -= (const Color3 &c)$/;"	f	class:Imath::Color3
operator -=	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color4<T>::operator -= (const Color4 &v)$/;"	f	class:Imath::Color4
operator -=	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::operator -= (T a)$/;"	f	class:Imath::Matrix33
operator -=	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::operator -= (const Matrix33<T> &v)$/;"	f	class:Imath::Matrix33
operator -=	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::operator -= (T a)$/;"	f	class:Imath::Matrix44
operator -=	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::operator -= (const Matrix44<T> &v)$/;"	f	class:Imath::Matrix44
operator -=	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^Quat<T>::operator -= (const Quat<T> &q)$/;"	f	class:Imath::Quat
operator -=	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::operator -= (const Shear6 &h)$/;"	f	class:Imath::Shear6
operator -=	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::operator -= (const Vec2 &v)$/;"	f	class:Imath::Vec2
operator -=	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::operator -= (const Vec3 &v)$/;"	f	class:Imath::Vec3
operator -=	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::operator -= (const Vec4 &v)$/;"	f	class:Imath::Vec4
operator -=	3rdparty/ilmbase-1.0.2/half.h	/^half::operator -= (float f)$/;"	f	class:half
operator -=	3rdparty/ilmbase-1.0.2/half.h	/^half::operator -= (half h)$/;"	f	class:half
operator -=	core/geometry.h	/^    Normal& operator-=(const Normal &n) {$/;"	f	class:Normal
operator -=	core/geometry.h	/^    Point &operator-=(const Vector &v) {$/;"	f	class:Point
operator -=	core/geometry.h	/^    Vector& operator-=(const Vector &v) {$/;"	f	class:Vector
operator -=	core/quaternion.h	/^    Quaternion &operator-=(const Quaternion &q) {$/;"	f	struct:Quaternion
operator ->	core/memory.h	/^    T *operator->() { return ptr; }$/;"	f	class:Reference
operator ->	core/memory.h	/^    const T *operator->() const { return ptr; }$/;"	f	class:Reference
operator /	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color3<T>::operator \/ (T a) const$/;"	f	class:Imath::Color3
operator /	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color3<T>::operator \/ (const Color3 &c) const$/;"	f	class:Imath::Color3
operator /	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color4<T>::operator \/ (T x) const$/;"	f	class:Imath::Color4
operator /	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color4<T>::operator \/ (const Color4 &v) const$/;"	f	class:Imath::Color4
operator /	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::operator \/ (T a) const$/;"	f	class:Imath::Matrix33
operator /	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::operator \/ (T a) const$/;"	f	class:Imath::Matrix44
operator /	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^operator \/ (const Quat<T> &q, T t)$/;"	f	namespace:Imath
operator /	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^operator \/ (const Quat<T> &q1, const Quat<T> &q2)$/;"	f	namespace:Imath
operator /	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::operator \/ (T a) const$/;"	f	class:Imath::Shear6
operator /	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::operator \/ (const Shear6 &h) const$/;"	f	class:Imath::Shear6
operator /	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::operator \/ (T a) const$/;"	f	class:Imath::Vec2
operator /	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::operator \/ (const Vec2 &v) const$/;"	f	class:Imath::Vec2
operator /	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::operator \/ (T a) const$/;"	f	class:Imath::Vec3
operator /	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::operator \/ (const Vec3 &v) const$/;"	f	class:Imath::Vec3
operator /	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::operator \/ (T a) const$/;"	f	class:Imath::Vec4
operator /	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::operator \/ (const Vec4 &v) const$/;"	f	class:Imath::Vec4
operator /	core/geometry.h	/^    Normal operator\/(float f) const {$/;"	f	class:Normal
operator /	core/geometry.h	/^    Point operator\/ (float f) const {$/;"	f	class:Point
operator /	core/geometry.h	/^    Vector operator\/(float f) const {$/;"	f	class:Vector
operator /	core/quaternion.h	/^    Quaternion operator\/(float f) const {$/;"	f	struct:Quaternion
operator /	core/spectrum.h	/^    CoefficientSpectrum operator\/(const CoefficientSpectrum &s2) const {$/;"	f	class:CoefficientSpectrum
operator /	core/spectrum.h	/^    CoefficientSpectrum operator\/(float a) const {$/;"	f	class:CoefficientSpectrum
operator /=	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color3<T>::operator \/= (T a)$/;"	f	class:Imath::Color3
operator /=	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color3<T>::operator \/= (const Color3 &c)$/;"	f	class:Imath::Color3
operator /=	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color4<T>::operator \/= (T x)$/;"	f	class:Imath::Color4
operator /=	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color4<T>::operator \/= (const Color4 &v)$/;"	f	class:Imath::Color4
operator /=	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::operator \/= (T a)$/;"	f	class:Imath::Matrix33
operator /=	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::operator \/= (T a)$/;"	f	class:Imath::Matrix44
operator /=	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^Quat<T>::operator \/= (T t)$/;"	f	class:Imath::Quat
operator /=	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^Quat<T>::operator \/= (const Quat<T> &q)$/;"	f	class:Imath::Quat
operator /=	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::operator \/= (T a)$/;"	f	class:Imath::Shear6
operator /=	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::operator \/= (const Shear6 &h)$/;"	f	class:Imath::Shear6
operator /=	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::operator \/= (T a)$/;"	f	class:Imath::Vec2
operator /=	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::operator \/= (const Vec2 &v)$/;"	f	class:Imath::Vec2
operator /=	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::operator \/= (T a)$/;"	f	class:Imath::Vec3
operator /=	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::operator \/= (const Vec3 &v)$/;"	f	class:Imath::Vec3
operator /=	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::operator \/= (T a)$/;"	f	class:Imath::Vec4
operator /=	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::operator \/= (const Vec4 &v)$/;"	f	class:Imath::Vec4
operator /=	3rdparty/ilmbase-1.0.2/half.h	/^half::operator \/= (float f)$/;"	f	class:half
operator /=	3rdparty/ilmbase-1.0.2/half.h	/^half::operator \/= (half h)$/;"	f	class:half
operator /=	core/geometry.h	/^    Normal &operator\/=(float f) {$/;"	f	class:Normal
operator /=	core/geometry.h	/^    Point &operator\/=(float f) {$/;"	f	class:Point
operator /=	core/geometry.h	/^    Vector &operator\/=(float f) {$/;"	f	class:Vector
operator /=	core/quaternion.h	/^    Quaternion &operator\/=(float f) {$/;"	f	struct:Quaternion
operator /=	core/spectrum.h	/^    CoefficientSpectrum &operator\/=(float a) {$/;"	f	class:CoefficientSpectrum
operator <	3rdparty/openexr-1.7.0/ImfName.h	/^operator < (const Name &x, const Name &y)$/;"	f	namespace:Imf
operator <	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    operator < (const TileCoord &other) const$/;"	f	struct:Imf::__anon37::TileCoord
operator <	accelerators/kdtreeaccel.cpp	/^    bool operator<(const BoundEdge &e) const {$/;"	f	struct:BoundEdge
operator <	core/transform.h	/^    bool operator<(const Transform &t2) const {$/;"	f	class:Transform
operator <	integrators/photonmap.cpp	/^    bool operator<(const ClosePhoton &p2) const {$/;"	f	struct:ClosePhoton
operator <	shapes/loopsubdiv.cpp	/^    bool operator<(const SDEdge &e2) const {$/;"	f	struct:SDEdge
operator <	textures/imagemap.h	/^    bool operator<(const TexInfo &t2) const {$/;"	f	struct:TexInfo
operator <	tools/obj2pbrt.cpp	/^static inline bool operator<(const vertex_index& a, const vertex_index& b)$/;"	f	namespace:tinyobj
operator <<	3rdparty/ilmbase-1.0.2/ImathColor.h	/^operator << (std::ostream &s, const Color4<T> &v)$/;"	f	namespace:Imath
operator <<	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^std::ostream& operator << (std::ostream &o, const Euler<T> &euler)$/;"	f	namespace:Imath
operator <<	3rdparty/ilmbase-1.0.2/ImathLine.h	/^std::ostream& operator<< (std::ostream &o, const Line3<T> &line)$/;"	f	namespace:Imath
operator <<	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^operator << (std::ostream &s, const Matrix33<T> &m)$/;"	f	namespace:Imath
operator <<	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^operator << (std::ostream &s, const Matrix44<T> &m)$/;"	f	namespace:Imath
operator <<	3rdparty/ilmbase-1.0.2/ImathPlane.h	/^std::ostream &operator<< (std::ostream &o, const Plane3<T> &plane)$/;"	f	namespace:Imath
operator <<	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^operator << (std::ostream &o, const Quat<T> &q)$/;"	f	namespace:Imath
operator <<	3rdparty/ilmbase-1.0.2/ImathShear.h	/^operator << (std::ostream &s, const Shear6<T> &h)$/;"	f	namespace:Imath
operator <<	3rdparty/ilmbase-1.0.2/ImathVec.h	/^operator << (std::ostream &s, const Vec2<T> &v)$/;"	f	namespace:Imath
operator <<	3rdparty/ilmbase-1.0.2/ImathVec.h	/^operator << (std::ostream &s, const Vec3<T> &v)$/;"	f	namespace:Imath
operator <<	3rdparty/ilmbase-1.0.2/ImathVec.h	/^operator << (std::ostream &s, const Vec4<T> &v)$/;"	f	namespace:Imath
operator =	3rdparty/ilmbase-1.0.2/IexBaseExc.h	/^BaseExc::operator = (const char *s)$/;"	f	class:Iex::BaseExc
operator =	3rdparty/ilmbase-1.0.2/IexBaseExc.h	/^BaseExc::operator = (std::stringstream &s)$/;"	f	class:Iex::BaseExc
operator =	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color3<T>::operator = (const Color3 &c)$/;"	f	class:Imath::Color3
operator =	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color4<T>::operator = (const Color4 &v)$/;"	f	class:Imath::Color4
operator =	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^const Euler<T>& Euler<T>::operator= (const Euler<T> &euler)$/;"	f	class:Imath::Euler
operator =	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^const Euler<T>& Euler<T>::operator= (const Vec3<T> &v)$/;"	f	class:Imath::Euler
operator =	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^Frustum<T>::operator = (const Frustum &f)$/;"	f	class:Imath::Frustum
operator =	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::operator = (T a)$/;"	f	class:Imath::Matrix33
operator =	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::operator = (const Matrix33 &v)$/;"	f	class:Imath::Matrix33
operator =	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::operator = (T a)$/;"	f	class:Imath::Matrix44
operator =	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::operator = (const Matrix44 &v)$/;"	f	class:Imath::Matrix44
operator =	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^Quat<T>::operator = (const Quat<T> &q)$/;"	f	class:Imath::Quat
operator =	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::operator = (const Shear6 &h)$/;"	f	class:Imath::Shear6
operator =	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::operator = (const Vec3<S> &v)$/;"	f	class:Imath::Shear6
operator =	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::operator = (const Vec2 &v)$/;"	f	class:Imath::Vec2
operator =	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::operator = (const Vec3 &v)$/;"	f	class:Imath::Vec3
operator =	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::operator = (const Vec4 &v)$/;"	f	class:Imath::Vec4
operator =	3rdparty/ilmbase-1.0.2/half.h	/^half::operator = (float f)$/;"	f	class:half
operator =	3rdparty/ilmbase-1.0.2/half.h	/^half::operator = (half h)$/;"	f	class:half
operator =	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::operator = (const Header &other)$/;"	f	class:Imf::Header
operator =	3rdparty/openexr-1.7.0/ImfKeyCode.cpp	/^KeyCode::operator = (const KeyCode &other)$/;"	f	class:Imf::KeyCode
operator =	3rdparty/openexr-1.7.0/ImfName.h	/^Name::operator = (const char text[])$/;"	f	class:Imf::Name
operator =	3rdparty/openexr-1.7.0/ImfPreviewImage.cpp	/^PreviewImage::operator = (const PreviewImage &other)$/;"	f	class:Imf::PreviewImage
operator =	3rdparty/openexr-1.7.0/ImfRgba.h	/^    Rgba & operator = (const Rgba &other)$/;"	f	struct:Imf::Rgba
operator =	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^TimeCode::operator = (const TimeCode &other)$/;"	f	class:Imf::TimeCode
operator =	core/geometry.h	/^    Normal &operator=(const Normal &n) {$/;"	f	class:Normal
operator =	core/geometry.h	/^    Point &operator=(const Point &p) {$/;"	f	class:Point
operator =	core/geometry.h	/^    Vector &operator=(const Vector &v) {$/;"	f	class:Vector
operator =	core/memory.h	/^    Reference &operator=(T *p) {$/;"	f	class:Reference
operator =	core/memory.h	/^    Reference &operator=(const Reference<T> &r) {$/;"	f	class:Reference
operator =	core/spectrum.h	/^    CoefficientSpectrum &operator=(const CoefficientSpectrum &s) {$/;"	f	class:CoefficientSpectrum
operator ==	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<T>::operator == (const Box<T> &src) const$/;"	f	class:Imath::Box
operator ==	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<Vec2<T> >::operator ==  (const Box<Vec2<T> > &src) const$/;"	f	class:Imath::Box
operator ==	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<Vec3<T> >::operator == (const Box<Vec3<T> > &src) const$/;"	f	class:Imath::Box
operator ==	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color4<T>::operator == (const Color4<S> &v) const$/;"	f	class:Imath::Color4
operator ==	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^Frustum<T>::operator == (const Frustum<T> &src) const$/;"	f	class:Imath::Frustum
operator ==	3rdparty/ilmbase-1.0.2/ImathInterval.h	/^Interval<T>::operator == (const Interval<T> &src) const$/;"	f	class:Imath::Interval
operator ==	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::operator == (const Matrix33 &v) const$/;"	f	class:Imath::Matrix33
operator ==	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::operator == (const Matrix44 &v) const$/;"	f	class:Imath::Matrix44
operator ==	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^Quat<T>::operator == (const Quat<S> &q) const$/;"	f	class:Imath::Quat
operator ==	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::operator == (const Shear6<S> &h) const$/;"	f	class:Imath::Shear6
operator ==	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::operator == (const Vec2<S> &v) const$/;"	f	class:Imath::Vec2
operator ==	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::operator == (const Vec3<S> &v) const$/;"	f	class:Imath::Vec3
operator ==	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::operator == (const Vec4<S> &v) const$/;"	f	class:Imath::Vec4
operator ==	3rdparty/openexr-1.7.0/ImfChannelList.cpp	/^Channel::operator == (const Channel &other) const$/;"	f	class:Imf::Channel
operator ==	3rdparty/openexr-1.7.0/ImfChannelList.cpp	/^ChannelList::operator == (const ChannelList &other) const$/;"	f	class:Imf::ChannelList
operator ==	3rdparty/openexr-1.7.0/ImfChannelList.h	/^operator == (const ChannelList::ConstIterator &x,$/;"	f	namespace:Imf
operator ==	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^operator == (const FrameBuffer::ConstIterator &x,$/;"	f	namespace:Imf
operator ==	3rdparty/openexr-1.7.0/ImfHeader.h	/^operator == (const Header::ConstIterator &x, const Header::ConstIterator &y)$/;"	f	namespace:Imf
operator ==	3rdparty/openexr-1.7.0/ImfName.h	/^operator == (const Name &x, const Name &y)$/;"	f	namespace:Imf
operator ==	3rdparty/openexr-1.7.0/ImfTileDescription.h	/^    operator == (const TileDescription &other) const$/;"	f	class:Imf::TileDescription
operator ==	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    operator == (const TileCoord &other) const$/;"	f	struct:Imf::__anon37::TileCoord
operator ==	core/geometry.h	/^    bool operator==(const BBox &b) const {$/;"	f	class:BBox
operator ==	core/geometry.h	/^    bool operator==(const Normal &n) const {$/;"	f	class:Normal
operator ==	core/geometry.h	/^    bool operator==(const Point &p) const {$/;"	f	class:Point
operator ==	core/geometry.h	/^    bool operator==(const Vector &v) const {$/;"	f	class:Vector
operator ==	core/spectrum.h	/^    bool operator==(const CoefficientSpectrum &sp) const {$/;"	f	class:CoefficientSpectrum
operator ==	core/transform.h	/^    bool operator==(const Matrix4x4 &m2) const {$/;"	f	struct:Matrix4x4
operator ==	core/transform.h	/^    bool operator==(const Transform &t) const {$/;"	f	class:Transform
operator T *	3rdparty/openexr-1.7.0/ImfArray.h	/^    operator T * ()			{return _data;}$/;"	f	class:Imf::Array
operator T *	3rdparty/openexr-1.7.0/ImfAutoArray.h	/^	operator T * ()			{return _data;}$/;"	f	class:Imf::AutoArray
operator []	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color4<T>::operator [] (int i) const$/;"	f	class:Imath::Color4
operator []	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color4<T>::operator [] (int i)$/;"	f	class:Imath::Color4
operator []	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::operator [] (int i) const$/;"	f	class:Imath::Matrix33
operator []	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::operator [] (int i)$/;"	f	class:Imath::Matrix33
operator []	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::operator [] (int i) const$/;"	f	class:Imath::Matrix44
operator []	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::operator [] (int i)$/;"	f	class:Imath::Matrix44
operator []	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^Quat<T>::operator [] (int index) const$/;"	f	class:Imath::Quat
operator []	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^Quat<T>::operator [] (int index)$/;"	f	class:Imath::Quat
operator []	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::operator [] (int i) const$/;"	f	class:Imath::Shear6
operator []	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::operator [] (int i)$/;"	f	class:Imath::Shear6
operator []	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::operator [] (int i) const$/;"	f	class:Imath::Vec2
operator []	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::operator [] (int i)$/;"	f	class:Imath::Vec2
operator []	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::operator [] (int i) const$/;"	f	class:Imath::Vec3
operator []	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::operator [] (int i)$/;"	f	class:Imath::Vec3
operator []	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::operator [] (int i) const$/;"	f	class:Imath::Vec4
operator []	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::operator [] (int i)$/;"	f	class:Imath::Vec4
operator []	3rdparty/openexr-1.7.0/ImfArray.h	/^Array2D<T>::operator [] (long x) const$/;"	f	class:Imf::Array2D
operator []	3rdparty/openexr-1.7.0/ImfArray.h	/^Array2D<T>::operator [] (long x)$/;"	f	class:Imf::Array2D
operator []	3rdparty/openexr-1.7.0/ImfChannelList.cpp	/^ChannelList::operator [] (const char name[]) const$/;"	f	class:Imf::ChannelList
operator []	3rdparty/openexr-1.7.0/ImfChannelList.cpp	/^ChannelList::operator [] (const char name[])$/;"	f	class:Imf::ChannelList
operator []	3rdparty/openexr-1.7.0/ImfChannelList.cpp	/^ChannelList::operator [] (const string &name) const$/;"	f	class:Imf::ChannelList
operator []	3rdparty/openexr-1.7.0/ImfChannelList.cpp	/^ChannelList::operator [] (const string &name)$/;"	f	class:Imf::ChannelList
operator []	3rdparty/openexr-1.7.0/ImfFrameBuffer.cpp	/^FrameBuffer::operator [] (const char name[]) const$/;"	f	class:Imf::FrameBuffer
operator []	3rdparty/openexr-1.7.0/ImfFrameBuffer.cpp	/^FrameBuffer::operator [] (const char name[])$/;"	f	class:Imf::FrameBuffer
operator []	3rdparty/openexr-1.7.0/ImfFrameBuffer.cpp	/^FrameBuffer::operator [] (const string &name) const$/;"	f	class:Imf::FrameBuffer
operator []	3rdparty/openexr-1.7.0/ImfFrameBuffer.cpp	/^FrameBuffer::operator [] (const string &name)$/;"	f	class:Imf::FrameBuffer
operator []	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::operator [] (const char name[]) const$/;"	f	class:Imf::Header
operator []	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::operator [] (const char name[])$/;"	f	class:Imf::Header
operator []	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::operator [] (const string &name) const$/;"	f	class:Imf::Header
operator []	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::operator [] (const string &name)$/;"	f	class:Imf::Header
operator []	core/api.cpp	/^   Transform &operator[](int i) {$/;"	f	struct:TransformSet
operator []	core/api.cpp	/^   const Transform &operator[](int i) const { Assert(i >= 0 && i < MAX_TRANSFORMS); return t[i]; }$/;"	f	struct:TransformSet
operator []	core/geometry.h	/^    float &operator[](int i) {$/;"	f	class:Normal
operator []	core/geometry.h	/^    float &operator[](int i) {$/;"	f	class:Point
operator []	core/geometry.h	/^    float &operator[](int i) {$/;"	f	class:Vector
operator []	core/geometry.h	/^    float operator[](int i) const {$/;"	f	class:Normal
operator []	core/geometry.h	/^    float operator[](int i) const {$/;"	f	class:Point
operator []	core/geometry.h	/^    float operator[](int i) const {$/;"	f	class:Vector
operator []	core/geometry.h	/^inline Point &BBox::operator[](int i) {$/;"	f	class:BBox
operator []	core/geometry.h	/^inline const Point &BBox::operator[](int i) const {$/;"	f	class:BBox
operator ^	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^operator ^ (const Quat<T>& q1 ,const Quat<T>& q2)$/;"	f	namespace:Imath
operator ^	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::operator ^ (const Vec2 &v) const$/;"	f	class:Imath::Vec2
operator ^	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::operator ^ (const Vec3 &v) const$/;"	f	class:Imath::Vec3
operator ^	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec4<T>::operator ^ (const Vec4 &v) const$/;"	f	class:Imath::Vec4
operator bool	core/memory.h	/^    operator bool() const { return ptr != NULL; }$/;"	f	class:Reference
operator const T *	3rdparty/openexr-1.7.0/ImfArray.h	/^    operator const T * () const		{return _data;}$/;"	f	class:Imf::Array
operator const T *	3rdparty/openexr-1.7.0/ImfAutoArray.h	/^	operator const T * () const	{return _data;}$/;"	f	class:Imf::AutoArray
operator double	3rdparty/openexr-1.7.0/ImfRational.h	/^    operator double () const {return double (n) \/ double (d);}$/;"	f	class:Imf::Rational
operator float	3rdparty/ilmbase-1.0.2/half.h	/^half::operator float () const$/;"	f	class:half
operator int32_t	core/probes.cpp	/^    operator int32_t() volatile { return (int32_t)num; }$/;"	f	class:StatsCounter
operator int64_t	core/probes.cpp	/^    operator int64_t() volatile { return (int64_t)num; }$/;"	f	class:StatsCounter
operator ~	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^operator ~ (const Quat<T> &q)$/;"	f	namespace:Imath
opt_len	3rdparty/zlib-1.2.5/deflate.h	/^    ulg opt_len;        \/* bit length of current block with optimal trees *\/$/;"	m	struct:internal_state
order	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^Euler<T>::order() const$/;"	f	class:Imath::Euler
org_ptr	3rdparty/zlib-1.2.5/zutil.c	/^    voidpf org_ptr;$/;"	m	struct:ptr_table_s	file:
orientNames	3rdparty/tiff-3.9.4/tif_print.c	/^static const char *orientNames[] = {$/;"	v	file:
orientation	3rdparty/tiff-3.9.4/tiffio.h	/^	uint16 orientation;                     \/* image orientation *\/$/;"	m	struct:_TIFFRGBAImage
origSample	integrators/irradiancecache.cpp	/^    Sample *origSample;$/;"	m	struct:IrradiancePrimeTask	file:
origSample	renderers/createprobes.cpp	/^    Sample *origSample;$/;"	m	class:CreateRadProbeTask	file:
origSample	renderers/samplerrenderer.h	/^    Sample *origSample;$/;"	m	class:SamplerRendererTask
origin	renderers/surfacepoints.cpp	/^    Point origin;$/;"	m	class:SurfacePointTask	file:
origin_x	core/targa.h	/^    uint16_t    origin_x;$/;"	m	struct:__anon86
origin_y	core/targa.h	/^    uint16_t    origin_y;$/;"	m	struct:__anon86
orthogonal	3rdparty/ilmbase-1.0.2/ImathVecAlgo.h	/^orthogonal (const Vec &s, const Vec &t)$/;"	f	namespace:Imath
orthographic	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^    bool		orthographic() const	{ return _orthographic; }$/;"	f	class:Imath::Frustum
os	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    OStream *		 os;			\/\/ file stream to write to$/;"	m	struct:Imf::OutputFile::Data	file:
os	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    OStream *		os;			\/\/ file stream to write to$/;"	m	struct:Imf::TiledOutputFile::Data	file:
os	3rdparty/zlib-1.2.5/zlib.h	/^    int     os;         \/* operating system *\/$/;"	m	struct:gz_header_s
os_error	3rdparty/tiff-3.9.4/tif_acorn.c	/^typedef _kernel_oserror os_error;$/;"	t	file:
os_f	3rdparty/tiff-3.9.4/tif_acorn.c	/^typedef byte os_f;$/;"	t	file:
osargs_read_ext	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define	osargs_read_ext(/;"	d	file:
osargs_read_ptr	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define	osargs_read_ptr(/;"	d	file:
osargs_set_ptr	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define	osargs_set_ptr(/;"	d	file:
osfind_close	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define	osfind_close(/;"	d	file:
osfind_open	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define	osfind_open(/;"	d	file:
osfind_openin	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define	osfind_openin(/;"	d	file:
osfind_openout	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define	osfind_openout(/;"	d	file:
osfind_openup	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define	osfind_openup(/;"	d	file:
osgbpb_read	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define	osgbpb_read(/;"	d	file:
osgbpb_write	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define	osgbpb_write(/;"	d	file:
osibsEof	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	osibsEof$/;"	e	enum:__anon53	file:
osibsJpegInterchangeFormat	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	osibsJpegInterchangeFormat,$/;"	e	enum:__anon53	file:
osibsNotSetYet	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	osibsNotSetYet,$/;"	e	enum:__anon53	file:
osibsStrile	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	osibsStrile,$/;"	e	enum:__anon53	file:
ososAcTable0	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	ososAcTable0,ososAcTable1,ososAcTable2,ososAcTable3,$/;"	e	enum:__anon54	file:
ososAcTable1	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	ososAcTable0,ososAcTable1,ososAcTable2,ososAcTable3,$/;"	e	enum:__anon54	file:
ososAcTable2	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	ososAcTable0,ososAcTable1,ososAcTable2,ososAcTable3,$/;"	e	enum:__anon54	file:
ososAcTable3	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	ososAcTable0,ososAcTable1,ososAcTable2,ososAcTable3,$/;"	e	enum:__anon54	file:
ososCompressed	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	ososCompressed,$/;"	e	enum:__anon54	file:
ososDcTable0	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	ososDcTable0,ososDcTable1,ososDcTable2,ososDcTable3,$/;"	e	enum:__anon54	file:
ososDcTable1	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	ososDcTable0,ososDcTable1,ososDcTable2,ososDcTable3,$/;"	e	enum:__anon54	file:
ososDcTable2	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	ososDcTable0,ososDcTable1,ososDcTable2,ososDcTable3,$/;"	e	enum:__anon54	file:
ososDcTable3	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	ososDcTable0,ososDcTable1,ososDcTable2,ososDcTable3,$/;"	e	enum:__anon54	file:
ososDri	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	ososDri,$/;"	e	enum:__anon54	file:
ososEoi	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	ososEoi$/;"	e	enum:__anon54	file:
ososQTable0	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	ososQTable0,ososQTable1,ososQTable2,ososQTable3,$/;"	e	enum:__anon54	file:
ososQTable1	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	ososQTable0,ososQTable1,ososQTable2,ososQTable3,$/;"	e	enum:__anon54	file:
ososQTable2	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	ososQTable0,ososQTable1,ososQTable2,ososQTable3,$/;"	e	enum:__anon54	file:
ososQTable3	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	ososQTable0,ososQTable1,ososQTable2,ososQTable3,$/;"	e	enum:__anon54	file:
ososRst	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	ososRst,$/;"	e	enum:__anon54	file:
ososSof	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	ososSof,$/;"	e	enum:__anon54	file:
ososSoi	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	ososSoi,$/;"	e	enum:__anon54	file:
ososSos	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	ososSos,$/;"	e	enum:__anon54	file:
otherHemisphere	core/reflection.h	/^    static Vector otherHemisphere(const Vector &w) {$/;"	f	class:BRDFToBTDF
otherVert	shapes/loopsubdiv.cpp	/^    SDVertex *otherVert(SDVertex *v0, SDVertex *v1) {$/;"	f	struct:SDFace
other_data	tools/ply.h	/^  OtherData **other_data;      \/* actual property data for the elements *\/$/;"	m	struct:OtherElem
other_elems	tools/ply.h	/^  PlyOtherElems *other_elems;   \/* "other" elements from a PLY file *\/$/;"	m	struct:PlyFile
other_list	tools/ply.h	/^  OtherElem *other_list;        \/* list of data for other elements *\/$/;"	m	struct:PlyOtherElems
other_offset	tools/ply.h	/^  int other_offset;             \/* offset to un-asked-for props, or -1 if none*\/$/;"	m	struct:PlyElement
other_props	tools/ply.h	/^  PlyOtherProp *other_props;   \/* description of the property data *\/$/;"	m	struct:OtherElem
other_props	tools/ply.h	/^  void *other_props;$/;"	m	struct:OtherData
other_props	tools/ply2pbrt.c	/^  void *other_props;       \/* other properties *\/$/;"	m	struct:Face	file:
other_props	tools/ply2pbrt.c	/^  void *other_props;       \/* other properties *\/$/;"	m	struct:Vertex	file:
other_size	tools/ply.h	/^  int other_size;               \/* size of other_props structure *\/$/;"	m	struct:PlyElement
ourc2pstr	3rdparty/tiff-3.9.4/tif_apple.c	/^static void ourc2pstr( char* inString )$/;"	f	file:
out	3rdparty/zlib-1.2.5/gzguts.h	/^    unsigned char *out;     \/* output buffer (double-sized when reading) *\/$/;"	m	struct:__anon74
outFile	core/progressreporter.h	/^    FILE *outFile;$/;"	m	class:ProgressReporter
out_buffer	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8 out_buffer[OJPEG_BUFFER];$/;"	m	struct:__anon55	file:
out_func	3rdparty/zlib-1.2.5/zconf.h	/^#  define out_func /;"	d
out_func	3rdparty/zlib-1.2.5/zlib.h	/^typedef int (*out_func) OF((void FAR *, unsigned char FAR *, unsigned));$/;"	t
out_state	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	OJPEGStateOutState out_state;$/;"	m	struct:__anon55	file:
outfile	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^outfile (ImfOutputFile *out)$/;"	f	namespace:__anon18
outfile	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^outfile (ImfTiledOutputFile *out)$/;"	f	namespace:__anon18
outfile	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^outfile (const ImfOutputFile *out)$/;"	f	namespace:__anon18
outfile	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^outfile (const ImfTiledOutputFile *out)$/;"	f	namespace:__anon18
outfile	core/stb_image_write.h	/^static int outfile(char const *filename, int rgb_dir, int vdir, int x, int y, int comp, void *data, int alpha, int pad, const char *fmt, ...)$/;"	f
outputBits	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^outputBits (int nBits, Int64 bits, Int64 &c, int &lc, char *&out)$/;"	f	namespace:Imf::__anon20
outputCode	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^outputCode (Int64 code, Int64 &c, int &lc, char *&out)$/;"	f	namespace:Imf::__anon20
outsideDot	textures/dots.h	/^    Reference<Texture<T> > outsideDot, insideDot;$/;"	m	class:DotsTexture
p	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^    int	*	p;		\/\/ 0			lits	 $/;"	m	struct:Imf::__anon20::HufDec	file:
p	core/diffgeom.h	/^    Point p;$/;"	m	struct:DifferentialGeometry
p	core/reflection.h	/^    Point p;$/;"	m	struct:IrregIsotropicBRDFSample
p	core/volume.cpp	/^float AggregateVolume::p(const Point &p, const Vector &w, const Vector &wp,$/;"	f	class:AggregateVolume
p	core/volume.h	/^    float p(const Point &p, const Vector &w, const Vector &wp, float) const {$/;"	f	class:DensityRegion
p	integrators/dipolesubsurface.cpp	/^    Point p;$/;"	m	struct:SubsurfaceOctreeNode	file:
p	integrators/dipolesubsurface.h	/^    Point p;$/;"	m	struct:IrradiancePoint
p	integrators/igi.h	/^    Point p;$/;"	m	struct:VirtualLight
p	integrators/irradiancecache.cpp	/^    Point p;$/;"	m	struct:IrradProcess	file:
p	integrators/irradiancecache.cpp	/^    Point p;$/;"	m	struct:IrradianceSample	file:
p	integrators/photonmap.cpp	/^    Point p;$/;"	m	struct:Photon	file:
p	integrators/photonmap.cpp	/^    Point p;$/;"	m	struct:RadiancePhoton	file:
p	renderers/surfacepoints.cpp	/^    Point p;$/;"	m	struct:PoissonCheck	file:
p	renderers/surfacepoints.h	/^    Point p;$/;"	m	struct:SurfacePoint
p	shapes/trianglemesh.h	/^    Point *p;$/;"	m	class:TriangleMesh
p	volumes/homogeneous.h	/^    float p(const Point &p, const Vector &wi, const Vector &wo, float) const {$/;"	f	class:HomogeneousVolumeDensity
p1	shapes/hyperboloid.h	/^    Point p1, p2;$/;"	m	class:Hyperboloid
p2	shapes/hyperboloid.h	/^    Point p1, p2;$/;"	m	class:Hyperboloid
pCamera	renderers/surfacepoints.h	/^    Point pCamera;$/;"	m	class:SurfacePointsRenderer
pConditionalV	core/montecarlo.h	/^    vector<Distribution1D *> pConditionalV;$/;"	m	struct:Distribution2D
pEpsilon	lights/infinite.cpp	/^    float time, pEpsilon;$/;"	m	struct:InfiniteAreaCube	file:
pLinear	3rdparty/openexr-1.7.0/ImfB44Compressor.cpp	/^    bool		pLinear;$/;"	m	struct:Imf::B44Compressor::ChannelData	file:
pLinear	3rdparty/openexr-1.7.0/ImfChannelList.h	/^    bool		pLinear;$/;"	m	struct:Imf::Channel
pMarginal	core/montecarlo.h	/^    Distribution1D *pMarginal;$/;"	m	struct:Distribution2D
pMax	core/geometry.h	/^    Point pMin, pMax;$/;"	m	class:BBox
pMin	core/geometry.h	/^    Point pMin, pMax;$/;"	m	class:BBox
pack	3rdparty/openexr-1.7.0/ImfB44Compressor.cpp	/^pack (const unsigned short s[16],$/;"	f	namespace:Imf::__anon15
packed2rgb	3rdparty/ilmbase-1.0.2/ImathColorAlgo.h	/^packed2rgb(PackedColor packed, Color4<T> &out)$/;"	f	namespace:Imath
packed2rgb	3rdparty/ilmbase-1.0.2/ImathColorAlgo.h	/^packed2rgb(PackedColor packed, Vec3<T> &out)$/;"	f	namespace:Imath
packet_type	core/targa.c	/^typedef enum { RAW, RLE } packet_type;$/;"	t	typeref:enum:__anon85	file:
packoutput	3rdparty/tiff-3.9.4/mkg3states.c	/^static	int packoutput = 1;$/;"	v	file:
pad	3rdparty/openexr-1.7.0/ImfXdr.h	/^pad (T &out, int n)			\/\/ add n padding bytes$/;"	f	namespace:Imf::Xdr
pad	accelerators/bvh.cpp	/^    uint8_t pad[2];       \/\/ ensure 32 byte total size$/;"	m	struct:LinearBVHNode	file:
pad	film/image.h	/^        float pad;$/;"	m	struct:ImageFilm::Pixel
padTmpBuf	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaInputFile::FromYca::padTmpBuf ()$/;"	f	class:Imf::RgbaInputFile::FromYca
padTmpBuf	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaOutputFile::ToYca::padTmpBuf ()$/;"	f	class:Imf::RgbaOutputFile::ToYca
paramTypeToName	core/pbrtparse.cpp	/^static const char *paramTypeToName(int type) {$/;"	f	file:
parityEven	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^    bool		parityEven() const { return _parityEven; }$/;"	f	class:Imath::Euler
parseFloat	tools/obj2pbrt.cpp	/^static inline float parseFloat(const char*& token)$/;"	f	namespace:tinyobj
parseFloat2	tools/obj2pbrt.cpp	/^static inline void parseFloat2($/;"	f	namespace:tinyobj
parseFloat3	tools/obj2pbrt.cpp	/^static inline void parseFloat3($/;"	f	namespace:tinyobj
parseInt	tools/obj2pbrt.cpp	/^static inline int parseInt(const char*& token)$/;"	f	namespace:tinyobj
parseString	3rdparty/openexr-1.7.0/ImfMultiView.cpp	/^parseString (string name, char c = '.')$/;"	f	namespace:Imf::__anon22
parseString	tools/obj2pbrt.cpp	/^static inline std::string parseString(const char*& token)$/;"	f	namespace:tinyobj
parseTriple	tools/obj2pbrt.cpp	/^static vertex_index parseTriple($/;"	f	namespace:tinyobj
partiallyFull	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    bool		partiallyFull;        \/\/ has incomplete data$/;"	m	struct:Imf::__anon23::LineBuffer	file:
passcode	3rdparty/tiff-3.9.4/tif_fax3.c	/^static const tableentry passcode =$/;"	v	file:
path	3rdparty/zlib-1.2.5/gzguts.h	/^    char *path;             \/* path or fd for error messages *\/$/;"	m	struct:__anon74
pathContrib	integrators/igi.h	/^    Spectrum pathContrib;$/;"	m	struct:VirtualLight
pathL	integrators/irradiancecache.cpp	/^Spectrum IrradianceCacheIntegrator::pathL(Ray &r, const Scene *scene,$/;"	f	class:IrradianceCacheIntegrator
pathSampleOffsets	integrators/path.h	/^    BSDFSampleOffsets pathSampleOffsets[SAMPLE_DEPTH];$/;"	m	class:PathIntegrator
pbrtAccelerator	core/api.cpp	/^void pbrtAccelerator(const string &name, const ParamSet &params) {$/;"	f
pbrtActiveTransformAll	core/api.cpp	/^void pbrtActiveTransformAll() {$/;"	f
pbrtActiveTransformEndTime	core/api.cpp	/^void pbrtActiveTransformEndTime() {$/;"	f
pbrtActiveTransformStartTime	core/api.cpp	/^void pbrtActiveTransformStartTime() {$/;"	f
pbrtAreaLightSource	core/api.cpp	/^void pbrtAreaLightSource(const string &name,$/;"	f
pbrtAttributeBegin	core/api.cpp	/^void pbrtAttributeBegin() {$/;"	f
pbrtAttributeEnd	core/api.cpp	/^void pbrtAttributeEnd() {$/;"	f
pbrtCamera	core/api.cpp	/^void pbrtCamera(const string &name, const ParamSet &params) {$/;"	f
pbrtCleanup	core/api.cpp	/^void pbrtCleanup() {$/;"	f
pbrtConcatTransform	core/api.cpp	/^void pbrtConcatTransform(float tr[16]) {$/;"	f
pbrtCoordSysTransform	core/api.cpp	/^void pbrtCoordSysTransform(const string &name) {$/;"	f
pbrtCoordinateSystem	core/api.cpp	/^void pbrtCoordinateSystem(const string &name) {$/;"	f
pbrtFilm	core/api.cpp	/^void pbrtFilm(const string &type, const ParamSet &params) {$/;"	f
pbrtIdentity	core/api.cpp	/^void pbrtIdentity() {$/;"	f
pbrtInit	core/api.cpp	/^void pbrtInit(const Options &opt) {$/;"	f
pbrtLightSource	core/api.cpp	/^void pbrtLightSource(const string &name, const ParamSet &params) {$/;"	f
pbrtLookAt	core/api.cpp	/^void pbrtLookAt(float ex, float ey, float ez, float lx, float ly,$/;"	f
pbrtMakeNamedMaterial	core/api.cpp	/^void pbrtMakeNamedMaterial(const string &name,$/;"	f
pbrtMaterial	core/api.cpp	/^void pbrtMaterial(const string &name, const ParamSet &params) {$/;"	f
pbrtNamedMaterial	core/api.cpp	/^void pbrtNamedMaterial(const string &name) {$/;"	f
pbrtObjectBegin	core/api.cpp	/^void pbrtObjectBegin(const string &name) {$/;"	f
pbrtObjectEnd	core/api.cpp	/^void pbrtObjectEnd() {$/;"	f
pbrtObjectInstance	core/api.cpp	/^void pbrtObjectInstance(const string &name) {$/;"	f
pbrtPixelFilter	core/api.cpp	/^void pbrtPixelFilter(const string &name, const ParamSet &params) {$/;"	f
pbrtRenderer	core/api.cpp	/^void pbrtRenderer(const string &name, const ParamSet &params) {$/;"	f
pbrtReverseOrientation	core/api.cpp	/^void pbrtReverseOrientation() {$/;"	f
pbrtRotate	core/api.cpp	/^void pbrtRotate(float angle, float dx, float dy, float dz) {$/;"	f
pbrtSampler	core/api.cpp	/^void pbrtSampler(const string &name, const ParamSet &params) {$/;"	f
pbrtScale	core/api.cpp	/^void pbrtScale(float sx, float sy, float sz) {$/;"	f
pbrtShape	core/api.cpp	/^void pbrtShape(const string &name, const ParamSet &params) {$/;"	f
pbrtSurfaceIntegrator	core/api.cpp	/^void pbrtSurfaceIntegrator(const string &name, const ParamSet &params) {$/;"	f
pbrtTexture	core/api.cpp	/^void pbrtTexture(const string &name, const string &type,$/;"	f
pbrtTransform	core/api.cpp	/^void pbrtTransform(float tr[16]) {$/;"	f
pbrtTransformBegin	core/api.cpp	/^void pbrtTransformBegin() {$/;"	f
pbrtTransformEnd	core/api.cpp	/^void pbrtTransformEnd() {$/;"	f
pbrtTransformTimes	core/api.cpp	/^void pbrtTransformTimes(float start, float end) {$/;"	f
pbrtTranslate	core/api.cpp	/^void pbrtTranslate(float dx, float dy, float dz) {$/;"	f
pbrtVolume	core/api.cpp	/^void pbrtVolume(const string &name, const ParamSet &params) {$/;"	f
pbrtVolumeIntegrator	core/api.cpp	/^void pbrtVolumeIntegrator(const string &name, const ParamSet &params) {$/;"	f
pbrtWorldBegin	core/api.cpp	/^void pbrtWorldBegin() {$/;"	f
pbrtWorldEnd	core/api.cpp	/^void pbrtWorldEnd() {$/;"	f
pending	3rdparty/zlib-1.2.5/deflate.h	/^    uInt   pending;      \/* nb of bytes in the pending buffer *\/$/;"	m	struct:internal_state
pending_buf	3rdparty/zlib-1.2.5/deflate.h	/^    Bytef *pending_buf;  \/* output still pending *\/$/;"	m	struct:internal_state
pending_buf_size	3rdparty/zlib-1.2.5/deflate.h	/^    ulg   pending_buf_size; \/* size of pending_buf *\/$/;"	m	struct:internal_state
pending_out	3rdparty/zlib-1.2.5/deflate.h	/^    Bytef *pending_out;  \/* next pending byte to output to the stream *\/$/;"	m	struct:internal_state
per_vertex_color	tools/ply2pbrt.c	/^static int per_vertex_color = 0;$/;"	v	file:
percentage	core/probes.cpp	/^    bool percentage;$/;"	m	struct:StatTracker	file:
perfOffset	3rdparty/openexr-1.7.0/ImfKeyCode.cpp	/^KeyCode::perfOffset () const$/;"	f	class:Imf::KeyCode
performance_counter	core/timer.h	/^    LARGE_INTEGER performance_counter, performance_frequency;$/;"	m	class:Timer
performance_frequency	core/timer.h	/^    LARGE_INTEGER performance_counter, performance_frequency;$/;"	m	class:Timer
perfsPerCount	3rdparty/openexr-1.7.0/ImfKeyCode.cpp	/^KeyCode::perfsPerCount () const$/;"	f	class:Imf::KeyCode
perfsPerFrame	3rdparty/openexr-1.7.0/ImfKeyCode.cpp	/^KeyCode::perfsPerFrame () const$/;"	f	class:Imf::KeyCode
permute	core/montecarlo.h	/^    uint32_t *b, *permute;$/;"	m	class:PermutedHalton
perror	3rdparty/zlib-1.2.5/minigzip.c	/^#  define perror(/;"	d	file:
phiMax	shapes/cone.h	/^    float radius, height, phiMax;$/;"	m	class:Cone
phiMax	shapes/cylinder.h	/^    float radius, zmin, zmax, phiMax;$/;"	m	class:Cylinder
phiMax	shapes/disk.h	/^    float height, radius, innerRadius, phiMax;$/;"	m	class:Disk
phiMax	shapes/hyperboloid.h	/^    float phiMax;$/;"	m	class:Hyperboloid
phiMax	shapes/paraboloid.h	/^    float phiMax;$/;"	m	class:Paraboloid
phiMax	shapes/sphere.h	/^    float phiMax;$/;"	m	class:Sphere
photoNames	3rdparty/tiff-3.9.4/tif_print.c	/^static const char *photoNames[] = {$/;"	v	file:
photoTag	3rdparty/tiff-3.9.4/tif_getimage.c	/^static const char photoTag[] = "PhotometricInterpretation";$/;"	v	file:
photometric	3rdparty/tiff-3.9.4/tif_jpeg.c	/^	uint16		photometric;	\/* copy of PhotometricInterpretation *\/$/;"	m	struct:__anon48	file:
photometric	3rdparty/tiff-3.9.4/tiffio.h	/^	uint16 photometric;                     \/* image photometric interp *\/$/;"	m	struct:_TIFFRGBAImage
photon	integrators/photonmap.cpp	/^    const Photon *photon;$/;"	m	struct:ClosePhoton	file:
photon	integrators/photonmap.cpp	/^    const RadiancePhoton *photon;$/;"	m	struct:RadiancePhotonProcess	file:
photons	integrators/photonmap.cpp	/^    ClosePhoton *photons;$/;"	m	struct:PhotonProcess	file:
pixarlogFieldInfo	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^static const TIFFFieldInfo pixarlogFieldInfo[] = {$/;"	v	file:
pixel	3rdparty/openexr-1.7.0/ImfPreviewImage.h	/^    PreviewRgba &	pixel (unsigned int x, unsigned int y)$/;"	f	class:Imf::PreviewImage
pixel	3rdparty/openexr-1.7.0/ImfPreviewImage.h	/^    const PreviewRgba &	pixel (unsigned int x, unsigned int y) const$/;"	f	class:Imf::PreviewImage
pixelAspectRatio	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesInputFile::pixelAspectRatio () const$/;"	f	class:Imf::AcesInputFile
pixelAspectRatio	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesOutputFile::pixelAspectRatio () const$/;"	f	class:Imf::AcesOutputFile
pixelAspectRatio	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::pixelAspectRatio () const$/;"	f	class:Imf::Header
pixelAspectRatio	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::pixelAspectRatio ()$/;"	f	class:Imf::Header
pixelAspectRatio	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaInputFile::pixelAspectRatio () const$/;"	f	class:Imf::RgbaInputFile
pixelAspectRatio	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaOutputFile::pixelAspectRatio () const$/;"	f	class:Imf::RgbaOutputFile
pixelAspectRatio	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::pixelAspectRatio () const$/;"	f	class:Imf::TiledRgbaInputFile
pixelAspectRatio	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::pixelAspectRatio () const$/;"	f	class:Imf::TiledRgbaOutputFile
pixelData	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    char *	pixelData;$/;"	m	struct:Imf::__anon37::BufferedTile	file:
pixelDataSize	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    int		pixelDataSize;$/;"	m	struct:Imf::__anon37::BufferedTile	file:
pixelPosition	3rdparty/openexr-1.7.0/ImfEnvmap.cpp	/^pixelPosition (CubeMapFace face, const Box2i &dataWindow, V2f positionInFace)$/;"	f	namespace:Imf::CubeMap
pixelPosition	3rdparty/openexr-1.7.0/ImfEnvmap.cpp	/^pixelPosition (const Box2i &dataWindow, const V2f &latLong)$/;"	f	namespace:Imf::LatLongMap
pixelPosition	3rdparty/openexr-1.7.0/ImfEnvmap.cpp	/^pixelPosition (const Box2i &dataWindow, const V3f &direction)$/;"	f	namespace:Imf::LatLongMap
pixelTypeSize	3rdparty/openexr-1.7.0/ImfMisc.cpp	/^pixelTypeSize (PixelType type)$/;"	f	namespace:Imf
pixel_depth	core/targa.h	/^    uint8_t     pixel_depth;$/;"	m	struct:__anon86
pixel_size	3rdparty/tiff-3.9.4/tif_luv.c	/^	int			pixel_size;	\/* bytes per pixel *\/$/;"	m	struct:logLuvState	file:
pixels	3rdparty/openexr-1.7.0/ImfPreviewImage.h	/^    PreviewRgba *	pixels ()	{return _pixels;}$/;"	f	class:Imf::PreviewImage
pixels	3rdparty/openexr-1.7.0/ImfPreviewImage.h	/^    const PreviewRgba *	pixels () const	{return _pixels;}$/;"	f	class:Imf::PreviewImage
pixels	film/image.h	/^    BlockedArray<Pixel> *pixels;$/;"	m	class:ImageFilm
plane_sample_offset	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8 plane_sample_offset;$/;"	m	struct:__anon55	file:
planes	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^void Frustum<T>::planes(Plane3<T> p[6])$/;"	f	class:Imath::Frustum
planes	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^void Frustum<T>::planes(Plane3<T> p[6], const Matrix44<T> &M)$/;"	f	class:Imath::Frustum
plussesPrinted	core/progressreporter.h	/^    int workDone, plussesPrinted, totalPlusses;$/;"	m	class:ProgressReporter
ply_close	tools/ply.c	/^void ply_close(PlyFile *plyfile)$/;"	f
ply_describe_property	tools/ply.c	/^void ply_describe_property($/;"	f
ply_get_element	tools/ply.c	/^void ply_get_element(PlyFile *plyfile, void *elem_ptr)$/;"	f
ply_get_other_properties	tools/ply.c	/^PlyOtherProp *ply_get_other_properties($/;"	f
ply_get_property	tools/ply.c	/^void ply_get_property($/;"	f
ply_open_for_reading	tools/ply.c	/^PlyFile *ply_open_for_reading($/;"	f
ply_read	tools/ply.c	/^PlyFile *ply_read(FILE *fp, int *nelems, char ***elem_names)$/;"	f
ply_type_size	tools/ply.c	/^int ply_type_size[] = {$/;"	v
ply_write	tools/ply.c	/^PlyFile *ply_write($/;"	f
pointNum	renderers/createprobes.cpp	/^    int pointNum, nProbes[3];$/;"	m	class:CreateRadProbeTask	file:
points	core/paramset.h	/^    vector<Reference<ParamSetItem<Point> > > points;$/;"	m	class:ParamSet
points	renderers/surfacepoints.h	/^    vector<SurfacePoint> points;$/;"	m	class:SurfacePointsRenderer
pos	3rdparty/ilmbase-1.0.2/ImathLine.h	/^    Vec3<T>			pos;$/;"	m	class:Imath::Line3
pos	3rdparty/zlib-1.2.5/gzguts.h	/^    z_off64_t pos;          \/* current position in uncompressed data *\/$/;"	m	struct:__anon74
posInf	3rdparty/ilmbase-1.0.2/half.h	/^half::posInf ()$/;"	f	class:half
posOffset	core/light.h	/^    int nSamples, componentOffset, posOffset;$/;"	m	struct:LightSampleOffsets
posToVoxel	accelerators/grid.h	/^    int posToVoxel(const Point &P, int axis) const {$/;"	f	class:GridAccel
positions	tools/obj2pbrt.cpp	/^    std::vector<float>          positions;$/;"	m	struct:tinyobj::__anon91	file:
post	3rdparty/ilmbase-1.0.2/IlmThreadSemaphore.cpp	/^void Semaphore::post () {}$/;"	f	class:IlmThread::Semaphore
post	3rdparty/ilmbase-1.0.2/IlmThreadSemaphorePosix.cpp	/^Semaphore::post ()$/;"	f	class:IlmThread::Semaphore
post	3rdparty/ilmbase-1.0.2/IlmThreadSemaphorePosixCompat.cpp	/^Semaphore::post ()$/;"	f	class:IlmThread::Semaphore
post	3rdparty/ilmbase-1.0.2/IlmThreadSemaphoreWin32.cpp	/^Semaphore::post()$/;"	f	class:IlmThread::Semaphore
post	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    void		post () {_sem.post();}$/;"	f	struct:Imf::__anon23::LineBuffer
post	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    inline void		post () {_sem.post();}$/;"	f	struct:Imf::__anon31::LineBuffer
post	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    inline void		post () {_sem.post();}$/;"	f	struct:Imf::__anon34::TileBuffer
post	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    inline void		post () {_sem.post();}$/;"	f	struct:Imf::__anon37::TileBuffer
postbrace	3rdparty/tiff-3.9.4/mkg3states.c	/^static	char* postbrace = "";$/;"	v	file:
pow	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static T	pow   (T x, T y)	{return ::pow (double(x), double(y));}$/;"	f	struct:Imath::Math
pow	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static float	pow   (float x, float y)	{return ::powf (x, y);}$/;"	f	struct:Imath::Math
pqdownheap	3rdparty/zlib-1.2.5/trees.c	/^local void pqdownheap(s, tree, k)$/;"	f
pqremove	3rdparty/zlib-1.2.5/trees.c	/^#define pqremove(/;"	d	file:
prebrace	3rdparty/tiff-3.9.4/mkg3states.c	/^static	char* prebrace = "";$/;"	v	file:
precalculateTileInfo	3rdparty/openexr-1.7.0/ImfTiledMisc.cpp	/^precalculateTileInfo (const TileDescription& tileDesc,$/;"	f	namespace:Imf
predd	3rdparty/ilmbase-1.0.2/ImathFun.cpp	/^predd (double d)$/;"	f	namespace:Imath
predf	3rdparty/ilmbase-1.0.2/ImathFun.cpp	/^predf (float f)$/;"	f	namespace:Imath
predict	3rdparty/tiff-3.9.4/tif_lzw.c	/^	TIFFPredictorState predict;	\/* predictor super class *\/$/;"	m	struct:__anon50	file:
predict	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^	TIFFPredictorState	predict;$/;"	m	struct:__anon57	file:
predict	3rdparty/tiff-3.9.4/tif_zip.c	/^	TIFFPredictorState predict;$/;"	m	struct:__anon59	file:
predictFieldInfo	3rdparty/tiff-3.9.4/tif_predict.c	/^static const TIFFFieldInfo predictFieldInfo[] = {$/;"	v	file:
predictor	3rdparty/tiff-3.9.4/tif_predict.h	/^	int		predictor;	\/* predictor tag value *\/$/;"	m	struct:__anon58
prefix	3rdparty/openexr-1.7.0/ImfKeyCode.cpp	/^KeyCode::prefix () const$/;"	f	class:Imf::KeyCode
prefixFromLayerName	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^prefixFromLayerName (const string &layerName, const Header &header)$/;"	f	namespace:Imf::__anon28
prefixFromLayerName	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^prefixFromLayerName (const string &layerName, const Header &header)$/;"	f	namespace:Imf::__anon39
prematureEOF	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	prematureEOF(/;"	d	file:
prepare_JPEGTables	3rdparty/tiff-3.9.4/tif_jpeg.c	/^prepare_JPEGTables(TIFF* tif)$/;"	f	file:
prev	3rdparty/zlib-1.2.5/deflate.h	/^    Posf *prev;$/;"	m	struct:internal_state
prevFace	shapes/loopsubdiv.cpp	/^    SDFace *prevFace(SDVertex *vert) {$/;"	f	struct:SDFace
prevVert	shapes/loopsubdiv.cpp	/^    SDVertex *prevVert(SDVertex *vert) {$/;"	f	struct:SDFace
prev_length	3rdparty/zlib-1.2.5/deflate.h	/^    uInt prev_length;$/;"	m	struct:internal_state
prev_match	3rdparty/zlib-1.2.5/deflate.h	/^    IPos prev_match;             \/* previous match *\/$/;"	m	struct:internal_state
previewImage	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::previewImage () const$/;"	f	class:Imf::Header
previewImage	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::previewImage ()$/;"	f	class:Imf::Header
previewPosition	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    Int64		 previewPosition;       \/\/ file position for preview$/;"	m	struct:Imf::OutputFile::Data	file:
previewPosition	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    Int64		previewPosition;$/;"	m	struct:Imf::TiledOutputFile::Data	file:
primNum	accelerators/kdtreeaccel.cpp	/^    int primNum;$/;"	m	struct:BoundEdge	file:
primes	core/montecarlo.cpp	/^static const int primes[] = {$/;"	v	file:
primitive	core/intersection.h	/^    const Primitive *primitive;$/;"	m	struct:Intersection
primitive	core/primitive.h	/^    Reference<Primitive> primitive;$/;"	m	class:TransformedPrimitive
primitiveId	core/intersection.h	/^    uint32_t shapeId, primitiveId;$/;"	m	struct:Intersection
primitiveId	core/primitive.h	/^    const uint32_t primitiveId;$/;"	m	class:Primitive
primitiveNumber	accelerators/bvh.cpp	/^    int primitiveNumber;$/;"	m	struct:BVHPrimitiveInfo	file:
primitives	accelerators/bvh.h	/^    vector<Reference<Primitive> > primitives;$/;"	m	class:BVHAccel
primitives	accelerators/grid.h	/^    vector<Reference<Primitive> > primitives;$/;"	m	class:GridAccel
primitives	accelerators/grid.h	/^    vector<Reference<Primitive> > primitives;$/;"	m	struct:Voxel
primitives	accelerators/kdtreeaccel.cpp	/^        uint32_t *primitives;   \/\/ Leaf$/;"	m	union:KdAccelNode::__anon79	file:
primitives	accelerators/kdtreeaccel.h	/^    vector<Reference<Primitive> > primitives;$/;"	m	class:KdTreeAccel
primitives	core/api.cpp	/^    vector<Reference<Primitive> > primitives;$/;"	m	struct:RenderOptions	file:
primitives	renderers/aggregatetest.h	/^    vector<Reference<Primitive> > primitives;$/;"	m	class:AggregateTest
primitivesOffset	accelerators/bvh.cpp	/^        uint32_t primitivesOffset;    \/\/ leaf$/;"	m	union:LinearBVHNode::__anon78	file:
printdir	3rdparty/tiff-3.9.4/tif_fax3.c	/^	TIFFPrintMethod printdir;	\/* super-class method *\/$/;"	m	struct:__anon43	file:
printdir	3rdparty/tiff-3.9.4/tif_jpeg.c	/^	TIFFPrintMethod printdir;	\/* super-class method *\/$/;"	m	struct:__anon48	file:
printdir	3rdparty/tiff-3.9.4/tif_predict.h	/^	TIFFPrintMethod	printdir;	\/* super-class method *\/$/;"	m	struct:__anon58
printdir	3rdparty/tiff-3.9.4/tiffio.h	/^    TIFFPrintMethod	printdir;	\/* directory print routine *\/$/;"	m	struct:__anon69
privateLookup	core/kdtree.h	/^void KdTree<NodeData>::privateLookup(uint32_t nodeNum, const Point &p,$/;"	f	class:KdTree
probeSpacing	renderers/createprobes.h	/^    float time, probeSpacing;$/;"	m	class:CreateRadianceProbes
processError	core/error.cpp	/^static void processError(const char *format, va_list args,$/;"	f	file:
prog	3rdparty/zlib-1.2.5/minigzip.c	/^char *prog;$/;"	v
prog	renderers/createprobes.cpp	/^    ProgressReporter &prog;$/;"	m	class:CreateRadProbeTask	file:
prog	renderers/surfacepoints.cpp	/^    ProgressReporter &prog;$/;"	m	class:SurfacePointTask	file:
progress	integrators/irradiancecache.cpp	/^    ProgressReporter &progress;$/;"	m	struct:IrradiancePrimeTask	file:
progress	integrators/photonmap.cpp	/^    ProgressReporter &progress;$/;"	m	class:ComputeRadianceTask	file:
progress	integrators/photonmap.cpp	/^    ProgressReporter &progress;$/;"	m	class:PhotonShootingTask	file:
progress	renderers/metropolis.cpp	/^    ProgressReporter &progress;$/;"	m	class:MLTTask	file:
progressUpdateFrequency	renderers/metropolis.cpp	/^    uint32_t progressUpdateFrequency, taskNum;$/;"	m	class:MLTTask	file:
project	3rdparty/ilmbase-1.0.2/ImathVecAlgo.h	/^project (const Vec &s, const Vec &t)$/;"	f	namespace:Imath
projectPointToScreen	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^Vec2<T> Frustum<T>::projectPointToScreen(const Vec3<T> &point) const$/;"	f	class:Imath::Frustum
projectScreenToRay	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^Line3<T> Frustum<T>::projectScreenToRay(const Vec2<T> &p) const$/;"	f	class:Imath::Frustum
projectionMap	lights/projection.h	/^    MIPMap<RGBSpectrum> *projectionMap;$/;"	m	class:ProjectionLight
projectionMatrix	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^Matrix44<T> Frustum<T>::projectionMatrix() const$/;"	f	class:Imath::Frustum
property	tools/ply.h	/^  char *property;              \/* name of property that rule applies to *\/$/;"	m	struct:PlyRuleList
props	tools/ply.h	/^  PlyProperty **props;          \/* list of properties in other_props *\/$/;"	m	struct:PlyOtherProp
props	tools/ply.h	/^  PlyProperty **props;          \/* list of properties in the file *\/$/;"	m	struct:PlyElement
props	tools/ply.h	/^  void **props;          \/* list of properties we're combining *\/$/;"	m	struct:PlyPropRules
proto	3rdparty/tiff-3.9.4/mkg3states.c	/^struct proto {$/;"	s	file:
ptr	core/memory.h	/^    T *ptr;$/;"	m	class:Reference
ptr_table	3rdparty/zlib-1.2.5/zutil.c	/^} ptr_table;$/;"	t	typeref:struct:ptr_table_s	file:
ptr_table_s	3rdparty/zlib-1.2.5/zutil.c	/^typedef struct ptr_table_s {$/;"	s	file:
ptra	core/probes.cpp	/^    StatsCounterType *ptra, *ptrb;$/;"	m	struct:StatTracker	file:
ptrb	core/probes.cpp	/^    StatsCounterType *ptra, *ptrb;$/;"	m	struct:StatTracker	file:
ptrdiff_t	3rdparty/zlib-1.2.5/zutil.h	/^       typedef int ptrdiff_t;$/;"	t
pushedActiveTransformBits	core/api.cpp	/^static vector<uint32_t> pushedActiveTransformBits;$/;"	v	file:
pushedGraphicsStates	core/api.cpp	/^static vector<GraphicsState> pushedGraphicsStates;$/;"	v	file:
pushedTransforms	core/api.cpp	/^static vector<TransformSet> pushedTransforms;$/;"	v	file:
put	3rdparty/tiff-3.9.4/tiffio.h	/^	} put;$/;"	m	struct:_TIFFRGBAImage	typeref:union:_TIFFRGBAImage::__anon66
putShortMSB	3rdparty/zlib-1.2.5/deflate.c	/^local void putShortMSB (s, b)$/;"	f
put_byte	3rdparty/zlib-1.2.5/deflate.h	/^#define put_byte(/;"	d
put_element_ply	tools/ply.c	/^void put_element_ply(PlyFile *plyfile, void *elem_ptr)$/;"	f
put_element_setup_ply	tools/ply.c	/^void put_element_setup_ply(PlyFile *plyfile, char *elem_name)$/;"	f
put_other_elements_ply	tools/ply.c	/^void put_other_elements_ply (PlyFile *plyfile)$/;"	f
put_short	3rdparty/zlib-1.2.5/trees.c	/^#define put_short(/;"	d	file:
putcode	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define putcode(/;"	d	file:
putcontig8bitYCbCrGenericTile	3rdparty/tiff-3.9.4/tif_getimage.c	/^static void putcontig8bitYCbCrGenericTile( $/;"	f	file:
putspan	3rdparty/tiff-3.9.4/tif_fax3.c	/^putspan(TIFF* tif, int32 span, const tableentry* tab)$/;"	f	file:
pwinerror	3rdparty/zlib-1.2.5/minigzip.c	/^static void pwinerror (s)$/;"	f	file:
pyramid	core/mipmap.h	/^    BlockedArray<T> **pyramid;$/;"	m	class:MIPMap
qNan	3rdparty/ilmbase-1.0.2/half.h	/^half::qNan ()$/;"	f	class:half
qtable	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8* qtable[4];$/;"	m	struct:__anon55	file:
qtable_offset	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	toff_t qtable_offset[3];$/;"	m	struct:__anon55	file:
qtable_offset_count	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8 qtable_offset_count;$/;"	m	struct:__anon55	file:
quality	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^	int			quality;$/;"	m	struct:__anon57	file:
quickRender	core/pbrt.h	/^    bool quickRender;$/;"	m	struct:Options
quiet	core/pbrt.h	/^    bool quiet, verbose;$/;"	m	struct:Options
quiet_NaN	3rdparty/ilmbase-1.0.2/halfLimits.h	/^    static half quiet_NaN () throw () {return half::qNan();}$/;"	f	class:std::numeric_limits
r	3rdparty/ilmbase-1.0.2/ImathColor.h	/^    T			r, g, b, a;$/;"	m	class:Imath::Color4
r	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^    T			r;	    \/\/ real part$/;"	m	class:Imath::Quat
r	3rdparty/openexr-1.7.0/ImfCRgbaFile.h	/^    ImfHalf	r;$/;"	m	struct:ImfRgba
r	3rdparty/openexr-1.7.0/ImfPreviewImage.h	/^    unsigned char	r;	\/\/ Red, green and blue components of$/;"	m	struct:Imf::PreviewRgba
r	3rdparty/openexr-1.7.0/ImfRgba.h	/^    half	r;$/;"	m	struct:Imf::Rgba
r	core/light.h	/^    Ray r;$/;"	m	struct:VisibilityTester
r	tools/ply2pbrt.c	/^  float r,g,b;$/;"	m	struct:Vertex	file:
radianceMap	integrators/photonmap.h	/^    KdTree<RadiancePhoton> *radianceMap;$/;"	m	class:PhotonIntegrator
radianceMap	lights/infinite.h	/^    MIPMap<RGBSpectrum> *radianceMap;$/;"	m	class:InfiniteAreaLight
radiancePhotons	integrators/photonmap.cpp	/^    vector<RadiancePhoton> &radiancePhotons;$/;"	m	class:ComputeRadianceTask	file:
radiancePhotons	integrators/photonmap.cpp	/^    vector<RadiancePhoton> &radiancePhotons;$/;"	m	class:PhotonShootingTask	file:
radius	3rdparty/ilmbase-1.0.2/ImathSphere.h	/^    T           radius;$/;"	m	class:Imath::Sphere3
radius	shapes/cone.h	/^    float radius, height, phiMax;$/;"	m	class:Cone
radius	shapes/cylinder.h	/^    float radius, zmin, zmax, phiMax;$/;"	m	class:Cylinder
radius	shapes/disk.h	/^    float height, radius, innerRadius, phiMax;$/;"	m	class:Disk
radius	shapes/paraboloid.h	/^    float radius;$/;"	m	class:Paraboloid
radius	shapes/sphere.h	/^    float radius;$/;"	m	class:Sphere
radix	3rdparty/ilmbase-1.0.2/halfLimits.h	/^    static const int radix = HALF_RADIX;$/;"	m	class:std::numeric_limits
rand48Next	3rdparty/ilmbase-1.0.2/ImathRandom.cpp	/^rand48Next (unsigned short state[3])$/;"	f	namespace:Imath::__anon11
range	3rdparty/tiff-3.9.4/tiffio.h	/^	int	range;				\/* Size of conversion table *\/$/;"	m	struct:__anon65
raw	3rdparty/zlib-1.2.5/gzguts.h	/^    z_off64_t raw;          \/* where the raw data started, for seeking *\/$/;"	m	struct:__anon74
rawPixelData	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^InputFile::rawPixelData (int firstScanLine,$/;"	f	class:Imf::InputFile
rawPixelData	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^ScanLineInputFile::rawPixelData (int firstScanLine,$/;"	f	class:Imf::ScanLineInputFile
rawTileData	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^InputFile::rawTileData (int &dx, int &dy,$/;"	f	class:Imf::InputFile
rawTileData	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::rawTileData (int &dx, int &dy,$/;"	f	class:Imf::TiledInputFile
rayEpsilon	core/intersection.h	/^    float rayEpsilon;$/;"	m	struct:Intersection
rayEpsilon	integrators/dipolesubsurface.h	/^    float area, rayEpsilon;$/;"	m	struct:IrradiancePoint
rayEpsilon	integrators/igi.h	/^    float rayEpsilon;$/;"	m	struct:VirtualLight
rayEpsilon	renderers/surfacepoints.h	/^    float area, rayEpsilon;$/;"	m	struct:SurfacePoint
rcsid	core/targa.c	/^\/*@unused@*\/ static const char rcsid[] =$/;"	v	file:
read	3rdparty/openexr-1.7.0/ImfStdIO.cpp	/^StdIFStream::read (char c[\/*n*\/], int n)$/;"	f	class:Imf::StdIFStream
read	3rdparty/openexr-1.7.0/ImfXdr.h	/^    read (T &in, Int64 &v)$/;"	f	namespace:Imf::Xdr
read	3rdparty/openexr-1.7.0/ImfXdr.h	/^read (T &in, bool &v)$/;"	f	namespace:Imf::Xdr
read	3rdparty/openexr-1.7.0/ImfXdr.h	/^read (T &in, char &v)$/;"	f	namespace:Imf::Xdr
read	3rdparty/openexr-1.7.0/ImfXdr.h	/^read (T &in, char v[], int n)		\/\/ fixed-size char array$/;"	f	namespace:Imf::Xdr
read	3rdparty/openexr-1.7.0/ImfXdr.h	/^read (T &in, double &v)$/;"	f	namespace:Imf::Xdr
read	3rdparty/openexr-1.7.0/ImfXdr.h	/^read (T &in, float &v)$/;"	f	namespace:Imf::Xdr
read	3rdparty/openexr-1.7.0/ImfXdr.h	/^read (T &in, half &v)$/;"	f	namespace:Imf::Xdr
read	3rdparty/openexr-1.7.0/ImfXdr.h	/^read (T &in, int n, char v[])		\/\/ zero-terminated string$/;"	f	namespace:Imf::Xdr
read	3rdparty/openexr-1.7.0/ImfXdr.h	/^read (T &in, signed char &v)$/;"	f	namespace:Imf::Xdr
read	3rdparty/openexr-1.7.0/ImfXdr.h	/^read (T &in, signed int &v)$/;"	f	namespace:Imf::Xdr
read	3rdparty/openexr-1.7.0/ImfXdr.h	/^read (T &in, signed long &v)$/;"	f	namespace:Imf::Xdr
read	3rdparty/openexr-1.7.0/ImfXdr.h	/^read (T &in, signed short &v)$/;"	f	namespace:Imf::Xdr
read	3rdparty/openexr-1.7.0/ImfXdr.h	/^read (T &in, unsigned char &v)$/;"	f	namespace:Imf::Xdr
read	3rdparty/openexr-1.7.0/ImfXdr.h	/^read (T &in, unsigned int &v)$/;"	f	namespace:Imf::Xdr
read	3rdparty/openexr-1.7.0/ImfXdr.h	/^read (T &in, unsigned long &v)$/;"	f	namespace:Imf::Xdr
read	3rdparty/openexr-1.7.0/ImfXdr.h	/^read (T &in, unsigned short &v)$/;"	f	namespace:Imf::Xdr
read	3rdparty/tiff-3.9.4/tif_acorn.c	/^extern int read(int fd, char *buf, int nbytes)$/;"	f
readChars	3rdparty/openexr-1.7.0/ImfIO.h	/^    readChars (IStream &is, char c[\/*n*\/], int n)$/;"	f	struct:Imf::StreamIO
readChars	3rdparty/openexr-1.7.0/ImfIO.h	/^    readChars (const char *&ip, char c[\/*n*\/], int n)$/;"	f	struct:Imf::CharPtrIO
readFrom	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::readFrom (IStream &is, int &version)$/;"	f	class:Imf::Header
readFrom	3rdparty/openexr-1.7.0/ImfTileOffsets.cpp	/^TileOffsets::readFrom (IStream &is, bool &complete)$/;"	f	class:Imf::TileOffsets
readLineOffsets	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^readLineOffsets (IStream &is,$/;"	f	namespace:Imf::__anon32
readMemoryMapped	3rdparty/openexr-1.7.0/ImfIO.cpp	/^IStream::readMemoryMapped (int n)$/;"	f	class:Imf::IStream
readNextTileData	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^readNextTileData (TiledInputFile::Data *ifd,$/;"	f	namespace:Imf::__anon35
readPixelData	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^readPixelData (ScanLineInputFile::Data *ifd,$/;"	f	namespace:Imf::__anon32
readPixels	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesInputFile::readPixels (int scanLine)$/;"	f	class:Imf::AcesInputFile
readPixels	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesInputFile::readPixels (int scanLine1, int scanLine2)$/;"	f	class:Imf::AcesInputFile
readPixels	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^InputFile::readPixels (int scanLine)$/;"	f	class:Imf::InputFile
readPixels	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^InputFile::readPixels (int scanLine1, int scanLine2)$/;"	f	class:Imf::InputFile
readPixels	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaInputFile::FromYca::readPixels (int scanLine)$/;"	f	class:Imf::RgbaInputFile::FromYca
readPixels	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaInputFile::FromYca::readPixels (int scanLine1, int scanLine2)$/;"	f	class:Imf::RgbaInputFile::FromYca
readPixels	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaInputFile::readPixels (int scanLine)$/;"	f	class:Imf::RgbaInputFile
readPixels	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaInputFile::readPixels (int scanLine1, int scanLine2)$/;"	f	class:Imf::RgbaInputFile
readPixels	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^ScanLineInputFile::readPixels (int scanLine)$/;"	f	class:Imf::ScanLineInputFile
readPixels	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^ScanLineInputFile::readPixels (int scanLine1, int scanLine2)$/;"	f	class:Imf::ScanLineInputFile
readSignedChars	3rdparty/openexr-1.7.0/ImfXdr.h	/^readSignedChars (T &in, signed char c[], int n)$/;"	f	namespace:Imf::Xdr
readTile	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::readTile (int dx, int dy, int l)$/;"	f	class:Imf::TiledInputFile
readTile	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::readTile (int dx, int dy, int lx, int ly)$/;"	f	class:Imf::TiledInputFile
readTile	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::FromYa::readTile (int dx, int dy, int lx, int ly)$/;"	f	class:Imf::TiledRgbaInputFile::FromYa
readTile	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::readTile (int dx, int dy, int l)$/;"	f	class:Imf::TiledRgbaInputFile
readTile	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::readTile (int dx, int dy, int lx, int ly)$/;"	f	class:Imf::TiledRgbaInputFile
readTileData	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^readTileData (TiledInputFile::Data *ifd,$/;"	f	namespace:Imf::__anon35
readTiles	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::readTiles (int dx1, int dx2, int dy1, int dy2, int l)$/;"	f	class:Imf::TiledInputFile
readTiles	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::readTiles (int dx1, int dx2, int dy1, int dy2, int lx, int ly)$/;"	f	class:Imf::TiledInputFile
readTiles	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::readTiles (int dxMin, int dxMax, int dyMin, int dyMax,$/;"	f	class:Imf::TiledRgbaInputFile
readUInt	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^readUInt (const char buf[4])$/;"	f	namespace:Imf::__anon20
readUnsignedChars	3rdparty/openexr-1.7.0/ImfXdr.h	/^readUnsignedChars (T &in, unsigned char c[], int n)$/;"	f	namespace:Imf::Xdr
readValueFrom	3rdparty/openexr-1.7.0/ImfAttribute.h	/^TypedAttribute<T>::readValueFrom (IStream &is, int size, int version)$/;"	f	class:Imf::TypedAttribute
readValueFrom	3rdparty/openexr-1.7.0/ImfBoxAttribute.cpp	/^Box2fAttribute::readValueFrom (IStream &is, int size, int version)$/;"	f	class:Imf::Box2fAttribute
readValueFrom	3rdparty/openexr-1.7.0/ImfBoxAttribute.cpp	/^Box2iAttribute::readValueFrom (IStream &is, int size, int version)$/;"	f	class:Imf::Box2iAttribute
readValueFrom	3rdparty/openexr-1.7.0/ImfChannelListAttribute.cpp	/^ChannelListAttribute::readValueFrom (IStream &is, int size, int version)$/;"	f	class:Imf::ChannelListAttribute
readValueFrom	3rdparty/openexr-1.7.0/ImfChromaticitiesAttribute.cpp	/^ChromaticitiesAttribute::readValueFrom (IStream &is, int size, int version)$/;"	f	class:Imf::ChromaticitiesAttribute
readValueFrom	3rdparty/openexr-1.7.0/ImfCompressionAttribute.cpp	/^CompressionAttribute::readValueFrom (IStream &is, int size, int version)$/;"	f	class:Imf::CompressionAttribute
readValueFrom	3rdparty/openexr-1.7.0/ImfEnvmapAttribute.cpp	/^EnvmapAttribute::readValueFrom (IStream &is, int size, int version)$/;"	f	class:Imf::EnvmapAttribute
readValueFrom	3rdparty/openexr-1.7.0/ImfKeyCodeAttribute.cpp	/^KeyCodeAttribute::readValueFrom (IStream &is, int size, int version)$/;"	f	class:Imf::KeyCodeAttribute
readValueFrom	3rdparty/openexr-1.7.0/ImfLineOrderAttribute.cpp	/^LineOrderAttribute::readValueFrom (IStream &is, int size, int version)$/;"	f	class:Imf::LineOrderAttribute
readValueFrom	3rdparty/openexr-1.7.0/ImfMatrixAttribute.cpp	/^M33dAttribute::readValueFrom (IStream &is, int size, int version)$/;"	f	class:Imf::M33dAttribute
readValueFrom	3rdparty/openexr-1.7.0/ImfMatrixAttribute.cpp	/^M33fAttribute::readValueFrom (IStream &is, int size, int version)$/;"	f	class:Imf::M33fAttribute
readValueFrom	3rdparty/openexr-1.7.0/ImfMatrixAttribute.cpp	/^M44dAttribute::readValueFrom (IStream &is, int size, int version)$/;"	f	class:Imf::M44dAttribute
readValueFrom	3rdparty/openexr-1.7.0/ImfMatrixAttribute.cpp	/^M44fAttribute::readValueFrom (IStream &is, int size, int version)$/;"	f	class:Imf::M44fAttribute
readValueFrom	3rdparty/openexr-1.7.0/ImfOpaqueAttribute.cpp	/^OpaqueAttribute::readValueFrom (IStream &is, int size, int version)$/;"	f	class:Imf::OpaqueAttribute
readValueFrom	3rdparty/openexr-1.7.0/ImfPreviewImageAttribute.cpp	/^PreviewImageAttribute::readValueFrom (IStream &is, int size, int version)$/;"	f	class:Imf::PreviewImageAttribute
readValueFrom	3rdparty/openexr-1.7.0/ImfRationalAttribute.cpp	/^RationalAttribute::readValueFrom (IStream &is, int size, int version)$/;"	f	class:Imf::RationalAttribute
readValueFrom	3rdparty/openexr-1.7.0/ImfStringAttribute.cpp	/^StringAttribute::readValueFrom (IStream &is, int size, int version)$/;"	f	class:Imf::StringAttribute
readValueFrom	3rdparty/openexr-1.7.0/ImfStringVectorAttribute.cpp	/^StringVectorAttribute::readValueFrom (IStream &is, int size, int version)$/;"	f	class:Imf::StringVectorAttribute
readValueFrom	3rdparty/openexr-1.7.0/ImfTileDescriptionAttribute.cpp	/^TileDescriptionAttribute::readValueFrom (IStream &is,$/;"	f	class:Imf::TileDescriptionAttribute
readValueFrom	3rdparty/openexr-1.7.0/ImfTimeCodeAttribute.cpp	/^TimeCodeAttribute::readValueFrom (IStream &is, int size, int version)$/;"	f	class:Imf::TimeCodeAttribute
readValueFrom	3rdparty/openexr-1.7.0/ImfVecAttribute.cpp	/^V2dAttribute::readValueFrom (IStream &is, int size, int version)$/;"	f	class:Imf::V2dAttribute
readValueFrom	3rdparty/openexr-1.7.0/ImfVecAttribute.cpp	/^V2fAttribute::readValueFrom (IStream &is, int size, int version)$/;"	f	class:Imf::V2fAttribute
readValueFrom	3rdparty/openexr-1.7.0/ImfVecAttribute.cpp	/^V2iAttribute::readValueFrom (IStream &is, int size, int version)$/;"	f	class:Imf::V2iAttribute
readValueFrom	3rdparty/openexr-1.7.0/ImfVecAttribute.cpp	/^V3dAttribute::readValueFrom (IStream &is, int size, int version)$/;"	f	class:Imf::V3dAttribute
readValueFrom	3rdparty/openexr-1.7.0/ImfVecAttribute.cpp	/^V3fAttribute::readValueFrom (IStream &is, int size, int version)$/;"	f	class:Imf::V3fAttribute
readValueFrom	3rdparty/openexr-1.7.0/ImfVecAttribute.cpp	/^V3iAttribute::readValueFrom (IStream &is, int size, int version)$/;"	f	class:Imf::V3iAttribute
readWord	core/imageio.cpp	/^static int readWord(FILE* fp, char* buffer, int bufferLength) {$/;"	f	file:
readYCAScanLine	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaInputFile::FromYca::readYCAScanLine (int y, Rgba *buf)$/;"	f	class:Imf::RgbaInputFile::FromYca
read_buf	3rdparty/zlib-1.2.5/deflate.c	/^local int read_buf(strm, buf, size)$/;"	f
read_file	tools/ply2pbrt.c	/^read_file(void)$/;"	f
read_ply	tools/ply.c	/^PlyFile *read_ply(FILE *fp)$/;"	f
readheader_done	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8 readheader_done;$/;"	m	struct:__anon55	file:
reconstructChromaHoriz	3rdparty/openexr-1.7.0/ImfRgbaYca.cpp	/^reconstructChromaHoriz (int n,$/;"	f	namespace:Imf::RgbaYca
reconstructChromaVert	3rdparty/openexr-1.7.0/ImfRgbaYca.cpp	/^reconstructChromaVert (int n,$/;"	f	namespace:Imf::RgbaYca
reconstructFromFile	3rdparty/openexr-1.7.0/ImfTileOffsets.cpp	/^TileOffsets::reconstructFromFile (IStream &is)$/;"	f	class:Imf::TileOffsets
reconstructLineOffsets	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^reconstructLineOffsets (IStream &is,$/;"	f	namespace:Imf::__anon32
recreate_command_line	tools/ply.c	/^char *recreate_command_line (int argc, char *argv[])$/;"	f
recursiveBuild	accelerators/bvh.cpp	/^BVHBuildNode *BVHAccel::recursiveBuild(MemoryArena &buildArena,$/;"	f	class:BVHAccel
recursiveBuild	core/kdtree.h	/^KdTree<NodeData>::recursiveBuild(uint32_t nodeNum, int start, int end,$/;"	f	class:KdTree
recvparams	3rdparty/tiff-3.9.4/tif_fax3.c	/^	uint32	recvparams;		\/* encoded Class 2 session params *\/$/;"	m	struct:__anon43	file:
recvparams	3rdparty/tiff-3.9.4/tif_jbig.c	/^        uint32  recvparams;     \/* encoded Class 2 session params             *\/$/;"	m	struct:__anon47	file:
recvparams	3rdparty/tiff-3.9.4/tif_jpeg.c	/^	uint32		recvparams;	\/* encoded Class 2 session params *\/$/;"	m	struct:__anon48	file:
recvtime	3rdparty/tiff-3.9.4/tif_fax3.c	/^	uint32	recvtime;		\/* time spent receiving (secs) *\/$/;"	m	struct:__anon43	file:
recvtime	3rdparty/tiff-3.9.4/tif_jbig.c	/^        uint32  recvtime;       \/* time spend receiving in seconds            *\/$/;"	m	struct:__anon47	file:
recvtime	3rdparty/tiff-3.9.4/tif_jpeg.c	/^	uint32		recvtime;	\/* time spent receiving (secs) *\/$/;"	m	struct:__anon48	file:
red	3rdparty/openexr-1.7.0/ImfChromaticities.h	/^    Imath::V2f	red;$/;"	m	struct:Imf::Chromaticities
redcmap	3rdparty/tiff-3.9.4/tiffio.h	/^	uint16* redcmap;                        \/* colormap pallete *\/$/;"	m	struct:_TIFFRGBAImage
reflect	3rdparty/ilmbase-1.0.2/ImathVecAlgo.h	/^reflect (const Vec &s, const Vec &t)$/;"	f	namespace:Imath
reflect	materials/translucent.h	/^    Reference<Texture<Spectrum> > reflect, transmit;$/;"	m	class:TranslucentMaterial
reflectPoint	3rdparty/ilmbase-1.0.2/ImathPlane.h	/^inline Vec3<T> Plane3<T>::reflectPoint(const Vec3<T> &point) const$/;"	f	class:Imath::Plane3
reflectVector	3rdparty/ilmbase-1.0.2/ImathPlane.h	/^inline Vec3<T> Plane3<T>::reflectVector(const Vec3<T> &v) const$/;"	f	class:Imath::Plane3
refline	3rdparty/tiff-3.9.4/tif_fax3.c	/^	unsigned char*	refline;	\/* reference line for 2d decoding *\/$/;"	m	struct:__anon45	file:
refruns	3rdparty/tiff-3.9.4/tif_fax3.c	/^	uint32*	refruns;		\/* runs for reference line *\/$/;"	m	struct:__anon45	file:
regions	core/volume.h	/^    vector<VolumeRegion *> regions;$/;"	m	class:AggregateVolume
registerAttributeType	3rdparty/openexr-1.7.0/ImfAttribute.cpp	/^Attribute::registerAttributeType (const char typeName[],$/;"	f	class:Imf::Attribute
registerAttributeType	3rdparty/openexr-1.7.0/ImfAttribute.h	/^TypedAttribute<T>::registerAttributeType ()$/;"	f	class:Imf::TypedAttribute
registeredCODECS	3rdparty/tiff-3.9.4/tif_compress.c	/^static	codec_t* registeredCODECS = NULL;$/;"	v	file:
regular	shapes/loopsubdiv.cpp	/^    bool regular, boundary;$/;"	m	struct:SDVertex	file:
regularHalfangleData	materials/measured.h	/^    float *regularHalfangleData;$/;"	m	class:MeasuredMaterial
reinhard	tools/exrtotiff.cpp	/^void reinhard(float *d, int xRes, int yRes) {$/;"	f
release	3rdparty/ilmbase-1.0.2/IlmThreadMutex.h	/^    void release ()$/;"	f	class:IlmThread::Lock
removeScaling	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^removeScaling (Matrix33<T> &mat, bool exc)$/;"	f	namespace:Imath
removeScaling	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^removeScaling (Matrix44<T> &mat, bool exc)$/;"	f	namespace:Imath
removeScalingAndShear	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^removeScalingAndShear (Matrix33<T> &mat, bool exc)$/;"	f	namespace:Imath
removeScalingAndShear	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^removeScalingAndShear (Matrix44<T> &mat, bool exc)$/;"	f	namespace:Imath
removeTask	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^TaskGroup::Data::removeTask ()$/;"	f	class:IlmThread::TaskGroup::Data
renderOptions	core/api.cpp	/^static RenderOptions *renderOptions = NULL;$/;"	v	file:
renderer	integrators/irradiancecache.cpp	/^    const Renderer *renderer;$/;"	m	struct:IrradiancePrimeTask	file:
renderer	integrators/photonmap.cpp	/^    const Renderer *renderer;$/;"	m	class:PhotonShootingTask	file:
renderer	renderers/createprobes.cpp	/^    const Renderer *renderer;$/;"	m	class:CreateRadProbeTask	file:
renderer	renderers/metropolis.cpp	/^    MetropolisRenderer *renderer;$/;"	m	class:MLTTask	file:
renderer	renderers/samplerrenderer.h	/^    const Renderer *renderer;$/;"	m	class:SamplerRendererTask
repeatedFails	renderers/surfacepoints.cpp	/^    int &repeatedFails, &maxRepeatedFails;$/;"	m	class:SurfacePointTask	file:
reporter	renderers/samplerrenderer.h	/^    ProgressReporter &reporter;$/;"	m	class:SamplerRendererTask
req_orientation	3rdparty/tiff-3.9.4/tiffio.h	/^	uint16 req_orientation;                 \/* requested orientation *\/$/;"	m	struct:_TIFFRGBAImage
resampleWeights	core/mipmap.h	/^    ResampleWeight *resampleWeights(uint32_t oldres, uint32_t newres) {$/;"	f	class:MIPMap
reserved	3rdparty/zlib-1.2.5/zlib.h	/^    uLong   reserved;   \/* reserved for future use *\/$/;"	m	struct:z_stream_s
resizeErase	3rdparty/openexr-1.7.0/ImfArray.h	/^Array2D<T>::resizeErase (long sizeX, long sizeY)$/;"	f	class:Imf::Array2D
resizeErase	3rdparty/openexr-1.7.0/ImfArray.h	/^Array<T>::resizeErase (long size)$/;"	f	class:Imf::Array
resizeEraseUnsafe	3rdparty/openexr-1.7.0/ImfArray.h	/^Array2D<T>::resizeEraseUnsafe (long sizeX, long sizeY)$/;"	f	class:Imf::Array2D
resizeEraseUnsafe	3rdparty/openexr-1.7.0/ImfArray.h	/^Array<T>::resizeEraseUnsafe (long size)$/;"	f	class:Imf::Array
restart_index	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8 restart_index;$/;"	m	struct:__anon55	file:
restart_interval	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint16 restart_interval;$/;"	m	struct:__anon55	file:
reverseLutFromBitmap	3rdparty/openexr-1.7.0/ImfPizCompressor.cpp	/^reverseLutFromBitmap (const unsigned char bitmap[BITMAP_SIZE],$/;"	f	namespace:Imf::__anon25
reverseOrientation	core/api.cpp	/^    bool reverseOrientation;$/;"	m	struct:GraphicsState	file:
rgb2hsv	3rdparty/ilmbase-1.0.2/ImathColorAlgo.h	/^rgb2hsv(const Color4<T> &rgb)$/;"	f	namespace:Imath
rgb2hsv	3rdparty/ilmbase-1.0.2/ImathColorAlgo.h	/^rgb2hsv(const Vec3<T> &rgb)$/;"	f	namespace:Imath
rgb2hsv_d	3rdparty/ilmbase-1.0.2/ImathColorAlgo.cpp	/^rgb2hsv_d(const Color4<double> &c)$/;"	f	namespace:Imath
rgb2hsv_d	3rdparty/ilmbase-1.0.2/ImathColorAlgo.cpp	/^rgb2hsv_d(const Vec3<double> &c)$/;"	f	namespace:Imath
rgb2packed	3rdparty/ilmbase-1.0.2/ImathColorAlgo.h	/^rgb2packed(const Color4<T> &c)$/;"	f	namespace:Imath
rgb2packed	3rdparty/ilmbase-1.0.2/ImathColorAlgo.h	/^rgb2packed(const Vec3<T> &c)$/;"	f	namespace:Imath
rgbIllum2SpectBlue	core/spectrum.cpp	/^SampledSpectrum SampledSpectrum::rgbIllum2SpectBlue;$/;"	m	class:SampledSpectrum	file:
rgbIllum2SpectBlue	core/spectrum.h	/^    static SampledSpectrum rgbIllum2SpectBlue;$/;"	m	class:SampledSpectrum
rgbIllum2SpectCyan	core/spectrum.cpp	/^SampledSpectrum SampledSpectrum::rgbIllum2SpectCyan;$/;"	m	class:SampledSpectrum	file:
rgbIllum2SpectCyan	core/spectrum.h	/^    static SampledSpectrum rgbIllum2SpectWhite, rgbIllum2SpectCyan;$/;"	m	class:SampledSpectrum
rgbIllum2SpectGreen	core/spectrum.cpp	/^SampledSpectrum SampledSpectrum::rgbIllum2SpectGreen;$/;"	m	class:SampledSpectrum	file:
rgbIllum2SpectGreen	core/spectrum.h	/^    static SampledSpectrum rgbIllum2SpectRed, rgbIllum2SpectGreen;$/;"	m	class:SampledSpectrum
rgbIllum2SpectMagenta	core/spectrum.cpp	/^SampledSpectrum SampledSpectrum::rgbIllum2SpectMagenta;$/;"	m	class:SampledSpectrum	file:
rgbIllum2SpectMagenta	core/spectrum.h	/^    static SampledSpectrum rgbIllum2SpectMagenta, rgbIllum2SpectYellow;$/;"	m	class:SampledSpectrum
rgbIllum2SpectRed	core/spectrum.cpp	/^SampledSpectrum SampledSpectrum::rgbIllum2SpectRed;$/;"	m	class:SampledSpectrum	file:
rgbIllum2SpectRed	core/spectrum.h	/^    static SampledSpectrum rgbIllum2SpectRed, rgbIllum2SpectGreen;$/;"	m	class:SampledSpectrum
rgbIllum2SpectWhite	core/spectrum.cpp	/^SampledSpectrum SampledSpectrum::rgbIllum2SpectWhite;$/;"	m	class:SampledSpectrum	file:
rgbIllum2SpectWhite	core/spectrum.h	/^    static SampledSpectrum rgbIllum2SpectWhite, rgbIllum2SpectCyan;$/;"	m	class:SampledSpectrum
rgbIllum2SpectYellow	core/spectrum.cpp	/^SampledSpectrum SampledSpectrum::rgbIllum2SpectYellow;$/;"	m	class:SampledSpectrum	file:
rgbIllum2SpectYellow	core/spectrum.h	/^    static SampledSpectrum rgbIllum2SpectMagenta, rgbIllum2SpectYellow;$/;"	m	class:SampledSpectrum
rgbRefl2SpectBlue	core/spectrum.cpp	/^SampledSpectrum SampledSpectrum::rgbRefl2SpectBlue;$/;"	m	class:SampledSpectrum	file:
rgbRefl2SpectBlue	core/spectrum.h	/^    static SampledSpectrum rgbRefl2SpectBlue;$/;"	m	class:SampledSpectrum
rgbRefl2SpectCyan	core/spectrum.cpp	/^SampledSpectrum SampledSpectrum::rgbRefl2SpectCyan;$/;"	m	class:SampledSpectrum	file:
rgbRefl2SpectCyan	core/spectrum.h	/^    static SampledSpectrum rgbRefl2SpectWhite, rgbRefl2SpectCyan;$/;"	m	class:SampledSpectrum
rgbRefl2SpectGreen	core/spectrum.cpp	/^SampledSpectrum SampledSpectrum::rgbRefl2SpectGreen;$/;"	m	class:SampledSpectrum	file:
rgbRefl2SpectGreen	core/spectrum.h	/^    static SampledSpectrum rgbRefl2SpectRed, rgbRefl2SpectGreen;$/;"	m	class:SampledSpectrum
rgbRefl2SpectMagenta	core/spectrum.cpp	/^SampledSpectrum SampledSpectrum::rgbRefl2SpectMagenta;$/;"	m	class:SampledSpectrum	file:
rgbRefl2SpectMagenta	core/spectrum.h	/^    static SampledSpectrum rgbRefl2SpectMagenta, rgbRefl2SpectYellow;$/;"	m	class:SampledSpectrum
rgbRefl2SpectRed	core/spectrum.cpp	/^SampledSpectrum SampledSpectrum::rgbRefl2SpectRed;$/;"	m	class:SampledSpectrum	file:
rgbRefl2SpectRed	core/spectrum.h	/^    static SampledSpectrum rgbRefl2SpectRed, rgbRefl2SpectGreen;$/;"	m	class:SampledSpectrum
rgbRefl2SpectWhite	core/spectrum.cpp	/^SampledSpectrum SampledSpectrum::rgbRefl2SpectWhite;$/;"	m	class:SampledSpectrum	file:
rgbRefl2SpectWhite	core/spectrum.h	/^    static SampledSpectrum rgbRefl2SpectWhite, rgbRefl2SpectCyan;$/;"	m	class:SampledSpectrum
rgbRefl2SpectYellow	core/spectrum.cpp	/^SampledSpectrum SampledSpectrum::rgbRefl2SpectYellow;$/;"	m	class:SampledSpectrum	file:
rgbRefl2SpectYellow	core/spectrum.h	/^    static SampledSpectrum rgbRefl2SpectMagenta, rgbRefl2SpectYellow;$/;"	m	class:SampledSpectrum
rgbaChannels	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^rgbaChannels (const ChannelList &ch, const string &channelNamePrefix = "")$/;"	f	namespace:Imf::__anon28
rgbaChannels	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^rgbaChannels (const ChannelList &ch, const string &channelNamePrefix = "")$/;"	f	namespace:Imf::__anon39
rgbaFile	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^    RgbaInputFile *	rgbaFile;$/;"	m	class:Imf::AcesInputFile::Data	file:
rgbaFile	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^    RgbaOutputFile *	rgbaFile;$/;"	m	class:Imf::AcesOutputFile::Data	file:
rho	core/reflection.cpp	/^Spectrum BSDF::rho(RNG &rng, BxDFType flags, int sqrtSamples) const {$/;"	f	class:BSDF
rho	core/reflection.cpp	/^Spectrum BSDF::rho(const Vector &wo, RNG &rng, BxDFType flags,$/;"	f	class:BSDF
rho	core/reflection.cpp	/^Spectrum BxDF::rho(const Vector &w, int nSamples,$/;"	f	class:BxDF
rho	core/reflection.cpp	/^Spectrum BxDF::rho(int nSamples, const float *samples1,$/;"	f	class:BxDF
rho	core/reflection.h	/^    Spectrum rho(const Vector &, int, const float *) const { return R; }$/;"	f	class:Lambertian
rho	core/reflection.h	/^    Spectrum rho(const Vector &w, int nSamples, const float *samples) const {$/;"	f	class:BRDFToBTDF
rho	core/reflection.h	/^    Spectrum rho(const Vector &w, int nSamples, const float *samples) const {$/;"	f	class:ScaledBxDF
rho	core/reflection.h	/^    Spectrum rho(int nSamples, const float *samples1, const float *samples2) const {$/;"	f	class:BRDFToBTDF
rho	core/reflection.h	/^    Spectrum rho(int nSamples, const float *samples1,$/;"	f	class:ScaledBxDF
rho	core/reflection.h	/^    Spectrum rho(int, const float *, const float *) const { return R; }$/;"	f	class:Lambertian
ribarray	core/pbrtparse.cpp	/^ParamArray *ribarray;$/;"	m	union:YYSTYPE	file:
ribarray	core/pbrtparse.hh	/^ParamArray *ribarray;$/;"	m	union:YYSTYPE
right	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^    T			right() const		{ return _right;	}$/;"	f	class:Imath::Frustum
rightChild	core/kdtree.h	/^    uint32_t hasLeftChild:1, rightChild:29;$/;"	m	struct:KdNode
rleCompress	3rdparty/openexr-1.7.0/ImfRleCompressor.cpp	/^rleCompress (int inLength, const char in[], signed char out[])$/;"	f	namespace:Imf::__anon30
rleUncompress	3rdparty/openexr-1.7.0/ImfRleCompressor.cpp	/^rleUncompress (int inLength, int maxLength, const signed char in[], char out[])$/;"	f	namespace:Imf::__anon30
rle_packet_len	core/targa.c	/^static uint8_t rle_packet_len(const uint8_t *row, const uint16_t pos,$/;"	f	file:
rle_packet_type	core/targa.c	/^static packet_type rle_packet_type(const uint8_t *row, const uint16_t pos,$/;"	f	file:
rmax	shapes/hyperboloid.h	/^    float rmax;$/;"	m	class:Hyperboloid
rng	tools/bsdftest.cpp	/^static RNG rng;$/;"	v	file:
root	core/octree.h	/^    OctNode<NodeData> root;$/;"	m	class:Octree
rotate	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::rotate (S r)$/;"	f	class:Imath::Matrix33
rotate	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::rotate (const Vec3<S> &r)$/;"	f	class:Imath::Matrix44
rotateBuf1	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaInputFile::FromYca::rotateBuf1 (int d)$/;"	f	class:Imf::RgbaInputFile::FromYca
rotateBuf2	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaInputFile::FromYca::rotateBuf2 (int d)$/;"	f	class:Imf::RgbaInputFile::FromYca
rotateBuffers	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaOutputFile::ToYca::rotateBuffers ()$/;"	f	class:Imf::RgbaOutputFile::ToYca
rotatePoint	3rdparty/ilmbase-1.0.2/ImathLineAlgo.h	/^rotatePoint (const Vec3<T> p, Line3<T> l, T angle)$/;"	f	namespace:Imath
rotateVector	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^Quat<T>::rotateVector(const Vec3<T>& original) const$/;"	f	class:Imath::Quat
rotationMatrix	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^rotationMatrix (const Vec3<T> &from, const Vec3<T> &to)$/;"	f	namespace:Imath
rotationMatrixWithUpDir	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^rotationMatrixWithUpDir (const Vec3<T> &fromDir,$/;"	f	namespace:Imath
roughness	integrators/glossyprt.h	/^    const float roughness;$/;"	m	class:GlossyPRTIntegrator
roughness	materials/metal.h	/^    Reference<Texture<float> > roughness;$/;"	m	class:MetalMaterial
roughness	materials/plastic.h	/^    Reference<Texture<float> > roughness, bumpMap;$/;"	m	class:PlasticMaterial
roughness	materials/shinymetal.h	/^    Reference<Texture<float> > roughness;$/;"	m	class:ShinyMetalMaterial
roughness	materials/translucent.h	/^    Reference<Texture<float> > roughness;$/;"	m	class:TranslucentMaterial
roughness	materials/uber.h	/^    Reference<Texture<float> > roughness, eta, bumpMap;$/;"	m	class:UberMaterial
round	3rdparty/ilmbase-1.0.2/half.h	/^half::round (unsigned int n) const$/;"	f	class:half
round12log	3rdparty/openexr-1.7.0/ImfLut.cpp	/^round12log (half x)$/;"	f	namespace:Imf
roundLog2	3rdparty/openexr-1.7.0/ImfTiledMisc.cpp	/^roundLog2 (int x, LevelRoundingMode rmode)$/;"	f	namespace:Imf::__anon36
roundNBit	3rdparty/openexr-1.7.0/ImfLut.h	/^    roundNBit (int n): n(n) {}$/;"	f	struct:Imf::roundNBit
roundNBit	3rdparty/openexr-1.7.0/ImfLut.h	/^struct roundNBit$/;"	s	namespace:Imf
roundYCA	3rdparty/openexr-1.7.0/ImfRgbaYca.cpp	/^roundYCA (int n,$/;"	f	namespace:Imf::RgbaYca
round_error	3rdparty/ilmbase-1.0.2/halfLimits.h	/^    static half round_error () throw () {return HALF_EPSILON \/ 2;}$/;"	f	class:std::numeric_limits
round_style	3rdparty/ilmbase-1.0.2/halfLimits.h	/^    static const float_round_style round_style = round_to_nearest;$/;"	m	class:std::numeric_limits
roundingMode	3rdparty/openexr-1.7.0/ImfTileDescription.h	/^    LevelRoundingMode	roundingMode;$/;"	m	class:Imf::TileDescription
row_offset	3rdparty/tiff-3.9.4/tiffio.h	/^	int row_offset;$/;"	m	struct:_TIFFRGBAImage
rowbytes	3rdparty/tiff-3.9.4/tif_fax3.c	/^	uint32	rowbytes;		\/* bytes in a decoded scanline *\/$/;"	m	struct:__anon43	file:
rowpixels	3rdparty/tiff-3.9.4/tif_fax3.c	/^	uint32	rowpixels;		\/* pixels in a scanline *\/$/;"	m	struct:__anon43	file:
rowsize	3rdparty/tiff-3.9.4/tif_predict.h	/^	tsize_t		rowsize;	\/* tile\/strip row size *\/$/;"	m	struct:__anon58
rpReflectances	integrators/photonmap.cpp	/^    const vector<Spectrum> &rpReflectances, &rpTransmittances;$/;"	m	class:ComputeRadianceTask	file:
rpReflectances	integrators/photonmap.cpp	/^    vector<Spectrum> &rpReflectances, &rpTransmittances;$/;"	m	class:PhotonShootingTask	file:
rpTransmittances	integrators/photonmap.cpp	/^    const vector<Spectrum> &rpReflectances, &rpTransmittances;$/;"	m	class:ComputeRadianceTask	file:
rpTransmittances	integrators/photonmap.cpp	/^    vector<Spectrum> &rpReflectances, &rpTransmittances;$/;"	m	class:PhotonShootingTask	file:
rrSample	renderers/metropolis.cpp	/^    float rrSample;$/;"	m	struct:PathSample	file:
rrThreshold	integrators/igi.h	/^    float rrThreshold;$/;"	m	class:IGIIntegrator
rstep	3rdparty/tiff-3.9.4/tiffio.h	/^	float	rstep, gstep, bstep;$/;"	m	struct:__anon65
rule_list	tools/ply.h	/^  PlyRuleList *rule_list;       \/* rule list from user *\/$/;"	m	struct:PlyFile
rule_list	tools/ply.h	/^  int *rule_list;        \/* types of rules (AVERAGE_PLY, MAJORITY_PLY, etc.) *\/$/;"	m	struct:PlyPropRules
rule_name_list	tools/ply.c	/^RuleName rule_name_list[] = {$/;"	v
run	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^WorkerThread::run ()$/;"	f	class:IlmThread::WorkerThread
runlen	3rdparty/tiff-3.9.4/t4.h	/^    short	runlen;		\/* run length in bits *\/$/;"	m	struct:tableentry
running	core/timer.h	/^    bool running;$/;"	m	class:Timer
runs	3rdparty/tiff-3.9.4/tif_fax3.c	/^	uint32*	runs;			\/* b&w runs for current\/previous row *\/$/;"	m	struct:__anon45	file:
rwMutex	accelerators/grid.h	/^    mutable RWMutex *rwMutex;$/;"	m	class:GridAccel
rw_mode	3rdparty/tiff-3.9.4/tif_fax3.c	/^        int     rw_mode;                \/* O_RDONLY for decode, else encode *\/$/;"	m	struct:__anon43	file:
rw_mode	3rdparty/tiff-3.9.4/tif_lzw.c	/^        int             rw_mode;        \/* preserve rw_mode from init *\/$/;"	m	struct:__anon50	file:
rxDirection	core/geometry.h	/^    Vector rxDirection, ryDirection;$/;"	m	class:RayDifferential
rxOrigin	core/geometry.h	/^    Point rxOrigin, ryOrigin;$/;"	m	class:RayDifferential
ryDirection	core/geometry.h	/^    Vector rxDirection, ryDirection;$/;"	m	class:RayDifferential
ryOrigin	core/geometry.h	/^    Point rxOrigin, ryOrigin;$/;"	m	class:RayDifferential
s	core/reflection.h	/^    Spectrum s;$/;"	m	class:ScaledBxDF
s	shapes/trianglemesh.h	/^    Vector *s;$/;"	m	class:TriangleMesh
sFile	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^    ScanLineInputFile *	sFile;$/;"	m	struct:Imf::InputFile::Data	file:
sNan	3rdparty/ilmbase-1.0.2/half.h	/^half::sNan ()$/;"	f	class:half
sampleBuf	samplers/adaptive.h	/^    float *sampleBuf;$/;"	m	class:AdaptiveSampler
sampleBuf	samplers/lowdiscrepancy.h	/^    float *sampleBuf;$/;"	m	class:LDSampler
sampleBuf	samplers/stratified.h	/^    float *sampleBuf;$/;"	m	class:StratifiedSampler
sampleFirstQuadrant	core/reflection.cpp	/^void Anisotropic::sampleFirstQuadrant(float u1, float u2,$/;"	f	class:Anisotropic
sampleOffsets	samplers/bestcandidate.h	/^    float sampleOffsets[3];$/;"	m	class:BestCandidateSampler
samplePos	samplers/random.h	/^    int samplePos;$/;"	m	class:RandomSampler
sampleTable	samplers/bestcandidate.h	/^    static const float sampleTable[SAMPLE_TABLE_SIZE][5];$/;"	m	class:BestCandidateSampler
sampledLambdaEnd	core/spectrum.h	/^static const int sampledLambdaEnd = 700;$/;"	v
sampledLambdaStart	core/spectrum.h	/^static const int sampledLambdaStart = 400;$/;"	v
sampler	integrators/irradiancecache.cpp	/^    Sampler *sampler;$/;"	m	struct:IrradiancePrimeTask	file:
sampler	renderers/samplerrenderer.h	/^    Sampler *sampler;$/;"	m	class:SamplerRenderer
samplesPerPixel	core/sampler.h	/^    const int samplesPerPixel;$/;"	m	class:Sampler
samples_per_pixel	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8 samples_per_pixel;$/;"	m	struct:__anon55	file:
samples_per_pixel_per_plane	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8 samples_per_pixel_per_plane;$/;"	m	struct:__anon55	file:
samplesperclump	3rdparty/tiff-3.9.4/tif_jpeg.c	/^	int		samplesperclump;$/;"	m	struct:__anon48	file:
samplesperpixel	3rdparty/tiff-3.9.4/tiffio.h	/^	uint16 samplesperpixel;                 \/* image samples\/pixel *\/$/;"	m	struct:_TIFFRGBAImage
sane	3rdparty/zlib-1.2.5/inflate.h	/^    int sane;                   \/* if false, allow invalid distance too far *\/$/;"	m	struct:inflate_state
sanityCheck	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::sanityCheck (bool isTiled) const$/;"	f	class:Imf::Header
sansScaling	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^sansScaling (const Matrix33<T> &mat, bool exc)$/;"	f	namespace:Imath
sansScaling	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^sansScaling (const Matrix44<T> &mat, bool exc)$/;"	f	namespace:Imath
sansScalingAndShear	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^sansScalingAndShear (const Matrix33<T> &mat, bool exc)$/;"	f	namespace:Imath
sansScalingAndShear	3rdparty/ilmbase-1.0.2/ImathMatrixAlgo.h	/^sansScalingAndShear (const Matrix44<T> &mat, bool exc)$/;"	f	namespace:Imath
saturation	3rdparty/openexr-1.7.0/ImfRgbaYca.cpp	/^saturation (const Rgba &in)$/;"	f	namespace:Imf::RgbaYca::__anon29
scale	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::scale (const Vec2<S> &s)$/;"	f	class:Imath::Matrix33
scale	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::scale (const Vec3<S> &s)$/;"	f	class:Imath::Matrix44
scale	materials/mixmat.h	/^    Reference<Texture<Spectrum> > scale;$/;"	m	class:MixMaterial
scale	materials/subsurface.h	/^    float scale;$/;"	m	class:SubsurfaceMaterial
scale	textures/imagemap.h	/^    float scale, gamma;$/;"	m	struct:TexInfo
scale	textures/marble.h	/^    float omega, scale, variation;$/;"	m	class:MarbleTexture
scanLineMax	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    int			scanLineMax;$/;"	m	struct:Imf::__anon23::LineBuffer	file:
scanLineMin	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    int			scanLineMin;$/;"	m	struct:Imf::__anon23::LineBuffer	file:
scan_tree	3rdparty/zlib-1.2.5/trees.c	/^local void scan_tree (s, tree, max_code)$/;"	f
scancount	3rdparty/tiff-3.9.4/tif_jpeg.c	/^	int		scancount;	\/* number of "scanlines" accumulated *\/$/;"	m	struct:__anon48	file:
scatterSampleOffset	integrators/emission.h	/^    int tauSampleOffset, scatterSampleOffset;$/;"	m	class:EmissionIntegrator
scatterSampleOffset	integrators/single.h	/^    int tauSampleOffset, scatterSampleOffset;$/;"	m	class:SingleScatteringIntegrator
scene	integrators/irradiancecache.cpp	/^    const Scene *scene;$/;"	m	struct:IrradiancePrimeTask	file:
scene	integrators/photonmap.cpp	/^    const Scene *scene;$/;"	m	class:PhotonShootingTask	file:
scene	lights/infinite.cpp	/^    const Scene *scene;$/;"	m	struct:InfiniteAreaCube	file:
scene	renderers/createprobes.cpp	/^    const Scene *scene;$/;"	m	class:CreateRadProbeTask	file:
scene	renderers/metropolis.cpp	/^    const Scene *scene;$/;"	m	class:MLTTask	file:
scene	renderers/samplerrenderer.h	/^    const Scene *scene;$/;"	m	class:SamplerRendererTask
scene	renderers/surfacepoints.cpp	/^    const Scene *scene;$/;"	m	class:SurfacePointTask	file:
scheme	3rdparty/tiff-3.9.4/tiffio.h	/^	uint16		scheme;$/;"	m	struct:__anon67
screenRadius	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^T Frustum<T>::screenRadius(const Vec3<T> &p, T radius) const$/;"	f	class:Imath::Frustum
screenToLocal	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^Vec2<T> Frustum<T>::screenToLocal(const Vec2<T> &s) const$/;"	f	class:Imath::Frustum
screenWindowCenter	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesInputFile::screenWindowCenter () const$/;"	f	class:Imf::AcesInputFile
screenWindowCenter	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesOutputFile::screenWindowCenter () const$/;"	f	class:Imf::AcesOutputFile
screenWindowCenter	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::screenWindowCenter () const$/;"	f	class:Imf::Header
screenWindowCenter	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::screenWindowCenter ()$/;"	f	class:Imf::Header
screenWindowCenter	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaInputFile::screenWindowCenter () const$/;"	f	class:Imf::RgbaInputFile
screenWindowCenter	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaOutputFile::screenWindowCenter () const$/;"	f	class:Imf::RgbaOutputFile
screenWindowCenter	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::screenWindowCenter () const$/;"	f	class:Imf::TiledRgbaInputFile
screenWindowCenter	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::screenWindowCenter () const$/;"	f	class:Imf::TiledRgbaOutputFile
screenWindowWidth	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesInputFile::screenWindowWidth () const$/;"	f	class:Imf::AcesInputFile
screenWindowWidth	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesOutputFile::screenWindowWidth () const$/;"	f	class:Imf::AcesOutputFile
screenWindowWidth	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::screenWindowWidth () const$/;"	f	class:Imf::Header
screenWindowWidth	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::screenWindowWidth ()$/;"	f	class:Imf::Header
screenWindowWidth	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaInputFile::screenWindowWidth () const$/;"	f	class:Imf::RgbaInputFile
screenWindowWidth	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaOutputFile::screenWindowWidth () const$/;"	f	class:Imf::RgbaOutputFile
screenWindowWidth	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::screenWindowWidth () const$/;"	f	class:Imf::TiledRgbaInputFile
screenWindowWidth	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::screenWindowWidth () const$/;"	f	class:Imf::TiledRgbaOutputFile
screenX0	lights/projection.h	/^    float screenX0, screenX1, screenY0, screenY1;$/;"	m	class:ProjectionLight
screenX1	lights/projection.h	/^    float screenX0, screenX1, screenY0, screenY1;$/;"	m	class:ProjectionLight
screenY0	lights/projection.h	/^    float screenX0, screenX1, screenY0, screenY1;$/;"	m	class:ProjectionLight
screenY1	lights/projection.h	/^    float screenX0, screenX1, screenY0, screenY1;$/;"	m	class:ProjectionLight
searchDirectory	core/fileutil.cpp	/^static string searchDirectory;$/;"	v	file:
secondChildOffset	accelerators/bvh.cpp	/^        uint32_t secondChildOffset;   \/\/ interior$/;"	m	union:LinearBVHNode::__anon78	file:
seconds	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^TimeCode::seconds () const$/;"	f	class:Imf::TimeCode
seek	3rdparty/zlib-1.2.5/gzguts.h	/^    int seek;               \/* true if seek request pending *\/$/;"	m	struct:__anon74
seekg	3rdparty/openexr-1.7.0/ImfStdIO.cpp	/^StdIFStream::seekg (Int64 pos)$/;"	f	class:Imf::StdIFStream
seekp	3rdparty/openexr-1.7.0/ImfStdIO.cpp	/^StdOFStream::seekp (Int64 pos)$/;"	f	class:Imf::StdOFStream
seekp	3rdparty/openexr-1.7.0/ImfStdIO.cpp	/^StdOSStream::seekp (Int64 pos)$/;"	f	class:Imf::StdOSStream
sem	core/parallel.h	/^    sem_t *sem;$/;"	m	class:Semaphore
sema_t	3rdparty/ilmbase-1.0.2/IlmThreadSemaphore.h	/^	struct sema_t$/;"	s	class:IlmThread::Semaphore
sendCode	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^sendCode (Int64 sCode, int runCount, Int64 runCode,$/;"	f	namespace:Imf::__anon20
send_all_trees	3rdparty/zlib-1.2.5/trees.c	/^local void send_all_trees(s, lcodes, dcodes, blcodes)$/;"	f
send_bits	3rdparty/zlib-1.2.5/trees.c	/^#define send_bits(/;"	d	file:
send_bits	3rdparty/zlib-1.2.5/trees.c	/^local void send_bits(s, value, length)$/;"	f
send_code	3rdparty/zlib-1.2.5/trees.c	/^#  define send_code(/;"	d	file:
send_tree	3rdparty/zlib-1.2.5/trees.c	/^local void send_tree (s, tree, max_code)$/;"	f
separate	3rdparty/tiff-3.9.4/tiffio.h	/^	    tileSeparateRoutine separate;$/;"	m	union:_TIFFRGBAImage::__anon66
set	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^void Euler<T>::set(typename Euler<T>::Axis axis,$/;"	f	class:Imath::Euler
set	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^void Frustum<T>::set(T n, T f, T l, T r, T t, T b, bool o)$/;"	f	class:Imath::Frustum
set	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^void Frustum<T>::set(T near, T far, T fovx, T fovy, T aspect)$/;"	f	class:Imath::Frustum
set	3rdparty/ilmbase-1.0.2/ImathLine.h	/^inline void Line3<T>::set(const Vec3<T> &p0, const Vec3<T> &p1)$/;"	f	class:Imath::Line3
set	3rdparty/ilmbase-1.0.2/ImathPlane.h	/^inline void Plane3<T>::set(const Vec3<T>& n, T d)$/;"	f	class:Imath::Plane3
set	3rdparty/ilmbase-1.0.2/ImathPlane.h	/^inline void Plane3<T>::set(const Vec3<T>& point, const Vec3<T>& n)$/;"	f	class:Imath::Plane3
set	3rdparty/ilmbase-1.0.2/ImathPlane.h	/^inline void Plane3<T>::set(const Vec3<T>& point1,$/;"	f	class:Imath::Plane3
setAxisAngle	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::setAxisAngle (const Vec3<S>& axis, S angle)$/;"	f	class:Imath::Matrix44
setAxisAngle	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^Quat<T>::setAxisAngle (const Vec3<T> &axis, T radians)$/;"	f	class:Imath::Quat
setBgf0	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^TimeCode::setBgf0 (bool value)$/;"	f	class:Imf::TimeCode
setBgf1	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^TimeCode::setBgf1 (bool value)$/;"	f	class:Imf::TimeCode
setBgf2	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^TimeCode::setBgf2 (bool value)$/;"	f	class:Imf::TimeCode
setBinaryGroup	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^TimeCode::setBinaryGroup (int group, int value)$/;"	f	class:Imf::TimeCode
setBitField	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^setBitField (unsigned int &value, int minBit, int maxBit, unsigned int field)$/;"	f	namespace:Imf::__anon40
setBits	3rdparty/ilmbase-1.0.2/half.h	/^half::setBits (unsigned short bits)$/;"	f	class:half
setByteArray	3rdparty/tiff-3.9.4/tif_dir.c	/^setByteArray(void** vpp, void* vp, size_t nmemb, size_t elem_size)$/;"	f	file:
setColorFrame	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^TimeCode::setColorFrame (bool value)$/;"	f	class:Imf::TimeCode
setCount	3rdparty/openexr-1.7.0/ImfKeyCode.cpp	/^KeyCode::setCount (int count)$/;"	f	class:Imf::KeyCode
setDropFrame	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^TimeCode::setDropFrame (bool value)$/;"	f	class:Imf::TimeCode
setErrorMessage	3rdparty/openexr-1.7.0/ImfCRgbaFile.cpp	/^setErrorMessage (const std::exception &e)$/;"	f	namespace:__anon18
setEulerAngles	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::setEulerAngles (const Vec3<S>& r)$/;"	f	class:Imath::Matrix44
setExtraSamples	3rdparty/tiff-3.9.4/tif_dir.c	/^setExtraSamples(TIFFDirectory* td, va_list ap, uint32* v)$/;"	f	file:
setFieldPhase	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^TimeCode::setFieldPhase (bool value)$/;"	f	class:Imf::TimeCode
setFilmMfcCode	3rdparty/openexr-1.7.0/ImfKeyCode.cpp	/^KeyCode::setFilmMfcCode (int filmMfcCode)$/;"	f	class:Imf::KeyCode
setFilmType	3rdparty/openexr-1.7.0/ImfKeyCode.cpp	/^KeyCode::setFilmType (int filmType)$/;"	f	class:Imf::KeyCode
setFrame	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^TimeCode::setFrame (int value)$/;"	f	class:Imf::TimeCode
setFrameBuffer	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesInputFile::setFrameBuffer (Rgba *base, size_t xStride, size_t yStride)$/;"	f	class:Imf::AcesInputFile
setFrameBuffer	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesOutputFile::setFrameBuffer$/;"	f	class:Imf::AcesOutputFile
setFrameBuffer	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^InputFile::setFrameBuffer (const FrameBuffer &frameBuffer)$/;"	f	class:Imf::InputFile
setFrameBuffer	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^OutputFile::setFrameBuffer (const FrameBuffer &frameBuffer)$/;"	f	class:Imf::OutputFile
setFrameBuffer	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaInputFile::FromYca::setFrameBuffer (Rgba *base,$/;"	f	class:Imf::RgbaInputFile::FromYca
setFrameBuffer	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaInputFile::setFrameBuffer (Rgba *base, size_t xStride, size_t yStride)$/;"	f	class:Imf::RgbaInputFile
setFrameBuffer	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaOutputFile::ToYca::setFrameBuffer (const Rgba *base,$/;"	f	class:Imf::RgbaOutputFile::ToYca
setFrameBuffer	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaOutputFile::setFrameBuffer (const Rgba *base,$/;"	f	class:Imf::RgbaOutputFile
setFrameBuffer	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^ScanLineInputFile::setFrameBuffer (const FrameBuffer &frameBuffer)$/;"	f	class:Imf::ScanLineInputFile
setFrameBuffer	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::setFrameBuffer (const FrameBuffer &frameBuffer)$/;"	f	class:Imf::TiledInputFile
setFrameBuffer	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::setFrameBuffer (const FrameBuffer &frameBuffer)$/;"	f	class:Imf::TiledOutputFile
setFrameBuffer	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::FromYa::setFrameBuffer (Rgba *base,$/;"	f	class:Imf::TiledRgbaInputFile::FromYa
setFrameBuffer	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::setFrameBuffer (Rgba *base, size_t xStride, size_t yStride)$/;"	f	class:Imf::TiledRgbaInputFile
setFrameBuffer	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::ToYa::setFrameBuffer (const Rgba *base,$/;"	f	class:Imf::TiledRgbaOutputFile::ToYa
setFrameBuffer	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::setFrameBuffer (const Rgba *base,$/;"	f	class:Imf::TiledRgbaOutputFile
setGlobalThreadCount	3rdparty/openexr-1.7.0/ImfThreading.cpp	/^setGlobalThreadCount (int count)$/;"	f	namespace:Imf
setHours	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^TimeCode::setHours (int value)$/;"	f	class:Imf::TimeCode
setLayerName	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaInputFile::setLayerName (const string &layerName)$/;"	f	class:Imf::RgbaInputFile
setLayerName	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::setLayerName (const std::string &layerName)$/;"	f	class:Imf::TiledRgbaInputFile
setMaxImageSize	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::setMaxImageSize (int maxWidth, int maxHeight)$/;"	f	class:Imf::Header
setMaxTileSize	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::setMaxTileSize (int maxWidth, int maxHeight)$/;"	f	class:Imf::Header
setMinutes	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^TimeCode::setMinutes (int value)$/;"	f	class:Imf::TimeCode
setNumThreads	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^ThreadPool::setNumThreads (int count)$/;"	f	class:IlmThread::ThreadPool
setOrder	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^inline void Euler<T>::setOrder(typename Euler<T>::Order p)$/;"	f	class:Imath::Euler
setOrthographic	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^void Frustum<T>::setOrthographic(bool ortho)$/;"	f	class:Imath::Frustum
setPerfOffset	3rdparty/openexr-1.7.0/ImfKeyCode.cpp	/^KeyCode::setPerfOffset (int perfOffset)$/;"	f	class:Imf::KeyCode
setPerfsPerCount	3rdparty/openexr-1.7.0/ImfKeyCode.cpp	/^KeyCode::setPerfsPerCount (int perfsPerCount)$/;"	f	class:Imf::KeyCode
setPerfsPerFrame	3rdparty/openexr-1.7.0/ImfKeyCode.cpp	/^KeyCode::setPerfsPerFrame (int perfsPerFrame)$/;"	f	class:Imf::KeyCode
setPrefix	3rdparty/openexr-1.7.0/ImfKeyCode.cpp	/^KeyCode::setPrefix (int prefix)$/;"	f	class:Imf::KeyCode
setPreviewImage	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::setPreviewImage (const PreviewImage &pi)$/;"	f	class:Imf::Header
setRotation	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::setRotation (S r)$/;"	f	class:Imath::Matrix33
setRotation	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^Quat<T>::setRotation (const Vec3<T> &from, const Vec3<T> &to)$/;"	f	class:Imath::Quat
setRotationInternal	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^Quat<T>::setRotationInternal (const Vec3<T> &f0, const Vec3<T> &t0, Quat<T> &q)$/;"	f	class:Imath::Quat
setScale	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::setScale (T s)$/;"	f	class:Imath::Matrix33
setScale	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::setScale (const Vec2<S> &s)$/;"	f	class:Imath::Matrix33
setScale	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::setScale (T s)$/;"	f	class:Imath::Matrix44
setScale	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::setScale (const Vec3<S> &s)$/;"	f	class:Imath::Matrix44
setSeconds	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^TimeCode::setSeconds (int value)$/;"	f	class:Imf::TimeCode
setShear	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::setShear (const S &xy)$/;"	f	class:Imath::Matrix33
setShear	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::setShear (const Vec2<S> &h)$/;"	f	class:Imath::Matrix33
setShear	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::setShear (const Shear6<S> &h)$/;"	f	class:Imath::Matrix44
setShear	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::setShear (const Vec3<S> &h)$/;"	f	class:Imath::Matrix44
setStackTracer	3rdparty/ilmbase-1.0.2/IexBaseExc.cpp	/^setStackTracer (StackTracer stackTracer)$/;"	f	namespace:Iex
setTheMatrix	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::setTheMatrix (const Matrix33<S> &v)$/;"	f	class:Imath::Matrix33
setTheMatrix	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::setTheMatrix (const Matrix44<S> &v)$/;"	f	class:Imath::Matrix44
setTileDescription	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::setTileDescription(const TileDescription& td)$/;"	f	class:Imf::Header
setTimeAndFlags	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^TimeCode::setTimeAndFlags (unsigned int value, Packing packing)$/;"	f	class:Imf::TimeCode
setTranslation	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::setTranslation (const Vec2<S> &t)$/;"	f	class:Imath::Matrix33
setTranslation	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::setTranslation (const Vec3<S> &t)$/;"	f	class:Imath::Matrix44
setUserData	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^TimeCode::setUserData (unsigned int value)$/;"	f	class:Imf::TimeCode
setValue	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color4<T>::setValue (S x, S y, S z, S w)$/;"	f	class:Imath::Color4
setValue	3rdparty/ilmbase-1.0.2/ImathColor.h	/^Color4<T>::setValue (const Color4<S> &v)$/;"	f	class:Imath::Color4
setValue	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::setValue (const Matrix33<S> &v)$/;"	f	class:Imath::Matrix33
setValue	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::setValue (const Matrix44<S> &v)$/;"	f	class:Imath::Matrix44
setValue	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::setValue (S XY, S XZ, S YZ, S YX, S ZX, S ZY)$/;"	f	class:Imath::Shear6
setValue	3rdparty/ilmbase-1.0.2/ImathShear.h	/^Shear6<T>::setValue (const Shear6<S> &h)$/;"	f	class:Imath::Shear6
setValue	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::setValue (S a, S b)$/;"	f	class:Imath::Vec2
setValue	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec2<T>::setValue (const Vec2<S> &v)$/;"	f	class:Imath::Vec2
setValue	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::setValue (S a, S b, S c)$/;"	f	class:Imath::Vec3
setValue	3rdparty/ilmbase-1.0.2/ImathVec.h	/^Vec3<T>::setValue (const Vec3<S> &v)$/;"	f	class:Imath::Vec3
setXYZVector	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^Euler<T>::setXYZVector(const Vec3<T> &v)$/;"	f	class:Imath::Euler
setYCRounding	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaOutputFile::ToYca::setYCRounding (unsigned int roundY,$/;"	f	class:Imf::RgbaOutputFile::ToYca
setYCRounding	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaOutputFile::setYCRounding (unsigned int roundY, unsigned int roundC)$/;"	f	class:Imf::RgbaOutputFile
set_prop_rules_ply	tools/ply.c	/^void set_prop_rules_ply (PlyFile *ply, PlyRuleList *prop_rules)$/;"	f
setorientation	3rdparty/tiff-3.9.4/tif_getimage.c	/^setorientation(TIFFRGBAImage* img)$/;"	f	file:
setupMap	3rdparty/tiff-3.9.4/tif_getimage.c	/^setupMap(TIFFRGBAImage* img)$/;"	f	file:
setup_element_read_ply	tools/ply.c	/^char *setup_element_read_ply (PlyFile *ply, int index, int *elem_count)$/;"	f
setup_other_props	tools/ply.c	/^void setup_other_props(PlyFile *plyfile, PlyElement *elem)$/;"	f
setup_property_ply	tools/ply.c	/^void setup_property_ply($/;"	f
setupdecode	3rdparty/tiff-3.9.4/tif_predict.h	/^	TIFFBoolMethod	setupdecode;	\/* super-class method *\/$/;"	m	struct:__anon58
setupencode	3rdparty/tiff-3.9.4/tif_predict.h	/^	TIFFBoolMethod	setupencode;	\/* super-class method *\/$/;"	m	struct:__anon58
shape	core/diffgeom.h	/^    const Shape *shape;$/;"	m	struct:DifferentialGeometry
shape	core/primitive.h	/^    Reference<Shape> shape;$/;"	m	class:GeometricPrimitive
shapeId	core/intersection.h	/^    uint32_t shapeId, primitiveId;$/;"	m	struct:Intersection
shapeId	core/shape.h	/^    const uint32_t shapeId;$/;"	m	class:Shape
shapeSet	lights/diffuse.h	/^    ShapeSet *shapeSet;$/;"	m	class:DiffuseAreaLight
shape_t	tools/obj2pbrt.cpp	/^} shape_t;$/;"	t	namespace:tinyobj	typeref:struct:tinyobj::__anon92	file:
shapes	core/light.h	/^    vector<Reference<Shape> > shapes;$/;"	m	class:ShapeSet
shear	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::shear (const S &xy)$/;"	f	class:Imath::Matrix33
shear	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::shear (const Vec2<S> &h)$/;"	f	class:Imath::Matrix33
shear	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::shear (const Shear6<S> &h)$/;"	f	class:Imath::Matrix44
shear	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::shear (const Vec3<S> &h)$/;"	f	class:Imath::Matrix44
shiftAndRound	3rdparty/openexr-1.7.0/ImfB44Compressor.cpp	/^shiftAndRound (int x, int shift)$/;"	f	namespace:Imf::__anon15
shininess	tools/obj2pbrt.cpp	/^    float shininess;$/;"	m	struct:tinyobj::__anon90	file:
short	core/pbrtparse.cpp	/^# undef short$/;"	d	file:
shutterClose	core/camera.h	/^    const float shutterOpen, shutterClose;$/;"	m	class:Camera
shutterClose	core/sampler.h	/^    const float shutterOpen, shutterClose;$/;"	m	class:Sampler
shutterOpen	core/camera.h	/^    const float shutterOpen, shutterClose;$/;"	m	class:Camera
shutterOpen	core/sampler.h	/^    const float shutterOpen, shutterClose;$/;"	m	class:Sampler
sig_a	core/reflection.h	/^    Spectrum sig_a, sigp_s;$/;"	m	class:BSSRDF
sig_a	core/volume.h	/^    Spectrum sig_a, sig_s, le;$/;"	m	class:DensityRegion
sig_a	volumes/homogeneous.h	/^    Spectrum sig_a, sig_s, le;$/;"	m	class:HomogeneousVolumeDensity
sig_s	core/volume.h	/^    Spectrum sig_a, sig_s, le;$/;"	m	class:DensityRegion
sig_s	volumes/homogeneous.h	/^    Spectrum sig_a, sig_s, le;$/;"	m	class:HomogeneousVolumeDensity
sigma	materials/matte.h	/^    Reference<Texture<float> > sigma, bumpMap;$/;"	m	class:MatteMaterial
sigma_a	core/reflection.h	/^    Spectrum sigma_a() const { return sig_a; }$/;"	f	class:BSSRDF
sigma_a	core/volume.cpp	/^    float sigma_prime_s[3], sigma_a[3]; \/\/ mm^-1$/;"	m	struct:MeasuredSS	file:
sigma_a	core/volume.cpp	/^Spectrum AggregateVolume::sigma_a(const Point &p, const Vector &w,$/;"	f	class:AggregateVolume
sigma_a	core/volume.h	/^    Spectrum sigma_a(const Point &p, const Vector &, float) const {$/;"	f	class:DensityRegion
sigma_a	materials/subsurface.h	/^    Reference<Texture<Spectrum> > Kr, sigma_a, sigma_prime_s;$/;"	m	class:SubsurfaceMaterial
sigma_a	volumes/homogeneous.h	/^    Spectrum sigma_a(const Point &p, const Vector &, float) const {$/;"	f	class:HomogeneousVolumeDensity
sigma_prime_s	core/reflection.h	/^    Spectrum sigma_prime_s() const { return sigp_s; }$/;"	f	class:BSSRDF
sigma_prime_s	core/volume.cpp	/^    float sigma_prime_s[3], sigma_a[3]; \/\/ mm^-1$/;"	m	struct:MeasuredSS	file:
sigma_prime_s	materials/subsurface.h	/^    Reference<Texture<Spectrum> > Kr, sigma_a, sigma_prime_s;$/;"	m	class:SubsurfaceMaterial
sigma_s	core/volume.cpp	/^Spectrum AggregateVolume::sigma_s(const Point &p, const Vector &w, float time) const {$/;"	f	class:AggregateVolume
sigma_s	core/volume.h	/^    Spectrum sigma_s(const Point &p, const Vector &, float) const {$/;"	f	class:DensityRegion
sigma_s	volumes/homogeneous.h	/^    Spectrum sigma_s(const Point &p, const Vector &, float) const {$/;"	f	class:HomogeneousVolumeDensity
sigma_t	core/volume.cpp	/^Spectrum AggregateVolume::sigma_t(const Point &p, const Vector &w, float time) const {$/;"	f	class:AggregateVolume
sigma_t	core/volume.cpp	/^Spectrum VolumeRegion::sigma_t(const Point &p, const Vector &w,$/;"	f	class:VolumeRegion
sigma_t	core/volume.h	/^    Spectrum sigma_t(const Point &p, const Vector &, float) const {$/;"	f	class:DensityRegion
sigma_t	volumes/homogeneous.h	/^    Spectrum sigma_t(const Point &p, const Vector &, float) const {$/;"	f	class:HomogeneousVolumeDensity
sigma_tr	integrators/dipolesubsurface.cpp	/^    Spectrum zpos, zneg, sigmap_t, sigma_tr, alphap;$/;"	m	struct:DiffusionReflectance	file:
sigmap_t	integrators/dipolesubsurface.cpp	/^    Spectrum zpos, zneg, sigmap_t, sigma_tr, alphap;$/;"	m	struct:DiffusionReflectance	file:
sign	3rdparty/ilmbase-1.0.2/ImathFun.h	/^sign (T a)$/;"	f	namespace:Imath
signaling_NaN	3rdparty/ilmbase-1.0.2/halfLimits.h	/^    static half signaling_NaN () throw () {return half::sNan();}$/;"	f	class:std::numeric_limits
sigp_s	core/reflection.h	/^    Spectrum sig_a, sigp_s;$/;"	m	class:BSSRDF
simpleXYZRotation	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^Euler<T>::simpleXYZRotation (Vec3<T> &xyzRot, const Vec3<T> &targetXyzRot)$/;"	f	class:Imath::Euler
sin	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static T	sin   (T x)		{return ::sin (double(x));}$/;"	f	struct:Imath::Math
sin	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static float	sin   (float x)			{return ::sinf (x);}$/;"	f	struct:Imath::Math
sinCosIndexed	core/sh.cpp	/^static void sinCosIndexed(float s, float c, int n,$/;"	f	file:
sinh	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static T	sinh  (T x)		{return ::sinh (double(x));}$/;"	f	struct:Imath::Math
sinh	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static float	sinh  (float x)			{return ::sinhf (x);}$/;"	f	struct:Imath::Math
sinx_over_x	3rdparty/ilmbase-1.0.2/ImathMath.h	/^sinx_over_x (T x)$/;"	f	namespace:Imath
size	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<T>::size() const $/;"	f	class:Imath::Box
size	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<Vec2<T> >::size() const $/;"	f	class:Imath::Box
size	3rdparty/ilmbase-1.0.2/ImathBox.h	/^Box<Vec3<T> >::size() const $/;"	f	class:Imath::Box
size	3rdparty/ilmbase-1.0.2/ImathInterval.h	/^Interval<T>::size() const $/;"	f	class:Imath::Interval
size	3rdparty/openexr-1.7.0/ImfB44Compressor.cpp	/^    int			size;$/;"	m	struct:Imf::B44Compressor::ChannelData	file:
size	3rdparty/openexr-1.7.0/ImfPizCompressor.cpp	/^    int			size;$/;"	m	struct:Imf::PizCompressor::ChannelData	file:
size	3rdparty/openexr-1.7.0/ImfXdr.h	/^template <> inline int size <bool> ()			{return 1;}$/;"	f	namespace:Imf::Xdr
size	3rdparty/openexr-1.7.0/ImfXdr.h	/^template <> inline int size <char> ()			{return 1;}$/;"	f	namespace:Imf::Xdr
size	3rdparty/openexr-1.7.0/ImfXdr.h	/^template <> inline int size <double> ()			{return 8;}$/;"	f	namespace:Imf::Xdr
size	3rdparty/openexr-1.7.0/ImfXdr.h	/^template <> inline int size <float> ()			{return 4;}$/;"	f	namespace:Imf::Xdr
size	3rdparty/openexr-1.7.0/ImfXdr.h	/^template <> inline int size <half> ()			{return 2;}$/;"	f	namespace:Imf::Xdr
size	3rdparty/openexr-1.7.0/ImfXdr.h	/^template <> inline int size <signed char> ()		{return 1;}$/;"	f	namespace:Imf::Xdr
size	3rdparty/openexr-1.7.0/ImfXdr.h	/^template <> inline int size <signed int> ()		{return 4;}$/;"	f	namespace:Imf::Xdr
size	3rdparty/openexr-1.7.0/ImfXdr.h	/^template <> inline int size <signed long> ()		{return 8;}$/;"	f	namespace:Imf::Xdr
size	3rdparty/openexr-1.7.0/ImfXdr.h	/^template <> inline int size <signed short> ()		{return 2;}$/;"	f	namespace:Imf::Xdr
size	3rdparty/openexr-1.7.0/ImfXdr.h	/^template <> inline int size <unsigned char> ()		{return 1;}$/;"	f	namespace:Imf::Xdr
size	3rdparty/openexr-1.7.0/ImfXdr.h	/^template <> inline int size <unsigned int> ()		{return 4;}$/;"	f	namespace:Imf::Xdr
size	3rdparty/openexr-1.7.0/ImfXdr.h	/^template <> inline int size <unsigned long> ()		{return 8;}$/;"	f	namespace:Imf::Xdr
size	3rdparty/openexr-1.7.0/ImfXdr.h	/^template <> inline int size <unsigned short> ()		{return 2;}$/;"	f	namespace:Imf::Xdr
size	3rdparty/zlib-1.2.5/gzguts.h	/^    unsigned size;          \/* buffer size, zero if not allocated yet *\/$/;"	m	struct:__anon74
size	accelerators/grid.h	/^    uint32_t size() const { return primitives.size(); }$/;"	f	struct:Voxel
size	core/pbrtparse.cpp	/^    int size;$/;"	m	struct:ParamListItem	file:
size	tools/ply.h	/^  int size;                     \/* size of element (bytes) or -1 if variable *\/$/;"	m	struct:PlyElement
size	tools/ply.h	/^  int size;                     \/* size of other_props *\/$/;"	m	struct:PlyOtherProp
sizeOfFace	3rdparty/openexr-1.7.0/ImfEnvmap.cpp	/^sizeOfFace (const Box2i &dataWindow)$/;"	f	namespace:Imf::CubeMap
skip	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    bool	skip;$/;"	m	struct:Imf::__anon31::InSliceInfo	file:
skip	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    bool        skip;$/;"	m	struct:Imf::__anon34::TInSliceInfo	file:
skip	3rdparty/openexr-1.7.0/ImfXdr.h	/^skip (T &in, int n)			\/\/ skip n padding bytes$/;"	f	namespace:Imf::Xdr
skip	3rdparty/zlib-1.2.5/gzguts.h	/^    z_off64_t skip;         \/* amount to skip (already rewound if backwards) *\/$/;"	m	struct:__anon74
skipChannel	3rdparty/openexr-1.7.0/ImfMisc.cpp	/^skipChannel (const char *& readPtr,$/;"	f	namespace:Imf
skip_buffer	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8* skip_buffer;$/;"	m	struct:__anon55	file:
slerp	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^slerp (const Quat<T> &q1, const Quat<T> &q2, T t)$/;"	f	namespace:Imath
slerpShortestArc	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^slerpShortestArc (const Quat<T> &q1, const Quat<T> &q2, T t)$/;"	f	namespace:Imath
slice	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^FrameBuffer::ConstIterator::slice () const$/;"	f	class:Imf::FrameBuffer::ConstIterator
slice	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^FrameBuffer::Iterator::slice () const$/;"	f	class:Imf::FrameBuffer::Iterator
slices	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    vector<OutSliceInfo> slices;		\/\/ info about channels in file$/;"	m	struct:Imf::OutputFile::Data	file:
slices	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    vector<InSliceInfo>	slices;             \/\/ info about channels in file$/;"	m	struct:Imf::ScanLineInputFile::Data	file:
slices	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    vector<TInSliceInfo> slices;	    \/\/ info about channels in file$/;"	m	struct:Imf::TiledInputFile::Data	file:
slices	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    vector<TOutSliceInfo> slices;		\/\/ info about channels in file$/;"	m	struct:Imf::TiledOutputFile::Data	file:
smaller	3rdparty/zlib-1.2.5/trees.c	/^#define smaller(/;"	d	file:
smallest	3rdparty/ilmbase-1.0.2/ImathHalfLimits.h	/^    static float		smallest()	{return HALF_MIN;}$/;"	f	struct:Imath::limits
smallest	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static char			smallest()	{return 1;}$/;"	f	struct:Imath::limits
smallest	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static double		smallest()	{return DBL_MIN;}$/;"	f	struct:Imath::limits
smallest	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static float		smallest()	{return FLT_MIN;}$/;"	f	struct:Imath::limits
smallest	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static int			smallest()	{return 1;}$/;"	f	struct:Imath::limits
smallest	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static long			smallest()	{return 1;}$/;"	f	struct:Imath::limits
smallest	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static long double		smallest()	{return LDBL_MIN;}$/;"	f	struct:Imath::limits
smallest	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static short		smallest()	{return 1;}$/;"	f	struct:Imath::limits
smallest	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static signed char		smallest()	{return 1;}$/;"	f	struct:Imath::limits
smallest	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static unsigned char	smallest()	{return 1;}$/;"	f	struct:Imath::limits
smallest	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static unsigned int		smallest()	{return 1;}$/;"	f	struct:Imath::limits
smallest	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static unsigned long	smallest()	{return 1;}$/;"	f	struct:Imath::limits
smallest	3rdparty/ilmbase-1.0.2/ImathLimits.h	/^    static unsigned short	smallest()	{return 1;}$/;"	f	struct:Imath::limits
sn	core/reflection.h	/^    Vector sn, tn;$/;"	m	class:BSDF
snprintf	core/api.cpp	/^ #define snprintf /;"	d	file:
snprintf	core/paramset.h	/^ #define snprintf /;"	d
snprintf	core/timer.h	/^#define snprintf /;"	d
sof_c	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8 sof_c[3];$/;"	m	struct:__anon55	file:
sof_hv	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8 sof_hv[3];$/;"	m	struct:__anon55	file:
sof_log	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8 sof_log;$/;"	m	struct:__anon55	file:
sof_marker_id	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8 sof_marker_id;$/;"	m	struct:__anon55	file:
sof_tq	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8 sof_tq[3];$/;"	m	struct:__anon55	file:
sof_x	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint32 sof_x;$/;"	m	struct:__anon55	file:
sof_y	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint32 sof_y;$/;"	m	struct:__anon55	file:
solidSphereRand	3rdparty/ilmbase-1.0.2/ImathRandom.h	/^solidSphereRand (Rand &rand)$/;"	f	namespace:Imath
solveCubic	3rdparty/ilmbase-1.0.2/ImathRoots.h	/^solveCubic (T a, T b, T c, T d, T x[3])$/;"	f	namespace:Imath
solveLinear	3rdparty/ilmbase-1.0.2/ImathRoots.h	/^solveLinear (T a, T b, T &x)$/;"	f	namespace:Imath
solveNormalizedCubic	3rdparty/ilmbase-1.0.2/ImathRoots.h	/^solveNormalizedCubic (T r, T s, T t, T x[3])$/;"	f	namespace:Imath
solveQuadratic	3rdparty/ilmbase-1.0.2/ImathRoots.h	/^solveQuadratic (T a, T b, T c, T x[2])$/;"	f	namespace:Imath
sos_cs	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8 sos_cs[3];$/;"	m	struct:__anon55	file:
sos_end	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	} sos_end[3];$/;"	m	struct:__anon55	typeref:struct:__anon55::__anon56	file:
sos_tda	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8 sos_tda[3];$/;"	m	struct:__anon55	file:
spectra	core/paramset.h	/^    vector<Reference<ParamSetItem<Spectrum> > > spectra;$/;"	m	class:ParamSet
spectrumRedValue	tools/bsdftest.cpp	/^double spectrumRedValue(const Spectrum & s)$/;"	f
spectrumTextures	core/api.cpp	/^    map<string, Reference<Texture<Spectrum> > > spectrumTextures;$/;"	m	struct:GraphicsState	file:
spectrumTextures	core/paramset.h	/^    map<string, Reference<Texture<Spectrum> > > &spectrumTextures;$/;"	m	class:TextureParams
specular	tools/obj2pbrt.cpp	/^    float specular[3];$/;"	m	struct:tinyobj::__anon90	file:
specularBounce	renderers/metropolis.cpp	/^    bool specularBounce;$/;"	m	struct:PathVertex	file:
specular_texname	tools/obj2pbrt.cpp	/^    std::string specular_texname;$/;"	m	struct:tinyobj::__anon90	file:
sphere	core/texture.cpp	/^void SphericalMapping2D::sphere(const Point &p, float *s, float *t) const {$/;"	f	class:SphericalMapping2D
sphere	renderers/surfacepoints.cpp	/^    GeometricPrimitive &sphere;$/;"	m	class:SurfacePointTask	file:
splatXYZ	film/image.h	/^        float splatXYZ[3];$/;"	m	struct:ImageFilm::Pixel
spline	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^spline (const Quat<T> &q0, const Quat<T> &q1,$/;"	f	namespace:Imath
split	accelerators/kdtreeaccel.cpp	/^        float split;            \/\/ Interior$/;"	m	union:KdAccelNode::__anon79	file:
splitAxis	accelerators/bvh.cpp	/^    uint32_t splitAxis, firstPrimOffset, nPrimitives;$/;"	m	struct:BVHBuildNode	file:
splitAxis	core/kdtree.h	/^    uint32_t splitAxis:2;$/;"	m	struct:KdNode
splitBucket	accelerators/bvh.cpp	/^    int splitBucket, nBuckets, dim;$/;"	m	struct:CompareToBucket	file:
splitMethod	accelerators/bvh.h	/^    SplitMethod splitMethod;$/;"	m	class:BVHAccel
splitPos	core/kdtree.h	/^    float splitPos;$/;"	m	struct:KdNode
sqrt	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static T	sqrt  (T x)		{return ::sqrt (double(x));}$/;"	f	struct:Imath::Math
sqrt	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static float	sqrt  (float x)			{return ::sqrtf (x);}$/;"	f	struct:Imath::Math
squad	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^squad (const Quat<T> &q1, const Quat<T> &qa,$/;"	f	namespace:Imath
square	3rdparty/openexr-1.7.0/ImfRational.cpp	/^square (double x)$/;"	f	namespace:Imf::__anon27
srand48	3rdparty/ilmbase-1.0.2/ImathRandom.cpp	/^srand48 (long int seed)$/;"	f	namespace:Imath
src	3rdparty/tiff-3.9.4/tif_jpeg.c	/^	jpeg_source_mgr	src;		\/* data source for decompression *\/$/;"	m	struct:__anon48	file:
stackTrace	3rdparty/ilmbase-1.0.2/IexBaseExc.h	/^BaseExc::stackTrace () const$/;"	f	class:Iex::BaseExc
stackTracer	3rdparty/ilmbase-1.0.2/IexBaseExc.cpp	/^stackTracer ()$/;"	f	namespace:Iex
start	3rdparty/ilmbase-1.0.2/IlmThread.cpp	/^Thread::start ()$/;"	f	class:IlmThread::Thread
start	3rdparty/ilmbase-1.0.2/IlmThreadPosix.cpp	/^Thread::start ()$/;"	f	class:IlmThread::Thread
start	3rdparty/ilmbase-1.0.2/IlmThreadWin32.cpp	/^Thread::start ()$/;"	f	class:IlmThread::Thread
start	3rdparty/openexr-1.7.0/ImfB44Compressor.cpp	/^    unsigned short *	start;$/;"	m	struct:Imf::B44Compressor::ChannelData	file:
start	3rdparty/openexr-1.7.0/ImfPizCompressor.cpp	/^    unsigned short *	start;$/;"	m	struct:Imf::PizCompressor::ChannelData	file:
start	3rdparty/zlib-1.2.5/gzguts.h	/^    z_off64_t start;        \/* where the gzip data started, for rewinding *\/$/;"	m	struct:__anon74
startFace	shapes/loopsubdiv.cpp	/^    SDFace *startFace;$/;"	m	struct:SDVertex	file:
startTime	core/transform.h	/^    const float startTime, endTime;$/;"	m	class:AnimatedTransform
startTransform	core/transform.h	/^    const Transform *startTransform, *endTransform;$/;"	m	class:AnimatedTransform
start_props_ply	tools/ply.c	/^void start_props_ply (PlyFile *ply, PlyPropRules *rules)$/;"	f
stat_desc	3rdparty/zlib-1.2.5/deflate.h	/^    static_tree_desc *stat_desc; \/* the corresponding static tree *\/$/;"	m	struct:tree_desc_s
state	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^	int			state;$/;"	m	struct:__anon57	file:
state	3rdparty/tiff-3.9.4/tif_zip.c	/^	int		state;			\/* state flags *\/$/;"	m	struct:__anon59	file:
state	3rdparty/zlib-1.2.5/zlib.h	/^    struct internal_state FAR *state; \/* not visible by applications *\/$/;"	m	struct:z_stream_s	typeref:struct:z_stream_s::FAR
staticInitialize	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^staticInitialize ()$/;"	f	namespace:Imf
staticState	3rdparty/ilmbase-1.0.2/ImathRandom.cpp	/^unsigned short staticState[3] = {0, 0, 0};$/;"	m	namespace:Imath::__anon11	file:
staticTypeName	3rdparty/openexr-1.7.0/ImfBoxAttribute.cpp	/^Box2fAttribute::staticTypeName ()$/;"	f	class:Imf::Box2fAttribute
staticTypeName	3rdparty/openexr-1.7.0/ImfBoxAttribute.cpp	/^Box2iAttribute::staticTypeName ()$/;"	f	class:Imf::Box2iAttribute
staticTypeName	3rdparty/openexr-1.7.0/ImfChannelListAttribute.cpp	/^ChannelListAttribute::staticTypeName ()$/;"	f	class:Imf::ChannelListAttribute
staticTypeName	3rdparty/openexr-1.7.0/ImfChromaticitiesAttribute.cpp	/^ChromaticitiesAttribute::staticTypeName ()$/;"	f	class:Imf::ChromaticitiesAttribute
staticTypeName	3rdparty/openexr-1.7.0/ImfCompressionAttribute.cpp	/^CompressionAttribute::staticTypeName ()$/;"	f	class:Imf::CompressionAttribute
staticTypeName	3rdparty/openexr-1.7.0/ImfDoubleAttribute.cpp	/^DoubleAttribute::staticTypeName ()$/;"	f	class:Imf::DoubleAttribute
staticTypeName	3rdparty/openexr-1.7.0/ImfEnvmapAttribute.cpp	/^EnvmapAttribute::staticTypeName ()$/;"	f	class:Imf::EnvmapAttribute
staticTypeName	3rdparty/openexr-1.7.0/ImfFloatAttribute.cpp	/^FloatAttribute::staticTypeName ()$/;"	f	class:Imf::FloatAttribute
staticTypeName	3rdparty/openexr-1.7.0/ImfIntAttribute.cpp	/^IntAttribute::staticTypeName ()$/;"	f	class:Imf::IntAttribute
staticTypeName	3rdparty/openexr-1.7.0/ImfKeyCodeAttribute.cpp	/^KeyCodeAttribute::staticTypeName ()$/;"	f	class:Imf::KeyCodeAttribute
staticTypeName	3rdparty/openexr-1.7.0/ImfLineOrderAttribute.cpp	/^LineOrderAttribute::staticTypeName ()$/;"	f	class:Imf::LineOrderAttribute
staticTypeName	3rdparty/openexr-1.7.0/ImfMatrixAttribute.cpp	/^M33dAttribute::staticTypeName ()$/;"	f	class:Imf::M33dAttribute
staticTypeName	3rdparty/openexr-1.7.0/ImfMatrixAttribute.cpp	/^M33fAttribute::staticTypeName ()$/;"	f	class:Imf::M33fAttribute
staticTypeName	3rdparty/openexr-1.7.0/ImfMatrixAttribute.cpp	/^M44dAttribute::staticTypeName ()$/;"	f	class:Imf::M44dAttribute
staticTypeName	3rdparty/openexr-1.7.0/ImfMatrixAttribute.cpp	/^M44fAttribute::staticTypeName ()$/;"	f	class:Imf::M44fAttribute
staticTypeName	3rdparty/openexr-1.7.0/ImfPreviewImageAttribute.cpp	/^PreviewImageAttribute::staticTypeName ()$/;"	f	class:Imf::PreviewImageAttribute
staticTypeName	3rdparty/openexr-1.7.0/ImfRationalAttribute.cpp	/^RationalAttribute::staticTypeName ()$/;"	f	class:Imf::RationalAttribute
staticTypeName	3rdparty/openexr-1.7.0/ImfStringAttribute.cpp	/^StringAttribute::staticTypeName ()$/;"	f	class:Imf::StringAttribute
staticTypeName	3rdparty/openexr-1.7.0/ImfStringVectorAttribute.cpp	/^StringVectorAttribute::staticTypeName ()$/;"	f	class:Imf::StringVectorAttribute
staticTypeName	3rdparty/openexr-1.7.0/ImfTileDescriptionAttribute.cpp	/^TileDescriptionAttribute::staticTypeName ()$/;"	f	class:Imf::TileDescriptionAttribute
staticTypeName	3rdparty/openexr-1.7.0/ImfTimeCodeAttribute.cpp	/^TimeCodeAttribute::staticTypeName ()$/;"	f	class:Imf::TimeCodeAttribute
staticTypeName	3rdparty/openexr-1.7.0/ImfVecAttribute.cpp	/^V2dAttribute::staticTypeName ()$/;"	f	class:Imf::V2dAttribute
staticTypeName	3rdparty/openexr-1.7.0/ImfVecAttribute.cpp	/^V2fAttribute::staticTypeName ()$/;"	f	class:Imf::V2fAttribute
staticTypeName	3rdparty/openexr-1.7.0/ImfVecAttribute.cpp	/^V2iAttribute::staticTypeName ()$/;"	f	class:Imf::V2iAttribute
staticTypeName	3rdparty/openexr-1.7.0/ImfVecAttribute.cpp	/^V3dAttribute::staticTypeName ()$/;"	f	class:Imf::V3dAttribute
staticTypeName	3rdparty/openexr-1.7.0/ImfVecAttribute.cpp	/^V3fAttribute::staticTypeName ()$/;"	f	class:Imf::V3fAttribute
staticTypeName	3rdparty/openexr-1.7.0/ImfVecAttribute.cpp	/^V3iAttribute::staticTypeName ()$/;"	f	class:Imf::V3iAttribute
static_bl_desc	3rdparty/zlib-1.2.5/trees.c	/^local static_tree_desc  static_bl_desc =$/;"	v
static_d_desc	3rdparty/zlib-1.2.5/trees.c	/^local static_tree_desc  static_d_desc =$/;"	v
static_dtree	3rdparty/zlib-1.2.5/trees.c	/^local ct_data static_dtree[D_CODES];$/;"	v
static_dtree	3rdparty/zlib-1.2.5/trees.h	/^local const ct_data static_dtree[D_CODES] = {$/;"	v
static_l_desc	3rdparty/zlib-1.2.5/trees.c	/^local static_tree_desc  static_l_desc =$/;"	v
static_len	3rdparty/zlib-1.2.5/deflate.h	/^    ulg static_len;     \/* bit length of current block with static trees *\/$/;"	m	struct:internal_state
static_ltree	3rdparty/zlib-1.2.5/trees.c	/^local ct_data static_ltree[L_CODES+2];$/;"	v
static_ltree	3rdparty/zlib-1.2.5/trees.h	/^local const ct_data static_ltree[L_CODES+2] = {$/;"	v
static_tree	3rdparty/zlib-1.2.5/trees.c	/^    const ct_data *static_tree;  \/* static tree or NULL *\/$/;"	m	struct:static_tree_desc_s	file:
static_tree_desc	3rdparty/zlib-1.2.5/deflate.h	/^typedef struct static_tree_desc_s  static_tree_desc;$/;"	t	typeref:struct:static_tree_desc_s
static_tree_desc_s	3rdparty/zlib-1.2.5/deflate.c	/^struct static_tree_desc_s {int dummy;}; \/* for buggy compilers *\/$/;"	s	file:
static_tree_desc_s	3rdparty/zlib-1.2.5/trees.c	/^struct static_tree_desc_s {$/;"	s	file:
status	3rdparty/zlib-1.2.5/deflate.h	/^    int   status;        \/* as the name implies *\/$/;"	m	struct:internal_state
stb_image_write_test	core/stb_image_write.h	/^typedef int stb_image_write_test[sizeof(stbiw_uint32)==4 ? 1 : -1];$/;"	t
stbi__ZHASH	core/stb_image_write.h	/^#define stbi__ZHASH /;"	d
stbi__crc32	core/stb_image_write.h	/^unsigned int stbi__crc32(unsigned char *buffer, int len)$/;"	f
stbi__paeth	core/stb_image_write.h	/^static unsigned char stbi__paeth(int a, int b, int c)$/;"	f
stbi__sbcount	core/stb_image_write.h	/^#define stbi__sbcount(/;"	d
stbi__sbfree	core/stb_image_write.h	/^#define stbi__sbfree(/;"	d
stbi__sbgrow	core/stb_image_write.h	/^#define stbi__sbgrow(/;"	d
stbi__sbgrowf	core/stb_image_write.h	/^static void *stbi__sbgrowf(void **arr, int increment, int itemsize)$/;"	f
stbi__sbm	core/stb_image_write.h	/^#define stbi__sbm(/;"	d
stbi__sbmaybegrow	core/stb_image_write.h	/^#define stbi__sbmaybegrow(/;"	d
stbi__sbn	core/stb_image_write.h	/^#define stbi__sbn(/;"	d
stbi__sbneedgrow	core/stb_image_write.h	/^#define stbi__sbneedgrow(/;"	d
stbi__sbpush	core/stb_image_write.h	/^#define stbi__sbpush(/;"	d
stbi__sbraw	core/stb_image_write.h	/^#define stbi__sbraw(/;"	d
stbi__wp32	core/stb_image_write.h	/^#define stbi__wp32(/;"	d
stbi__wpcrc	core/stb_image_write.h	/^static void stbi__wpcrc(unsigned char **data, int len)$/;"	f
stbi__wpng4	core/stb_image_write.h	/^#define stbi__wpng4(/;"	d
stbi__wptag	core/stb_image_write.h	/^#define stbi__wptag(/;"	d
stbi__zhash	core/stb_image_write.h	/^static unsigned int stbi__zhash(unsigned char *data)$/;"	f
stbi__zlib_add	core/stb_image_write.h	/^#define stbi__zlib_add(/;"	d
stbi__zlib_bitrev	core/stb_image_write.h	/^static int stbi__zlib_bitrev(int code, int codebits)$/;"	f
stbi__zlib_countm	core/stb_image_write.h	/^static unsigned int stbi__zlib_countm(unsigned char *a, unsigned char *b, int limit)$/;"	f
stbi__zlib_flush	core/stb_image_write.h	/^#define stbi__zlib_flush(/;"	d
stbi__zlib_flushf	core/stb_image_write.h	/^static unsigned char *stbi__zlib_flushf(unsigned char *data, unsigned int *bitbuffer, int *bitcount)$/;"	f
stbi__zlib_huff	core/stb_image_write.h	/^#define stbi__zlib_huff(/;"	d
stbi__zlib_huff1	core/stb_image_write.h	/^#define stbi__zlib_huff1(/;"	d
stbi__zlib_huff2	core/stb_image_write.h	/^#define stbi__zlib_huff2(/;"	d
stbi__zlib_huff3	core/stb_image_write.h	/^#define stbi__zlib_huff3(/;"	d
stbi__zlib_huff4	core/stb_image_write.h	/^#define stbi__zlib_huff4(/;"	d
stbi__zlib_huffa	core/stb_image_write.h	/^#define stbi__zlib_huffa(/;"	d
stbi__zlib_huffb	core/stb_image_write.h	/^#define stbi__zlib_huffb(/;"	d
stbi_write_bmp	core/stb_image_write.h	/^int stbi_write_bmp(char const *filename, int x, int y, int comp, const void *data)$/;"	f
stbi_write_png	core/stb_image_write.h	/^int stbi_write_png(char const *filename, int x, int y, int comp, const void *data, int stride_bytes)$/;"	f
stbi_write_png_to_mem	core/stb_image_write.h	/^unsigned char *stbi_write_png_to_mem(unsigned char *pixels, int stride_bytes, int x, int y, int n, int *out_len)$/;"	f
stbi_write_tga	core/stb_image_write.h	/^int stbi_write_tga(char const *filename, int x, int y, int comp, const void *data)$/;"	f
stbi_zlib_compress	core/stb_image_write.h	/^unsigned char * stbi_zlib_compress(unsigned char *data, int data_len, int *out_len, int quality)$/;"	f
stbiw_uint32	core/stb_image_write.h	/^typedef unsigned int stbiw_uint32;$/;"	t
std	3rdparty/ilmbase-1.0.2/halfLimits.h	/^namespace std {$/;"	n
std_empty_output_buffer	3rdparty/tiff-3.9.4/tif_jpeg.c	/^std_empty_output_buffer(j_compress_ptr cinfo)$/;"	f	file:
std_fill_input_buffer	3rdparty/tiff-3.9.4/tif_jpeg.c	/^std_fill_input_buffer(j_decompress_ptr cinfo)$/;"	f	file:
std_init_destination	3rdparty/tiff-3.9.4/tif_jpeg.c	/^std_init_destination(j_compress_ptr cinfo)$/;"	f	file:
std_init_source	3rdparty/tiff-3.9.4/tif_jpeg.c	/^std_init_source(j_decompress_ptr cinfo)$/;"	f	file:
std_skip_input_data	3rdparty/tiff-3.9.4/tif_jpeg.c	/^std_skip_input_data(j_decompress_ptr cinfo, long num_bytes)$/;"	f	file:
std_term_destination	3rdparty/tiff-3.9.4/tif_jpeg.c	/^std_term_destination(j_compress_ptr cinfo)$/;"	f	file:
std_term_source	3rdparty/tiff-3.9.4/tif_jpeg.c	/^std_term_source(j_decompress_ptr cinfo)$/;"	f	file:
stepSize	integrators/emission.h	/^    float stepSize;$/;"	m	class:EmissionIntegrator
stepSize	integrators/single.h	/^    float stepSize;$/;"	m	class:SingleScatteringIntegrator
stop	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^ThreadPool::Data::stop ()$/;"	f	class:IlmThread::ThreadPool::Data
stopMutex	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^    Mutex stopMutex;                \/\/ mutual exclusion for stopping flag$/;"	m	struct:IlmThread::ThreadPool::Data	file:
stoponerr	3rdparty/tiff-3.9.4/tiffio.h	/^	int stoponerr;                          \/* stop on read error *\/$/;"	m	struct:_TIFFRGBAImage
stopped	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^ThreadPool::Data::stopped () const$/;"	f	class:IlmThread::ThreadPool::Data
stopping	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^    bool stopping;                  \/\/ flag indicating whether to stop threads$/;"	m	struct:IlmThread::ThreadPool::Data	file:
storage_class	3rdparty/tiff-3.9.4/mkg3states.c	/^static	char* storage_class = "";$/;"	v	file:
store_item	tools/ply.c	/^void store_item ($/;"	f
store_prop	tools/ply.h	/^  char *store_prop;             \/* flags: property wanted by user? *\/$/;"	m	struct:PlyElement
str	3rdparty/openexr-1.7.0/ImfStdIO.h	/^    std::string		str () const {return _os.str();}$/;"	f	class:Imf::StdOSStream
str_pos	core/pbrtlex.cpp	/^int str_pos;$/;"	v
strategy	3rdparty/zlib-1.2.5/deflate.h	/^    int strategy; \/* favor or force Huffman coding*\/$/;"	m	struct:internal_state
strategy	3rdparty/zlib-1.2.5/gzguts.h	/^    int strategy;           \/* compression strategy *\/$/;"	m	struct:__anon74
strategy	integrators/directlighting.h	/^    LightStrategy strategy;$/;"	m	class:DirectLightingIntegrator
stream	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^	z_stream		stream;$/;"	m	struct:__anon57	file:
stream	3rdparty/tiff-3.9.4/tif_zip.c	/^	z_stream	stream;$/;"	m	struct:__anon59	file:
streq	3rdparty/tiff-3.9.4/mkg3states.c	/^#define	streq(/;"	d	file:
streq	3rdparty/tiff-3.9.4/tiffiop.h	/^#define    streq(/;"	d
stride	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^	uint16			stride;$/;"	m	struct:__anon57	file:
stride	3rdparty/tiff-3.9.4/tif_predict.h	/^	int		stride;		\/* sample stride over data *\/$/;"	m	struct:__anon58
strile_length	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint32 strile_length;$/;"	m	struct:__anon55	file:
strile_length_total	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint32 strile_length_total;$/;"	m	struct:__anon55	file:
strile_width	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint32 strile_width;$/;"	m	struct:__anon55	file:
string	core/pbrtparse.cpp	/^char string[1024];$/;"	m	union:YYSTYPE	file:
string	core/pbrtparse.hh	/^char string[1024];$/;"	m	union:YYSTYPE
strings	core/paramset.h	/^    vector<Reference<ParamSetItem<string> > > strings;$/;"	m	class:ParamSet
strm	3rdparty/zlib-1.2.5/deflate.h	/^    z_streamp strm;      \/* pointer back to this zlib stream *\/$/;"	m	struct:internal_state
strm	3rdparty/zlib-1.2.5/gzguts.h	/^    z_stream strm;          \/* stream structure in-place (not a pointer) *\/$/;"	m	struct:__anon74
strstart	3rdparty/zlib-1.2.5/deflate.h	/^    uInt strstart;               \/* start of string to insert *\/$/;"	m	struct:internal_state
strwinerror	3rdparty/zlib-1.2.5/minigzip.c	/^static char *strwinerror (error)$/;"	f	file:
su	core/texture.h	/^    float su, sv, du, dv;$/;"	m	class:UVMapping2D
subaddress	3rdparty/tiff-3.9.4/tif_fax3.c	/^	char*	subaddress;		\/* subaddress string *\/$/;"	m	struct:__anon43	file:
subaddress	3rdparty/tiff-3.9.4/tif_jbig.c	/^        char*   subaddress;     \/* subaddress string                          *\/$/;"	m	struct:__anon47	file:
subaddress	3rdparty/tiff-3.9.4/tif_jpeg.c	/^	char*		subaddress;	\/* subaddress string *\/$/;"	m	struct:__anon48	file:
subsampling_convert_cbbuf	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8* subsampling_convert_cbbuf;$/;"	m	struct:__anon55	file:
subsampling_convert_cbuflen	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint32 subsampling_convert_cbuflen;$/;"	m	struct:__anon55	file:
subsampling_convert_clinelen	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint32 subsampling_convert_clinelen;$/;"	m	struct:__anon55	file:
subsampling_convert_clinelenout	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint32 subsampling_convert_clinelenout;$/;"	m	struct:__anon55	file:
subsampling_convert_clines	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint32 subsampling_convert_clines;$/;"	m	struct:__anon55	file:
subsampling_convert_crbuf	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8* subsampling_convert_crbuf;$/;"	m	struct:__anon55	file:
subsampling_convert_log	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8 subsampling_convert_log;$/;"	m	struct:__anon55	file:
subsampling_convert_state	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint32 subsampling_convert_state;$/;"	m	struct:__anon55	file:
subsampling_convert_ybuf	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8* subsampling_convert_ybuf;$/;"	m	struct:__anon55	file:
subsampling_convert_ybuflen	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint32 subsampling_convert_ybuflen;$/;"	m	struct:__anon55	file:
subsampling_convert_ycbcrbuf	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8* subsampling_convert_ycbcrbuf;$/;"	m	struct:__anon55	file:
subsampling_convert_ycbcrbuflen	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint32 subsampling_convert_ycbcrbuflen;$/;"	m	struct:__anon55	file:
subsampling_convert_ycbcrimage	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8** subsampling_convert_ycbcrimage;$/;"	m	struct:__anon55	file:
subsampling_convert_ycbcrimagelen	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint32 subsampling_convert_ycbcrimagelen;$/;"	m	struct:__anon55	file:
subsampling_convert_ylinelen	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint32 subsampling_convert_ylinelen;$/;"	m	struct:__anon55	file:
subsampling_convert_ylines	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint32 subsampling_convert_ylines;$/;"	m	struct:__anon55	file:
subsampling_force_desubsampling_inside_decompression	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8 subsampling_force_desubsampling_inside_decompression;$/;"	m	struct:__anon55	file:
subsampling_hor	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8 subsampling_hor;$/;"	m	struct:__anon55	file:
subsampling_tag	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8 subsampling_tag;$/;"	m	struct:__anon55	file:
subsampling_ver	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8 subsampling_ver;$/;"	m	struct:__anon55	file:
subsamplingcorrect	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8 subsamplingcorrect;$/;"	m	struct:__anon55	file:
subsamplingcorrect_done	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8 subsamplingcorrect_done;$/;"	m	struct:__anon55	file:
succd	3rdparty/ilmbase-1.0.2/ImathFun.cpp	/^succd (double d)$/;"	f	namespace:Imath
succf	3rdparty/ilmbase-1.0.2/ImathFun.cpp	/^succf (float f)$/;"	f	namespace:Imath
sumArea	core/light.h	/^    float sumArea;$/;"	m	class:ShapeSet
sumArea	integrators/dipolesubsurface.cpp	/^    float sumArea;$/;"	m	struct:SubsurfaceOctreeNode	file:
sumWeights	core/reflection.cpp	/^    float sumWeights;$/;"	m	struct:IrregIsoProc	file:
sumWt	integrators/irradiancecache.cpp	/^    float minWeight, cosMaxSampleAngleDifference, sumWt;$/;"	m	struct:IrradProcess	file:
summarize	3rdparty/tiff-3.9.4/tif_strip.c	/^summarize(TIFF* tif, size_t summand1, size_t summand2, const char* where)$/;"	f	file:
summarize	3rdparty/tiff-3.9.4/tif_tile.c	/^summarize(TIFF* tif, size_t summand1, size_t summand2, const char* where)$/;"	f	file:
supersamplePixel	samplers/adaptive.h	/^    bool supersamplePixel;$/;"	m	class:AdaptiveSampler
supportsFlags	3rdparty/openexr-1.7.0/ImfVersion.h	/^inline bool  supportsFlags (int flags)	{return !(flags & ~ALL_FLAGS);}$/;"	f	namespace:Imf
supportsThreads	3rdparty/ilmbase-1.0.2/IlmThread.cpp	/^supportsThreads ()$/;"	f	namespace:IlmThread
supportsThreads	3rdparty/ilmbase-1.0.2/IlmThreadPosix.cpp	/^supportsThreads ()$/;"	f	namespace:IlmThread
supportsThreads	3rdparty/ilmbase-1.0.2/IlmThreadWin32.cpp	/^supportsThreads ()$/;"	f	namespace:IlmThread
surfaceIntegrator	renderers/createprobes.h	/^    SurfaceIntegrator *surfaceIntegrator;$/;"	m	class:CreateRadianceProbes
surfaceIntegrator	renderers/samplerrenderer.h	/^    SurfaceIntegrator *surfaceIntegrator;$/;"	m	class:SamplerRenderer
surfacePoints	renderers/createprobes.cpp	/^    const vector<Point> &surfacePoints;$/;"	m	class:CreateRadProbeTask	file:
surfacePoints	renderers/surfacepoints.cpp	/^    vector<SurfacePoint> &surfacePoints;$/;"	m	class:SurfacePointTask	file:
sv	core/texture.h	/^    float su, sv, du, dv;$/;"	m	class:UVMapping2D
swabHorAcc16	3rdparty/tiff-3.9.4/tif_predict.c	/^swabHorAcc16(TIFF* tif, tidata_t cp0, tsize_t cc)$/;"	f	file:
swabHorAcc32	3rdparty/tiff-3.9.4/tif_predict.c	/^swabHorAcc32(TIFF* tif, tidata_t cp0, tsize_t cc)$/;"	f	file:
syncsearch	3rdparty/zlib-1.2.5/inflate.c	/^local unsigned syncsearch(have, buf, len)$/;"	f
t	accelerators/kdtreeaccel.cpp	/^    float t;$/;"	m	struct:BoundEdge	file:
t	core/api.cpp	/^    Transform t[MAX_TRANSFORMS];$/;"	m	struct:TransformSet	file:
t0	renderers/metropolis.cpp	/^    float t0, t1;$/;"	m	class:MLTTask	file:
t1	renderers/metropolis.cpp	/^    float t0, t1;$/;"	m	class:MLTTask	file:
tFile	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^    TiledInputFile *	tFile;$/;"	m	struct:Imf::InputFile::Data	file:
tFile	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^InputFile::tFile()$/;"	f	class:Imf::InputFile
tFileBuffer	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^    FrameBuffer		tFileBuffer;$/;"	m	struct:Imf::InputFile::Data	file:
table	3rdparty/zlib-1.2.5/zutil.c	/^local ptr_table table[MAX_PTR];$/;"	v
tableOffset	samplers/bestcandidate.h	/^    int tableOffset;$/;"	m	class:BestCandidateSampler
tableTooLong	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^tableTooLong ()$/;"	f	namespace:Imf::__anon20
tableWidth	samplers/bestcandidate.h	/^    float tableWidth;$/;"	m	class:BestCandidateSampler
tableentry	3rdparty/tiff-3.9.4/t4.h	/^typedef struct tableentry {$/;"	s
tableentry	3rdparty/tiff-3.9.4/t4.h	/^} tableentry;$/;"	t	typeref:struct:tableentry
tables_empty_output_buffer	3rdparty/tiff-3.9.4/tif_jpeg.c	/^tables_empty_output_buffer(j_compress_ptr cinfo)$/;"	f	file:
tables_init_destination	3rdparty/tiff-3.9.4/tif_jpeg.c	/^tables_init_destination(j_compress_ptr cinfo)$/;"	f	file:
tables_init_source	3rdparty/tiff-3.9.4/tif_jpeg.c	/^tables_init_source(j_decompress_ptr cinfo)$/;"	f	file:
tables_term_destination	3rdparty/tiff-3.9.4/tif_jpeg.c	/^tables_term_destination(j_compress_ptr cinfo)$/;"	f	file:
tag	3rdparty/tiff-3.9.4/tif_fax3.c	/^	Ttag    tag;			\/* encoding state *\/$/;"	m	struct:__anon45	file:
tagCompare	3rdparty/tiff-3.9.4/tif_dirinfo.c	/^tagCompare(const void* a, const void* b)$/;"	f	file:
tagNameCompare	3rdparty/tiff-3.9.4/tif_dirinfo.c	/^tagNameCompare(const void* a, const void* b)$/;"	f	file:
tan	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static T	tan   (T x)		{return ::tan (double(x));}$/;"	f	struct:Imath::Math
tan	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static float	tan   (float x)			{return ::tanf (x);}$/;"	f	struct:Imath::Math
tanh	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static T	tanh  (T x)		{return ::tanh (double(x));}$/;"	f	struct:Imath::Math
tanh	3rdparty/ilmbase-1.0.2/ImathMath.h	/^   static float	tanh  (float x)			{return ::tanhf (x);}$/;"	f	struct:Imath::Math
taskCount	renderers/samplerrenderer.h	/^    int taskNum, taskCount;$/;"	m	class:SamplerRendererTask
taskEntry	core/parallel.cpp	/^static DWORD WINAPI taskEntry(LPVOID arg) {$/;"	f	file:
taskMutex	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^    Mutex taskMutex;                \/\/ mutual exclusion for the tasks list$/;"	m	struct:IlmThread::ThreadPool::Data	file:
taskNum	integrators/irradiancecache.cpp	/^    int taskNum, numTasks;$/;"	m	struct:IrradiancePrimeTask	file:
taskNum	integrators/photonmap.cpp	/^    int taskNum;$/;"	m	class:PhotonShootingTask	file:
taskNum	integrators/photonmap.cpp	/^    uint32_t taskNum, numTasks;$/;"	m	class:ComputeRadianceTask	file:
taskNum	renderers/metropolis.cpp	/^    uint32_t progressUpdateFrequency, taskNum;$/;"	m	class:MLTTask	file:
taskNum	renderers/samplerrenderer.h	/^    int taskNum, taskCount;$/;"	m	class:SamplerRendererTask
taskNum	renderers/surfacepoints.cpp	/^    int taskNum;$/;"	m	class:SurfacePointTask	file:
taskQueue	core/parallel.cpp	/^static std::vector<Task *> taskQueue;$/;"	v	file:
taskQueueMutex	core/parallel.cpp	/^static Mutex *taskQueueMutex = Mutex::Create();$/;"	v	file:
taskSemaphore	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^    Semaphore taskSemaphore;        \/\/ threads wait on this for ready tasks$/;"	m	struct:IlmThread::ThreadPool::Data	file:
tasks	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^    list<Task*> tasks;              \/\/ the list of tasks to execute$/;"	m	struct:IlmThread::ThreadPool::Data	file:
tasksRunningCondition	core/parallel.cpp	/^static ConditionVariable *tasksRunningCondition;$/;"	v	file:
tau	core/volume.cpp	/^Spectrum AggregateVolume::tau(const Ray &ray, float step, float offset) const {$/;"	f	class:AggregateVolume
tau	core/volume.cpp	/^Spectrum DensityRegion::tau(const Ray &r, float stepSize,$/;"	f	class:DensityRegion
tau	filters/sinc.h	/^    const float tau;$/;"	m	class:LanczosSincFilter
tau	volumes/homogeneous.h	/^    Spectrum tau(const Ray &ray, float, float) const {$/;"	f	class:HomogeneousVolumeDensity
tauSampleOffset	integrators/emission.h	/^    int tauSampleOffset, scatterSampleOffset;$/;"	m	class:EmissionIntegrator
tauSampleOffset	integrators/single.h	/^    int tauSampleOffset, scatterSampleOffset;$/;"	m	class:SingleScatteringIntegrator
tbuf	3rdparty/tiff-3.9.4/tif_luv.c	/^	tidata_t*		tbuf;		\/* translation buffer *\/$/;"	m	struct:logLuvState	file:
tbuf	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^	uint16			*tbuf; $/;"	m	struct:__anon57	file:
tbuflen	3rdparty/tiff-3.9.4/tif_luv.c	/^	int			tbuflen;	\/* buffer length *\/$/;"	m	struct:logLuvState	file:
td_bitspersample	3rdparty/tiff-3.9.4/tif_dir.h	/^	uint16  td_bitspersample;$/;"	m	struct:__anon42
td_colormap	3rdparty/tiff-3.9.4/tif_dir.h	/^	uint16* td_colormap[3];$/;"	m	struct:__anon42
td_compression	3rdparty/tiff-3.9.4/tif_dir.h	/^	uint16  td_compression;$/;"	m	struct:__anon42
td_customValueCount	3rdparty/tiff-3.9.4/tif_dir.h	/^	int     td_customValueCount;$/;"	m	struct:__anon42
td_customValues	3rdparty/tiff-3.9.4/tif_dir.h	/^        TIFFTagValue *td_customValues;$/;"	m	struct:__anon42
td_extrasamples	3rdparty/tiff-3.9.4/tif_dir.h	/^	uint16  td_extrasamples;$/;"	m	struct:__anon42
td_fieldsset	3rdparty/tiff-3.9.4/tif_dir.h	/^	unsigned long	td_fieldsset[FIELD_SETLONGS];$/;"	m	struct:__anon42
td_fillorder	3rdparty/tiff-3.9.4/tif_dir.h	/^	uint16  td_fillorder;$/;"	m	struct:__anon42
td_halftonehints	3rdparty/tiff-3.9.4/tif_dir.h	/^	uint16  td_halftonehints[2];$/;"	m	struct:__anon42
td_imagedepth	3rdparty/tiff-3.9.4/tif_dir.h	/^	uint32  td_imagewidth, td_imagelength, td_imagedepth;$/;"	m	struct:__anon42
td_imagelength	3rdparty/tiff-3.9.4/tif_dir.h	/^	uint32  td_imagewidth, td_imagelength, td_imagedepth;$/;"	m	struct:__anon42
td_imagewidth	3rdparty/tiff-3.9.4/tif_dir.h	/^	uint32  td_imagewidth, td_imagelength, td_imagedepth;$/;"	m	struct:__anon42
td_inknames	3rdparty/tiff-3.9.4/tif_dir.h	/^	char*   td_inknames;$/;"	m	struct:__anon42
td_inknameslen	3rdparty/tiff-3.9.4/tif_dir.h	/^	int     td_inknameslen;$/;"	m	struct:__anon42
td_maxsamplevalue	3rdparty/tiff-3.9.4/tif_dir.h	/^	uint16  td_minsamplevalue, td_maxsamplevalue;$/;"	m	struct:__anon42
td_minsamplevalue	3rdparty/tiff-3.9.4/tif_dir.h	/^	uint16  td_minsamplevalue, td_maxsamplevalue;$/;"	m	struct:__anon42
td_nstrips	3rdparty/tiff-3.9.4/tif_dir.h	/^	tstrile_t td_nstrips;            \/* size of offset & bytecount arrays *\/$/;"	m	struct:__anon42
td_nsubifd	3rdparty/tiff-3.9.4/tif_dir.h	/^	uint16  td_nsubifd;$/;"	m	struct:__anon42
td_orientation	3rdparty/tiff-3.9.4/tif_dir.h	/^	uint16  td_orientation;$/;"	m	struct:__anon42
td_pagenumber	3rdparty/tiff-3.9.4/tif_dir.h	/^	uint16  td_pagenumber[2];$/;"	m	struct:__anon42
td_photometric	3rdparty/tiff-3.9.4/tif_dir.h	/^	uint16  td_photometric;$/;"	m	struct:__anon42
td_planarconfig	3rdparty/tiff-3.9.4/tif_dir.h	/^	uint16  td_planarconfig;$/;"	m	struct:__anon42
td_refblackwhite	3rdparty/tiff-3.9.4/tif_dir.h	/^	float*	td_refblackwhite;$/;"	m	struct:__anon42
td_resolutionunit	3rdparty/tiff-3.9.4/tif_dir.h	/^	uint16  td_resolutionunit;$/;"	m	struct:__anon42
td_rowsperstrip	3rdparty/tiff-3.9.4/tif_dir.h	/^	uint32  td_rowsperstrip;$/;"	m	struct:__anon42
td_sampleformat	3rdparty/tiff-3.9.4/tif_dir.h	/^	uint16  td_sampleformat;$/;"	m	struct:__anon42
td_sampleinfo	3rdparty/tiff-3.9.4/tif_dir.h	/^	uint16* td_sampleinfo;$/;"	m	struct:__anon42
td_samplesperpixel	3rdparty/tiff-3.9.4/tif_dir.h	/^	uint16  td_samplesperpixel;$/;"	m	struct:__anon42
td_smaxsamplevalue	3rdparty/tiff-3.9.4/tif_dir.h	/^	double  td_sminsamplevalue, td_smaxsamplevalue;$/;"	m	struct:__anon42
td_sminsamplevalue	3rdparty/tiff-3.9.4/tif_dir.h	/^	double  td_sminsamplevalue, td_smaxsamplevalue;$/;"	m	struct:__anon42
td_stripbytecount	3rdparty/tiff-3.9.4/tif_dir.h	/^	toff_t* td_stripbytecount;	 \/* FIXME: it should be tsize_t array *\/$/;"	m	struct:__anon42
td_stripbytecountsorted	3rdparty/tiff-3.9.4/tif_dir.h	/^	int     td_stripbytecountsorted; \/* is the bytecount array sorted ascending? *\/$/;"	m	struct:__anon42
td_stripoffset	3rdparty/tiff-3.9.4/tif_dir.h	/^	toff_t* td_stripoffset;$/;"	m	struct:__anon42
td_stripsperimage	3rdparty/tiff-3.9.4/tif_dir.h	/^	tstrile_t td_stripsperimage;$/;"	m	struct:__anon42
td_subfiletype	3rdparty/tiff-3.9.4/tif_dir.h	/^	uint32  td_subfiletype;$/;"	m	struct:__anon42
td_subifd	3rdparty/tiff-3.9.4/tif_dir.h	/^	uint32* td_subifd;$/;"	m	struct:__anon42
td_threshholding	3rdparty/tiff-3.9.4/tif_dir.h	/^	uint16  td_threshholding;$/;"	m	struct:__anon42
td_tiledepth	3rdparty/tiff-3.9.4/tif_dir.h	/^	uint32  td_tilewidth, td_tilelength, td_tiledepth;$/;"	m	struct:__anon42
td_tilelength	3rdparty/tiff-3.9.4/tif_dir.h	/^	uint32  td_tilewidth, td_tilelength, td_tiledepth;$/;"	m	struct:__anon42
td_tilewidth	3rdparty/tiff-3.9.4/tif_dir.h	/^	uint32  td_tilewidth, td_tilelength, td_tiledepth;$/;"	m	struct:__anon42
td_transferfunction	3rdparty/tiff-3.9.4/tif_dir.h	/^	uint16* td_transferfunction[3];$/;"	m	struct:__anon42
td_xposition	3rdparty/tiff-3.9.4/tif_dir.h	/^	float   td_xposition, td_yposition;$/;"	m	struct:__anon42
td_xresolution	3rdparty/tiff-3.9.4/tif_dir.h	/^	float   td_xresolution, td_yresolution;$/;"	m	struct:__anon42
td_ycbcrpositioning	3rdparty/tiff-3.9.4/tif_dir.h	/^	uint16  td_ycbcrpositioning;$/;"	m	struct:__anon42
td_ycbcrsubsampling	3rdparty/tiff-3.9.4/tif_dir.h	/^	uint16  td_ycbcrsubsampling[2];$/;"	m	struct:__anon42
td_yposition	3rdparty/tiff-3.9.4/tif_dir.h	/^	float   td_xposition, td_yposition;$/;"	m	struct:__anon42
td_yresolution	3rdparty/tiff-3.9.4/tif_dir.h	/^	float   td_xresolution, td_yresolution;$/;"	m	struct:__anon42
tdata_t	3rdparty/tiff-3.9.4/tiffio.h	/^typedef void* tdata_t;          \/* image data ref *\/$/;"	t
tdir_count	3rdparty/tiff-3.9.4/tiff.h	/^	uint32		tdir_count;	\/* number of items; length in spec *\/$/;"	m	struct:__anon61
tdir_offset	3rdparty/tiff-3.9.4/tiff.h	/^	uint32		tdir_offset;	\/* byte offset to field data *\/$/;"	m	struct:__anon61
tdir_t	3rdparty/tiff-3.9.4/tiffio.h	/^typedef uint16 tdir_t;          \/* directory index *\/$/;"	t
tdir_tag	3rdparty/tiff-3.9.4/tiff.h	/^	uint16		tdir_tag;	\/* see below *\/$/;"	m	struct:__anon61
tdir_type	3rdparty/tiff-3.9.4/tiff.h	/^	uint16		tdir_type;	\/* data type; see below *\/$/;"	m	struct:__anon61
tellg	3rdparty/openexr-1.7.0/ImfStdIO.cpp	/^StdIFStream::tellg ()$/;"	f	class:Imf::StdIFStream
tellp	3rdparty/openexr-1.7.0/ImfStdIO.cpp	/^StdOFStream::tellp ()$/;"	f	class:Imf::StdOFStream
tellp	3rdparty/openexr-1.7.0/ImfStdIO.cpp	/^StdOSStream::tellp ()$/;"	f	class:Imf::StdOSStream
test_compress	3rdparty/zlib-1.2.5/example.c	/^void test_compress(compr, comprLen, uncompr, uncomprLen)$/;"	f
test_deflate	3rdparty/zlib-1.2.5/example.c	/^void test_deflate(compr, comprLen)$/;"	f
test_dict_deflate	3rdparty/zlib-1.2.5/example.c	/^void test_dict_deflate(compr, comprLen)$/;"	f
test_dict_inflate	3rdparty/zlib-1.2.5/example.c	/^void test_dict_inflate(compr, comprLen, uncompr, uncomprLen)$/;"	f
test_flush	3rdparty/zlib-1.2.5/example.c	/^void test_flush(compr, comprLen)$/;"	f
test_gzio	3rdparty/zlib-1.2.5/example.c	/^void test_gzio(fname, uncompr, uncomprLen)$/;"	f
test_inflate	3rdparty/zlib-1.2.5/example.c	/^void test_inflate(compr, comprLen, uncompr, uncomprLen)$/;"	f
test_large_deflate	3rdparty/zlib-1.2.5/example.c	/^void test_large_deflate(compr, comprLen, uncompr, uncomprLen)$/;"	f
test_large_inflate	3rdparty/zlib-1.2.5/example.c	/^void test_large_inflate(compr, comprLen, uncompr, uncomprLen)$/;"	f
test_sync	3rdparty/zlib-1.2.5/example.c	/^void test_sync(compr, comprLen, uncompr, uncomprLen)$/;"	f
tex1	textures/checkerboard.h	/^    Reference<Texture<T> > tex1, tex2;$/;"	m	class:Checkerboard2DTexture
tex1	textures/checkerboard.h	/^    Reference<Texture<T> > tex1, tex2;$/;"	m	class:Checkerboard3DTexture
tex1	textures/mix.h	/^    Reference<Texture<T> > tex1, tex2;$/;"	m	class:MixTexture
tex1	textures/scale.h	/^    Reference<Texture<T1> > tex1;$/;"	m	class:ScaleTexture
tex2	textures/checkerboard.h	/^    Reference<Texture<T> > tex1, tex2;$/;"	m	class:Checkerboard2DTexture
tex2	textures/checkerboard.h	/^    Reference<Texture<T> > tex1, tex2;$/;"	m	class:Checkerboard3DTexture
tex2	textures/mix.h	/^    Reference<Texture<T> > tex1, tex2;$/;"	m	class:MixTexture
tex2	textures/scale.h	/^    Reference<Texture<T2> > tex2;$/;"	m	class:ScaleTexture
texcoords	tools/obj2pbrt.cpp	/^    std::vector<float>          texcoords;$/;"	m	struct:tinyobj::__anon91	file:
text	3rdparty/openexr-1.7.0/ImfName.h	/^    const char *	text () const		{return _text;}$/;"	f	class:Imf::Name
text	3rdparty/zlib-1.2.5/zlib.h	/^    int     text;       \/* true if compressed data believed to be text *\/$/;"	m	struct:gz_header_s
textures	core/paramset.h	/^    vector<Reference<ParamSetItem<string> > > textures;$/;"	m	class:ParamSet
textures	textures/imagemap.cpp	/^             MIPMap<Tmemory> *> ImageTexture<Tmemory, Treturn>::textures;$/;"	m	class:ImageTexture	file:
textures	textures/imagemap.h	/^    static std::map<TexInfo, MIPMap<Tmemory> *> textures;$/;"	m	class:ImageTexture
tfunc	3rdparty/tiff-3.9.4/tif_luv.c	/^	void (*tfunc)(LogLuvState*, tidata_t, int);$/;"	m	struct:logLuvState	file:
tga_color_unmap	core/targa.c	/^tga_result tga_color_unmap(tga_image *img)$/;"	f
tga_convert_depth	core/targa.c	/^tga_result tga_convert_depth(tga_image *img, const uint8_t bits)$/;"	f
tga_desaturate	core/targa.c	/^tga_result tga_desaturate(tga_image *img, const int cr, const int cg,$/;"	f
tga_desaturate_avg	core/targa.c	/^tga_result tga_desaturate_avg(tga_image *img)$/;"	f
tga_desaturate_itu	core/targa.c	/^tga_result tga_desaturate_itu(tga_image *img)$/;"	f
tga_desaturate_rec_601_1	core/targa.c	/^tga_result tga_desaturate_rec_601_1(tga_image *img)$/;"	f
tga_desaturate_rec_709	core/targa.c	/^tga_result tga_desaturate_rec_709(tga_image *img)$/;"	f
tga_error	core/targa.c	/^const char *tga_error(const tga_result errcode)$/;"	f
tga_find_pixel	core/targa.c	/^uint8_t *tga_find_pixel(const tga_image *img, uint16_t x, uint16_t y)$/;"	f
tga_flip_horiz	core/targa.c	/^tga_result tga_flip_horiz(tga_image *img)$/;"	f
tga_flip_vert	core/targa.c	/^tga_result tga_flip_vert(tga_image *img)$/;"	f
tga_free_buffers	core/targa.c	/^void tga_free_buffers(tga_image *img)$/;"	f
tga_get_attribute_bits	core/targa.c	/^uint8_t tga_get_attribute_bits(const tga_image *tga)$/;"	f
tga_id	core/targa.c	/^static const char tga_id[] =$/;"	v	file:
tga_id_length	core/targa.c	/^static const size_t tga_id_length = 26; \/* tga_id + \\0 *\/$/;"	v	file:
tga_image	core/targa.h	/^} tga_image;$/;"	t	typeref:struct:__anon86
tga_is_colormapped	core/targa.c	/^int tga_is_colormapped(const tga_image *tga)$/;"	f
tga_is_mono	core/targa.c	/^int tga_is_mono(const tga_image *tga)$/;"	f
tga_is_right_to_left	core/targa.c	/^int tga_is_right_to_left(const tga_image *tga)$/;"	f
tga_is_rle	core/targa.c	/^int tga_is_rle(const tga_image *tga)$/;"	f
tga_is_top_to_bottom	core/targa.c	/^int tga_is_top_to_bottom(const tga_image *tga)$/;"	f
tga_pack_pixel	core/targa.c	/^tga_result tga_pack_pixel(uint8_t *dest, const uint8_t bits,$/;"	f
tga_read	core/targa.c	/^tga_result tga_read(tga_image *dest, const char *filename)$/;"	f
tga_read_from_FILE	core/targa.c	/^tga_result tga_read_from_FILE(tga_image *dest, FILE *fp)$/;"	f
tga_read_rle	core/targa.c	/^static tga_result tga_read_rle(tga_image *dest, FILE *fp)$/;"	f	file:
tga_result	core/targa.h	/^} tga_result;$/;"	t	typeref:enum:__anon87
tga_swap_red_blue	core/targa.c	/^tga_result tga_swap_red_blue(tga_image *img)$/;"	f
tga_unpack_pixel	core/targa.c	/^tga_result tga_unpack_pixel(const uint8_t *src, const uint8_t bits,$/;"	f
tga_write	core/targa.c	/^tga_result tga_write(const char *filename, const tga_image *src)$/;"	f
tga_write_bgr	core/targa.c	/^tga_result tga_write_bgr(const char *filename, uint8_t *image,$/;"	f
tga_write_bgr_rle	core/targa.c	/^tga_result tga_write_bgr_rle(const char *filename, uint8_t *image,$/;"	f
tga_write_mono	core/targa.c	/^tga_result tga_write_mono(const char *filename, uint8_t *image,$/;"	f
tga_write_mono_rle	core/targa.c	/^tga_result tga_write_mono_rle(const char *filename, uint8_t *image,$/;"	f
tga_write_rgb	core/targa.c	/^tga_result tga_write_rgb(const char *filename, uint8_t *image,$/;"	f
tga_write_rgb_rle	core/targa.c	/^tga_result tga_write_rgb_rle(const char *filename, uint8_t *image,$/;"	f
tga_write_row_RLE	core/targa.c	/^static tga_result tga_write_row_RLE(FILE *fp,$/;"	f	file:
tga_write_to_FILE	core/targa.c	/^tga_result tga_write_to_FILE(FILE *fp, const tga_image *src)$/;"	f
thandle_t	3rdparty/tiff-3.9.4/tiffio.h	/^DECLARE_HANDLE(thandle_t);	\/* Win32 file handle *\/$/;"	v
thandle_t	3rdparty/tiff-3.9.4/tiffio.h	/^typedef	HFILE thandle_t;	\/* client data handle *\/$/;"	t
thandle_t	3rdparty/tiff-3.9.4/tiffio.h	/^typedef	void* thandle_t;	\/* client data handle *\/$/;"	t
thetaMax	shapes/sphere.h	/^    float thetaMin, thetaMax;$/;"	m	class:Sphere
thetaMin	shapes/sphere.h	/^    float thetaMin, thetaMax;$/;"	m	class:Sphere
thetaPhiData	materials/measured.h	/^    KdTree<IrregIsotropicBRDFSample> *thetaPhiData;$/;"	m	class:MeasuredMaterial
threadLoop	3rdparty/ilmbase-1.0.2/IlmThreadPosix.cpp	/^threadLoop (void * t)$/;"	f	namespace:IlmThread::__anon3
threadLoop	3rdparty/ilmbase-1.0.2/IlmThreadWin32.cpp	/^threadLoop (void * t)$/;"	f	namespace:IlmThread::__anon5
threadMutex	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^    Mutex threadMutex;              \/\/ mutual exclusion for threads list$/;"	m	struct:IlmThread::ThreadPool::Data	file:
threadSemaphore	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^    Semaphore threadSemaphore;      \/\/ signaled when a thread starts executing$/;"	m	struct:IlmThread::ThreadPool::Data	file:
threads	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^    list<WorkerThread*> threads;    \/\/ the list of all threads$/;"	m	struct:IlmThread::ThreadPool::Data	file:
threads	core/parallel.cpp	/^static HANDLE *threads;$/;"	v	file:
threads	core/parallel.cpp	/^static pthread_t *threads;$/;"	v	file:
threebitdeltas	3rdparty/tiff-3.9.4/tif_thunder.c	/^static const int threebitdeltas[8] = { 0, 1, 2, 3, 0, -3, -2, -1 };$/;"	v	file:
throwBadMatrix	3rdparty/ilmbase-1.0.2/ImathGL.h	/^throwBadMatrix (const Imath::M44f& m)$/;"	f
throwErrnoExc	3rdparty/ilmbase-1.0.2/IexThrowErrnoExc.cpp	/^void throwErrnoExc (const std::string &text)$/;"	f	namespace:Iex
throwErrnoExc	3rdparty/ilmbase-1.0.2/IexThrowErrnoExc.cpp	/^void throwErrnoExc (const std::string &text, int errnum)$/;"	f	namespace:Iex
tidata	3rdparty/tiff-3.9.4/tif_packbits.c	/^typedef unsigned char tidata;$/;"	t	file:
tidata_t	3rdparty/tiff-3.9.4/tiffiop.h	/^typedef	tidataval_t* tidata_t;		\/* reference to internal image data *\/$/;"	t
tidataval_t	3rdparty/tiff-3.9.4/tiffiop.h	/^typedef	unsigned char tidataval_t;	\/* internal image data value type *\/$/;"	t
tif	3rdparty/tiff-3.9.4/tif_jpeg.c	/^	TIFF*		tif;		\/* back link needed by some code *\/$/;"	m	struct:__anon48	file:
tif	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	TIFF* tif;$/;"	m	struct:__anon55	file:
tif	3rdparty/tiff-3.9.4/tiffio.h	/^	TIFF* tif;                              \/* image handle *\/$/;"	m	struct:_TIFFRGBAImage
tif_base	3rdparty/tiff-3.9.4/tiffiop.h	/^	tidata_t	tif_base;	\/* base of mapped file *\/$/;"	m	struct:tiff
tif_cleanup	3rdparty/tiff-3.9.4/tiffiop.h	/^	TIFFVoidMethod	tif_cleanup;	\/* cleanup state routine *\/$/;"	m	struct:tiff
tif_clientdata	3rdparty/tiff-3.9.4/tiffiop.h	/^	thandle_t	tif_clientdata;	\/* callback parameter *\/$/;"	m	struct:tiff
tif_clientinfo	3rdparty/tiff-3.9.4/tiffiop.h	/^        TIFFClientInfoLink *tif_clientinfo; \/* extra client information. *\/$/;"	m	struct:tiff
tif_close	3rdparty/tiff-3.9.4/tiffiop.h	/^	TIFFVoidMethod	tif_close;	\/* cleanup-on-close routine *\/$/;"	m	struct:tiff
tif_closeproc	3rdparty/tiff-3.9.4/tiffiop.h	/^	TIFFCloseProc	tif_closeproc;	\/* close method *\/$/;"	m	struct:tiff
tif_col	3rdparty/tiff-3.9.4/tiffiop.h	/^	uint32 		tif_col;	\/* current column (offset by row too) *\/$/;"	m	struct:tiff
tif_curdir	3rdparty/tiff-3.9.4/tiffiop.h	/^	tdir_t		tif_curdir;	\/* current directory (index) *\/$/;"	m	struct:tiff
tif_curoff	3rdparty/tiff-3.9.4/tiffiop.h	/^	toff_t		tif_curoff;	\/* current offset for read\/write *\/$/;"	m	struct:tiff
tif_curstrip	3rdparty/tiff-3.9.4/tiffiop.h	/^	tstrip_t	tif_curstrip;	\/* current strip for read\/write *\/$/;"	m	struct:tiff
tif_curtile	3rdparty/tiff-3.9.4/tiffiop.h	/^	ttile_t		tif_curtile;	\/* current tile for read\/write *\/$/;"	m	struct:tiff
tif_customdir	3rdparty/tiff-3.9.4/tiffiop.h	/^	TIFFDirectory	tif_customdir;	\/* custom IFDs are separated from$/;"	m	struct:tiff
tif_data	3rdparty/tiff-3.9.4/tiffiop.h	/^	tidata_t	tif_data;	\/* compression scheme private data *\/$/;"	m	struct:tiff
tif_dataoff	3rdparty/tiff-3.9.4/tiffiop.h	/^	toff_t		tif_dataoff;	\/* current offset for writing dir *\/$/;"	m	struct:tiff
tif_decoderow	3rdparty/tiff-3.9.4/tiffiop.h	/^	TIFFCodeMethod	tif_decoderow;	\/* scanline decoding routine *\/$/;"	m	struct:tiff
tif_decodestatus	3rdparty/tiff-3.9.4/tiffiop.h	/^	int		tif_decodestatus;$/;"	m	struct:tiff
tif_decodestrip	3rdparty/tiff-3.9.4/tiffiop.h	/^	TIFFCodeMethod	tif_decodestrip;\/* strip decoding routine *\/$/;"	m	struct:tiff
tif_decodetile	3rdparty/tiff-3.9.4/tiffiop.h	/^	TIFFCodeMethod	tif_decodetile;	\/* tile decoding routine *\/$/;"	m	struct:tiff
tif_defstripsize	3rdparty/tiff-3.9.4/tiffiop.h	/^	TIFFStripMethod	tif_defstripsize;\/* calculate\/constrain strip size *\/$/;"	m	struct:tiff
tif_deftilesize	3rdparty/tiff-3.9.4/tiffiop.h	/^	TIFFTileMethod	tif_deftilesize;\/* calculate\/constrain tile size *\/$/;"	m	struct:tiff
tif_dir	3rdparty/tiff-3.9.4/tiffiop.h	/^	TIFFDirectory	tif_dir;	\/* internal rep of current directory *\/$/;"	m	struct:tiff
tif_dirlist	3rdparty/tiff-3.9.4/tiffiop.h	/^	toff_t*		tif_dirlist;	\/* list of offsets to already seen *\/$/;"	m	struct:tiff
tif_dirlistsize	3rdparty/tiff-3.9.4/tiffiop.h	/^	tsize_t		tif_dirlistsize;\/* number of entires in offset list *\/$/;"	m	struct:tiff
tif_dirnumber	3rdparty/tiff-3.9.4/tiffiop.h	/^	uint16		tif_dirnumber;  \/* number of already seen directories *\/$/;"	m	struct:tiff
tif_diroff	3rdparty/tiff-3.9.4/tiffiop.h	/^	toff_t		tif_diroff;	\/* file offset of current directory *\/$/;"	m	struct:tiff
tif_encoderow	3rdparty/tiff-3.9.4/tiffiop.h	/^	TIFFCodeMethod	tif_encoderow;	\/* scanline encoding routine *\/$/;"	m	struct:tiff
tif_encodestatus	3rdparty/tiff-3.9.4/tiffiop.h	/^	int		tif_encodestatus;$/;"	m	struct:tiff
tif_encodestrip	3rdparty/tiff-3.9.4/tiffiop.h	/^	TIFFCodeMethod	tif_encodestrip;\/* strip encoding routine *\/$/;"	m	struct:tiff
tif_encodetile	3rdparty/tiff-3.9.4/tiffiop.h	/^	TIFFCodeMethod	tif_encodetile;	\/* tile encoding routine *\/$/;"	m	struct:tiff
tif_fd	3rdparty/tiff-3.9.4/tiffiop.h	/^	int		tif_fd;		\/* open file descriptor *\/$/;"	m	struct:tiff
tif_fieldinfo	3rdparty/tiff-3.9.4/tiffiop.h	/^	TIFFFieldInfo**	tif_fieldinfo;	\/* sorted table of registered tags *\/$/;"	m	struct:tiff
tif_flags	3rdparty/tiff-3.9.4/tiffiop.h	/^	uint32		tif_flags;$/;"	m	struct:tiff
tif_foundfield	3rdparty/tiff-3.9.4/tiffiop.h	/^	const TIFFFieldInfo *tif_foundfield;\/* cached pointer to already found tag *\/$/;"	m	struct:tiff
tif_header	3rdparty/tiff-3.9.4/tiffiop.h	/^	TIFFHeader	tif_header;	\/* file's header block *\/$/;"	m	struct:tiff
tif_mapproc	3rdparty/tiff-3.9.4/tiffiop.h	/^	TIFFMapFileProc	tif_mapproc;	\/* map file method *\/$/;"	m	struct:tiff
tif_mode	3rdparty/tiff-3.9.4/tiffiop.h	/^	int		tif_mode;	\/* open mode (O_*) *\/$/;"	m	struct:tiff
tif_name	3rdparty/tiff-3.9.4/tiffiop.h	/^	char*		tif_name;	\/* name of open file *\/$/;"	m	struct:tiff
tif_nextdiroff	3rdparty/tiff-3.9.4/tiffiop.h	/^	toff_t		tif_nextdiroff;	\/* file offset of following directory *\/$/;"	m	struct:tiff
tif_nfields	3rdparty/tiff-3.9.4/tiffiop.h	/^	size_t		tif_nfields;	\/* # entries in registered tag table *\/$/;"	m	struct:tiff
tif_nsubifd	3rdparty/tiff-3.9.4/tiffiop.h	/^	uint16		tif_nsubifd;	\/* remaining subifds to write *\/$/;"	m	struct:tiff
tif_postdecode	3rdparty/tiff-3.9.4/tiffiop.h	/^	TIFFPostMethod	tif_postdecode;	\/* post decoding routine *\/$/;"	m	struct:tiff
tif_postencode	3rdparty/tiff-3.9.4/tiffiop.h	/^	TIFFBoolMethod	tif_postencode;	\/* post- row\/strip\/tile encoding *\/$/;"	m	struct:tiff
tif_predecode	3rdparty/tiff-3.9.4/tiffiop.h	/^	TIFFPreMethod	tif_predecode;	\/* pre- row\/strip\/tile decoding *\/$/;"	m	struct:tiff
tif_preencode	3rdparty/tiff-3.9.4/tiffiop.h	/^	TIFFPreMethod	tif_preencode;	\/* pre- row\/strip\/tile encoding *\/$/;"	m	struct:tiff
tif_rawcc	3rdparty/tiff-3.9.4/tiffiop.h	/^	tsize_t		tif_rawcc;	\/* bytes unread from raw buffer *\/$/;"	m	struct:tiff
tif_rawcp	3rdparty/tiff-3.9.4/tiffiop.h	/^	tidata_t	tif_rawcp;	\/* current spot in raw buffer *\/$/;"	m	struct:tiff
tif_rawdata	3rdparty/tiff-3.9.4/tiffiop.h	/^	tidata_t	tif_rawdata;	\/* raw data buffer *\/$/;"	m	struct:tiff
tif_rawdatasize	3rdparty/tiff-3.9.4/tiffiop.h	/^	tsize_t		tif_rawdatasize;\/* # of bytes in raw data buffer *\/$/;"	m	struct:tiff
tif_readproc	3rdparty/tiff-3.9.4/tiffiop.h	/^	TIFFReadWriteProc tif_readproc;	\/* read method *\/$/;"	m	struct:tiff
tif_row	3rdparty/tiff-3.9.4/tiffiop.h	/^	uint32		tif_row;	\/* current scanline *\/$/;"	m	struct:tiff
tif_scanlinesize	3rdparty/tiff-3.9.4/tiffiop.h	/^	tsize_t		tif_scanlinesize;\/* # of bytes in a scanline *\/$/;"	m	struct:tiff
tif_scanlineskew	3rdparty/tiff-3.9.4/tiffiop.h	/^	tsize_t		tif_scanlineskew;\/* scanline skew for reading strips *\/$/;"	m	struct:tiff
tif_seek	3rdparty/tiff-3.9.4/tiffiop.h	/^	TIFFSeekMethod	tif_seek;	\/* position within a strip routine *\/$/;"	m	struct:tiff
tif_seekproc	3rdparty/tiff-3.9.4/tiffiop.h	/^	TIFFSeekProc	tif_seekproc;	\/* lseek method *\/$/;"	m	struct:tiff
tif_setupdecode	3rdparty/tiff-3.9.4/tiffiop.h	/^	TIFFBoolMethod	tif_setupdecode;\/* called once before predecode *\/$/;"	m	struct:tiff
tif_setupencode	3rdparty/tiff-3.9.4/tiffiop.h	/^	TIFFBoolMethod	tif_setupencode;\/* called once before preencode *\/$/;"	m	struct:tiff
tif_size	3rdparty/tiff-3.9.4/tiffiop.h	/^	toff_t		tif_size;	\/* size of mapped file region (bytes)$/;"	m	struct:tiff
tif_sizeproc	3rdparty/tiff-3.9.4/tiffiop.h	/^	TIFFSizeProc	tif_sizeproc;	\/* filesize method *\/$/;"	m	struct:tiff
tif_subifdoff	3rdparty/tiff-3.9.4/tiffiop.h	/^	toff_t		tif_subifdoff;	\/* offset for patching SubIFD link *\/$/;"	m	struct:tiff
tif_tagmethods	3rdparty/tiff-3.9.4/tiffiop.h	/^        TIFFTagMethods  tif_tagmethods; \/* tag get\/set\/print routines *\/$/;"	m	struct:tiff
tif_tilesize	3rdparty/tiff-3.9.4/tiffiop.h	/^	tsize_t		tif_tilesize;	\/* # of bytes in a tile *\/$/;"	m	struct:tiff
tif_typemask	3rdparty/tiff-3.9.4/tiffiop.h	/^	const long*	tif_typemask;	\/* data type masks *\/$/;"	m	struct:tiff
tif_typeshift	3rdparty/tiff-3.9.4/tiffiop.h	/^	const int*	tif_typeshift;	\/* data type shift counts *\/$/;"	m	struct:tiff
tif_unmapproc	3rdparty/tiff-3.9.4/tiffiop.h	/^	TIFFUnmapFileProc tif_unmapproc;\/* unmap file method *\/$/;"	m	struct:tiff
tif_writeproc	3rdparty/tiff-3.9.4/tiffiop.h	/^	TIFFReadWriteProc tif_writeproc;\/* write method *\/$/;"	m	struct:tiff
tiff	3rdparty/tiff-3.9.4/tiffiop.h	/^struct tiff {$/;"	s
tiffFieldInfo	3rdparty/tiff-3.9.4/tif_dirinfo.c	/^tiffFieldInfo[] = {$/;"	v	file:
tiff_diroff	3rdparty/tiff-3.9.4/tiff.h	/^	uint32	tiff_diroff;	\/* byte offset to first directory *\/$/;"	m	struct:__anon60
tiff_magic	3rdparty/tiff-3.9.4/tiff.h	/^	uint16	tiff_magic;	\/* magic number (defines byte order) *\/$/;"	m	struct:__anon60
tiff_version	3rdparty/tiff-3.9.4/tiff.h	/^	uint16	tiff_version;	\/* TIFF version number *\/$/;"	m	struct:__anon60
tiffis_data	3rdparty/tiff-3.9.4/tif_stream.cxx	/^class tiffis_data$/;"	c	file:
tiffos_data	3rdparty/tiff-3.9.4/tif_stream.cxx	/^class tiffos_data$/;"	c	file:
tileBufferSize	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    size_t          tileBufferSize;	    \/\/ size of the tile buffers$/;"	m	struct:Imf::TiledInputFile::Data	file:
tileBufferSize	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    size_t		tileBufferSize;         \/\/ size of a tile buffer$/;"	m	struct:Imf::TiledOutputFile::Data	file:
tileBuffers	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    vector<TileBuffer*> tileBuffers;        \/\/ each holds a single tile$/;"	m	struct:Imf::TiledInputFile::Data	file:
tileBuffers	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    vector<TileBuffer*> tileBuffers;$/;"	m	struct:Imf::TiledOutputFile::Data	file:
tileContigRoutine	3rdparty/tiff-3.9.4/tiffio.h	/^typedef void (*tileContigRoutine)$/;"	t
tileCoord	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    TileCoord		tileCoord;$/;"	m	struct:Imf::__anon37::TileBuffer	file:
tileDesc	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    TileDescription tileDesc;		    \/\/ describes the tile layout$/;"	m	struct:Imf::TiledInputFile::Data	file:
tileDesc	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    TileDescription	tileDesc;		\/\/ describes the tile layout$/;"	m	struct:Imf::TiledOutputFile::Data	file:
tileDescription	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::tileDescription () const$/;"	f	class:Imf::Header
tileDescription	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::tileDescription ()$/;"	f	class:Imf::Header
tileMap	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    TileMap		tileMap;$/;"	m	struct:Imf::TiledOutputFile::Data	file:
tileOffsets	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    TileOffsets	    tileOffsets;	    \/\/ stores offsets in file for$/;"	m	struct:Imf::TiledInputFile::Data	file:
tileOffsets	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    TileOffsets		tileOffsets;		\/\/ stores offsets in file for$/;"	m	struct:Imf::TiledOutputFile::Data	file:
tileOffsetsPosition	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    Int64		tileOffsetsPosition;	\/\/ position of the tile index$/;"	m	struct:Imf::TiledOutputFile::Data	file:
tileSeparateRoutine	3rdparty/tiff-3.9.4/tiffio.h	/^typedef void (*tileSeparateRoutine)$/;"	t
tileXSize	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::tileXSize () const$/;"	f	class:Imf::TiledInputFile
tileXSize	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::tileXSize () const$/;"	f	class:Imf::TiledOutputFile
tileXSize	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::tileXSize () const$/;"	f	class:Imf::TiledRgbaInputFile
tileXSize	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::tileXSize () const$/;"	f	class:Imf::TiledRgbaOutputFile
tileYSize	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::tileYSize () const$/;"	f	class:Imf::TiledInputFile
tileYSize	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::tileYSize () const$/;"	f	class:Imf::TiledOutputFile
tileYSize	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::tileYSize () const$/;"	f	class:Imf::TiledRgbaInputFile
tileYSize	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::tileYSize () const$/;"	f	class:Imf::TiledRgbaOutputFile
time	3rdparty/zlib-1.2.5/zlib.h	/^    uLong   time;       \/* modification time *\/$/;"	m	struct:gz_header_s
time	core/geometry.h	/^    float time;$/;"	m	class:Ray
time	core/sampler.h	/^    float time;$/;"	m	struct:CameraSample
time	integrators/photonmap.cpp	/^    float time;$/;"	m	class:PhotonShootingTask	file:
time	lights/infinite.cpp	/^    float time, pEpsilon;$/;"	m	struct:InfiniteAreaCube	file:
time	renderers/createprobes.cpp	/^    float time;$/;"	m	class:CreateRadProbeTask	file:
time	renderers/createprobes.h	/^    float time, probeSpacing;$/;"	m	class:CreateRadianceProbes
time	renderers/surfacepoints.cpp	/^    float time;$/;"	m	class:SurfacePointTask	file:
time	renderers/surfacepoints.h	/^    float minDist, time;$/;"	m	class:SurfacePointsRenderer
time0	core/timer.h	/^    double time0, elapsed;$/;"	m	class:Timer
timeAndFlags	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^TimeCode::timeAndFlags (Packing packing) const$/;"	f	class:Imf::TimeCode
timeSamples	samplers/random.h	/^    float *imageSamples, *lensSamples, *timeSamples;$/;"	m	class:RandomSampler
timeSamples	tools/samplepat.cpp	/^static float timeSamples[SAMPLE_TABLE_SIZE];$/;"	v	file:
timeofday	core/timer.h	/^    struct timeval timeofday;$/;"	m	class:Timer	typeref:struct:Timer::timeval
timer	core/progressreporter.h	/^    Timer *timer;$/;"	m	class:ProgressReporter
tinyness_before	3rdparty/ilmbase-1.0.2/halfLimits.h	/^    static const bool tinyness_before = false;$/;"	m	class:std::numeric_limits
tinyobj	tools/obj2pbrt.cpp	/^namespace tinyobj {$/;"	n	file:
tmax	accelerators/kdtreeaccel.h	/^    float tmin, tmax;$/;"	m	struct:KdToDo
tmin	accelerators/kdtreeaccel.h	/^    float tmin, tmax;$/;"	m	struct:KdToDo
tn	core/reflection.h	/^    Vector sn, tn;$/;"	m	class:BSDF
toMatrix33	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^Matrix33<T> Euler<T>::toMatrix33() const$/;"	f	class:Imath::Euler
toMatrix33	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^Quat<T>::toMatrix33() const$/;"	f	class:Imath::Quat
toMatrix44	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^Matrix44<T> Euler<T>::toMatrix44() const$/;"	f	class:Imath::Euler
toMatrix44	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^Quat<T>::toMatrix44() const$/;"	f	class:Imath::Quat
toQuat	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^Quat<T> Euler<T>::toQuat() const$/;"	f	class:Imath::Euler
toXYZVector	3rdparty/ilmbase-1.0.2/ImathEuler.h	/^Euler<T>::toXYZVector() const$/;"	f	class:Imath::Euler
toZYZ	core/sh.cpp	/^static void toZYZ(const Matrix4x4 &m, float *alpha, float *beta, float *gamma) {$/;"	f	file:
toff_t	3rdparty/tiff-3.9.4/tiffio.h	/^typedef uint32 toff_t;          \/* file offset *\/$/;"	t
tooMuchData	3rdparty/openexr-1.7.0/ImfB44Compressor.cpp	/^tooMuchData ()$/;"	f	namespace:Imf::__anon15
tooMuchData	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^tooMuchData ()$/;"	f	namespace:Imf::__anon20
tooMuchData	3rdparty/openexr-1.7.0/ImfPxr24Compressor.cpp	/^tooMuchData ()$/;"	f	namespace:Imf::__anon26
top	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^    T			top() const		{ return _top;		}$/;"	f	class:Imath::Frustum
total	3rdparty/zlib-1.2.5/inflate.h	/^    unsigned long total;        \/* protected copy of output count *\/$/;"	m	struct:inflate_state
totalPathsTraced	renderers/surfacepoints.cpp	/^    int &totalPathsTraced, &totalRaysTraced, &numPointsAdded;$/;"	m	class:SurfacePointTask	file:
totalPlusses	core/progressreporter.h	/^    int workDone, plussesPrinted, totalPlusses;$/;"	m	class:ProgressReporter
totalRaysTraced	renderers/surfacepoints.cpp	/^    int &totalPathsTraced, &totalRaysTraced, &numPointsAdded;$/;"	m	class:SurfacePointTask	file:
totalWork	core/progressreporter.h	/^    const int totalWork;$/;"	m	class:ProgressReporter
total_in	3rdparty/zlib-1.2.5/zlib.h	/^    uLong    total_in;  \/* total nb of input bytes read so far *\/$/;"	m	struct:z_stream_s
total_out	3rdparty/zlib-1.2.5/zlib.h	/^    uLong    total_out; \/* total nb of bytes output so far *\/$/;"	m	struct:z_stream_s
tr_static_init	3rdparty/zlib-1.2.5/trees.c	/^local void tr_static_init()$/;"	f
trackers	core/probes.cpp	/^static TrackerMap trackers;$/;"	v	file:
transform	3rdparty/ilmbase-1.0.2/ImathBoxAlgo.h	/^transform (const Box< Vec3<S> > &box, const Matrix44<T> &m)$/;"	f	namespace:Imath
transformCache	core/api.cpp	/^static TransformCache transformCache;$/;"	v	file:
transformEndTime	core/api.cpp	/^    float transformStartTime, transformEndTime;$/;"	m	struct:RenderOptions	file:
transformStartTime	core/api.cpp	/^    float transformStartTime, transformEndTime;$/;"	m	struct:RenderOptions	file:
translate	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::translate (const Vec2<S> &t)$/;"	f	class:Imath::Matrix33
translate	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::translate (const Vec3<S> &t)$/;"	f	class:Imath::Matrix44
translation	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::translation () const$/;"	f	class:Imath::Matrix33
translation	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::translation () const$/;"	f	class:Imath::Matrix44
transmit	materials/translucent.h	/^    Reference<Texture<Spectrum> > reflect, transmit;$/;"	m	class:TranslucentMaterial
transmittance	tools/obj2pbrt.cpp	/^    float transmittance[3];$/;"	m	struct:tinyobj::__anon90	file:
transpose	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::transpose ()$/;"	f	class:Imath::Matrix33
transpose	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::transpose ()$/;"	f	class:Imath::Matrix44
transposed	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix33<T>::transposed () const$/;"	f	class:Imath::Matrix33
transposed	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^Matrix44<T>::transposed () const$/;"	f	class:Imath::Matrix44
traps	3rdparty/ilmbase-1.0.2/halfLimits.h	/^    static const bool traps = true;$/;"	m	class:std::numeric_limits
traversalCost	accelerators/kdtreeaccel.h	/^    int isectCost, traversalCost, maxPrims, maxDepth;$/;"	m	class:KdTreeAccel
tree_desc	3rdparty/zlib-1.2.5/deflate.h	/^} FAR tree_desc;$/;"	t	typeref:struct:tree_desc_s
tree_desc_s	3rdparty/zlib-1.2.5/deflate.h	/^typedef struct tree_desc_s {$/;"	s
triangle	core/mipmap.h	/^T MIPMap<T>::triangle(uint32_t level, float s, float t) const {$/;"	f	class:MIPMap
trunc	3rdparty/ilmbase-1.0.2/ImathFun.h	/^trunc (T x)$/;"	f	namespace:Imath
tryWait	3rdparty/ilmbase-1.0.2/IlmThreadSemaphore.cpp	/^bool Semaphore::tryWait () {return true;}$/;"	f	class:IlmThread::Semaphore
tryWait	3rdparty/ilmbase-1.0.2/IlmThreadSemaphorePosix.cpp	/^Semaphore::tryWait ()$/;"	f	class:IlmThread::Semaphore
tryWait	3rdparty/ilmbase-1.0.2/IlmThreadSemaphorePosixCompat.cpp	/^Semaphore::tryWait ()$/;"	f	class:IlmThread::Semaphore
tryWait	3rdparty/ilmbase-1.0.2/IlmThreadSemaphoreWin32.cpp	/^Semaphore::tryWait()$/;"	f	class:IlmThread::Semaphore
tsample_t	3rdparty/tiff-3.9.4/tiffio.h	/^typedef uint16 tsample_t;       \/* sample number *\/$/;"	t
tsize_t	3rdparty/tiff-3.9.4/tiffio.h	/^typedef int32 tsize_t;          \/* i\/o size in bytes *\/$/;"	t
tstrile_t	3rdparty/tiff-3.9.4/tiffio.h	/^typedef uint32 tstrile_t;       \/* strip or tile number *\/$/;"	t
tstrip_t	3rdparty/tiff-3.9.4/tiffio.h	/^typedef tstrile_t tstrip_t;     \/* strip number *\/$/;"	t
ttag_t	3rdparty/tiff-3.9.4/tiffio.h	/^typedef uint32 ttag_t;          \/* directory tag *\/$/;"	t
ttile_t	3rdparty/tiff-3.9.4/tiffio.h	/^typedef tstrile_t ttile_t;      \/* tile number *\/$/;"	t
twoD	core/sampler.h	/^    float **oneD, **twoD;$/;"	m	struct:Sample
twobitdeltas	3rdparty/tiff-3.9.4/tif_thunder.c	/^static const int twobitdeltas[4] = { 0, 1, 0, -1 };$/;"	v	file:
type	3rdparty/openexr-1.7.0/ImfB44Compressor.cpp	/^    PixelType		type;$/;"	m	struct:Imf::B44Compressor::ChannelData	file:
type	3rdparty/openexr-1.7.0/ImfChannelList.h	/^    PixelType		type;$/;"	m	struct:Imf::Channel
type	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^    PixelType		type;$/;"	m	struct:Imf::Slice
type	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    PixelType		type;$/;"	m	struct:Imf::__anon23::OutSliceInfo	file:
type	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    PixelType		type;$/;"	m	struct:Imf::__anon37::TOutSliceInfo	file:
type	accelerators/kdtreeaccel.cpp	/^    enum { START, END } type;$/;"	m	struct:BoundEdge	typeref:enum:BoundEdge::__anon81	file:
type	core/parallel.h	/^    RWMutexLockType type;$/;"	m	struct:RWMutexLock
type	core/reflection.h	/^    const BxDFType type;$/;"	m	class:BxDF
typeInFile	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    PixelType	typeInFile;$/;"	m	struct:Imf::__anon31::InSliceInfo	file:
typeInFile	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    PixelType   typeInFile;$/;"	m	struct:Imf::__anon34::TInSliceInfo	file:
typeInFrameBuffer	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    PixelType	typeInFrameBuffer;$/;"	m	struct:Imf::__anon31::InSliceInfo	file:
typeInFrameBuffer	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    PixelType   typeInFrameBuffer;$/;"	m	struct:Imf::__anon34::TInSliceInfo	file:
typeMap	3rdparty/openexr-1.7.0/ImfAttribute.cpp	/^typeMap ()$/;"	f	namespace:Imf::__anon14
typeName	3rdparty/openexr-1.7.0/ImfAttribute.h	/^TypedAttribute<T>::typeName () const$/;"	f	class:Imf::TypedAttribute
typeName	3rdparty/openexr-1.7.0/ImfOpaqueAttribute.cpp	/^OpaqueAttribute::typeName () const$/;"	f	class:Imf::OpaqueAttribute
type_names	tools/ply.c	/^char *type_names[] = {  \/* names of scalar types *\/$/;"	v
typedAttribute	3rdparty/openexr-1.7.0/ImfHeader.h	/^Header::typedAttribute (const char name[]) const$/;"	f	class:Imf::Header
typedAttribute	3rdparty/openexr-1.7.0/ImfHeader.h	/^Header::typedAttribute (const char name[])$/;"	f	class:Imf::Header
typedAttribute	3rdparty/openexr-1.7.0/ImfHeader.h	/^Header::typedAttribute (const std::string &name) const$/;"	f	class:Imf::Header
typedAttribute	3rdparty/openexr-1.7.0/ImfHeader.h	/^Header::typedAttribute (const std::string &name)$/;"	f	class:Imf::Header
typemask	3rdparty/tiff-3.9.4/tif_open.c	/^static const long typemask[13] = {$/;"	v	file:
u	core/diffgeom.h	/^    float u, v;$/;"	m	struct:DifferentialGeometry
u4	3rdparty/zlib-1.2.5/crc32.c	/^           typedef unsigned short u4;$/;"	t	file:
u4	3rdparty/zlib-1.2.5/crc32.c	/^         typedef unsigned long u4;$/;"	t	file:
u4	3rdparty/zlib-1.2.5/crc32.c	/^       typedef unsigned int u4;$/;"	t	file:
uBlocks	core/memory.h	/^    uint32_t uRes, vRes, uBlocks;$/;"	m	class:BlockedArray
uComponent	core/light.h	/^   float uPos[2], uComponent;$/;"	m	struct:LightSample
uComponent	core/reflection.h	/^   float uDir[2], uComponent;$/;"	m	struct:BSDFSample
uDir	core/reflection.h	/^   float uDir[2], uComponent;$/;"	m	struct:BSDFSample
uInt	3rdparty/zlib-1.2.5/zconf.h	/^#  define uInt /;"	d
uInt	3rdparty/zlib-1.2.5/zconf.h	/^typedef unsigned int   uInt;  \/* 16 bits or more *\/$/;"	t
uIntf	3rdparty/zlib-1.2.5/zconf.h	/^#  define uIntf /;"	d
uIntf	3rdparty/zlib-1.2.5/zconf.h	/^typedef uInt  FAR uIntf;$/;"	t
uLong	3rdparty/zlib-1.2.5/zconf.h	/^#  define uLong /;"	d
uLong	3rdparty/zlib-1.2.5/zconf.h	/^typedef unsigned long  uLong; \/* 32 bits or more *\/$/;"	t
uLongf	3rdparty/zlib-1.2.5/zconf.h	/^#  define uLongf /;"	d
uLongf	3rdparty/zlib-1.2.5/zconf.h	/^typedef uLong FAR uLongf;$/;"	t
uPos	core/light.h	/^   float uPos[2], uComponent;$/;"	m	struct:LightSample
uRes	core/memory.h	/^    uint32_t uRes, vRes, uBlocks;$/;"	m	class:BlockedArray
uSize	core/memory.h	/^    uint32_t uSize() const { return uRes; }$/;"	f	class:BlockedArray
uch	3rdparty/zlib-1.2.5/zutil.h	/^typedef unsigned char  uch;$/;"	t
uchf	3rdparty/zlib-1.2.5/zutil.h	/^typedef uch FAR uchf;$/;"	t
uiAdd	3rdparty/openexr-1.7.0/ImfCheckedArithmetic.h	/^uiAdd (T a, T b)$/;"	f	namespace:Imf
uiDiv	3rdparty/openexr-1.7.0/ImfCheckedArithmetic.h	/^uiDiv (T a, T b)$/;"	f	namespace:Imf
uiMult	3rdparty/openexr-1.7.0/ImfCheckedArithmetic.h	/^uiMult (T a, T b)$/;"	f	namespace:Imf
uiSub	3rdparty/openexr-1.7.0/ImfCheckedArithmetic.h	/^uiSub (T a, T b)$/;"	f	namespace:Imf
uif	3rdparty/ilmbase-1.0.2/half.h	/^    union uif$/;"	u	class:half
uint16	3rdparty/tiff-3.9.4/tiff.h	/^typedef	unsigned short uint16;	\/* sizeof (uint16) must == 2 *\/$/;"	t
uint16_t	core/targa.h	/^ typedef unsigned __int16 uint16_t;$/;"	t
uint32	3rdparty/tiff-3.9.4/tiff.h	/^typedef	unsigned int uint32;	\/* sizeof (uint32) must == 4 *\/$/;"	t
uint32	3rdparty/tiff-3.9.4/tiff.h	/^typedef	unsigned long uint32;	\/* sizeof (uint32) must == 4 *\/$/;"	t
uint32_t	core/targa.h	/^ typedef unsigned __int32 uint32_t;$/;"	t
uint64	3rdparty/tiff-3.9.4/tiffiop.h	/^typedef TIFF_UINT64_T uint64;$/;"	t
uint8	3rdparty/tiff-3.9.4/tiff.h	/^typedef	unsigned char uint8;$/;"	t
uint8_t	core/targa.h	/^ typedef unsigned __int8  uint8_t;$/;"	t
uintToHalf	3rdparty/openexr-1.7.0/ImfConvert.cpp	/^uintToHalf (unsigned int ui)$/;"	f	namespace:Imf
uknot	shapes/nurbs.h	/^    float *uknot, *vknot;$/;"	m	class:NURBS
ulerp	3rdparty/ilmbase-1.0.2/ImathFun.h	/^ulerp (T a, T b, Q t)$/;"	f	namespace:Imath
ulg	3rdparty/zlib-1.2.5/zutil.h	/^typedef unsigned long  ulg;$/;"	t
umax	shapes/nurbs.h	/^    float umin, umax, vmin, vmax;$/;"	m	class:NURBS
umin	shapes/nurbs.h	/^    float umin, umax, vmin, vmax;$/;"	m	class:NURBS
unRegisterAttributeType	3rdparty/openexr-1.7.0/ImfAttribute.cpp	/^Attribute::unRegisterAttributeType (const char typeName[])$/;"	f	class:Imf::Attribute
unRegisterAttributeType	3rdparty/openexr-1.7.0/ImfAttribute.h	/^TypedAttribute<T>::unRegisterAttributeType ()$/;"	f	class:Imf::TypedAttribute
uncompress	3rdparty/openexr-1.7.0/ImfB44Compressor.cpp	/^B44Compressor::uncompress (const char *inPtr,$/;"	f	class:Imf::B44Compressor
uncompress	3rdparty/openexr-1.7.0/ImfPizCompressor.cpp	/^PizCompressor::uncompress (const char *inPtr,$/;"	f	class:Imf::PizCompressor
uncompress	3rdparty/openexr-1.7.0/ImfPxr24Compressor.cpp	/^Pxr24Compressor::uncompress (const char *inPtr,$/;"	f	class:Imf::Pxr24Compressor
uncompress	3rdparty/openexr-1.7.0/ImfRleCompressor.cpp	/^RleCompressor::uncompress (const char *inPtr,$/;"	f	class:Imf::RleCompressor
uncompress	3rdparty/openexr-1.7.0/ImfZipCompressor.cpp	/^ZipCompressor::uncompress (const char *inPtr,$/;"	f	class:Imf::ZipCompressor
uncompress	3rdparty/zlib-1.2.5/uncompr.c	/^int ZEXPORT uncompress (dest, destLen, source, sourceLen)$/;"	f
uncompress	3rdparty/zlib-1.2.5/zconf.h	/^#  define uncompress /;"	d
uncompressTile	3rdparty/openexr-1.7.0/ImfB44Compressor.cpp	/^B44Compressor::uncompressTile (const char *inPtr,$/;"	f	class:Imf::B44Compressor
uncompressTile	3rdparty/openexr-1.7.0/ImfCompressor.cpp	/^Compressor::uncompressTile (const char *inPtr,$/;"	f	class:Imf::Compressor
uncompressTile	3rdparty/openexr-1.7.0/ImfPizCompressor.cpp	/^PizCompressor::uncompressTile (const char *inPtr,$/;"	f	class:Imf::PizCompressor
uncompressTile	3rdparty/openexr-1.7.0/ImfPxr24Compressor.cpp	/^Pxr24Compressor::uncompressTile (const char *inPtr,$/;"	f	class:Imf::Pxr24Compressor
uncompressedData	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    const char *	uncompressedData;$/;"	m	struct:Imf::__anon31::LineBuffer	file:
uncompressedData	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    const char *	uncompressedData;$/;"	m	struct:Imf::__anon34::TileBuffer	file:
unexpected	3rdparty/tiff-3.9.4/tif_fax3.c	/^#define	unexpected(/;"	d	file:
unexpectedEndOfTable	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^unexpectedEndOfTable ()$/;"	f	namespace:Imf::__anon20
unixErrorHandler	3rdparty/tiff-3.9.4/tif_unix.c	/^unixErrorHandler(const char* module, const char* fmt, va_list ap)$/;"	f	file:
unixWarningHandler	3rdparty/tiff-3.9.4/tif_unix.c	/^unixWarningHandler(const char* module, const char* fmt, va_list ap)$/;"	f	file:
unknown_parameter	tools/obj2pbrt.cpp	/^    std::map<std::string, std::string> unknown_parameter;$/;"	m	struct:tinyobj::__anon90	file:
unlink	3rdparty/zlib-1.2.5/minigzip.c	/^#  define unlink /;"	d	file:
unlock	3rdparty/ilmbase-1.0.2/IlmThreadMutex.cpp	/^void Mutex::unlock () const {}$/;"	f	class:IlmThread::Mutex
unlock	3rdparty/ilmbase-1.0.2/IlmThreadMutexPosix.cpp	/^Mutex::unlock () const$/;"	f	class:IlmThread::Mutex
unlock	3rdparty/ilmbase-1.0.2/IlmThreadMutexWin32.cpp	/^Mutex::unlock () const$/;"	f	class:IlmThread::Mutex
unpack14	3rdparty/openexr-1.7.0/ImfB44Compressor.cpp	/^unpack14 (const unsigned char b[14], unsigned short s[16])$/;"	f	namespace:Imf::__anon15
unpack3	3rdparty/openexr-1.7.0/ImfB44Compressor.cpp	/^unpack3 (const unsigned char b[3], unsigned short s[16])$/;"	f	namespace:Imf::__anon15
unput	core/pbrtlex.cpp	/^#define unput(/;"	d	file:
unsuccessful	integrators/photonmap.cpp	/^inline bool unsuccessful(uint32_t needed, uint32_t found, uint32_t shot) {$/;"	f
unsuppress_huff_table	3rdparty/tiff-3.9.4/tif_jpeg.c	/^unsuppress_huff_table (JPEGState* sp, int tblno)$/;"	f	file:
unsuppress_quant_table	3rdparty/tiff-3.9.4/tif_jpeg.c	/^unsuppress_quant_table (JPEGState* sp, int tblno)$/;"	f	file:
uorder	shapes/nurbs.h	/^    int nu, uorder, nv, vorder;$/;"	m	class:NURBS
upDir	volumes/exponential.h	/^    Vector upDir;$/;"	m	class:ExponentialDensity
updatePreviewImage	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesOutputFile::updatePreviewImage (const PreviewRgba pixels[])$/;"	f	class:Imf::AcesOutputFile
updatePreviewImage	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^OutputFile::updatePreviewImage (const PreviewRgba newPixels[])$/;"	f	class:Imf::OutputFile
updatePreviewImage	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaOutputFile::updatePreviewImage (const PreviewRgba newPixels[])$/;"	f	class:Imf::RgbaOutputFile
updatePreviewImage	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::updatePreviewImage (const PreviewRgba newPixels[])$/;"	f	class:Imf::TiledOutputFile
updatePreviewImage	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::updatePreviewImage (const PreviewRgba newPixels[])$/;"	f	class:Imf::TiledRgbaOutputFile
updateVertex	tools/obj2pbrt.cpp	/^updateVertex($/;"	f	namespace:tinyobj
updatewindow	3rdparty/zlib-1.2.5/inflate.c	/^local int updatewindow(strm, out)$/;"	f
usage	tools/exrdiff.cpp	/^static void usage() {$/;"	f	file:
usage	tools/exrtotiff.cpp	/^static void usage() {$/;"	f	file:
usage	tools/ply2pbrt.c	/^usage(char *progname)$/;"	f
usedBlocks	core/memory.h	/^    vector<char *> usedBlocks, availableBlocks;$/;"	m	class:MemoryArena
userData	3rdparty/openexr-1.7.0/ImfTimeCode.cpp	/^TimeCode::userData () const$/;"	f	class:Imf::TimeCode
user_datafmt	3rdparty/tiff-3.9.4/tif_luv.c	/^	int			user_datafmt;	\/* user data format *\/$/;"	m	struct:logLuvState	file:
user_datafmt	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^	int			user_datafmt;$/;"	m	struct:__anon57	file:
usesLongNames	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^usesLongNames (const Header &header)$/;"	f	namespace:Imf::__anon19
ush	3rdparty/zlib-1.2.5/zutil.h	/^typedef unsigned short ush;$/;"	t
ushf	3rdparty/zlib-1.2.5/zutil.h	/^typedef ush FAR ushf;$/;"	t
ustart	3rdparty/tiff-3.9.4/uvcode.h	/^	float	ustart;$/;"	m	struct:__anon70
uv2ang	3rdparty/tiff-3.9.4/tif_luv.c	/^#define uv2ang(/;"	d	file:
uv2ang	3rdparty/tiff-3.9.4/tif_luv.c	/^#undef uv2ang$/;"	d	file:
uv_decode	3rdparty/tiff-3.9.4/tif_luv.c	/^uv_decode(double *up, double *vp, int c)	\/* decode (u',v') index *\/$/;"	f	file:
uv_encode	3rdparty/tiff-3.9.4/tif_luv.c	/^uv_encode(double u, double v, int em)	\/* encode (u',v') coordinates *\/$/;"	f	file:
uv_row	3rdparty/tiff-3.9.4/uvcode.h	/^}	uv_row[UV_NVS] = {$/;"	v	typeref:struct:__anon70
uvs	shapes/trianglemesh.h	/^    float *uvs;$/;"	m	class:TriangleMesh
v	3rdparty/ilmbase-1.0.2/ImathQuat.h	/^    Vec3<T>		v;	    \/\/ imaginary vector$/;"	m	class:Imath::Quat
v	core/diffgeom.h	/^    float u, v;$/;"	m	struct:DifferentialGeometry
v	core/quaternion.h	/^    Vector v;$/;"	m	struct:Quaternion
v	core/reflection.cpp	/^    Spectrum v;$/;"	m	struct:IrregIsoProc	file:
v	core/reflection.h	/^    Spectrum v;$/;"	m	struct:IrregIsotropicBRDFSample
v	shapes/loopsubdiv.cpp	/^    SDVertex *v[2];$/;"	m	struct:SDEdge	file:
v	shapes/loopsubdiv.cpp	/^    SDVertex *v[3];$/;"	m	struct:SDFace	file:
v	shapes/trianglemesh.h	/^    int *v;$/;"	m	class:Triangle
v	tools/obj2pbrt.cpp	/^  std::vector<float> v;$/;"	m	struct:tinyobj::obj_shape	file:
v00	textures/bilerp.h	/^    T v00, v01, v10, v11;$/;"	m	class:BilerpTexture
v01	textures/bilerp.h	/^    T v00, v01, v10, v11;$/;"	m	class:BilerpTexture
v10	textures/bilerp.h	/^    T v00, v01, v10, v11;$/;"	m	class:BilerpTexture
v11	textures/bilerp.h	/^    T v00, v01, v10, v11;$/;"	m	class:BilerpTexture
vRes	core/memory.h	/^    uint32_t uRes, vRes, uBlocks;$/;"	m	class:BlockedArray
vSize	core/memory.h	/^    uint32_t vSize() const { return vRes; }$/;"	f	class:BlockedArray
v_idx	tools/obj2pbrt.cpp	/^  int v_idx, vt_idx, vn_idx;$/;"	m	struct:tinyobj::vertex_index	file:
v_sampling	3rdparty/tiff-3.9.4/tif_jpeg.c	/^	uint16		v_sampling;$/;"	m	struct:__anon48	file:
val	3rdparty/tiff-3.9.4/mkg3states.c	/^    uint16 val;		\/* (pixel count)<<4 + code width  *\/$/;"	m	struct:proto	file:
val	3rdparty/zlib-1.2.5/inftrees.h	/^    unsigned short val;         \/* offset in table or code value *\/$/;"	m	struct:__anon76
valence	shapes/loopsubdiv.cpp	/^inline int SDVertex::valence() {$/;"	f	class:SDVertex
value	3rdparty/ilmbase-1.0.2/IlmThreadSemaphore.cpp	/^int Semaphore::value () const {return 0;}$/;"	f	class:IlmThread::Semaphore
value	3rdparty/ilmbase-1.0.2/IlmThreadSemaphorePosix.cpp	/^Semaphore::value () const$/;"	f	class:IlmThread::Semaphore
value	3rdparty/ilmbase-1.0.2/IlmThreadSemaphorePosixCompat.cpp	/^Semaphore::value () const$/;"	f	class:IlmThread::Semaphore
value	3rdparty/ilmbase-1.0.2/IlmThreadSemaphoreWin32.cpp	/^Semaphore::value() const$/;"	f	class:IlmThread::Semaphore
value	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^        enum {value = 0};$/;"	e	enum:Imath::Matrix33::isSameType::__anon7
value	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^        enum {value = 0};$/;"	e	enum:Imath::Matrix44::isSameType::__anon9
value	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^        enum {value = 1};$/;"	e	enum:Imath::Matrix33::isSameType::__anon8
value	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^        enum {value = 1};$/;"	e	enum:Imath::Matrix44::isSameType::__anon10
value	3rdparty/openexr-1.7.0/ImfAttribute.h	/^TypedAttribute<T>::value () const$/;"	f	class:Imf::TypedAttribute
value	3rdparty/openexr-1.7.0/ImfAttribute.h	/^TypedAttribute<T>::value ()$/;"	f	class:Imf::TypedAttribute
value	3rdparty/tiff-3.9.4/tif_lzw.c	/^	unsigned char	value;		\/* data value *\/$/;"	m	struct:code_ent	file:
value	3rdparty/tiff-3.9.4/tiffio.h	/^    void           *value;$/;"	m	struct:_TIFFTagValue
value	textures/constant.h	/^    T value;$/;"	m	class:ConstantTexture
variation	textures/marble.h	/^    float omega, scale, variation;$/;"	m	class:MarbleTexture
vcodes	3rdparty/tiff-3.9.4/tif_fax3.c	/^static const tableentry vcodes[7] = {$/;"	v	file:
vectors	core/paramset.h	/^    vector<Reference<ParamSetItem<Vector> > > vectors;$/;"	m	class:ParamSet
verbose	3rdparty/zlib-1.2.5/zutil.c	/^#    define verbose /;"	d	file:
verbose	core/pbrt.h	/^    bool quiet, verbose;$/;"	m	struct:Options
version	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesInputFile::version () const$/;"	f	class:Imf::AcesInputFile
version	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^    int                 version;$/;"	m	struct:Imf::InputFile::Data	file:
version	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^InputFile::version () const$/;"	f	class:Imf::InputFile
version	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    int			 version;		\/\/ file format version$/;"	m	struct:Imf::OutputFile::Data	file:
version	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaInputFile::version () const$/;"	f	class:Imf::RgbaInputFile
version	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    int			version;            \/\/ file's version$/;"	m	struct:Imf::ScanLineInputFile::Data	file:
version	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^ScanLineInputFile::version () const$/;"	f	class:Imf::ScanLineInputFile
version	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    int		    version;		    \/\/ file's version$/;"	m	struct:Imf::TiledInputFile::Data	file:
version	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::version () const$/;"	f	class:Imf::TiledInputFile
version	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    int			version;		\/\/ file format version$/;"	m	struct:Imf::TiledOutputFile::Data	file:
version	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::version () const$/;"	f	class:Imf::TiledRgbaInputFile
version	tools/ply.h	/^  float version;                \/* version number of file *\/$/;"	m	struct:PlyFile
vert_other	tools/ply2pbrt.c	/^static PlyOtherProp *vert_other,*face_other;$/;"	v	file:
vert_props	tools/ply2pbrt.c	/^PlyProperty vert_props[] = { \/* list of property information for a vertex *\/$/;"	v
vertexIndex	shapes/trianglemesh.h	/^    int *vertexIndex;$/;"	m	class:TriangleMesh
vertex_index	tools/obj2pbrt.cpp	/^  vertex_index() {};$/;"	f	struct:tinyobj::vertex_index
vertex_index	tools/obj2pbrt.cpp	/^  vertex_index(int idx) : v_idx(idx), vt_idx(idx), vn_idx(idx) {};$/;"	f	struct:tinyobj::vertex_index
vertex_index	tools/obj2pbrt.cpp	/^  vertex_index(int vidx, int vtidx, int vnidx) : v_idx(vidx), vt_idx(vtidx), vn_idx(vnidx) {};$/;"	f	struct:tinyobj::vertex_index
vertex_index	tools/obj2pbrt.cpp	/^struct vertex_index {$/;"	s	namespace:tinyobj	file:
vertices	shapes/loopsubdiv.h	/^    vector<SDVertex *> vertices;$/;"	m	class:LoopSubdiv
verts	tools/ply2pbrt.c	/^  int *verts;              \/* vertex index list *\/$/;"	m	struct:Face	file:
vgetfield	3rdparty/tiff-3.9.4/tiffio.h	/^    TIFFVGetMethod	vgetfield;	\/* tag get routine *\/$/;"	m	struct:__anon69
vgetparent	3rdparty/tiff-3.9.4/tif_fax3.c	/^	TIFFVGetMethod vgetparent;	\/* super-class method *\/$/;"	m	struct:__anon43	file:
vgetparent	3rdparty/tiff-3.9.4/tif_jbig.c	/^        TIFFVGetMethod vgetparent;$/;"	m	struct:__anon47	file:
vgetparent	3rdparty/tiff-3.9.4/tif_jpeg.c	/^	TIFFVGetMethod	vgetparent;	\/* super-class method *\/$/;"	m	struct:__anon48	file:
vgetparent	3rdparty/tiff-3.9.4/tif_luv.c	/^	TIFFVSetMethod		vgetparent;	\/* super-class method *\/$/;"	m	struct:logLuvState	file:
vgetparent	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	TIFFVGetMethod vgetparent;$/;"	m	struct:__anon55	file:
vgetparent	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^	TIFFVSetMethod		vgetparent;	\/* super-class method *\/$/;"	m	struct:__anon57	file:
vgetparent	3rdparty/tiff-3.9.4/tif_predict.h	/^	TIFFVGetMethod	vgetparent;	\/* super-class method *\/$/;"	m	struct:__anon58
vgetparent	3rdparty/tiff-3.9.4/tif_zip.c	/^	TIFFVGetMethod	vgetparent;		\/* super-class method *\/$/;"	m	struct:__anon59	file:
viewFromChannelName	3rdparty/openexr-1.7.0/ImfMultiView.cpp	/^viewFromChannelName (const string &channel,$/;"	f	namespace:Imf
viewNum	3rdparty/openexr-1.7.0/ImfMultiView.cpp	/^viewNum (const string &view, const StringVector &multiView)$/;"	f	namespace:Imf::__anon22
virtualLights	integrators/igi.h	/^    vector<vector<VirtualLight> > virtualLights;$/;"	m	class:IGIIntegrator
visualizeObjectIds	renderers/samplerrenderer.h	/^    bool visualizeObjectIds;$/;"	m	class:SamplerRenderer
visualizeObjectIds	renderers/samplerrenderer.h	/^    bool visualizeObjectIds;$/;"	m	class:SamplerRendererTask
vknot	shapes/nurbs.h	/^    float *uknot, *vknot;$/;"	m	class:NURBS
vlSetOffset	integrators/igi.h	/^    int vlSetOffset;$/;"	m	class:IGIIntegrator
vlist	tools/ply2pbrt.c	/^static Vertex **vlist;$/;"	v	file:
vmax	shapes/nurbs.h	/^    float umin, umax, vmin, vmax;$/;"	m	class:NURBS
vmin	shapes/nurbs.h	/^    float umin, umax, vmin, vmax;$/;"	m	class:NURBS
vn	tools/obj2pbrt.cpp	/^  std::vector<float> vn;$/;"	m	struct:tinyobj::obj_shape	file:
vn_idx	tools/obj2pbrt.cpp	/^  int v_idx, vt_idx, vn_idx;$/;"	m	struct:tinyobj::vertex_index	file:
vnum	shapes/loopsubdiv.cpp	/^    int vnum(SDVertex *vert) const {$/;"	f	struct:SDFace
voidp	3rdparty/zlib-1.2.5/zconf.h	/^   typedef Byte       *voidp;$/;"	t
voidp	3rdparty/zlib-1.2.5/zconf.h	/^   typedef void       *voidp;$/;"	t
voidp	3rdparty/zlib-1.2.5/zconf.h	/^#  define voidp /;"	d
voidpc	3rdparty/zlib-1.2.5/zconf.h	/^   typedef Byte const *voidpc;$/;"	t
voidpc	3rdparty/zlib-1.2.5/zconf.h	/^   typedef void const *voidpc;$/;"	t
voidpc	3rdparty/zlib-1.2.5/zconf.h	/^#  define voidpc /;"	d
voidpf	3rdparty/zlib-1.2.5/zconf.h	/^   typedef Byte FAR   *voidpf;$/;"	t
voidpf	3rdparty/zlib-1.2.5/zconf.h	/^   typedef void FAR   *voidpf;$/;"	t
voidpf	3rdparty/zlib-1.2.5/zconf.h	/^#  define voidpf /;"	d
volumeIntegrator	renderers/createprobes.h	/^    VolumeIntegrator *volumeIntegrator;$/;"	m	class:CreateRadianceProbes
volumeIntegrator	renderers/samplerrenderer.h	/^    VolumeIntegrator *volumeIntegrator;$/;"	m	class:SamplerRenderer
volumeRegion	core/scene.h	/^    VolumeRegion *volumeRegion;$/;"	m	class:Scene
volumeRegions	core/api.cpp	/^    mutable vector<VolumeRegion *> volumeRegions;$/;"	m	struct:RenderOptions	file:
vorder	shapes/nurbs.h	/^    int nu, uorder, nv, vorder;$/;"	m	class:NURBS
voxelArena	accelerators/grid.h	/^    MemoryArena voxelArena;$/;"	m	class:GridAccel
voxelToPos	accelerators/grid.h	/^    float voxelToPos(int p, int axis) const {$/;"	f	class:GridAccel
voxels	accelerators/grid.h	/^    Voxel **voxels;$/;"	m	class:GridAccel
vs	core/texture.h	/^    const Vector vs, vt;$/;"	m	class:PlanarMapping2D
vsetfield	3rdparty/tiff-3.9.4/tiffio.h	/^    TIFFVSetMethod	vsetfield;	\/* tag set routine *\/$/;"	m	struct:__anon69
vsetparent	3rdparty/tiff-3.9.4/tif_fax3.c	/^	TIFFVSetMethod vsetparent;	\/* super-class method *\/$/;"	m	struct:__anon43	file:
vsetparent	3rdparty/tiff-3.9.4/tif_jbig.c	/^        TIFFVSetMethod vsetparent;$/;"	m	struct:__anon47	file:
vsetparent	3rdparty/tiff-3.9.4/tif_jpeg.c	/^	TIFFVSetMethod	vsetparent;	\/* super-class method *\/$/;"	m	struct:__anon48	file:
vsetparent	3rdparty/tiff-3.9.4/tif_luv.c	/^	TIFFVSetMethod		vsetparent;	\/* super-class method *\/$/;"	m	struct:logLuvState	file:
vsetparent	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	TIFFVSetMethod vsetparent;$/;"	m	struct:__anon55	file:
vsetparent	3rdparty/tiff-3.9.4/tif_pixarlog.c	/^	TIFFVSetMethod		vsetparent;	\/* super-class method *\/$/;"	m	struct:__anon57	file:
vsetparent	3rdparty/tiff-3.9.4/tif_predict.h	/^	TIFFVSetMethod	vsetparent;	\/* super-class method *\/$/;"	m	struct:__anon58
vsetparent	3rdparty/tiff-3.9.4/tif_zip.c	/^	TIFFVSetMethod	vsetparent;		\/* super-class method *\/$/;"	m	struct:__anon59	file:
vsnprintf	3rdparty/zlib-1.2.5/gzguts.h	/^#  define vsnprintf /;"	d
vsnprintf	3rdparty/zlib-1.2.5/zutil.h	/^#         define vsnprintf /;"	d
vt	core/texture.h	/^    const Vector vs, vt;$/;"	m	class:PlanarMapping2D
vt	tools/obj2pbrt.cpp	/^  std::vector<float> vt;$/;"	m	struct:tinyobj::obj_shape	file:
vt_idx	tools/obj2pbrt.cpp	/^  int v_idx, vt_idx, vn_idx;$/;"	m	struct:tinyobj::vertex_index	file:
w	3rdparty/ilmbase-1.0.2/ImathVec.h	/^    T               x, y, z, w; $/;"	m	class:Imath::Vec4
w	core/quaternion.h	/^    float w;$/;"	m	struct:Quaternion
w	shapes/nurbs.cpp	/^float x, y, z, w;$/;"	m	struct:Homogeneous3	file:
wAvg	integrators/irradiancecache.cpp	/^    Vector wAvg;$/;"	m	struct:IrradProcess	file:
wAvg	integrators/irradiancecache.cpp	/^    Vector wAvg;$/;"	m	struct:IrradianceSample	file:
wNext	renderers/metropolis.cpp	/^    Vector wPrev, wNext;$/;"	m	struct:PathVertex	file:
wPrev	renderers/metropolis.cpp	/^    Vector wPrev, wNext;$/;"	m	struct:PathVertex	file:
w_bits	3rdparty/zlib-1.2.5/deflate.h	/^    uInt  w_bits;        \/* log2(w_size)  (8..16) *\/$/;"	m	struct:internal_state
w_mask	3rdparty/zlib-1.2.5/deflate.h	/^    uInt  w_mask;        \/* w_size - 1 *\/$/;"	m	struct:internal_state
w_size	3rdparty/zlib-1.2.5/deflate.h	/^    uInt  w_size;        \/* LZ77 window size (32K by default) *\/$/;"	m	struct:internal_state
wait	3rdparty/ilmbase-1.0.2/IlmThreadSemaphore.cpp	/^void Semaphore::wait () {}$/;"	f	class:IlmThread::Semaphore
wait	3rdparty/ilmbase-1.0.2/IlmThreadSemaphorePosix.cpp	/^Semaphore::wait ()$/;"	f	class:IlmThread::Semaphore
wait	3rdparty/ilmbase-1.0.2/IlmThreadSemaphorePosixCompat.cpp	/^Semaphore::wait ()$/;"	f	class:IlmThread::Semaphore
wait	3rdparty/ilmbase-1.0.2/IlmThreadSemaphoreWin32.cpp	/^Semaphore::wait()$/;"	f	class:IlmThread::Semaphore
wait	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    void		wait () {_sem.wait();}$/;"	f	struct:Imf::__anon23::LineBuffer
wait	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    inline void		wait () {_sem.wait();}$/;"	f	struct:Imf::__anon31::LineBuffer
wait	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    inline void		wait () {_sem.wait();}$/;"	f	struct:Imf::__anon34::TileBuffer
wait	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    inline void		wait () {_sem.wait();}$/;"	f	struct:Imf::__anon37::TileBuffer
waitersCount	core/parallel.h	/^    uint32_t waitersCount;$/;"	m	class:ConditionVariable
waitersCountMutex	core/parallel.h	/^    CRITICAL_SECTION waitersCountMutex, conditionMutex;$/;"	m	class:ConditionVariable
want	3rdparty/zlib-1.2.5/gzguts.h	/^    unsigned want;          \/* requested buffer size, default is GZBUFSIZE *\/$/;"	m	struct:__anon74
wantedSamples	samplers/halton.h	/^    int wantedSamples, currentSample;$/;"	m	class:HaltonSampler
was	3rdparty/zlib-1.2.5/inflate.h	/^    unsigned was;               \/* initial length of match *\/$/;"	m	struct:inflate_state
wav2Decode	3rdparty/openexr-1.7.0/ImfWav.cpp	/^wav2Decode$/;"	f	namespace:Imf
wav2Encode	3rdparty/openexr-1.7.0/ImfWav.cpp	/^wav2Encode$/;"	f	namespace:Imf
wbits	3rdparty/zlib-1.2.5/inflate.h	/^    unsigned wbits;             \/* log base 2 of requested window size *\/$/;"	m	struct:inflate_state
wdec14	3rdparty/openexr-1.7.0/ImfWav.cpp	/^wdec14 (unsigned short  l, unsigned short  h,$/;"	f	namespace:Imf::__anon41
wdec16	3rdparty/openexr-1.7.0/ImfWav.cpp	/^wdec16 (unsigned short  l, unsigned short  h,$/;"	f	namespace:Imf::__anon41
weight	core/mipmap.h	/^        float weight[4];$/;"	m	struct:MIPMap::ResampleWeight
weightBoundary	shapes/loopsubdiv.cpp	/^Point LoopSubdiv::weightBoundary(SDVertex *vert, float beta) {$/;"	f	class:LoopSubdiv
weightLut	core/mipmap.h	/^    static float *weightLut;$/;"	m	class:MIPMap
weightLut	core/mipmap.h	/^template <typename T> float *MIPMap<T>::weightLut = NULL;$/;"	m	class:MIPMap
weightOneRing	shapes/loopsubdiv.cpp	/^Point LoopSubdiv::weightOneRing(SDVertex *vert, float beta) {$/;"	f	class:LoopSubdiv
weightSum	film/image.h	/^        float weightSum;$/;"	m	struct:ImageFilm::Pixel
weight_props_ply	tools/ply.c	/^void weight_props_ply (PlyFile *ply, float weight, void *other_props)$/;"	f
weights	tools/ply.h	/^  float *weights;        \/* list of weights of the properties *\/$/;"	m	struct:PlyPropRules
wenc14	3rdparty/openexr-1.7.0/ImfWav.cpp	/^wenc14 (unsigned short  a, unsigned short  b,$/;"	f	namespace:Imf::__anon41
wenc16	3rdparty/openexr-1.7.0/ImfWav.cpp	/^wenc16 (unsigned short  a, unsigned short  b,$/;"	f	namespace:Imf::__anon41
what	3rdparty/ilmbase-1.0.2/IexBaseExc.cpp	/^BaseExc::what () const throw ()$/;"	f	class:Iex::BaseExc
whave	3rdparty/zlib-1.2.5/inflate.h	/^    unsigned whave;             \/* valid bytes in the window *\/$/;"	m	struct:inflate_state
which_elem	tools/ply.h	/^  PlyElement *which_elem;       \/* element we're currently reading or writing *\/$/;"	m	struct:PlyFile
white	3rdparty/openexr-1.7.0/ImfChromaticities.h	/^    Imath::V2f	white;$/;"	m	struct:Imf::Chromaticities
wi	integrators/photonmap.cpp	/^    Vector wi;$/;"	m	struct:Photon	file:
width	3rdparty/openexr-1.7.0/ImfPreviewImage.h	/^    unsigned int	width () const	{return _width;}$/;"	f	class:Imf::PreviewImage
width	3rdparty/tiff-3.9.4/tiffio.h	/^	uint32 width;                           \/* image width *\/$/;"	m	struct:_TIFFRGBAImage
width	accelerators/grid.h	/^    Vector width, invWidth;$/;"	m	class:GridAccel
width	core/mipmap.h	/^    uint32_t width, height, nLevels;$/;"	m	class:MIPMap
width	core/targa.h	/^    uint16_t    width;$/;"	m	struct:__anon86
width_in_blocks	3rdparty/tiff-3.9.4/tif_jpeg.c	/^#define width_in_blocks /;"	d	file:
win3ErrorHandler	3rdparty/tiff-3.9.4/tif_win3.c	/^win3ErrorHandler(const char* module, const char* fmt, va_list ap)$/;"	f	file:
win3WarningHandler	3rdparty/tiff-3.9.4/tif_win3.c	/^win3WarningHandler(const char* module, const char* fmt, va_list ap)$/;"	f	file:
window	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^Frustum<T> Frustum<T>::window(T l, T r, T t, T b) const$/;"	f	class:Imath::Frustum
window	3rdparty/zlib-1.2.5/deflate.h	/^    Bytef *window;$/;"	m	struct:internal_state
window	3rdparty/zlib-1.2.5/inflate.h	/^    unsigned char FAR *window;  \/* allocated sliding window, if needed *\/$/;"	m	struct:inflate_state
window_size	3rdparty/zlib-1.2.5/deflate.h	/^    ulg window_size;$/;"	m	struct:internal_state
wnext	3rdparty/zlib-1.2.5/inflate.h	/^    unsigned wnext;             \/* window write index *\/$/;"	m	struct:inflate_state
work	3rdparty/zlib-1.2.5/inflate.h	/^    unsigned short work[288];   \/* work area for code table building *\/$/;"	m	struct:inflate_state
workDone	core/progressreporter.h	/^    int workDone, plussesPrinted, totalPlusses;$/;"	m	class:ProgressReporter
workerSemaphore	core/parallel.cpp	/^static Semaphore *workerSemaphore;$/;"	v	file:
worldRadius	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^T Frustum<T>::worldRadius(const Vec3<T> &p, T radius) const$/;"	f	class:Imath::Frustum
wrap	3rdparty/zlib-1.2.5/deflate.h	/^    int   wrap;          \/* bit 0 true for zlib, bit 1 true for gzip *\/$/;"	m	struct:internal_state
wrap	3rdparty/zlib-1.2.5/inflate.h	/^    int wrap;                   \/* bit 0 true for zlib, bit 1 true for gzip *\/$/;"	m	struct:inflate_state
wrapMode	core/mipmap.h	/^    ImageWrap wrapMode;$/;"	m	class:MIPMap
wrapMode	textures/imagemap.h	/^    ImageWrap wrapMode;$/;"	m	struct:TexInfo
write	3rdparty/openexr-1.7.0/ImfStdIO.cpp	/^StdOFStream::write (const char c[\/*n*\/], int n)$/;"	f	class:Imf::StdOFStream
write	3rdparty/openexr-1.7.0/ImfStdIO.cpp	/^StdOSStream::write (const char c[\/*n*\/], int n)$/;"	f	class:Imf::StdOSStream
write	3rdparty/openexr-1.7.0/ImfXdr.h	/^    write (T &out, Int64 v)$/;"	f	namespace:Imf::Xdr
write	3rdparty/openexr-1.7.0/ImfXdr.h	/^write (T &out, bool v)$/;"	f	namespace:Imf::Xdr
write	3rdparty/openexr-1.7.0/ImfXdr.h	/^write (T &out, char v)$/;"	f	namespace:Imf::Xdr
write	3rdparty/openexr-1.7.0/ImfXdr.h	/^write (T &out, const char v[])		\/\/ zero-terminated string$/;"	f	namespace:Imf::Xdr
write	3rdparty/openexr-1.7.0/ImfXdr.h	/^write (T &out, const char v[], int n)	\/\/ fixed-size char array$/;"	f	namespace:Imf::Xdr
write	3rdparty/openexr-1.7.0/ImfXdr.h	/^write (T &out, double v)$/;"	f	namespace:Imf::Xdr
write	3rdparty/openexr-1.7.0/ImfXdr.h	/^write (T &out, float v)$/;"	f	namespace:Imf::Xdr
write	3rdparty/openexr-1.7.0/ImfXdr.h	/^write (T &out, half v)$/;"	f	namespace:Imf::Xdr
write	3rdparty/openexr-1.7.0/ImfXdr.h	/^write (T &out, signed char v)$/;"	f	namespace:Imf::Xdr
write	3rdparty/openexr-1.7.0/ImfXdr.h	/^write (T &out, signed int v)$/;"	f	namespace:Imf::Xdr
write	3rdparty/openexr-1.7.0/ImfXdr.h	/^write (T &out, signed long v)$/;"	f	namespace:Imf::Xdr
write	3rdparty/openexr-1.7.0/ImfXdr.h	/^write (T &out, signed short v)$/;"	f	namespace:Imf::Xdr
write	3rdparty/openexr-1.7.0/ImfXdr.h	/^write (T &out, unsigned char v)$/;"	f	namespace:Imf::Xdr
write	3rdparty/openexr-1.7.0/ImfXdr.h	/^write (T &out, unsigned int v)$/;"	f	namespace:Imf::Xdr
write	3rdparty/openexr-1.7.0/ImfXdr.h	/^write (T &out, unsigned long v)$/;"	f	namespace:Imf::Xdr
write	3rdparty/openexr-1.7.0/ImfXdr.h	/^write (T &out, unsigned short v)$/;"	f	namespace:Imf::Xdr
write	3rdparty/tiff-3.9.4/tif_acorn.c	/^extern int write(int fd, const char *buf, int nbytes)$/;"	f
write3	core/stb_image_write.h	/^static void write3(FILE *f, unsigned char a, unsigned char b, unsigned char c)$/;"	f
writeChars	3rdparty/openexr-1.7.0/ImfIO.h	/^    writeChars (OStream &os, const char c[\/*n*\/], int n)$/;"	f	struct:Imf::StreamIO
writeChars	3rdparty/openexr-1.7.0/ImfIO.h	/^    writeChars (char *&op, const char c[\/*n*\/], int n)$/;"	f	struct:Imf::CharPtrIO
writeLineOffsets	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^writeLineOffsets (OStream &os, const vector<Int64> &lineOffsets)$/;"	f	namespace:Imf::__anon24
writePixelData	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^writePixelData (OutputFile::Data *ofd, const LineBuffer *lineBuffer)$/;"	f	namespace:Imf::__anon24
writePixelData	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^writePixelData (OutputFile::Data *ofd,$/;"	f	namespace:Imf::__anon24
writePixels	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesOutputFile::writePixels (int numScanLines)$/;"	f	class:Imf::AcesOutputFile
writePixels	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^OutputFile::writePixels (int numScanLines)$/;"	f	class:Imf::OutputFile
writePixels	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaOutputFile::ToYca::writePixels (int numScanLines)$/;"	f	class:Imf::RgbaOutputFile::ToYca
writePixels	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaOutputFile::writePixels (int numScanLines)$/;"	f	class:Imf::RgbaOutputFile
writeSignedChars	3rdparty/openexr-1.7.0/ImfXdr.h	/^writeSignedChars (T &out, const signed char c[], int n)$/;"	f	namespace:Imf::Xdr
writeTile	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::writeTile (int dx, int dy, int l)$/;"	f	class:Imf::TiledOutputFile
writeTile	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::writeTile (int dx, int dy, int lx, int ly)$/;"	f	class:Imf::TiledOutputFile
writeTile	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::ToYa::writeTile (int dx, int dy, int lx, int ly)$/;"	f	class:Imf::TiledRgbaOutputFile::ToYa
writeTile	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::writeTile (int dx, int dy, int l)$/;"	f	class:Imf::TiledRgbaOutputFile
writeTile	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::writeTile (int dx, int dy, int lx, int ly)$/;"	f	class:Imf::TiledRgbaOutputFile
writeTileData	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^writeTileData (TiledOutputFile::Data *ofd,$/;"	f	namespace:Imf::__anon38
writeTiles	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::writeTiles (int dx1, int dx2, int dy1, int dy2,$/;"	f	class:Imf::TiledOutputFile
writeTiles	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::writeTiles (int dx1, int dxMax, int dyMin, int dyMax, int l)$/;"	f	class:Imf::TiledOutputFile
writeTiles	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::writeTiles$/;"	f	class:Imf::TiledRgbaOutputFile
writeTo	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::writeTo (OStream &os, bool isTiled) const$/;"	f	class:Imf::Header
writeTo	3rdparty/openexr-1.7.0/ImfTileOffsets.cpp	/^TileOffsets::writeTo (OStream &os) const$/;"	f	class:Imf::TileOffsets
writeUInt	3rdparty/openexr-1.7.0/ImfHuf.cpp	/^writeUInt (char buf[4], unsigned int i)$/;"	f	namespace:Imf::__anon20
writeUnsignedChars	3rdparty/openexr-1.7.0/ImfXdr.h	/^writeUnsignedChars (T &out, const unsigned char c[], int n)$/;"	f	namespace:Imf::Xdr
writeValueTo	3rdparty/openexr-1.7.0/ImfAttribute.h	/^TypedAttribute<T>::writeValueTo (OStream &os, int version) const$/;"	f	class:Imf::TypedAttribute
writeValueTo	3rdparty/openexr-1.7.0/ImfBoxAttribute.cpp	/^Box2fAttribute::writeValueTo (OStream &os, int version) const$/;"	f	class:Imf::Box2fAttribute
writeValueTo	3rdparty/openexr-1.7.0/ImfBoxAttribute.cpp	/^Box2iAttribute::writeValueTo (OStream &os, int version) const$/;"	f	class:Imf::Box2iAttribute
writeValueTo	3rdparty/openexr-1.7.0/ImfChannelListAttribute.cpp	/^ChannelListAttribute::writeValueTo (OStream &os, int version) const$/;"	f	class:Imf::ChannelListAttribute
writeValueTo	3rdparty/openexr-1.7.0/ImfChromaticitiesAttribute.cpp	/^ChromaticitiesAttribute::writeValueTo (OStream &os, int version) const$/;"	f	class:Imf::ChromaticitiesAttribute
writeValueTo	3rdparty/openexr-1.7.0/ImfCompressionAttribute.cpp	/^CompressionAttribute::writeValueTo (OStream &os, int version) const$/;"	f	class:Imf::CompressionAttribute
writeValueTo	3rdparty/openexr-1.7.0/ImfEnvmapAttribute.cpp	/^EnvmapAttribute::writeValueTo (OStream &os, int version) const$/;"	f	class:Imf::EnvmapAttribute
writeValueTo	3rdparty/openexr-1.7.0/ImfKeyCodeAttribute.cpp	/^KeyCodeAttribute::writeValueTo (OStream &os, int version) const$/;"	f	class:Imf::KeyCodeAttribute
writeValueTo	3rdparty/openexr-1.7.0/ImfLineOrderAttribute.cpp	/^LineOrderAttribute::writeValueTo (OStream &os, int version) const$/;"	f	class:Imf::LineOrderAttribute
writeValueTo	3rdparty/openexr-1.7.0/ImfMatrixAttribute.cpp	/^M33dAttribute::writeValueTo (OStream &os, int version) const$/;"	f	class:Imf::M33dAttribute
writeValueTo	3rdparty/openexr-1.7.0/ImfMatrixAttribute.cpp	/^M33fAttribute::writeValueTo (OStream &os, int version) const$/;"	f	class:Imf::M33fAttribute
writeValueTo	3rdparty/openexr-1.7.0/ImfMatrixAttribute.cpp	/^M44dAttribute::writeValueTo (OStream &os, int version) const$/;"	f	class:Imf::M44dAttribute
writeValueTo	3rdparty/openexr-1.7.0/ImfMatrixAttribute.cpp	/^M44fAttribute::writeValueTo (OStream &os, int version) const$/;"	f	class:Imf::M44fAttribute
writeValueTo	3rdparty/openexr-1.7.0/ImfOpaqueAttribute.cpp	/^OpaqueAttribute::writeValueTo (OStream &os, int version) const$/;"	f	class:Imf::OpaqueAttribute
writeValueTo	3rdparty/openexr-1.7.0/ImfPreviewImageAttribute.cpp	/^PreviewImageAttribute::writeValueTo (OStream &os, int version) const$/;"	f	class:Imf::PreviewImageAttribute
writeValueTo	3rdparty/openexr-1.7.0/ImfRationalAttribute.cpp	/^RationalAttribute::writeValueTo (OStream &os, int version) const$/;"	f	class:Imf::RationalAttribute
writeValueTo	3rdparty/openexr-1.7.0/ImfStringAttribute.cpp	/^StringAttribute::writeValueTo (OStream &os, int version) const$/;"	f	class:Imf::StringAttribute
writeValueTo	3rdparty/openexr-1.7.0/ImfStringVectorAttribute.cpp	/^StringVectorAttribute::writeValueTo (OStream &os, int version) const$/;"	f	class:Imf::StringVectorAttribute
writeValueTo	3rdparty/openexr-1.7.0/ImfTileDescriptionAttribute.cpp	/^TileDescriptionAttribute::writeValueTo (OStream &os, int version) const$/;"	f	class:Imf::TileDescriptionAttribute
writeValueTo	3rdparty/openexr-1.7.0/ImfTimeCodeAttribute.cpp	/^TimeCodeAttribute::writeValueTo (OStream &os, int version) const$/;"	f	class:Imf::TimeCodeAttribute
writeValueTo	3rdparty/openexr-1.7.0/ImfVecAttribute.cpp	/^V2dAttribute::writeValueTo (OStream &os, int version) const$/;"	f	class:Imf::V2dAttribute
writeValueTo	3rdparty/openexr-1.7.0/ImfVecAttribute.cpp	/^V2fAttribute::writeValueTo (OStream &os, int version) const$/;"	f	class:Imf::V2fAttribute
writeValueTo	3rdparty/openexr-1.7.0/ImfVecAttribute.cpp	/^V2iAttribute::writeValueTo (OStream &os, int version) const$/;"	f	class:Imf::V2iAttribute
writeValueTo	3rdparty/openexr-1.7.0/ImfVecAttribute.cpp	/^V3dAttribute::writeValueTo (OStream &os, int version) const$/;"	f	class:Imf::V3dAttribute
writeValueTo	3rdparty/openexr-1.7.0/ImfVecAttribute.cpp	/^V3fAttribute::writeValueTo (OStream &os, int version) const$/;"	f	class:Imf::V3fAttribute
writeValueTo	3rdparty/openexr-1.7.0/ImfVecAttribute.cpp	/^V3iAttribute::writeValueTo (OStream &os, int version) const$/;"	f	class:Imf::V3iAttribute
write_ascii_item	tools/ply.c	/^void write_ascii_item($/;"	f
write_binary_item	tools/ply.c	/^void write_binary_item($/;"	f
write_cursample	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	tsample_t write_cursample;$/;"	m	struct:__anon55	file:
write_curstrile	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	tstrile_t write_curstrile;$/;"	m	struct:__anon55	file:
write_lrt	tools/ply2pbrt.c	/^write_lrt(void)$/;"	f
write_pixels	core/stb_image_write.h	/^static void write_pixels(FILE *f, int rgb_dir, int vdir, int x, int y, int comp, void *data, int write_alpha, int scanline_pad)$/;"	f
write_ply	tools/ply.c	/^PlyFile *write_ply($/;"	f
write_scalar_type	tools/ply.c	/^void write_scalar_type (FILE *fp, int code)$/;"	f
write_table	3rdparty/zlib-1.2.5/crc32.c	/^local void write_table(out, table)$/;"	f
writefv	core/stb_image_write.h	/^static void writefv(FILE *f, const char *fmt, va_list v)$/;"	f
writeheader_done	3rdparty/tiff-3.9.4/tif_ojpeg.c	/^	uint8 writeheader_done;$/;"	m	struct:__anon55	file:
wsize	3rdparty/zlib-1.2.5/inflate.h	/^    unsigned wsize;             \/* window size or zero if not using window *\/$/;"	m	struct:inflate_state
x	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^    T           x[3][3];$/;"	m	class:Imath::Matrix33
x	3rdparty/ilmbase-1.0.2/ImathMatrix.h	/^    T           x[4][4];$/;"	m	class:Imath::Matrix44
x	3rdparty/ilmbase-1.0.2/ImathVec.h	/^    T			x, y, z;$/;"	m	class:Imath::Vec3
x	3rdparty/ilmbase-1.0.2/ImathVec.h	/^    T			x, y;$/;"	m	class:Imath::Vec2
x	3rdparty/ilmbase-1.0.2/ImathVec.h	/^    T               x, y, z, w; $/;"	m	class:Imath::Vec4
x	core/geometry.h	/^    float x, y, z;$/;"	m	class:Normal
x	core/geometry.h	/^    float x, y, z;$/;"	m	class:Point
x	core/geometry.h	/^    float x, y, z;$/;"	m	class:Vector
x	shapes/nurbs.cpp	/^float x, y, z, w;$/;"	m	struct:Homogeneous3	file:
x	tools/ply2pbrt.c	/^  float x,y,z;$/;"	m	struct:Vertex	file:
x0	renderers/metropolis.cpp	/^    int x0, x1, y0, y1;$/;"	m	class:MLTTask	file:
x1	renderers/metropolis.cpp	/^    int x0, x1, y0, y1;$/;"	m	class:MLTTask	file:
xPixelCount	film/image.h	/^    int xPixelStart, yPixelStart, xPixelCount, yPixelCount;$/;"	m	class:ImageFilm
xPixelEnd	core/sampler.h	/^    const int xPixelStart, xPixelEnd, yPixelStart, yPixelEnd;$/;"	m	class:Sampler
xPixelSamples	samplers/stratified.h	/^    int xPixelSamples, yPixelSamples;$/;"	m	class:StratifiedSampler
xPixelStart	core/sampler.h	/^    const int xPixelStart, xPixelEnd, yPixelStart, yPixelEnd;$/;"	m	class:Sampler
xPixelStart	film/image.h	/^    int xPixelStart, yPixelStart, xPixelCount, yPixelCount;$/;"	m	class:ImageFilm
xPos	samplers/adaptive.h	/^    int xPos, yPos;$/;"	m	class:AdaptiveSampler
xPos	samplers/lowdiscrepancy.h	/^    int xPos, yPos, nPixelSamples;$/;"	m	class:LDSampler
xPos	samplers/random.h	/^    int xPos, yPos, nSamples;$/;"	m	class:RandomSampler
xPos	samplers/stratified.h	/^    int xPos, yPos;$/;"	m	class:StratifiedSampler
xResolution	core/film.h	/^    const int xResolution, yResolution;$/;"	m	class:Film
xSampling	3rdparty/openexr-1.7.0/ImfChannelList.h	/^    int			xSampling;$/;"	m	struct:Imf::Channel
xSampling	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^    int			xSampling;$/;"	m	struct:Imf::Slice
xSampling	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    int			xSampling;$/;"	m	struct:Imf::__anon23::OutSliceInfo	file:
xSampling	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    int		xSampling;$/;"	m	struct:Imf::__anon31::InSliceInfo	file:
xSize	3rdparty/openexr-1.7.0/ImfTileDescription.h	/^    unsigned int	xSize;		\/\/ size of a tile in the x dimension$/;"	m	class:Imf::TileDescription
xStride	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^    size_t		xStride;$/;"	m	struct:Imf::Slice
xStride	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    size_t		xStride;$/;"	m	struct:Imf::__anon23::OutSliceInfo	file:
xStride	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    size_t	xStride;$/;"	m	struct:Imf::__anon31::InSliceInfo	file:
xStride	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    size_t      xStride;$/;"	m	struct:Imf::__anon34::TInSliceInfo	file:
xStride	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    size_t		xStride;$/;"	m	struct:Imf::__anon37::TOutSliceInfo	file:
xTile	samplers/bestcandidate.h	/^    int xTile, yTile;$/;"	m	class:BestCandidateSampler
xTileCoords	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^    bool                xTileCoords;$/;"	m	struct:Imf::Slice
xTileCoords	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    int         xTileCoords;$/;"	m	struct:Imf::__anon34::TInSliceInfo	file:
xTileCoords	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    int                 xTileCoords;$/;"	m	struct:Imf::__anon37::TOutSliceInfo	file:
xTileEnd	samplers/bestcandidate.h	/^    int xTileStart, xTileEnd, yTileStart, yTileEnd;$/;"	m	class:BestCandidateSampler
xTileStart	samplers/bestcandidate.h	/^    int xTileStart, xTileEnd, yTileStart, yTileEnd;$/;"	m	class:BestCandidateSampler
xWidth	core/filter.h	/^    const float xWidth, yWidth;$/;"	m	class:Filter
xflags	3rdparty/zlib-1.2.5/zlib.h	/^    int     xflags;     \/* extra flags (not used when writing a gzip file) *\/$/;"	m	struct:gz_header_s
xosargs_read_ext	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define	xosargs_read_ext(/;"	d	file:
xosargs_read_ptr	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define	xosargs_read_ptr(/;"	d	file:
xosargs_set_ptr	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define	xosargs_set_ptr(/;"	d	file:
xosfind_close	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define	xosfind_close(/;"	d	file:
xosfind_open	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define	xosfind_open(/;"	d	file:
xosfind_openin	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define	xosfind_openin(/;"	d	file:
xosfind_openout	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define	xosfind_openout(/;"	d	file:
xosfind_openup	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define	xosfind_openup(/;"	d	file:
xosgbpb_read	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define	xosgbpb_read(/;"	d	file:
xosgbpb_write	3rdparty/tiff-3.9.4/tif_acorn.c	/^#define	xosgbpb_write(/;"	d	file:
xy	3rdparty/ilmbase-1.0.2/ImathShear.h	/^    T			xy, xz, yz, yx, zx, zy;$/;"	m	class:Imath::Shear6
xz	3rdparty/ilmbase-1.0.2/ImathShear.h	/^    T			xy, xz, yz, yx, zx, zy;$/;"	m	class:Imath::Shear6
y	3rdparty/ilmbase-1.0.2/ImathVec.h	/^    T			x, y, z;$/;"	m	class:Imath::Vec3
y	3rdparty/ilmbase-1.0.2/ImathVec.h	/^    T			x, y;$/;"	m	class:Imath::Vec2
y	3rdparty/ilmbase-1.0.2/ImathVec.h	/^    T               x, y, z, w; $/;"	m	class:Imath::Vec4
y	core/geometry.h	/^    float x, y, z;$/;"	m	class:Normal
y	core/geometry.h	/^    float x, y, z;$/;"	m	class:Point
y	core/geometry.h	/^    float x, y, z;$/;"	m	class:Vector
y	core/spectrum.h	/^    float y() const {$/;"	f	class:RGBSpectrum
y	core/spectrum.h	/^    float y() const {$/;"	f	class:SampledSpectrum
y	shapes/nurbs.cpp	/^float x, y, z, w;$/;"	m	struct:Homogeneous3	file:
y	tools/ply2pbrt.c	/^  float x,y,z;$/;"	m	struct:Vertex	file:
y0	renderers/metropolis.cpp	/^    int x0, x1, y0, y1;$/;"	m	class:MLTTask	file:
y1	renderers/metropolis.cpp	/^    int x0, x1, y0, y1;$/;"	m	class:MLTTask	file:
yPixelCount	film/image.h	/^    int xPixelStart, yPixelStart, xPixelCount, yPixelCount;$/;"	m	class:ImageFilm
yPixelEnd	core/sampler.h	/^    const int xPixelStart, xPixelEnd, yPixelStart, yPixelEnd;$/;"	m	class:Sampler
yPixelSamples	samplers/stratified.h	/^    int xPixelSamples, yPixelSamples;$/;"	m	class:StratifiedSampler
yPixelStart	core/sampler.h	/^    const int xPixelStart, xPixelEnd, yPixelStart, yPixelEnd;$/;"	m	class:Sampler
yPixelStart	film/image.h	/^    int xPixelStart, yPixelStart, xPixelCount, yPixelCount;$/;"	m	class:ImageFilm
yPos	samplers/adaptive.h	/^    int xPos, yPos;$/;"	m	class:AdaptiveSampler
yPos	samplers/lowdiscrepancy.h	/^    int xPos, yPos, nPixelSamples;$/;"	m	class:LDSampler
yPos	samplers/random.h	/^    int xPos, yPos, nSamples;$/;"	m	class:RandomSampler
yPos	samplers/stratified.h	/^    int xPos, yPos;$/;"	m	class:StratifiedSampler
yResolution	core/film.h	/^    const int xResolution, yResolution;$/;"	m	class:Film
ySampling	3rdparty/openexr-1.7.0/ImfChannelList.h	/^    int			ySampling;$/;"	m	struct:Imf::Channel
ySampling	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^    int			ySampling;$/;"	m	struct:Imf::Slice
ySampling	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    int			ySampling;$/;"	m	struct:Imf::__anon23::OutSliceInfo	file:
ySampling	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    int		ySampling;$/;"	m	struct:Imf::__anon31::InSliceInfo	file:
ySize	3rdparty/openexr-1.7.0/ImfTileDescription.h	/^    unsigned int	ySize;		\/\/ size of a tile in the y dimension$/;"	m	class:Imf::TileDescription
yStride	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^    size_t		yStride;$/;"	m	struct:Imf::Slice
yStride	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    size_t		yStride;$/;"	m	struct:Imf::__anon23::OutSliceInfo	file:
yStride	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^    size_t	yStride;$/;"	m	struct:Imf::__anon31::InSliceInfo	file:
yStride	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    size_t      yStride;$/;"	m	struct:Imf::__anon34::TInSliceInfo	file:
yStride	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    size_t		yStride;$/;"	m	struct:Imf::__anon37::TOutSliceInfo	file:
yTile	samplers/bestcandidate.h	/^    int xTile, yTile;$/;"	m	class:BestCandidateSampler
yTileCoords	3rdparty/openexr-1.7.0/ImfFrameBuffer.h	/^    bool                yTileCoords;$/;"	m	struct:Imf::Slice
yTileCoords	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^    int         yTileCoords;$/;"	m	struct:Imf::__anon34::TInSliceInfo	file:
yTileCoords	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    int                 yTileCoords;$/;"	m	struct:Imf::__anon37::TOutSliceInfo	file:
yTileEnd	samplers/bestcandidate.h	/^    int xTileStart, xTileEnd, yTileStart, yTileEnd;$/;"	m	class:BestCandidateSampler
yTileStart	samplers/bestcandidate.h	/^    int xTileStart, xTileEnd, yTileStart, yTileEnd;$/;"	m	class:BestCandidateSampler
yWidth	core/filter.h	/^    const float xWidth, yWidth;$/;"	m	class:Filter
ycbcr	3rdparty/tiff-3.9.4/tiffio.h	/^	TIFFYCbCrToRGB* ycbcr;                  \/* YCbCr conversion state *\/$/;"	m	struct:_TIFFRGBAImage
ycbcrsampling_fetched	3rdparty/tiff-3.9.4/tif_jpeg.c	/^        int             ycbcrsampling_fetched;$/;"	m	struct:__anon48	file:
yon	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^    T           yon() const     { return _far;      }$/;"	f	class:Imath::Frustum
yon	lights/projection.h	/^    float hither, yon;$/;"	m	class:ProjectionLight
ys	3rdparty/openexr-1.7.0/ImfB44Compressor.cpp	/^    int			ys;$/;"	m	struct:Imf::B44Compressor::ChannelData	file:
ys	3rdparty/openexr-1.7.0/ImfPizCompressor.cpp	/^    int			ys;$/;"	m	struct:Imf::PizCompressor::ChannelData	file:
ywFromHeader	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^ywFromHeader (const Header &header)$/;"	f	namespace:Imf::__anon28
ywFromHeader	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^ywFromHeader (const Header &header)$/;"	f	namespace:Imf::__anon39
yx	3rdparty/ilmbase-1.0.2/ImathShear.h	/^    T			xy, xz, yz, yx, zx, zy;$/;"	m	class:Imath::Shear6
yy_accept	core/pbrtlex.cpp	/^static yyconst flex_int16_t yy_accept[394] =$/;"	v	file:
yy_at_bol	core/pbrtlex.cpp	/^	int yy_at_bol;$/;"	m	struct:yy_buffer_state	file:
yy_base	core/pbrtlex.cpp	/^static yyconst flex_int16_t yy_base[399] =$/;"	v	file:
yy_bs_column	core/pbrtlex.cpp	/^    int yy_bs_column; \/**< The column count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_bs_lineno	core/pbrtlex.cpp	/^    int yy_bs_lineno; \/**< The line count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_pos	core/pbrtlex.cpp	/^	char *yy_buf_pos;		\/* current position in input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_size	core/pbrtlex.cpp	/^	yy_size_t yy_buf_size;$/;"	m	struct:yy_buffer_state	file:
yy_buffer_stack	core/pbrtlex.cpp	/^static YY_BUFFER_STATE * yy_buffer_stack = 0; \/**< Stack as an array. *\/$/;"	v	file:
yy_buffer_stack_max	core/pbrtlex.cpp	/^static size_t yy_buffer_stack_max = 0; \/**< capacity of stack. *\/$/;"	v	file:
yy_buffer_stack_top	core/pbrtlex.cpp	/^static size_t yy_buffer_stack_top = 0; \/**< index of top of stack. *\/$/;"	v	file:
yy_buffer_state	core/pbrtlex.cpp	/^struct yy_buffer_state$/;"	s	file:
yy_buffer_status	core/pbrtlex.cpp	/^	int yy_buffer_status;$/;"	m	struct:yy_buffer_state	file:
yy_c_buf_p	core/pbrtlex.cpp	/^static char *yy_c_buf_p = (char *) 0;$/;"	v	file:
yy_ch_buf	core/pbrtlex.cpp	/^	char *yy_ch_buf;		\/* input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_chk	core/pbrtlex.cpp	/^static yyconst flex_int16_t yy_chk[486] =$/;"	v	file:
yy_create_buffer	core/pbrtlex.cpp	/^    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )$/;"	f
yy_def	core/pbrtlex.cpp	/^static yyconst flex_int16_t yy_def[399] =$/;"	v	file:
yy_delete_buffer	core/pbrtlex.cpp	/^    void yy_delete_buffer (YY_BUFFER_STATE  b )$/;"	f
yy_did_buffer_switch_on_eof	core/pbrtlex.cpp	/^static int yy_did_buffer_switch_on_eof;$/;"	v	file:
yy_ec	core/pbrtlex.cpp	/^static yyconst flex_int32_t yy_ec[256] =$/;"	v	file:
yy_fatal_error	core/pbrtlex.cpp	/^static void yy_fatal_error (yyconst char* msg )$/;"	f	file:
yy_fill_buffer	core/pbrtlex.cpp	/^	int yy_fill_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_flex_debug	core/pbrtlex.cpp	/^int yy_flex_debug = 0;$/;"	v
yy_flex_strlen	core/pbrtlex.cpp	/^static int yy_flex_strlen (yyconst char * s )$/;"	f	file:
yy_flex_strncpy	core/pbrtlex.cpp	/^static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )$/;"	f	file:
yy_flush_buffer	core/pbrtlex.cpp	/^    void yy_flush_buffer (YY_BUFFER_STATE  b )$/;"	f
yy_get_next_buffer	core/pbrtlex.cpp	/^static int yy_get_next_buffer (void)$/;"	f	file:
yy_get_previous_state	core/pbrtlex.cpp	/^    static yy_state_type yy_get_previous_state (void)$/;"	f	file:
yy_hold_char	core/pbrtlex.cpp	/^static char yy_hold_char;$/;"	v	file:
yy_init	core/pbrtlex.cpp	/^static int yy_init = 0;		\/* whether we need to initialize *\/$/;"	v	file:
yy_init_buffer	core/pbrtlex.cpp	/^    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )$/;"	f	file:
yy_init_globals	core/pbrtlex.cpp	/^static int yy_init_globals (void)$/;"	f	file:
yy_input_file	core/pbrtlex.cpp	/^	FILE *yy_input_file;$/;"	m	struct:yy_buffer_state	file:
yy_is_interactive	core/pbrtlex.cpp	/^	int yy_is_interactive;$/;"	m	struct:yy_buffer_state	file:
yy_is_our_buffer	core/pbrtlex.cpp	/^	int yy_is_our_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_last_accepting_cpos	core/pbrtlex.cpp	/^static char *yy_last_accepting_cpos;$/;"	v	file:
yy_last_accepting_state	core/pbrtlex.cpp	/^static yy_state_type yy_last_accepting_state;$/;"	v	file:
yy_load_buffer_state	core/pbrtlex.cpp	/^static void yy_load_buffer_state  (void)$/;"	f	file:
yy_meta	core/pbrtlex.cpp	/^static yyconst flex_int32_t yy_meta[52] =$/;"	v	file:
yy_n_chars	core/pbrtlex.cpp	/^	yy_size_t yy_n_chars;$/;"	m	struct:yy_buffer_state	file:
yy_n_chars	core/pbrtlex.cpp	/^static yy_size_t yy_n_chars;		\/* number of characters read into yy_ch_buf *\/$/;"	v	file:
yy_new_buffer	core/pbrtlex.cpp	/^#define yy_new_buffer /;"	d	file:
yy_nxt	core/pbrtlex.cpp	/^	flex_int32_t yy_nxt;$/;"	m	struct:yy_trans_info	file:
yy_nxt	core/pbrtlex.cpp	/^static yyconst flex_int16_t yy_nxt[486] =$/;"	v	file:
yy_reduce_print	core/pbrtparse.cpp	/^yy_reduce_print (YYSTYPE *yyvsp, int yyrule)$/;"	f	file:
yy_scan_buffer	core/pbrtlex.cpp	/^YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )$/;"	f
yy_scan_bytes	core/pbrtlex.cpp	/^YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )$/;"	f
yy_scan_string	core/pbrtlex.cpp	/^YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )$/;"	f
yy_set_bol	core/pbrtlex.cpp	/^#define yy_set_bol(/;"	d	file:
yy_set_interactive	core/pbrtlex.cpp	/^#define yy_set_interactive(/;"	d	file:
yy_size_t	core/pbrtlex.cpp	/^typedef size_t yy_size_t;$/;"	t	file:
yy_stack_print	core/pbrtparse.cpp	/^yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)$/;"	f	file:
yy_start	core/pbrtlex.cpp	/^static int yy_start = 0;	\/* start state number *\/$/;"	v	file:
yy_state_type	core/pbrtlex.cpp	/^typedef int yy_state_type;$/;"	t	file:
yy_switch_to_buffer	core/pbrtlex.cpp	/^    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )$/;"	f
yy_symbol_print	core/pbrtparse.cpp	/^yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_symbol_value_print	core/pbrtparse.cpp	/^yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_trans_info	core/pbrtlex.cpp	/^struct yy_trans_info$/;"	s	file:
yy_try_NUL_trans	core/pbrtlex.cpp	/^    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )$/;"	f	file:
yy_verify	core/pbrtlex.cpp	/^	flex_int32_t yy_verify;$/;"	m	struct:yy_trans_info	file:
yyalloc	core/pbrtlex.cpp	/^void *yyalloc (yy_size_t  size )$/;"	f
yyalloc	core/pbrtparse.cpp	/^union yyalloc$/;"	u	file:
yychar	core/pbrtparse.cpp	/^int yychar;$/;"	v
yycheck	core/pbrtparse.cpp	/^static const yytype_uint8 yycheck[] =$/;"	v	file:
yyclearin	core/pbrtparse.cpp	/^#define yyclearin	/;"	d	file:
yyconst	core/pbrtlex.cpp	/^#define yyconst /;"	d	file:
yyconst	core/pbrtlex.cpp	/^#define yyconst$/;"	d	file:
yydebug	core/pbrtparse.cpp	/^int yydebug;$/;"	v
yydefact	core/pbrtparse.cpp	/^static const yytype_uint8 yydefact[] =$/;"	v	file:
yydefgoto	core/pbrtparse.cpp	/^static const yytype_int8 yydefgoto[] =$/;"	v	file:
yydestruct	core/pbrtparse.cpp	/^yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)$/;"	f	file:
yyensure_buffer_stack	core/pbrtlex.cpp	/^static void yyensure_buffer_stack (void)$/;"	f	file:
yyerrok	core/pbrtparse.cpp	/^#define yyerrok	/;"	d	file:
yyerror	core/pbrtparse.cpp	/^void yyerror(const char *str) {$/;"	f
yyfree	core/pbrtlex.cpp	/^void yyfree (void * ptr )$/;"	f
yyget_debug	core/pbrtlex.cpp	/^int yyget_debug  (void)$/;"	f
yyget_in	core/pbrtlex.cpp	/^FILE *yyget_in  (void)$/;"	f
yyget_leng	core/pbrtlex.cpp	/^yy_size_t yyget_leng  (void)$/;"	f
yyget_lineno	core/pbrtlex.cpp	/^int yyget_lineno  (void)$/;"	f
yyget_out	core/pbrtlex.cpp	/^FILE *yyget_out  (void)$/;"	f
yyget_text	core/pbrtlex.cpp	/^char *yyget_text  (void)$/;"	f
yyin	core/pbrtlex.cpp	/^FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;$/;"	v
yyinput	core/pbrtlex.cpp	/^    static int yyinput (void)$/;"	f	file:
yyleng	core/pbrtlex.cpp	/^yy_size_t yyleng;$/;"	v
yyless	core/pbrtlex.cpp	/^#define yyless(/;"	d	file:
yyless	core/pbrtlex.cpp	/^#undef yyless$/;"	d	file:
yylex_destroy	core/pbrtlex.cpp	/^int yylex_destroy  (void)$/;"	f
yylineno	core/pbrtlex.cpp	/^int yylineno = 1;$/;"	v
yylval	core/pbrtparse.cpp	/^YYSTYPE yylval;$/;"	v
yymore	core/pbrtlex.cpp	/^#define yymore(/;"	d	file:
yynerrs	core/pbrtparse.cpp	/^int yynerrs;$/;"	v
yyout	core/pbrtlex.cpp	/^FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;$/;"	v
yypact	core/pbrtparse.cpp	/^static const yytype_int8 yypact[] =$/;"	v	file:
yypact_value_is_default	core/pbrtparse.cpp	/^#define yypact_value_is_default(/;"	d	file:
yyparse	core/pbrtparse.cpp	/^yyparse (void *YYPARSE_PARAM)$/;"	f
yypgoto	core/pbrtparse.cpp	/^static const yytype_int8 yypgoto[] =$/;"	v	file:
yypop_buffer_state	core/pbrtlex.cpp	/^void yypop_buffer_state (void)$/;"	f
yyprhs	core/pbrtparse.cpp	/^static const yytype_uint8 yyprhs[] =$/;"	v	file:
yypush_buffer_state	core/pbrtlex.cpp	/^void yypush_buffer_state (YY_BUFFER_STATE new_buffer )$/;"	f
yyr1	core/pbrtparse.cpp	/^static const yytype_uint8 yyr1[] =$/;"	v	file:
yyr2	core/pbrtparse.cpp	/^static const yytype_uint8 yyr2[] =$/;"	v	file:
yyrealloc	core/pbrtlex.cpp	/^void *yyrealloc  (void * ptr, yy_size_t  size )$/;"	f
yyrestart	core/pbrtlex.cpp	/^    void yyrestart  (FILE * input_file )$/;"	f
yyrhs	core/pbrtparse.cpp	/^static const yytype_int8 yyrhs[] =$/;"	v	file:
yyrline	core/pbrtparse.cpp	/^static const yytype_uint16 yyrline[] =$/;"	v	file:
yyset_debug	core/pbrtlex.cpp	/^void yyset_debug (int  bdebug )$/;"	f
yyset_in	core/pbrtlex.cpp	/^void yyset_in (FILE *  in_str )$/;"	f
yyset_lineno	core/pbrtlex.cpp	/^void yyset_lineno (int  line_number )$/;"	f
yyset_out	core/pbrtlex.cpp	/^void yyset_out (FILE *  out_str )$/;"	f
yyss_alloc	core/pbrtparse.cpp	/^  yytype_int16 yyss_alloc;$/;"	m	union:yyalloc	file:
yystos	core/pbrtparse.cpp	/^static const yytype_uint8 yystos[] =$/;"	v	file:
yystpcpy	core/pbrtparse.cpp	/^#   define yystpcpy /;"	d	file:
yystpcpy	core/pbrtparse.cpp	/^yystpcpy (char *yydest, const char *yysrc)$/;"	f	file:
yystrlen	core/pbrtparse.cpp	/^#   define yystrlen /;"	d	file:
yystrlen	core/pbrtparse.cpp	/^yystrlen (const char *yystr)$/;"	f	file:
yystype	core/pbrtparse.cpp	/^# define yystype /;"	d	file:
yystype	core/pbrtparse.hh	/^# define yystype /;"	d
yysyntax_error	core/pbrtparse.cpp	/^yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,$/;"	f	file:
yytable	core/pbrtparse.cpp	/^static const yytype_int16 yytable[] =$/;"	v	file:
yytable_value_is_error	core/pbrtparse.cpp	/^#define yytable_value_is_error(/;"	d	file:
yyterminate	core/pbrtlex.cpp	/^#define yyterminate(/;"	d	file:
yytext	core/pbrtlex.cpp	/^char *yytext;$/;"	v
yytext_ptr	core/pbrtlex.cpp	/^#define yytext_ptr /;"	d	file:
yytname	core/pbrtparse.cpp	/^static const char *const yytname[] =$/;"	v	file:
yytnamerr	core/pbrtparse.cpp	/^yytnamerr (char *yyres, const char *yystr)$/;"	f	file:
yytokentype	core/pbrtparse.cpp	/^   enum yytokentype {$/;"	g	file:
yytokentype	core/pbrtparse.hh	/^   enum yytokentype {$/;"	g
yytoknum	core/pbrtparse.cpp	/^static const yytype_uint16 yytoknum[] =$/;"	v	file:
yytranslate	core/pbrtparse.cpp	/^static const yytype_uint8 yytranslate[] =$/;"	v	file:
yytype_int16	core/pbrtparse.cpp	/^typedef YYTYPE_INT16 yytype_int16;$/;"	t	file:
yytype_int16	core/pbrtparse.cpp	/^typedef short int yytype_int16;$/;"	t	file:
yytype_int8	core/pbrtparse.cpp	/^typedef YYTYPE_INT8 yytype_int8;$/;"	t	file:
yytype_int8	core/pbrtparse.cpp	/^typedef short int yytype_int8;$/;"	t	file:
yytype_int8	core/pbrtparse.cpp	/^typedef signed char yytype_int8;$/;"	t	file:
yytype_uint16	core/pbrtparse.cpp	/^typedef YYTYPE_UINT16 yytype_uint16;$/;"	t	file:
yytype_uint16	core/pbrtparse.cpp	/^typedef unsigned short int yytype_uint16;$/;"	t	file:
yytype_uint8	core/pbrtparse.cpp	/^typedef YYTYPE_UINT8 yytype_uint8;$/;"	t	file:
yytype_uint8	core/pbrtparse.cpp	/^typedef unsigned char yytype_uint8;$/;"	t	file:
yyvs_alloc	core/pbrtparse.cpp	/^  YYSTYPE yyvs_alloc;$/;"	m	union:yyalloc	file:
yywrap	core/pbrtlex.cpp	/^int yywrap() {$/;"	f
yz	3rdparty/ilmbase-1.0.2/ImathShear.h	/^    T			xy, xz, yz, yx, zx, zy;$/;"	m	class:Imath::Shear6
z	3rdparty/ilmbase-1.0.2/ImathVec.h	/^    T			x, y, z;$/;"	m	class:Imath::Vec3
z	3rdparty/ilmbase-1.0.2/ImathVec.h	/^    T               x, y, z, w; $/;"	m	class:Imath::Vec4
z	core/geometry.h	/^    float x, y, z;$/;"	m	class:Normal
z	core/geometry.h	/^    float x, y, z;$/;"	m	class:Point
z	core/geometry.h	/^    float x, y, z;$/;"	m	class:Vector
z	shapes/heightfield.h	/^    float *z;$/;"	m	class:Heightfield
z	shapes/heightfield2.h	/^    float *z;$/;"	m	class:Heightfield2
z	shapes/nurbs.cpp	/^float x, y, z, w;$/;"	m	struct:Homogeneous3	file:
z	tools/ply2pbrt.c	/^  float x,y,z;$/;"	m	struct:Vertex	file:
zError	3rdparty/zlib-1.2.5/zconf.h	/^#  define zError /;"	d
zError	3rdparty/zlib-1.2.5/zutil.c	/^const char * ZEXPORT zError(err)$/;"	f
z_errmsg	3rdparty/zlib-1.2.5/zutil.c	/^const char * const z_errmsg[10] = {$/;"	v
z_error	3rdparty/zlib-1.2.5/zutil.c	/^void ZLIB_INTERNAL z_error (m)$/;"	f
z_off64_t	3rdparty/zlib-1.2.5/zconf.h	/^#  define z_off64_t /;"	d
z_off_t	3rdparty/zlib-1.2.5/zconf.h	/^#    define z_off_t /;"	d
z_off_t	3rdparty/zlib-1.2.5/zconf.h	/^#  define z_off_t /;"	d
z_stream	3rdparty/zlib-1.2.5/zlib.h	/^} z_stream;$/;"	t	typeref:struct:z_stream_s
z_stream_s	3rdparty/zlib-1.2.5/zlib.h	/^typedef struct z_stream_s {$/;"	s
z_streamp	3rdparty/zlib-1.2.5/zlib.h	/^typedef z_stream FAR *z_streamp;$/;"	t
z_verbose	3rdparty/zlib-1.2.5/zutil.c	/^int ZLIB_INTERNAL z_verbose = verbose;$/;"	v
zalloc	3rdparty/zlib-1.2.5/zlib.h	/^    alloc_func zalloc;  \/* used to allocate the internal state *\/$/;"	m	struct:z_stream_s
zcalloc	3rdparty/zlib-1.2.5/zconf.h	/^#  define zcalloc /;"	d
zcalloc	3rdparty/zlib-1.2.5/zutil.c	/^voidpf ZLIB_INTERNAL zcalloc (opaque, items, size)$/;"	f
zcalloc	3rdparty/zlib-1.2.5/zutil.c	/^voidpf ZLIB_INTERNAL zcalloc (voidpf opaque, uInt items, uInt size)$/;"	f
zcalloc	3rdparty/zlib-1.2.5/zutil.c	/^voidpf ZLIB_INTERNAL zcalloc (voidpf opaque, unsigned items, unsigned size)$/;"	f
zcfree	3rdparty/zlib-1.2.5/zconf.h	/^#  define zcfree /;"	d
zcfree	3rdparty/zlib-1.2.5/zutil.c	/^void ZLIB_INTERNAL zcfree (opaque, ptr)$/;"	f
zcfree	3rdparty/zlib-1.2.5/zutil.c	/^void ZLIB_INTERNAL zcfree (voidpf opaque, voidpf ptr)$/;"	f
zero	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^    bool		zero;$/;"	m	struct:Imf::__anon23::OutSliceInfo	file:
zero	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    bool		zero;$/;"	m	struct:Imf::__anon37::TOutSliceInfo	file:
zeroruns	3rdparty/tiff-3.9.4/tif_fax3.c	/^static const unsigned char zeroruns[256] = {$/;"	v	file:
zfree	3rdparty/zlib-1.2.5/zlib.h	/^    free_func  zfree;   \/* used to free the internal state *\/$/;"	m	struct:z_stream_s
zipFieldInfo	3rdparty/tiff-3.9.4/tif_zip.c	/^static const TIFFFieldInfo zipFieldInfo[] = {$/;"	v	file:
zipquality	3rdparty/tiff-3.9.4/tif_zip.c	/^	int		zipquality;		\/* compression level *\/$/;"	m	struct:__anon59	file:
zlibCompileFlags	3rdparty/zlib-1.2.5/zconf.h	/^#  define zlibCompileFlags /;"	d
zlibCompileFlags	3rdparty/zlib-1.2.5/zutil.c	/^uLong ZEXPORT zlibCompileFlags()$/;"	f
zlibVersion	3rdparty/zlib-1.2.5/zconf.h	/^#  define zlibVersion /;"	d
zlibVersion	3rdparty/zlib-1.2.5/zutil.c	/^const char * ZEXPORT zlibVersion()$/;"	f
zlib_version	3rdparty/zlib-1.2.5/zlib.h	/^#define zlib_version /;"	d
zmax	shapes/cylinder.h	/^    float radius, zmin, zmax, phiMax;$/;"	m	class:Cylinder
zmax	shapes/hyperboloid.h	/^    float zmin, zmax;$/;"	m	class:Hyperboloid
zmax	shapes/paraboloid.h	/^    float zmin, zmax;$/;"	m	class:Paraboloid
zmax	shapes/sphere.h	/^    float zmin, zmax;$/;"	m	class:Sphere
zmemcmp	3rdparty/zlib-1.2.5/zutil.c	/^int ZLIB_INTERNAL zmemcmp(s1, s2, len)$/;"	f
zmemcmp	3rdparty/zlib-1.2.5/zutil.h	/^#    define zmemcmp /;"	d
zmemcpy	3rdparty/zlib-1.2.5/zutil.c	/^void ZLIB_INTERNAL zmemcpy(dest, source, len)$/;"	f
zmemcpy	3rdparty/zlib-1.2.5/zutil.h	/^#    define zmemcpy /;"	d
zmemzero	3rdparty/zlib-1.2.5/zutil.c	/^void ZLIB_INTERNAL zmemzero(dest, len)$/;"	f
zmemzero	3rdparty/zlib-1.2.5/zutil.h	/^#    define zmemzero(/;"	d
zmin	shapes/cylinder.h	/^    float radius, zmin, zmax, phiMax;$/;"	m	class:Cylinder
zmin	shapes/hyperboloid.h	/^    float zmin, zmax;$/;"	m	class:Hyperboloid
zmin	shapes/paraboloid.h	/^    float zmin, zmax;$/;"	m	class:Paraboloid
zmin	shapes/sphere.h	/^    float zmin, zmax;$/;"	m	class:Sphere
zneg	integrators/dipolesubsurface.cpp	/^    Spectrum zpos, zneg, sigmap_t, sigma_tr, alphap;$/;"	m	struct:DiffusionReflectance	file:
zpos	integrators/dipolesubsurface.cpp	/^    Spectrum zpos, zneg, sigmap_t, sigma_tr, alphap;$/;"	m	struct:DiffusionReflectance	file:
zstrerror	3rdparty/zlib-1.2.5/gzguts.h	/^#    define zstrerror(/;"	d
zstrerror	3rdparty/zlib-1.2.5/gzguts.h	/^#  define zstrerror(/;"	d
zx	3rdparty/ilmbase-1.0.2/ImathShear.h	/^    T			xy, xz, yz, yx, zx, zy;$/;"	m	class:Imath::Shear6
zy	3rdparty/ilmbase-1.0.2/ImathShear.h	/^    T			xy, xz, yz, yx, zx, zy;$/;"	m	class:Imath::Shear6
~AcesInputFile	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesInputFile::~AcesInputFile ()$/;"	f	class:Imf::AcesInputFile
~AcesOutputFile	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesOutputFile::~AcesOutputFile ()$/;"	f	class:Imf::AcesOutputFile
~AdaptiveSampler	samplers/adaptive.cpp	/^AdaptiveSampler::~AdaptiveSampler() {$/;"	f	class:AdaptiveSampler
~AggregateVolume	core/volume.cpp	/^AggregateVolume::~AggregateVolume() {$/;"	f	class:AggregateVolume
~Array	3rdparty/openexr-1.7.0/ImfArray.h	/^    ~Array ()				{delete [] _data;}$/;"	f	class:Imf::Array
~Array2D	3rdparty/openexr-1.7.0/ImfArray.h	/^Array2D<T>::~Array2D ()$/;"	f	class:Imf::Array2D
~Attribute	3rdparty/openexr-1.7.0/ImfAttribute.cpp	/^Attribute::~Attribute () {}$/;"	f	class:Imf::Attribute
~AutoArray	3rdparty/openexr-1.7.0/ImfAutoArray.h	/^	~AutoArray () {delete [] _data;}$/;"	f	class:Imf::AutoArray
~B44Compressor	3rdparty/openexr-1.7.0/ImfB44Compressor.cpp	/^B44Compressor::~B44Compressor ()$/;"	f	class:Imf::B44Compressor
~BSDF	core/reflection.h	/^    ~BSDF() { }$/;"	f	class:BSDF
~BVHAccel	accelerators/bvh.cpp	/^BVHAccel::~BVHAccel() {$/;"	f	class:BVHAccel
~BaseExc	3rdparty/ilmbase-1.0.2/IexBaseExc.cpp	/^BaseExc::~BaseExc () throw ()$/;"	f	class:Iex::BaseExc
~BilerpTexture	textures/bilerp.h	/^    ~BilerpTexture() {$/;"	f	class:BilerpTexture
~BlockedArray	core/memory.h	/^    ~BlockedArray() {$/;"	f	class:BlockedArray
~BufferedTile	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^    ~BufferedTile()$/;"	f	struct:Imf::__anon37::BufferedTile
~BxDF	core/reflection.h	/^    virtual ~BxDF() { }$/;"	f	class:BxDF
~Camera	core/camera.cpp	/^Camera::~Camera() {$/;"	f	class:Camera
~Checkerboard2DTexture	textures/checkerboard.h	/^    ~Checkerboard2DTexture() {$/;"	f	class:Checkerboard2DTexture
~Checkerboard3DTexture	textures/checkerboard.h	/^    ~Checkerboard3DTexture() {$/;"	f	class:Checkerboard3DTexture
~Compressor	3rdparty/openexr-1.7.0/ImfCompressor.cpp	/^Compressor::~Compressor () {}$/;"	f	class:Imf::Compressor
~ConditionVariable	core/parallel.cpp	/^ConditionVariable::~ConditionVariable() {$/;"	f	class:ConditionVariable
~CreateRadianceProbes	renderers/createprobes.cpp	/^CreateRadianceProbes::~CreateRadianceProbes() {$/;"	f	class:CreateRadianceProbes
~Data	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^TaskGroup::Data::~Data ()$/;"	f	class:IlmThread::TaskGroup::Data
~Data	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^ThreadPool::Data::~Data()$/;"	f	class:IlmThread::ThreadPool::Data
~Data	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesInputFile::Data::~Data ()$/;"	f	class:Imf::AcesInputFile::Data
~Data	3rdparty/openexr-1.7.0/ImfAcesFile.cpp	/^AcesOutputFile::Data::~Data ()$/;"	f	class:Imf::AcesOutputFile::Data
~Data	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^InputFile::Data::~Data ()$/;"	f	class:Imf::InputFile::Data
~Data	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^OutputFile::Data::~Data ()$/;"	f	class:Imf::OutputFile::Data
~Data	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^ScanLineInputFile::Data::~Data ()$/;"	f	class:Imf::ScanLineInputFile::Data
~Data	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::Data::~Data ()$/;"	f	class:Imf::TiledInputFile::Data
~Data	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::Data::~Data ()$/;"	f	class:Imf::TiledOutputFile::Data
~DiffuseAreaLight	lights/diffuse.cpp	/^DiffuseAreaLight::~DiffuseAreaLight() {$/;"	f	class:DiffuseAreaLight
~DiffusePRTIntegrator	integrators/diffuseprt.cpp	/^DiffusePRTIntegrator::~DiffusePRTIntegrator() {$/;"	f	class:DiffusePRTIntegrator
~DipoleSubsurfaceIntegrator	integrators/dipolesubsurface.cpp	/^DipoleSubsurfaceIntegrator::~DipoleSubsurfaceIntegrator() {$/;"	f	class:DipoleSubsurfaceIntegrator
~DirectLightingIntegrator	integrators/directlighting.cpp	/^DirectLightingIntegrator::~DirectLightingIntegrator() {$/;"	f	class:DirectLightingIntegrator
~Distribution1D	core/montecarlo.h	/^    ~Distribution1D() {$/;"	f	struct:Distribution1D
~Distribution2D	core/montecarlo.cpp	/^Distribution2D::~Distribution2D() {$/;"	f	class:Distribution2D
~DotsTexture	textures/dots.h	/^    ~DotsTexture() {$/;"	f	class:DotsTexture
~FBmTexture	textures/fbm.h	/^    ~FBmTexture() {$/;"	f	class:FBmTexture
~Film	core/film.cpp	/^Film::~Film() {$/;"	f	class:Film
~Filter	core/filter.cpp	/^Filter::~Filter() {$/;"	f	class:Filter
~Fresnel	core/reflection.cpp	/^Fresnel::~Fresnel() { }$/;"	f	class:Fresnel
~FromYca	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaInputFile::FromYca::~FromYca ()$/;"	f	class:Imf::RgbaInputFile::FromYca
~Frustum	3rdparty/ilmbase-1.0.2/ImathFrustum.h	/^Frustum<T>::~Frustum()$/;"	f	class:Imath::Frustum
~GLBegin	3rdparty/ilmbase-1.0.2/ImathGL.h	/^    ~GLBegin()				{ glEnd(); }$/;"	f	class:Imath::GLBegin
~GLPushAttrib	3rdparty/ilmbase-1.0.2/ImathGL.h	/^    ~GLPushAttrib()			{ glPopAttrib(); }$/;"	f	class:Imath::GLPushAttrib
~GLPushMatrix	3rdparty/ilmbase-1.0.2/ImathGL.h	/^    ~GLPushMatrix()			{ glPopMatrix(); }$/;"	f	class:Imath::GLPushMatrix
~GlossyPRTIntegrator	integrators/glossyprt.cpp	/^GlossyPRTIntegrator::~GlossyPRTIntegrator() {$/;"	f	class:GlossyPRTIntegrator
~GonioPhotometricLight	lights/goniometric.h	/^    ~GonioPhotometricLight() { delete mipmap; }$/;"	f	class:GonioPhotometricLight
~GridAccel	accelerators/grid.cpp	/^GridAccel::~GridAccel() {$/;"	f	class:GridAccel
~Header	3rdparty/openexr-1.7.0/ImfHeader.cpp	/^Header::~Header ()$/;"	f	class:Imf::Header
~Heightfield	shapes/heightfield.cpp	/^Heightfield::~Heightfield() {$/;"	f	class:Heightfield
~Heightfield2	shapes/heightfield2.cpp	/^Heightfield2::~Heightfield2() {$/;"	f	class:Heightfield2
~IGIIntegrator	integrators/igi.cpp	/^IGIIntegrator::~IGIIntegrator() {$/;"	f	class:IGIIntegrator
~IStream	3rdparty/openexr-1.7.0/ImfIO.cpp	/^IStream::~IStream ()$/;"	f	class:Imf::IStream
~ImageFilm	film/image.h	/^    ~ImageFilm() {$/;"	f	class:ImageFilm
~ImageTexture	textures/imagemap.cpp	/^    ImageTexture<Tmemory, Treturn>::~ImageTexture() {$/;"	f	class:ImageTexture
~InfiniteAreaLight	lights/infinite.cpp	/^InfiniteAreaLight::~InfiniteAreaLight() {$/;"	f	class:InfiniteAreaLight
~InputFile	3rdparty/openexr-1.7.0/ImfInputFile.cpp	/^InputFile::~InputFile ()$/;"	f	class:Imf::InputFile
~Integrator	core/integrator.cpp	/^Integrator::~Integrator() {$/;"	f	class:Integrator
~IrradianceCacheIntegrator	integrators/irradiancecache.cpp	/^IrradianceCacheIntegrator::~IrradianceCacheIntegrator() {$/;"	f	class:IrradianceCacheIntegrator
~KdTree	core/kdtree.h	/^    ~KdTree() {$/;"	f	class:KdTree
~KdTreeAccel	accelerators/kdtreeaccel.cpp	/^KdTreeAccel::~KdTreeAccel() {$/;"	f	class:KdTreeAccel
~LDSampler	samplers/lowdiscrepancy.cpp	/^LDSampler::~LDSampler() {$/;"	f	class:LDSampler
~Light	core/light.cpp	/^Light::~Light() {$/;"	f	class:Light
~LineBuffer	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^LineBuffer::~LineBuffer ()$/;"	f	class:Imf::__anon23::LineBuffer
~LineBuffer	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^LineBuffer::~LineBuffer ()$/;"	f	class:Imf::__anon31::LineBuffer
~LineBufferTask	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^LineBufferTask::~LineBufferTask ()$/;"	f	class:Imf::__anon24::LineBufferTask
~LineBufferTask	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^LineBufferTask::~LineBufferTask ()$/;"	f	class:Imf::__anon32::LineBufferTask
~Lock	3rdparty/ilmbase-1.0.2/IlmThreadMutex.h	/^    ~Lock ()$/;"	f	class:IlmThread::Lock
~LoopSubdiv	shapes/loopsubdiv.cpp	/^LoopSubdiv::~LoopSubdiv() {$/;"	f	class:LoopSubdiv
~MIPMap	core/mipmap.h	/^MIPMap<T>::~MIPMap() {$/;"	f	class:MIPMap
~MarbleTexture	textures/marble.h	/^    ~MarbleTexture() {$/;"	f	class:MarbleTexture
~Material	core/material.cpp	/^Material::~Material() {$/;"	f	class:Material
~MemoryArena	core/memory.h	/^    ~MemoryArena() {$/;"	f	class:MemoryArena
~MetropolisRenderer	renderers/metropolis.cpp	/^MetropolisRenderer::~MetropolisRenderer() {$/;"	f	class:MetropolisRenderer
~MicrofacetDistribution	core/reflection.h	/^    virtual ~MicrofacetDistribution() { }$/;"	f	class:MicrofacetDistribution
~Mutex	3rdparty/ilmbase-1.0.2/IlmThreadMutex.cpp	/^Mutex::~Mutex () {}$/;"	f	class:IlmThread::Mutex
~Mutex	3rdparty/ilmbase-1.0.2/IlmThreadMutexPosix.cpp	/^Mutex::~Mutex ()$/;"	f	class:IlmThread::Mutex
~Mutex	3rdparty/ilmbase-1.0.2/IlmThreadMutexWin32.cpp	/^Mutex::~Mutex ()$/;"	f	class:IlmThread::Mutex
~Mutex	core/parallel.cpp	/^Mutex::~Mutex() {$/;"	f	class:Mutex
~MutexLock	core/parallel.cpp	/^MutexLock::~MutexLock() {$/;"	f	class:MutexLock
~NURBS	shapes/nurbs.cpp	/^NURBS::~NURBS() {$/;"	f	class:NURBS
~OStream	3rdparty/openexr-1.7.0/ImfIO.cpp	/^OStream::~OStream ()$/;"	f	class:Imf::OStream
~OctNode	core/octree.h	/^    ~OctNode() {$/;"	f	struct:OctNode
~OpaqueAttribute	3rdparty/openexr-1.7.0/ImfOpaqueAttribute.cpp	/^OpaqueAttribute::~OpaqueAttribute ()$/;"	f	class:Imf::OpaqueAttribute
~OutputFile	3rdparty/openexr-1.7.0/ImfOutputFile.cpp	/^OutputFile::~OutputFile ()$/;"	f	class:Imf::OutputFile
~ParamSetItem	core/paramset.h	/^    ~ParamSetItem() {$/;"	f	struct:ParamSetItem
~PermutedHalton	core/montecarlo.h	/^    ~PermutedHalton() {$/;"	f	class:PermutedHalton
~PhotonIntegrator	integrators/photonmap.cpp	/^PhotonIntegrator::~PhotonIntegrator() {$/;"	f	class:PhotonIntegrator
~PizCompressor	3rdparty/openexr-1.7.0/ImfPizCompressor.cpp	/^PizCompressor::~PizCompressor ()$/;"	f	class:Imf::PizCompressor
~PreviewImage	3rdparty/openexr-1.7.0/ImfPreviewImage.cpp	/^PreviewImage::~PreviewImage ()$/;"	f	class:Imf::PreviewImage
~Primitive	core/primitive.cpp	/^Primitive::~Primitive() { }$/;"	f	class:Primitive
~ProgressReporter	core/progressreporter.cpp	/^ProgressReporter::~ProgressReporter() {$/;"	f	class:ProgressReporter
~ProjectionLight	lights/projection.cpp	/^ProjectionLight::~ProjectionLight() { delete projectionMap; }$/;"	f	class:ProjectionLight
~Pxr24Compressor	3rdparty/openexr-1.7.0/ImfPxr24Compressor.cpp	/^Pxr24Compressor::~Pxr24Compressor ()$/;"	f	class:Imf::Pxr24Compressor
~RWMutex	core/parallel.cpp	/^RWMutex::~RWMutex() {$/;"	f	class:RWMutex
~RWMutexLock	core/parallel.cpp	/^RWMutexLock::~RWMutexLock() {$/;"	f	class:RWMutexLock
~RandomSampler	samplers/random.h	/^    ~RandomSampler() {$/;"	f	class:RandomSampler
~Reference	core/memory.h	/^    ~Reference() {$/;"	f	class:Reference
~Renderer	core/renderer.cpp	/^Renderer::~Renderer() {$/;"	f	class:Renderer
~RgbaInputFile	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaInputFile::~RgbaInputFile ()$/;"	f	class:Imf::RgbaInputFile
~RgbaOutputFile	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaOutputFile::~RgbaOutputFile ()$/;"	f	class:Imf::RgbaOutputFile
~RleCompressor	3rdparty/openexr-1.7.0/ImfRleCompressor.cpp	/^RleCompressor::~RleCompressor ()$/;"	f	class:Imf::RleCompressor
~Sample	core/sampler.h	/^    ~Sample() {$/;"	f	struct:Sample
~Sampler	core/sampler.cpp	/^Sampler::~Sampler() {$/;"	f	class:Sampler
~SamplerRenderer	renderers/samplerrenderer.cpp	/^SamplerRenderer::~SamplerRenderer() {$/;"	f	class:SamplerRenderer
~ScanLineInputFile	3rdparty/openexr-1.7.0/ImfScanLineInputFile.cpp	/^ScanLineInputFile::~ScanLineInputFile ()$/;"	f	class:Imf::ScanLineInputFile
~Scene	core/scene.cpp	/^Scene::~Scene() {$/;"	f	class:Scene
~Semaphore	3rdparty/ilmbase-1.0.2/IlmThreadSemaphore.cpp	/^Semaphore::~Semaphore () {}$/;"	f	class:IlmThread::Semaphore
~Semaphore	3rdparty/ilmbase-1.0.2/IlmThreadSemaphorePosix.cpp	/^Semaphore::~Semaphore ()$/;"	f	class:IlmThread::Semaphore
~Semaphore	3rdparty/ilmbase-1.0.2/IlmThreadSemaphorePosixCompat.cpp	/^Semaphore::~Semaphore ()$/;"	f	class:IlmThread::Semaphore
~Semaphore	3rdparty/ilmbase-1.0.2/IlmThreadSemaphoreWin32.cpp	/^Semaphore::~Semaphore()$/;"	f	class:IlmThread::Semaphore
~Semaphore	core/parallel.cpp	/^Semaphore::~Semaphore() {$/;"	f	class:Semaphore
~Shape	core/shape.cpp	/^Shape::~Shape() {$/;"	f	class:Shape
~ShapeSet	core/light.cpp	/^ShapeSet::~ShapeSet() {$/;"	f	class:ShapeSet
~StdIFStream	3rdparty/openexr-1.7.0/ImfStdIO.cpp	/^StdIFStream::~StdIFStream ()$/;"	f	class:Imf::StdIFStream
~StdOFStream	3rdparty/openexr-1.7.0/ImfStdIO.cpp	/^StdOFStream::~StdOFStream ()$/;"	f	class:Imf::StdOFStream
~StratifiedSampler	samplers/stratified.cpp	/^StratifiedSampler::~StratifiedSampler() {$/;"	f	class:StratifiedSampler
~Task	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^Task::~Task()$/;"	f	class:IlmThread::Task
~Task	core/parallel.cpp	/^Task::~Task() {$/;"	f	class:Task
~TaskGroup	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^TaskGroup::~TaskGroup ()$/;"	f	class:IlmThread::TaskGroup
~Texture	core/texture.h	/^    virtual ~Texture() { }$/;"	f	class:Texture
~TextureMapping2D	core/texture.h	/^    virtual ~TextureMapping2D() { }$/;"	f	class:TextureMapping2D
~TextureMapping3D	core/texture.h	/^    virtual ~TextureMapping3D() { }$/;"	f	class:TextureMapping3D
~Thread	3rdparty/ilmbase-1.0.2/IlmThread.cpp	/^Thread::~Thread ()$/;"	f	class:IlmThread::Thread
~Thread	3rdparty/ilmbase-1.0.2/IlmThreadPosix.cpp	/^Thread::~Thread ()$/;"	f	class:IlmThread::Thread
~Thread	3rdparty/ilmbase-1.0.2/IlmThreadWin32.cpp	/^Thread::~Thread ()$/;"	f	class:IlmThread::Thread
~ThreadPool	3rdparty/ilmbase-1.0.2/IlmThreadPool.cpp	/^ThreadPool::~ThreadPool ()$/;"	f	class:IlmThread::ThreadPool
~TileBuffer	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TileBuffer::~TileBuffer ()$/;"	f	class:Imf::__anon34::TileBuffer
~TileBuffer	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TileBuffer::~TileBuffer ()$/;"	f	class:Imf::__anon37::TileBuffer
~TileBufferTask	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TileBufferTask::~TileBufferTask ()$/;"	f	class:Imf::__anon35::TileBufferTask
~TileBufferTask	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TileBufferTask::~TileBufferTask ()$/;"	f	class:Imf::__anon38::TileBufferTask
~TiledInputFile	3rdparty/openexr-1.7.0/ImfTiledInputFile.cpp	/^TiledInputFile::~TiledInputFile ()$/;"	f	class:Imf::TiledInputFile
~TiledOutputFile	3rdparty/openexr-1.7.0/ImfTiledOutputFile.cpp	/^TiledOutputFile::~TiledOutputFile ()$/;"	f	class:Imf::TiledOutputFile
~TiledRgbaInputFile	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaInputFile::~TiledRgbaInputFile ()$/;"	f	class:Imf::TiledRgbaInputFile
~TiledRgbaOutputFile	3rdparty/openexr-1.7.0/ImfTiledRgbaFile.cpp	/^TiledRgbaOutputFile::~TiledRgbaOutputFile ()$/;"	f	class:Imf::TiledRgbaOutputFile
~ToYca	3rdparty/openexr-1.7.0/ImfRgbaFile.cpp	/^RgbaOutputFile::ToYca::~ToYca ()$/;"	f	class:Imf::RgbaOutputFile::ToYca
~TriangleMesh	shapes/trianglemesh.cpp	/^TriangleMesh::~TriangleMesh() {$/;"	f	class:TriangleMesh
~TypedAttribute	3rdparty/openexr-1.7.0/ImfAttribute.h	/^TypedAttribute<T>::~TypedAttribute ()$/;"	f	class:Imf::TypedAttribute
~UVTexture	textures/uv.h	/^    ~UVTexture() {$/;"	f	class:UVTexture
~UseRadianceProbes	integrators/useprobes.cpp	/^UseRadianceProbes::~UseRadianceProbes() {$/;"	f	class:UseRadianceProbes
~VolumeGridDensity	volumes/volumegrid.h	/^    ~VolumeGridDensity() { delete[] density; }$/;"	f	class:VolumeGridDensity
~VolumeRegion	core/volume.cpp	/^VolumeRegion::~VolumeRegion() {$/;"	f	class:VolumeRegion
~WindyTexture	textures/windy.h	/^    ~WindyTexture() {$/;"	f	class:WindyTexture
~WrinkledTexture	textures/wrinkled.h	/^    ~WrinkledTexture() {$/;"	f	class:WrinkledTexture
~ZipCompressor	3rdparty/openexr-1.7.0/ImfZipCompressor.cpp	/^ZipCompressor::~ZipCompressor ()$/;"	f	class:Imf::ZipCompressor
